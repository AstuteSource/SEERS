[
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "class Rabbit(GenericAnimal):",
      "context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")",
      "min": 1,
      "max": 10,
      "pattern": ".//ClassDef",
      "check_id": "C001",
      "check_name": "class-definition",
      "description": "Ensure the presence of class definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 1,
      "coloffset": 0,
      "linematch": "class GenericAnimal:",
      "context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):",
      "min": 1,
      "max": 10,
      "pattern": ".//ClassDef",
      "check_id": "C001",
      "check_name": "class-definition",
      "description": "Ensure the presence of class definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def multiplier(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 0,
      "linematch": "def use_incrementer() -> None:",
      "context": "from .multiplier import multiply_five\nfrom .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": {
      "Mutant #1": {
        "line": 6,
        "description": "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = [\"XXEliaz Bobadilla <eliaz.bobadilladev@gmail.com>XX\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #2": {
        "line": 6,
        "description": "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = None\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 11,
      "coloffset": 0,
      "linematch": "def use_multiplier() -> None:",
      "context": "    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": {
      "Mutant #129": {
        "line": 11,
        "description": "    return POKEMON in POKEMONS_NAME",
        "failure": {
          "inner": "--- ultiplayground/snippets/__init__.py\n+++ ultiplayground/snippets/__init__.py\n@@ -8,7 +8,7 @@\n \n \n def use_pokemons():\n-    return POKEMON in POKEMONS_NAME\n+    return POKEMON not in POKEMONS_NAME\n \n \n def use_quotes():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 16,
      "coloffset": 0,
      "linematch": "def use_returner() -> None:",
      "context": "    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def increment_by(num: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def incrementer(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": {
      "Mutant #106": {
        "line": 4,
        "description": "def return_msg(msg: str = \"Hello\") -> Callable:",
        "failure": {
          "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -1,7 +1,7 @@\n from typing import Callable\n \n \n-def return_msg(msg: str = \"Hello\") -> Callable:\n+def return_msg(msg: str = \"XXHelloXX\") -> Callable:\n     def returner() -> str:\n         return msg\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def returner() -> str:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 0,
      "linematch": "def read_all_lines(file_path: str):",
      "context": "import json\nimport os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 0,
      "linematch": "def grouped(iterable, times: int):",
      "context": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 10,
      "coloffset": 0,
      "linematch": "def use_pokemons():",
      "context": "from .random_pokemon import POKEMON, POKEMONS_NAME\nfrom .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 0,
      "linematch": "def use_quotes():",
      "context": "def use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 10,
      "coloffset": 0,
      "linematch": "def get_session():",
      "context": "\nthread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 16,
      "coloffset": 0,
      "linematch": "def download_site(url):",
      "context": "        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 21,
      "coloffset": 0,
      "linematch": "def download_all_sites(sites):",
      "context": "    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def __init__(self, name, speed=0) -> None:",
      "context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": {
      "Mutant #170": {
        "line": 5,
        "description": "    def __init__(self, name, speed=0) -> None:",
        "failure": {
          "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -2,7 +2,7 @@\n \n \n class Rabbit(GenericAnimal):\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         super().__init__(name, speed=speed)\n \n     def hide(self):\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 4,
      "linematch": "def hide(self):",
      "context": "class Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 2,
      "coloffset": 4,
      "linematch": "def __init__(self, name, speed=0) -> None:",
      "context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": {
      "Mutant #177": {
        "line": 2,
        "description": "    def __init__(self, name, speed=0) -> None:",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,5 +1,5 @@\n class GenericAnimal:\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         self.name = name\n         self.speed = speed\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 4,
      "linematch": "def __str__(self):",
      "context": "    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "def run(self, speed):",
      "context": "\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "def stop(self):",
      "context": "    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def test_incrementer():",
      "context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 0,
      "linematch": "def test_multiplier():",
      "context": "def test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 12,
      "coloffset": 0,
      "linematch": "def test_print():",
      "context": "def test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def test_version():",
      "context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 0,
      "linematch": "def test_authors():",
      "context": "def test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def test_pokemon():",
      "context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 0,
      "linematch": "def test_pokemons():",
      "context": "def test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 12,
      "coloffset": 0,
      "linematch": "def test_quotes():",
      "context": "def test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def multiplier(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 0,
      "linematch": "def use_incrementer() -> None:",
      "context": "from .multiplier import multiply_five\nfrom .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": {
      "Mutant #1": {
        "line": 6,
        "description": "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = [\"XXEliaz Bobadilla <eliaz.bobadilladev@gmail.com>XX\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #2": {
        "line": 6,
        "description": "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = None\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 11,
      "coloffset": 0,
      "linematch": "def use_multiplier() -> None:",
      "context": "    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": {
      "Mutant #129": {
        "line": 11,
        "description": "    return POKEMON in POKEMONS_NAME",
        "failure": {
          "inner": "--- ultiplayground/snippets/__init__.py\n+++ ultiplayground/snippets/__init__.py\n@@ -8,7 +8,7 @@\n \n \n def use_pokemons():\n-    return POKEMON in POKEMONS_NAME\n+    return POKEMON not in POKEMONS_NAME\n \n \n def use_quotes():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 16,
      "coloffset": 0,
      "linematch": "def use_returner() -> None:",
      "context": "    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def increment_by(num: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def incrementer(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": {
      "Mutant #106": {
        "line": 4,
        "description": "def return_msg(msg: str = \"Hello\") -> Callable:",
        "failure": {
          "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -1,7 +1,7 @@\n from typing import Callable\n \n \n-def return_msg(msg: str = \"Hello\") -> Callable:\n+def return_msg(msg: str = \"XXHelloXX\") -> Callable:\n     def returner() -> str:\n         return msg\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def returner() -> str:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 0,
      "linematch": "def read_all_lines(file_path: str):",
      "context": "import json\nimport os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 0,
      "linematch": "def grouped(iterable, times: int):",
      "context": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 10,
      "coloffset": 0,
      "linematch": "def use_pokemons():",
      "context": "from .random_pokemon import POKEMON, POKEMONS_NAME\nfrom .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 0,
      "linematch": "def use_quotes():",
      "context": "def use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 10,
      "coloffset": 0,
      "linematch": "def get_session():",
      "context": "\nthread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 16,
      "coloffset": 0,
      "linematch": "def download_site(url):",
      "context": "        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 21,
      "coloffset": 0,
      "linematch": "def download_all_sites(sites):",
      "context": "    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def __init__(self, name, speed=0) -> None:",
      "context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": {
      "Mutant #170": {
        "line": 5,
        "description": "    def __init__(self, name, speed=0) -> None:",
        "failure": {
          "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -2,7 +2,7 @@\n \n \n class Rabbit(GenericAnimal):\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         super().__init__(name, speed=speed)\n \n     def hide(self):\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 4,
      "linematch": "def hide(self):",
      "context": "class Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 2,
      "coloffset": 4,
      "linematch": "def __init__(self, name, speed=0) -> None:",
      "context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": {
      "Mutant #177": {
        "line": 2,
        "description": "    def __init__(self, name, speed=0) -> None:",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,5 +1,5 @@\n class GenericAnimal:\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         self.name = name\n         self.speed = speed\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 4,
      "linematch": "def __str__(self):",
      "context": "    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "def run(self, speed):",
      "context": "\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "def stop(self):",
      "context": "    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
      "check_id": "F002",
      "check_name": "dummy-test-non-test-function-definition",
      "description": "Ensure the presence of non-test function definitions in the codebase."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 11,
      "coloffset": 4,
      "linematch": "if not hasattr(thread_local, \"session\"):",
      "context": "thread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef/body//If",
      "check_id": "CL001",
      "check_name": "dummy-test-single-nested-if",
      "description": "Ensure the presence of single nested 'if' statements within function bodies."
    },
    "mutants": {
      "Mutant #148": {
        "line": 11,
        "description": "    if not hasattr(thread_local, \"session\"):",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -8,7 +8,7 @@\n \n \n def get_session():\n-    if not hasattr(thread_local, \"session\"):\n+    if  hasattr(thread_local, \"session\"):\n         thread_local.session = requests.Session()\n     return thread_local.session\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #149": {
        "line": 11,
        "description": "    if not hasattr(thread_local, \"session\"):",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -8,7 +8,7 @@\n \n \n def get_session():\n-    if not hasattr(thread_local, \"session\"):\n+    if not hasattr(thread_local, \"XXsessionXX\"):\n         thread_local.session = requests.Session()\n     return thread_local.session\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 15,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "multiply_three = make_multiplier_of(3)\n\nmultiply_five = make_multiplier_of(5)\n\nif __name__ == \"__main__\":\n    print(multiply_three(9))\n    print(multiply_five(3))\n    print(multiply_five(multiply_three(2)))",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #85": {
        "line": 15,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -12,7 +12,7 @@\n \n multiply_five = make_multiplier_of(5)\n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(multiply_three(9))\n     print(multiply_five(3))\n     print(multiply_five(multiply_three(2)))\n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #86": {
        "line": 15,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -12,7 +12,7 @@\n \n multiply_five = make_multiplier_of(5)\n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(multiply_three(9))\n     print(multiply_five(3))\n     print(multiply_five(multiply_three(2)))\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "\nincrement_by_ten = increment_by(10)\n\n\nif __name__ == \"__main__\":\n    ONE_HUNDRED = increment_by_ten(90)\n    print(ONE_HUNDRED)",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #101": {
        "line": 14,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/closures/incrementer.py\n+++ ultiplayground/closures/incrementer.py\n@@ -11,7 +11,7 @@\n increment_by_ten = increment_by(10)\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     ONE_HUNDRED = increment_by_ten(90)\n     print(ONE_HUNDRED)\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #102": {
        "line": 14,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/closures/incrementer.py\n+++ ultiplayground/closures/incrementer.py\n@@ -11,7 +11,7 @@\n increment_by_ten = increment_by(10)\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     ONE_HUNDRED = increment_by_ten(90)\n     print(ONE_HUNDRED)\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 15,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "say_cheese = return_msg(\"cheese\")\n\nsay_hello = return_msg()\n\nif __name__ == \"__main__\":\n    print(say_hello())\n    print(say_cheese())",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #110": {
        "line": 15,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -12,7 +12,7 @@\n \n say_hello = return_msg()\n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(say_hello())\n     print(say_cheese())\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #111": {
        "line": 15,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -12,7 +12,7 @@\n \n say_hello = return_msg()\n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(say_hello())\n     print(say_cheese())\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/random_pokemon.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "POKEMONS_NAME = [pokemon[\"name\"] for pokemon in POKEMON_DATA[\"results\"]]\n\nPOKEMON = choice(POKEMONS_NAME).capitalize()\n\nif __name__ == \"__main__\":\n    print(f\"A Wild {POKEMON} Has Appeared!\")",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #137": {
        "line": 13,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/snippets/random_pokemon.py\n+++ ultiplayground/snippets/random_pokemon.py\n@@ -10,6 +10,6 @@\n \n POKEMON = choice(POKEMONS_NAME).capitalize()\n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(f\"A Wild {POKEMON} Has Appeared!\")\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #138": {
        "line": 13,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/snippets/random_pokemon.py\n+++ ultiplayground/snippets/random_pokemon.py\n@@ -10,6 +10,6 @@\n \n POKEMON = choice(POKEMONS_NAME).capitalize()\n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(f\"A Wild {POKEMON} Has Appeared!\")\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/random_quotes.py",
    "pattern": {
      "lineno": 7,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "\nQUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()\n\n\nif __name__ == \"__main__\":\n    print(QUOTES_DATA[\"content\"])\n    print(f\" - {QUOTES_DATA['author']}\")",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #142": {
        "line": 7,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/snippets/random_quotes.py\n+++ ultiplayground/snippets/random_quotes.py\n@@ -4,7 +4,7 @@\n QUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(QUOTES_DATA[\"content\"])\n     print(f\" - {QUOTES_DATA['author']}\")\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #143": {
        "line": 7,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/snippets/random_quotes.py\n+++ ultiplayground/snippets/random_quotes.py\n@@ -4,7 +4,7 @@\n QUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(QUOTES_DATA[\"content\"])\n     print(f\" - {QUOTES_DATA['author']}\")\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 26,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":\n    sites = [\n        \"https://jython.org\",\n        \"http://olympus.realpython.org/dice\",\n        \"https://github.com/UltiRequiem/python\",\n    ] * 100",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #153": {
        "line": 26,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -23,7 +23,7 @@\n         executor.map(download_site, sites)\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     sites = [\n         \"https://jython.org\",\n         \"http://olympus.realpython.org/dice\",\n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #154": {
        "line": 26,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -23,7 +23,7 @@\n         executor.map(download_site, sites)\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     sites = [\n         \"https://jython.org\",\n         \"http://olympus.realpython.org/dice\",\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 12,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")\n    print(my_rabbit)\n    my_rabbit.hide()",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #172": {
        "line": 12,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -9,7 +9,7 @@\n         print(f\"{self.name} hides!\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     my_rabbit = Rabbit(\"Alen\")\n     print(my_rabbit)\n     my_rabbit.hide()\n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #173": {
        "line": 12,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -9,7 +9,7 @@\n         print(f\"{self.name} hides!\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     my_rabbit = Rabbit(\"Alen\")\n     print(my_rabbit)\n     my_rabbit.hide()\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 18,
      "coloffset": 3,
      "linematch": "if __name__ == \"__main__\":",
      "context": "        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":\n    my_generic_animal = GenericAnimal(\"A generic animal\")\n    print(my_generic_animal)\n    my_generic_animal.run(3)\n    my_generic_animal.stop()",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #186": {
        "line": 18,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -15,7 +15,7 @@\n         print(f\"{self.name} stands still.\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     my_generic_animal = GenericAnimal(\"A generic animal\")\n     print(my_generic_animal)\n     my_generic_animal.run(3)\n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #187": {
        "line": 18,
        "description": "if __name__ == \"__main__\":",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -15,7 +15,7 @@\n         print(f\"{self.name} stands still.\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     my_generic_animal = GenericAnimal(\"A generic animal\")\n     print(my_generic_animal)\n     my_generic_animal.run(3)\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 11,
      "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #200": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #201": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #202": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -10,5 +10,5 @@\n \n \n def test_print():\n-    assert say_cheese() == \"cheese\", \"Incorrect message!\"\n+    assert say_cheese() == \"cheese\", \"XXIncorrect message!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 11,
      "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #200": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #201": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #202": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -10,5 +10,5 @@\n \n \n def test_print():\n-    assert say_cheese() == \"cheese\", \"Incorrect message!\"\n+    assert say_cheese() == \"cheese\", \"XXIncorrect message!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 11,
      "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
      "check_id": "BOOL001",
      "check_name": "boolean-comparison",
      "description": "Using = or == operators to compare boolean values"
    },
    "mutants": {
      "Mutant #200": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #201": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #202": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -10,5 +10,5 @@\n \n \n def test_print():\n-    assert say_cheese() == \"cheese\", \"Incorrect message!\"\n+    assert say_cheese() == \"cheese\", \"XXIncorrect message!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def multiplier(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 0,
      "linematch": "def use_incrementer() -> None:",
      "context": "from .multiplier import multiply_five\nfrom .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": {
      "Mutant #1": {
        "line": 6,
        "description": "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = [\"XXEliaz Bobadilla <eliaz.bobadilladev@gmail.com>XX\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #2": {
        "line": 6,
        "description": "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = None\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 11,
      "coloffset": 0,
      "linematch": "def use_multiplier() -> None:",
      "context": "    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": {
      "Mutant #129": {
        "line": 11,
        "description": "    return POKEMON in POKEMONS_NAME",
        "failure": {
          "inner": "--- ultiplayground/snippets/__init__.py\n+++ ultiplayground/snippets/__init__.py\n@@ -8,7 +8,7 @@\n \n \n def use_pokemons():\n-    return POKEMON in POKEMONS_NAME\n+    return POKEMON not in POKEMONS_NAME\n \n \n def use_quotes():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 16,
      "coloffset": 0,
      "linematch": "def use_returner() -> None:",
      "context": "    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def increment_by(num: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def incrementer(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": {
      "Mutant #106": {
        "line": 4,
        "description": "def return_msg(msg: str = \"Hello\") -> Callable:",
        "failure": {
          "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -1,7 +1,7 @@\n from typing import Callable\n \n \n-def return_msg(msg: str = \"Hello\") -> Callable:\n+def return_msg(msg: str = \"XXHelloXX\") -> Callable:\n     def returner() -> str:\n         return msg\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def returner() -> str:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 0,
      "linematch": "def read_all_lines(file_path: str):",
      "context": "import json\nimport os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 0,
      "linematch": "def grouped(iterable, times: int):",
      "context": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 10,
      "coloffset": 0,
      "linematch": "def use_pokemons():",
      "context": "from .random_pokemon import POKEMON, POKEMONS_NAME\nfrom .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 0,
      "linematch": "def use_quotes():",
      "context": "def use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 10,
      "coloffset": 0,
      "linematch": "def get_session():",
      "context": "\nthread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 16,
      "coloffset": 0,
      "linematch": "def download_site(url):",
      "context": "        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 21,
      "coloffset": 0,
      "linematch": "def download_all_sites(sites):",
      "context": "    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def __init__(self, name, speed=0) -> None:",
      "context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": {
      "Mutant #170": {
        "line": 5,
        "description": "    def __init__(self, name, speed=0) -> None:",
        "failure": {
          "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -2,7 +2,7 @@\n \n \n class Rabbit(GenericAnimal):\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         super().__init__(name, speed=speed)\n \n     def hide(self):\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 4,
      "linematch": "def hide(self):",
      "context": "class Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 2,
      "coloffset": 4,
      "linematch": "def __init__(self, name, speed=0) -> None:",
      "context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": {
      "Mutant #177": {
        "line": 2,
        "description": "    def __init__(self, name, speed=0) -> None:",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,5 +1,5 @@\n class GenericAnimal:\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         self.name = name\n         self.speed = speed\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 4,
      "linematch": "def __str__(self):",
      "context": "    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "def run(self, speed):",
      "context": "\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "def stop(self):",
      "context": "    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def test_incrementer():",
      "context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 0,
      "linematch": "def test_multiplier():",
      "context": "def test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 12,
      "coloffset": 0,
      "linematch": "def test_print():",
      "context": "def test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def test_version():",
      "context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 0,
      "linematch": "def test_authors():",
      "context": "def test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def test_pokemon():",
      "context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 0,
      "linematch": "def test_pokemons():",
      "context": "def test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 12,
      "coloffset": 0,
      "linematch": "def test_quotes():",
      "context": "def test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
      "check_id": "ANNOT001",
      "check_name": "missing-annotations",
      "description": "A function does not explicitly annotate arguments/parameters or the expected output"
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef//FunctionDef/ancestor::*",
      "check_id": "F001",
      "check_name": "Nested Depth (Set value)",
      "description": "Ensure the depth of nesting within functions does not exceed the set value."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def increment_by(num: int) -> Callable:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef//FunctionDef/ancestor::*",
      "check_id": "F001",
      "check_name": "Nested Depth (Set value)",
      "description": "Ensure the depth of nesting within functions does not exceed the set value."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 0,
      "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef//FunctionDef/ancestor::*",
      "check_id": "F001",
      "check_name": "Nested Depth (Set value)",
      "description": "Ensure the depth of nesting within functions does not exceed the set value."
    },
    "mutants": {
      "Mutant #106": {
        "line": 4,
        "description": "def return_msg(msg: str = \"Hello\") -> Callable:",
        "failure": {
          "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -1,7 +1,7 @@\n from typing import Callable\n \n \n-def return_msg(msg: str = \"Hello\") -> Callable:\n+def return_msg(msg: str = \"XXHelloXX\") -> Callable:\n     def returner() -> str:\n         return msg\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
      "context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #192": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #193": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #194": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #195": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -2,7 +2,7 @@\n \n \n def test_incrementer():\n-    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n+    assert increment_by_ten(10) == 20, \"XXIncrementer is invalid!XX\"\n \n \n def test_multiplier():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
      "context": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #196": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #197": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #198": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #199": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -6,7 +6,7 @@\n \n \n def test_multiplier():\n-    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n+    assert multiply_five(10) == 50, \"XXMultiplier is invalid!XX\"\n \n \n def test_print():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #200": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #201": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #202": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -10,5 +10,5 @@\n \n \n def test_print():\n-    assert say_cheese() == \"cheese\", \"Incorrect message!\"\n+    assert say_cheese() == \"cheese\", \"XXIncorrect message!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert isinstance(__version__, str), \"The version value is invalid!\"",
      "context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #203": {
        "line": 5,
        "description": "    assert isinstance(__version__, str), \"The version value is invalid!\"",
        "failure": {
          "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), \"The version value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe version value is invalid!XX\"\n \n \n def test_authors():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "context": "    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #204": {
        "line": 9,
        "description": "    assert isinstance(__version__, str), \"The authors value is invalid!\"",
        "failure": {
          "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -6,5 +6,5 @@\n \n \n def test_authors():\n-    assert isinstance(__version__, str), \"The authors value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe authors value is invalid!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
      "context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #205": {
        "line": 5,
        "description": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -2,7 +2,7 @@\n \n \n def test_pokemon():\n-    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n+    assert isinstance(POKEMON, str), \"XXThis Pokemon is not valid!XX\"\n \n \n def test_pokemons():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
      "context": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #206": {
        "line": 9,
        "description": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -6,7 +6,7 @@\n \n \n def test_pokemons():\n-    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n+    assert isinstance(POKEMONS_NAME, list), \"XXThis Pokemon list is not valid!XX\"\n \n \n def test_quotes():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "context": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/Assert",
      "check_id": "NOA001",
      "check_name": "number-of-assertions",
      "description": "Ensure the presence of assertions within function bodies of type 'str'."
    },
    "mutants": {
      "Mutant #207": {
        "line": 13,
        "description": "    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -10,5 +10,5 @@\n \n \n def test_quotes():\n-    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"\n+    assert isinstance(QUOTES_DATA, dict), \"XXThis dict is not valid!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
      "context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #192": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #193": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #194": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #195": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -2,7 +2,7 @@\n \n \n def test_incrementer():\n-    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n+    assert increment_by_ten(10) == 20, \"XXIncrementer is invalid!XX\"\n \n \n def test_multiplier():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
      "context": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #196": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #197": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #198": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #199": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -6,7 +6,7 @@\n \n \n def test_multiplier():\n-    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n+    assert multiply_five(10) == 50, \"XXMultiplier is invalid!XX\"\n \n \n def test_print():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #200": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #201": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #202": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -10,5 +10,5 @@\n \n \n def test_print():\n-    assert say_cheese() == \"cheese\", \"Incorrect message!\"\n+    assert say_cheese() == \"cheese\", \"XXIncorrect message!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert isinstance(__version__, str), \"The version value is invalid!\"",
      "context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #203": {
        "line": 5,
        "description": "    assert isinstance(__version__, str), \"The version value is invalid!\"",
        "failure": {
          "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), \"The version value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe version value is invalid!XX\"\n \n \n def test_authors():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "context": "    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #204": {
        "line": 9,
        "description": "    assert isinstance(__version__, str), \"The authors value is invalid!\"",
        "failure": {
          "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -6,5 +6,5 @@\n \n \n def test_authors():\n-    assert isinstance(__version__, str), \"The authors value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe authors value is invalid!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
      "context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #205": {
        "line": 5,
        "description": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -2,7 +2,7 @@\n \n \n def test_pokemon():\n-    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n+    assert isinstance(POKEMON, str), \"XXThis Pokemon is not valid!XX\"\n \n \n def test_pokemons():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
      "context": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #206": {
        "line": 9,
        "description": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -6,7 +6,7 @@\n \n \n def test_pokemons():\n-    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n+    assert isinstance(POKEMONS_NAME, list), \"XXThis Pokemon list is not valid!XX\"\n \n \n def test_quotes():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "context": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
      "check_id": "LOF001",
      "check_name": "count-test-method-lines",
      "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'."
    },
    "mutants": {
      "Mutant #207": {
        "line": 13,
        "description": "    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -10,5 +10,5 @@\n \n \n def test_quotes():\n-    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"\n+    assert isinstance(QUOTES_DATA, dict), \"XXThis dict is not valid!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def multiplier(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 8,
      "linematch": "return num_two * num_one",
      "context": "\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n\nmultiply_three = make_multiplier_of(3)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #80": {
        "line": 6,
        "description": "        return num_two * num_one",
        "failure": {}
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 4,
      "linematch": "return multiplier",
      "context": "def make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n\nmultiply_three = make_multiplier_of(3)\n\nmultiply_five = make_multiplier_of(5)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 7,
      "coloffset": 4,
      "linematch": "ten = increment_by_ten(0)",
      "context": "from .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #3": {
        "line": 7,
        "description": "__author_email__ = \"eliaz.bobadilladev@gmail.com\"",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -4,7 +4,7 @@\n \n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n-__author_email__ = \"eliaz.bobadilladev@gmail.com\"\n+__author_email__ = \"XXeliaz.bobadilladev@gmail.comXX\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #4": {
        "line": 7,
        "description": "__author_email__ = \"eliaz.bobadilladev@gmail.com\"",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -4,7 +4,7 @@\n \n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n-__author_email__ = \"eliaz.bobadilladev@gmail.com\"\n+__author_email__ = None\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #90": {
        "line": 7,
        "description": "    ten = increment_by_ten(0)",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -4,7 +4,7 @@\n \n \n def use_incrementer() -> None:\n-    ten = increment_by_ten(0)\n+    ten = increment_by_ten(1)\n     print(ten)\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #91": {
        "line": 7,
        "description": "    ten = increment_by_ten(0)",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -4,7 +4,7 @@\n \n \n def use_incrementer() -> None:\n-    ten = increment_by_ten(0)\n+    ten = None\n     print(ten)\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 4,
      "linematch": "print(ten)",
      "context": "\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #5": {
        "line": 8,
        "description": "__url__ = \"https://github.com/UltiRequiem/python\"",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -5,6 +5,6 @@\n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n-__url__ = \"https://github.com/UltiRequiem/python\"\n+__url__ = \"XXhttps://github.com/UltiRequiem/pythonXX\"\n __package_name__ = \"ultiplayground\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #6": {
        "line": 8,
        "description": "__url__ = \"https://github.com/UltiRequiem/python\"",
        "failure": {
          "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -5,6 +5,6 @@\n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n-__url__ = \"https://github.com/UltiRequiem/python\"\n+__url__ = None\n __package_name__ = \"ultiplayground\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #92": {
        "line": 8,
        "description": "    print(ten)",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -5,7 +5,7 @@\n \n def use_incrementer() -> None:\n     ten = increment_by_ten(0)\n-    print(ten)\n+    print(None)\n \n \n def use_multiplier() -> None:\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 12,
      "coloffset": 4,
      "linematch": "fifty = multiply_five(10)",
      "context": "    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #93": {
        "line": 12,
        "description": "    fifty = multiply_five(10)",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -9,7 +9,7 @@\n \n \n def use_multiplier() -> None:\n-    fifty = multiply_five(10)\n+    fifty = multiply_five(11)\n     print(fifty)\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #94": {
        "line": 12,
        "description": "    fifty = multiply_five(10)",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -9,7 +9,7 @@\n \n \n def use_multiplier() -> None:\n-    fifty = multiply_five(10)\n+    fifty = None\n     print(fifty)\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "print(fifty)",
      "context": "\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #95": {
        "line": 13,
        "description": "    print(fifty)",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -10,7 +10,7 @@\n \n def use_multiplier() -> None:\n     fifty = multiply_five(10)\n-    print(fifty)\n+    print(None)\n \n \n def use_returner() -> None:\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 17,
      "coloffset": 4,
      "linematch": "cheese = say_cheese()",
      "context": "    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #96": {
        "line": 17,
        "description": "    cheese = say_cheese()",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -14,7 +14,7 @@\n \n \n def use_returner() -> None:\n-    cheese = say_cheese()\n+    cheese = None\n     hello = say_hello()\n     print(cheese, hello)\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 18,
      "coloffset": 4,
      "linematch": "hello = say_hello()",
      "context": "\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #97": {
        "line": 18,
        "description": "    hello = say_hello()",
        "failure": {
          "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -15,6 +15,6 @@\n \n def use_returner() -> None:\n     cheese = say_cheese()\n-    hello = say_hello()\n+    hello = None\n     print(cheese, hello)\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
    "pattern": {
      "lineno": 19,
      "coloffset": 4,
      "linematch": "print(cheese, hello)",
      "context": "\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def incrementer(num_two: int) -> int:",
      "context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 8,
      "linematch": "return num_two + num",
      "context": "\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n\nincrement_by_ten = increment_by(10)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #98": {
        "line": 6,
        "description": "        return num_two + num",
        "failure": {}
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 4,
      "linematch": "return incrementer",
      "context": "def increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n\nincrement_by_ten = increment_by(10)\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "def returner() -> str:",
      "context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 8,
      "linematch": "return msg",
      "context": "\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n\nsay_cheese = return_msg(\"cheese\")",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 4,
      "linematch": "return returner",
      "context": "def return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n\nsay_cheese = return_msg(\"cheese\")\n\nsay_hello = return_msg()",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 4,
      "linematch": "\"\"\"",
      "context": "import os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "with open(file_path, \"r\", encoding=\"UTF-8\") as file:",
      "context": "def read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #115": {
        "line": 9,
        "description": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:",
        "failure": {
          "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -6,7 +6,7 @@\n     \"\"\"\n     Parse a CSV file and return a list of dictionaries.\n     \"\"\"\n-    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n+    with open(file_path, \"XXrXX\", encoding=\"UTF-8\") as file:\n         return file.read().splitlines()\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #116": {
        "line": 9,
        "description": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:",
        "failure": {
          "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -6,7 +6,7 @@\n     \"\"\"\n     Parse a CSV file and return a list of dictionaries.\n     \"\"\"\n-    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n+    with open(file_path, \"r\", encoding=\"XXUTF-8XX\") as file:\n         return file.read().splitlines()\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 4,
      "linematch": "return zip(*[iter(iterable)] * times)",
      "context": "        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}\n    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #117": {
        "line": 14,
        "description": "    return zip(*[iter(iterable)] * times)",
        "failure": {
          "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -11,7 +11,7 @@\n \n \n def grouped(iterable, times: int):\n-    return zip(*[iter(iterable)] * times)\n+    return zip(*[iter(iterable)] / times)\n \n \n data = [\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 11,
      "coloffset": 4,
      "linematch": "return POKEMON in POKEMONS_NAME",
      "context": "from .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #129": {
        "line": 11,
        "description": "    return POKEMON in POKEMONS_NAME",
        "failure": {
          "inner": "--- ultiplayground/snippets/__init__.py\n+++ ultiplayground/snippets/__init__.py\n@@ -8,7 +8,7 @@\n \n \n def use_pokemons():\n-    return POKEMON in POKEMONS_NAME\n+    return POKEMON not in POKEMONS_NAME\n \n \n def use_quotes():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
    "pattern": {
      "lineno": 15,
      "coloffset": 4,
      "linematch": "return isinstance(QUOTES_DATA, dict)",
      "context": "    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 11,
      "coloffset": 4,
      "linematch": "if not hasattr(thread_local, \"session\"):",
      "context": "thread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #148": {
        "line": 11,
        "description": "    if not hasattr(thread_local, \"session\"):",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -8,7 +8,7 @@\n \n \n def get_session():\n-    if not hasattr(thread_local, \"session\"):\n+    if  hasattr(thread_local, \"session\"):\n         thread_local.session = requests.Session()\n     return thread_local.session\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #149": {
        "line": 11,
        "description": "    if not hasattr(thread_local, \"session\"):",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -8,7 +8,7 @@\n \n \n def get_session():\n-    if not hasattr(thread_local, \"session\"):\n+    if not hasattr(thread_local, \"XXsessionXX\"):\n         thread_local.session = requests.Session()\n     return thread_local.session\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "return thread_local.session",
      "context": "\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 17,
      "coloffset": 4,
      "linematch": "session = get_session()",
      "context": "    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #151": {
        "line": 17,
        "description": "    session = get_session()",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -14,7 +14,7 @@\n \n \n def download_site(url):\n-    session = get_session()\n+    session = None\n     session.get(url)\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 18,
      "coloffset": 4,
      "linematch": "session.get(url)",
      "context": "\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
    "pattern": {
      "lineno": 22,
      "coloffset": 4,
      "linematch": "with ThreadPoolExecutor(max_workers=5) as executor:",
      "context": "    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":\n    sites = [",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #152": {
        "line": 22,
        "description": "    with ThreadPoolExecutor(max_workers=5) as executor:",
        "failure": {
          "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -19,7 +19,7 @@\n \n \n def download_all_sites(sites):\n-    with ThreadPoolExecutor(max_workers=5) as executor:\n+    with ThreadPoolExecutor(max_workers=6) as executor:\n         executor.map(download_site, sites)\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 8,
      "linematch": "super().__init__(name, speed=speed)",
      "context": "\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": null,
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 8,
      "linematch": "print(f\"{self.name} hides!\")",
      "context": "    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")\n    print(my_rabbit)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #171": {
        "line": 9,
        "description": "        print(f\"{self.name} hides!\")",
        "failure": {
          "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -6,7 +6,7 @@\n         super().__init__(name, speed=speed)\n \n     def hide(self):\n-        print(f\"{self.name} hides!\")\n+        print(f\"XX{self.name} hides!XX\")\n \n \n if __name__ == \"__main__\":\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 3,
      "coloffset": 8,
      "linematch": "self.name = name",
      "context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #178": {
        "line": 3,
        "description": "        self.name = name",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,6 +1,6 @@\n class GenericAnimal:\n     def __init__(self, name, speed=0) -> None:\n-        self.name = name\n+        self.name = None\n         self.speed = speed\n \n     def __str__(self):\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 4,
      "coloffset": 8,
      "linematch": "self.speed = speed",
      "context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #179": {
        "line": 4,
        "description": "        self.speed = speed",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,7 +1,7 @@\n class GenericAnimal:\n     def __init__(self, name, speed=0) -> None:\n         self.name = name\n-        self.speed = speed\n+        self.speed = None\n \n     def __str__(self):\n         return f\"{self.name} is happy :)\"\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 7,
      "coloffset": 8,
      "linematch": "return f\"{self.name} is happy :)\"",
      "context": "        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #180": {
        "line": 7,
        "description": "        return f\"{self.name} is happy :)\"",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -4,7 +4,7 @@\n         self.speed = speed\n \n     def __str__(self):\n-        return f\"{self.name} is happy :)\"\n+        return f\"XX{self.name} is happy :)XX\"\n \n     def run(self, speed):\n         self.speed = speed\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 10,
      "coloffset": 8,
      "linematch": "self.speed = speed",
      "context": "    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #181": {
        "line": 10,
        "description": "        self.speed = speed",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -7,7 +7,7 @@\n         return f\"{self.name} is happy :)\"\n \n     def run(self, speed):\n-        self.speed = speed\n+        self.speed = None\n         print(f\"{self.name} runs with speed {self.speed}.\")\n \n     def stop(self):\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 11,
      "coloffset": 8,
      "linematch": "print(f\"{self.name} runs with speed {self.speed}.\")",
      "context": "        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #182": {
        "line": 11,
        "description": "        print(f\"{self.name} runs with speed {self.speed}.\")",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -8,7 +8,7 @@\n \n     def run(self, speed):\n         self.speed = speed\n-        print(f\"{self.name} runs with speed {self.speed}.\")\n+        print(f\"XX{self.name} runs with speed {self.speed}.XX\")\n \n     def stop(self):\n         self.speed = 0\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 8,
      "linematch": "self.speed = 0",
      "context": "        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":\n    my_generic_animal = GenericAnimal(\"A generic animal\")",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #183": {
        "line": 14,
        "description": "        self.speed = 0",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -11,7 +11,7 @@\n         print(f\"{self.name} runs with speed {self.speed}.\")\n \n     def stop(self):\n-        self.speed = 0\n+        self.speed = 1\n         print(f\"{self.name} stands still.\")\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      },
      "Mutant #184": {
        "line": 14,
        "description": "        self.speed = 0",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -11,7 +11,7 @@\n         print(f\"{self.name} runs with speed {self.speed}.\")\n \n     def stop(self):\n-        self.speed = 0\n+        self.speed = None\n         print(f\"{self.name} stands still.\")\n \n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
    "pattern": {
      "lineno": 15,
      "coloffset": 8,
      "linematch": "print(f\"{self.name} stands still.\")",
      "context": "        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":\n    my_generic_animal = GenericAnimal(\"A generic animal\")\n    print(my_generic_animal)",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #185": {
        "line": 15,
        "description": "        print(f\"{self.name} stands still.\")",
        "failure": {
          "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -12,7 +12,7 @@\n \n     def stop(self):\n         self.speed = 0\n-        print(f\"{self.name} stands still.\")\n+        print(f\"XX{self.name} stands still.XX\")\n \n \n if __name__ == \"__main__\":\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
      "context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #192": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #193": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #194": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {}
      },
      "Mutant #195": {
        "line": 5,
        "description": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -2,7 +2,7 @@\n \n \n def test_incrementer():\n-    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n+    assert increment_by_ten(10) == 20, \"XXIncrementer is invalid!XX\"\n \n \n def test_multiplier():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
      "context": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #196": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #197": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #198": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {}
      },
      "Mutant #199": {
        "line": 9,
        "description": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -6,7 +6,7 @@\n \n \n def test_multiplier():\n-    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n+    assert multiply_five(10) == 50, \"XXMultiplier is invalid!XX\"\n \n \n def test_print():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #200": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #201": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {}
      },
      "Mutant #202": {
        "line": 13,
        "description": "    assert say_cheese() == \"cheese\", \"Incorrect message!\"",
        "failure": {
          "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -10,5 +10,5 @@\n \n \n def test_print():\n-    assert say_cheese() == \"cheese\", \"Incorrect message!\"\n+    assert say_cheese() == \"cheese\", \"XXIncorrect message!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert isinstance(__version__, str), \"The version value is invalid!\"",
      "context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #203": {
        "line": 5,
        "description": "    assert isinstance(__version__, str), \"The version value is invalid!\"",
        "failure": {
          "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), \"The version value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe version value is invalid!XX\"\n \n \n def test_authors():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "context": "    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #204": {
        "line": 9,
        "description": "    assert isinstance(__version__, str), \"The authors value is invalid!\"",
        "failure": {
          "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -6,5 +6,5 @@\n \n \n def test_authors():\n-    assert isinstance(__version__, str), \"The authors value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe authors value is invalid!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 4,
      "linematch": "assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
      "context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #205": {
        "line": 5,
        "description": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -2,7 +2,7 @@\n \n \n def test_pokemon():\n-    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n+    assert isinstance(POKEMON, str), \"XXThis Pokemon is not valid!XX\"\n \n \n def test_pokemons():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
      "context": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #206": {
        "line": 9,
        "description": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -6,7 +6,7 @@\n \n \n def test_pokemons():\n-    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n+    assert isinstance(POKEMONS_NAME, list), \"XXThis Pokemon list is not valid!XX\"\n \n \n def test_quotes():\n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  },
  {
    "file": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "context": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
      "min": 1,
      "max": 10,
      "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
      "check_id": "CML001",
      "check_name": "count-method-lines",
      "description": "Count the lines within methods in functions of type 'str'."
    },
    "mutants": {
      "Mutant #207": {
        "line": 13,
        "description": "    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
        "failure": {
          "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -10,5 +10,5 @@\n \n \n def test_quotes():\n-    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"\n+    assert isinstance(QUOTES_DATA, dict), \"XXThis dict is not valid!XX\"\n \n",
          "type": "failure",
          "message": "bad_survived"
        }
      }
    },
    "mutmut_summary": {
      "disabled": 0,
      "errors": 0,
      "failures": 182,
      "tests": 207,
      "time": 0
    }
  }
]