//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],.//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],.//FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10],"//FunctionDef[@name=""tp""]/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id = @id]",.//FunctionDef/body//If[ancestor::If and not(parent::orelse)],.//FunctionDef,//FunctionDef//FunctionDef/ancestor::*,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,.//FunctionDef[not(args/arg/annotation) or not(returns)],".//FunctionDef//Call/func/Attribute[@attr=""keys""]",.//Call[count(./func/Attribute) > 3],//FunctionDef[./body/Assert/test/Tuple],"//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",.//FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id = @id],.//FunctionDef//If/descendant::If,.//FunctionDef/body//If,//FunctionDef[@type='str']/body/Assert,.//FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)],//Assert[count(.//Call[func/Name/@id='test_function']) > 0],//FunctionDef/body/For[target/Name/@id = iter/Name/@id],//function[@name='your_function_name']/*[your_xpath_condition],.//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3],.//Num,.//FunctionDef/body/Assert,".//FunctionDef[not(contains(@name, ""test_""))]",.//FunctionDef/body/For[target/Name/@id = iter/Name/@id],//FunctionDef//if//For,".//FunctionDef[@name=""__init__""]/body/Return",.//Try/ExceptHandler[not(ExceptHandler/type)],.//FunctionDef[count(./args/args) > 5],.//Global,.//FunctionDef//For[.//For],".//FunctionDef[starts-with(@name, ""test_"")]/body/*",".//FunctionDef//*[starts-with(., ""with open"")]","//*[starts-with(., 'with open')]",.//ClassDef[count(./body/*) > 50],"//ImportFrom[@module='__future']/alias[not(starts-with(@name, 'division') or starts-with(@name, 'absolute_import') or starts-with(@name, 'print_function') or starts-with(@name, 'unicode_literals'))]",//FunctionDef[BreakStmt[count(ancestor::For|ancestor::While|ancestor::If) = 0]],.//FunctionDef/body/* | .//FunctionDef/body/Return,.//ExceptHandler[not(./body/*)],"//ImportFrom/keyword[@name=""from""]","//FunctionDef//ImportFrom[starts-with(@module, 'import') and @names=('*')]",.//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq,//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else,.//FunctionDef[./body/Assert/test/Tuple],//FunctionDef[not(args/arg/annotation) or not(returns)],.//FunctionDef[count(./body/*) > 100],//Try/ExceptHandler[not(ExceptHandler/type)],//Compare/ops/Is | //Compare/ops/Eq,//FunctionDef[body//comprehension/target/Name],.//FunctionDef//if//For,.//FunctionDef//BinOp[count(descendant::BinOp) > 2],.//FunctionDef[count(./body/*) > 50],.//FunctionDef//FunctionDef/ancestor::*,.//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else,".//FunctionDef[starts-with(@name, ""test_"")]//Assert[count(.//Call[func/Name/@id=""test_function""]) > 0]","//FunctionDef[starts-with(@name, ""test_"")]//Assert[count(.//Call[func/Name]) > 0]",.//ClassDef,//FunctionDef//If/descendant::If,//FunctionDef//For[.//For],.//FunctionDef[body//comprehension/target/Name],"//FunctionDef//Call/func/Attribute[@attr=""keys""]",".//FunctionDef//Compare/left[@id=""input_dirs""]/following-sibling::Compare/ops/NotEq | .//FunctionDef//Compare/comparators[@id=""input_dirs""]/following-sibling::Compare/ops/NotEq",.//FunctionDef[count(body//Return) > 2],"//FunctionDef[@name=""init""]/body/Return","//Compare/left[@id=""input_dirs""]/following-sibling::Compare/ops/NotEq | //Compare/comparators[@id=""input_dirs""]/following-sibling::Compare/ops/NotEq",mutation_category,filename
1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,low,101_sorting.json
1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_sorting.json
1,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_sorting.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_sorting.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_sorting.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_sorting.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_sorting.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_sorting.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,low,101_intersection.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,medium,101_intersection.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,high,101_intersection.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,101_intersection.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,high,101_intersection.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,101_intersection.json
0,0,0,0,1,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,low,101_intersection.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,101_palindrome.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,medium,101_palindrome.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,medium,101_palindrome.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,lazytracker.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,high,lazytracker.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,lazytracker.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,lazytracker.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,lazytracker.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,lazytracker.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,medium,lazytracker.json
0,0,0,0,0,1,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,high,lazytracker.json
0,0,0,0,0,1,1,1,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,1,0,0,1,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,high,lazytracker.json
