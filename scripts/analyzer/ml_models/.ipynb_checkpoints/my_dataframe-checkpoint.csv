file,pattern,check_id,pattern_detailes,function_name,function_scope,mutants,mutation_score
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef,['F001'],"{'lineno': 21, 'coloffset': 0, 'linematch': 'def bubble_sort(array: List[int]) -> List[int]:', 'context': '# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef,['F001'],"{'lineno': 41, 'coloffset': 0, 'linematch': 'def insertion_sort(array: List[int]) -> List[int]:', 'context': '            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    """"""Run an insertion sort on the provided array.""""""\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",insertion_sort,41-60,"[{'name': 'Mutant #18', 'line': 44, 'description': ['    for i in range(1, len(array)):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     """"""Run an insertion sort on the provided array.""""""\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 46, 'description': ['        key_item = array[i]'], 'failure': []}, {'name': 'Mutant #20', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #21', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #22', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #23', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': []}, {'name': 'Mutant #27', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #34', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #35', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",44.44444444444444
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef,['F001'],"{'lineno': 63, 'coloffset': 0, 'linematch': 'def merge(left: List[int], right: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef,['F001'],"{'lineno': 96, 'coloffset': 0, 'linematch': 'def merge_sort(array: List[int]) -> List[int]:', 'context': '\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef,['F001'],"{'lineno': 104, 'coloffset': 0, 'linematch': 'def quick_sort(array: List[int]) -> List[int]:', 'context': '    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef,['F001'],"{'lineno': 121, 'coloffset': 0, 'linematch': 'def insertion_sort_time(array: List[int], left: int = 0, right=None):', 'context': '\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef,['F001'],"{'lineno': 135, 'coloffset': 0, 'linematch': 'def tim_sort(array: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,.//FunctionDef,['F001'],"{'lineno': 10, 'coloffset': 0, 'linematch': 'def format_decimal(number: float):', 'context': 'from typing import List\nfrom typing import Tuple\n\n\ndef format_decimal(number: float):\n    """"""Round a number up and then encode with five decimal places.""""""\n    # round the provided floating point value with format function\n    format_float = ""{:.5f}"".format(number)\n    return format_float\n', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",format_decimal,10-14,"[{'name': 'Mutant #136', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = ""XX{:.5f}XX"".format(number)\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #137', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = None\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,.//FunctionDef,['F001'],"{'lineno': 17, 'coloffset': 0, 'linematch': 'def generate_random_number(maximum: int) -> int:', 'context': '    format_float = ""{:.5f}"".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    """"""Generate a random list defined by the size.""""""\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",generate_random_number,17-22,"[{'name': 'Mutant #138', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = random.randint(1, maximum)\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #139', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = None\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,.//FunctionDef,['F001'],"{'lineno': 25, 'coloffset': 0, 'linematch': 'def generate_random_container(', 'context': '    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    """"""Generate a random list defined by the size.""""""\n    # generate a list of random values for a specific size', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",generate_random_container,25-33,"[{'name': 'Mutant #140', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,.//FunctionDef,['F001'],"{'lineno': 36, 'coloffset': 0, 'linematch': 'def run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:', 'context': '    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    """"""Run a sorting algorithm and profile it with the timeit package.""""""\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it\'s not the built-in `sorted()`.\n    setup_code = f""from listsorting.sorting import {algorithm}""', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,.//FunctionDef,['F001'],"{'lineno': 55, 'coloffset': 0, 'linematch': 'def run_sorting_algorithm_experiment_campaign(', 'context': '        format_decimal((sum(times) / len(times))),\n    )\n\n\ndef run_sorting_algorithm_experiment_campaign(\n    algorithm: str,\n    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",run_sorting_algorithm_experiment_campaign,55-81,"[{'name': 'Mutant #151', 'line': 62, 'description': ['    data_table = []'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #152', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #153', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #154', 'line': 66, 'description': ['        random_list = generate_random_container(starting_size, maximum_value)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #155', 'line': 68, 'description': ['        performance_data = run_sorting_algorithm(algorithm, random_list)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #156', 'line': 72, 'description': ['            performance_data[0],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #157', 'line': 73, 'description': ['            performance_data[1],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #158', 'line': 74, 'description': ['            performance_data[2],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #159', 'line': 75, 'description': ['        ]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #160', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #161', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #162', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #163', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #164', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #165', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,.//FunctionDef,['F001'],"{'lineno': 45, 'coloffset': 0, 'linematch': 'def listsorting(', 'context': '        return self.value\n\n\n@cli.command()\ndef listsorting(\n    starting_size: int = typer.Option(1000000),\n    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:', 'min': 1, 'max': 10, 'check_name': 'all-function-definition', 'description': 'Ensure the presence of function definitions in the codebase.'}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 21, 'coloffset': 0, 'linematch': 'def bubble_sort(array: List[int]) -> List[int]:', 'context': '# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 41, 'coloffset': 0, 'linematch': 'def insertion_sort(array: List[int]) -> List[int]:', 'context': '            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    """"""Run an insertion sort on the provided array.""""""\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",insertion_sort,41-60,"[{'name': 'Mutant #18', 'line': 44, 'description': ['    for i in range(1, len(array)):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     """"""Run an insertion sort on the provided array.""""""\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 46, 'description': ['        key_item = array[i]'], 'failure': []}, {'name': 'Mutant #20', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #21', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #22', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #23', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': []}, {'name': 'Mutant #27', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #34', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #35', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",44.44444444444444
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 63, 'coloffset': 0, 'linematch': 'def merge(left: List[int], right: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 96, 'coloffset': 0, 'linematch': 'def merge_sort(array: List[int]) -> List[int]:', 'context': '\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 104, 'coloffset': 0, 'linematch': 'def quick_sort(array: List[int]) -> List[int]:', 'context': '    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 121, 'coloffset': 0, 'linematch': 'def insertion_sort_time(array: List[int], left: int = 0, right=None):', 'context': '\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 135, 'coloffset': 0, 'linematch': 'def tim_sort(array: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 10, 'coloffset': 0, 'linematch': 'def format_decimal(number: float):', 'context': 'from typing import List\nfrom typing import Tuple\n\n\ndef format_decimal(number: float):\n    """"""Round a number up and then encode with five decimal places.""""""\n    # round the provided floating point value with format function\n    format_float = ""{:.5f}"".format(number)\n    return format_float\n', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",format_decimal,10-14,"[{'name': 'Mutant #136', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = ""XX{:.5f}XX"".format(number)\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #137', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = None\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 17, 'coloffset': 0, 'linematch': 'def generate_random_number(maximum: int) -> int:', 'context': '    format_float = ""{:.5f}"".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    """"""Generate a random list defined by the size.""""""\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",generate_random_number,17-22,"[{'name': 'Mutant #138', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = random.randint(1, maximum)\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #139', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = None\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 25, 'coloffset': 0, 'linematch': 'def generate_random_container(', 'context': '    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    """"""Generate a random list defined by the size.""""""\n    # generate a list of random values for a specific size', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",generate_random_container,25-33,"[{'name': 'Mutant #140', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 36, 'coloffset': 0, 'linematch': 'def run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:', 'context': '    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    """"""Run a sorting algorithm and profile it with the timeit package.""""""\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it\'s not the built-in `sorted()`.\n    setup_code = f""from listsorting.sorting import {algorithm}""', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 55, 'coloffset': 0, 'linematch': 'def run_sorting_algorithm_experiment_campaign(', 'context': '        format_decimal((sum(times) / len(times))),\n    )\n\n\ndef run_sorting_algorithm_experiment_campaign(\n    algorithm: str,\n    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",run_sorting_algorithm_experiment_campaign,55-81,"[{'name': 'Mutant #151', 'line': 62, 'description': ['    data_table = []'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #152', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #153', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #154', 'line': 66, 'description': ['        random_list = generate_random_container(starting_size, maximum_value)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #155', 'line': 68, 'description': ['        performance_data = run_sorting_algorithm(algorithm, random_list)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #156', 'line': 72, 'description': ['            performance_data[0],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #157', 'line': 73, 'description': ['            performance_data[1],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #158', 'line': 74, 'description': ['            performance_data[2],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #159', 'line': 75, 'description': ['        ]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #160', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #161', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #162', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #163', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #164', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #165', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,".//FunctionDef[not(contains(@name, ""test_""))]",['F002'],"{'lineno': 45, 'coloffset': 0, 'linematch': 'def listsorting(', 'context': '        return self.value\n\n\n@cli.command()\ndef listsorting(\n    starting_size: int = typer.Option(1000000),\n    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:', 'min': 1, 'max': 10, 'check_name': 'dummy-test-non-test-function-definition', 'description': 'Ensure the presence of non-test function definitions in the codebase.'}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 36, 'coloffset': 8, 'linematch': 'if already_sorted:', 'context': '        for j in range(n - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n                already_sorted = False\n        if already_sorted:\n            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 33, 'coloffset': 12, 'linematch': 'if array[j] > array[j + 1]:', 'context': '        # Start looking at each item of the list one by one,\n        # comparing it with its adjacent value. With each iteration\n        # the portion of the array that you look at shrinks because the remaining items have already been sorted\n        for j in range(n - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n                already_sorted = False\n        if already_sorted:\n            break\n    return array', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 67, 'coloffset': 4, 'linematch': 'if len(left) == 0:', 'context': 'def merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 71, 'coloffset': 4, 'linematch': 'if len(right) == 0:', 'context': '    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 77, 'coloffset': 8, 'linematch': 'if left[index_left] <= right[index_right]:', 'context': '\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1\n        else:\n            result.append(right[index_right])\n            index_right += 1', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 86, 'coloffset': 8, 'linematch': 'if index_right == len(right):', 'context': '            index_right += 1\n        # If the reach the end of either array, then you can\n        # add the remaining elements from the other array to\n        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 89, 'coloffset': 8, 'linematch': 'if index_left == len(left):', 'context': '        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break\n\n    return result\n', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 98, 'coloffset': 4, 'linematch': 'if len(array) < 2:', 'context': '\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 106, 'coloffset': 4, 'linematch': 'if len(array) < 2:', 'context': '\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 111, 'coloffset': 8, 'linematch': 'if item < pivot:', 'context': '        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 113, 'coloffset': 8, 'linematch': 'elif item == pivot:', 'context': '    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 115, 'coloffset': 8, 'linematch': 'elif item > pivot:', 'context': '        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)\n\n', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,.//FunctionDef/body//If,['CL001'],"{'lineno': 123, 'coloffset': 4, 'linematch': 'if right is None:', 'context': '\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:', 'min': 1, 'max': 10, 'check_name': 'dummy-test-single-nested-if', 'description': ""Ensure the presence of single nested 'if' statements within function bodies.""}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//Compare/ops/Is | //Compare/ops/Eq,['BOOL001'],"{'lineno': 113, 'coloffset': 13, 'linematch': 'elif item == pivot:', 'context': '    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)', 'min': 1, 'max': 10, 'check_name': 'boolean-comparison', 'description': 'Using = or == operators to compare boolean values'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//Compare/ops/Is | //Compare/ops/Eq,['BOOL001'],"{'lineno': 113, 'coloffset': 13, 'linematch': 'elif item == pivot:', 'context': '    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)', 'min': 1, 'max': 10, 'check_name': 'boolean-comparison', 'description': 'Using = or == operators to compare boolean values'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//Compare/ops/Is | //Compare/ops/Eq,['BOOL001'],"{'lineno': 113, 'coloffset': 13, 'linematch': 'elif item == pivot:', 'context': '    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)', 'min': 1, 'max': 10, 'check_name': 'boolean-comparison', 'description': 'Using = or == operators to compare boolean values'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//Compare/ops/Is | //Compare/ops/Eq,['BOOL001'],"{'lineno': 113, 'coloffset': 13, 'linematch': 'elif item == pivot:', 'context': '    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)', 'min': 1, 'max': 10, 'check_name': 'boolean-comparison', 'description': 'Using = or == operators to compare boolean values'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//Compare/ops/Is | //Compare/ops/Eq,['BOOL001'],"{'lineno': 113, 'coloffset': 13, 'linematch': 'elif item == pivot:', 'context': '    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)', 'min': 1, 'max': 10, 'check_name': 'boolean-comparison', 'description': 'Using = or == operators to compare boolean values'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//Compare/ops/Is | //Compare/ops/Eq,['BOOL001'],"{'lineno': 123, 'coloffset': 7, 'linematch': 'if right is None:', 'context': '\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:', 'min': 1, 'max': 10, 'check_name': 'boolean-comparison', 'description': 'Using = or == operators to compare boolean values'}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 21, 'coloffset': 0, 'linematch': 'def bubble_sort(array: List[int]) -> List[int]:', 'context': '# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 41, 'coloffset': 0, 'linematch': 'def insertion_sort(array: List[int]) -> List[int]:', 'context': '            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    """"""Run an insertion sort on the provided array.""""""\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",insertion_sort,41-60,"[{'name': 'Mutant #18', 'line': 44, 'description': ['    for i in range(1, len(array)):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     """"""Run an insertion sort on the provided array.""""""\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 46, 'description': ['        key_item = array[i]'], 'failure': []}, {'name': 'Mutant #20', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #21', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #22', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #23', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': []}, {'name': 'Mutant #27', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #34', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #35', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",44.44444444444444
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 63, 'coloffset': 0, 'linematch': 'def merge(left: List[int], right: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 96, 'coloffset': 0, 'linematch': 'def merge_sort(array: List[int]) -> List[int]:', 'context': '\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 104, 'coloffset': 0, 'linematch': 'def quick_sort(array: List[int]) -> List[int]:', 'context': '    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 121, 'coloffset': 0, 'linematch': 'def insertion_sort_time(array: List[int], left: int = 0, right=None):', 'context': '\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 135, 'coloffset': 0, 'linematch': 'def tim_sort(array: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 10, 'coloffset': 0, 'linematch': 'def format_decimal(number: float):', 'context': 'from typing import List\nfrom typing import Tuple\n\n\ndef format_decimal(number: float):\n    """"""Round a number up and then encode with five decimal places.""""""\n    # round the provided floating point value with format function\n    format_float = ""{:.5f}"".format(number)\n    return format_float\n', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",format_decimal,10-14,"[{'name': 'Mutant #136', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = ""XX{:.5f}XX"".format(number)\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #137', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = None\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 17, 'coloffset': 0, 'linematch': 'def generate_random_number(maximum: int) -> int:', 'context': '    format_float = ""{:.5f}"".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    """"""Generate a random list defined by the size.""""""\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",generate_random_number,17-22,"[{'name': 'Mutant #138', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = random.randint(1, maximum)\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #139', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = None\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 25, 'coloffset': 0, 'linematch': 'def generate_random_container(', 'context': '    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    """"""Generate a random list defined by the size.""""""\n    # generate a list of random values for a specific size', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",generate_random_container,25-33,"[{'name': 'Mutant #140', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 36, 'coloffset': 0, 'linematch': 'def run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:', 'context': '    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    """"""Run a sorting algorithm and profile it with the timeit package.""""""\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it\'s not the built-in `sorted()`.\n    setup_code = f""from listsorting.sorting import {algorithm}""', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 55, 'coloffset': 0, 'linematch': 'def run_sorting_algorithm_experiment_campaign(', 'context': '        format_decimal((sum(times) / len(times))),\n    )\n\n\ndef run_sorting_algorithm_experiment_campaign(\n    algorithm: str,\n    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",run_sorting_algorithm_experiment_campaign,55-81,"[{'name': 'Mutant #151', 'line': 62, 'description': ['    data_table = []'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #152', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #153', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #154', 'line': 66, 'description': ['        random_list = generate_random_container(starting_size, maximum_value)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #155', 'line': 68, 'description': ['        performance_data = run_sorting_algorithm(algorithm, random_list)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #156', 'line': 72, 'description': ['            performance_data[0],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #157', 'line': 73, 'description': ['            performance_data[1],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #158', 'line': 74, 'description': ['            performance_data[2],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #159', 'line': 75, 'description': ['        ]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #160', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #161', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #162', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #163', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #164', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #165', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[not(args/arg/annotation) or not(returns)],['ANNOT001'],"{'lineno': 45, 'coloffset': 0, 'linematch': 'def listsorting(', 'context': '        return self.value\n\n\n@cli.command()\ndef listsorting(\n    starting_size: int = typer.Option(1000000),\n    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:', 'min': 1, 'max': 10, 'check_name': 'missing-annotations', 'description': 'A function does not explicitly annotate arguments/parameters or the expected output'}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[body//comprehension/target/Name],['FLV001'],"{'lineno': 25, 'coloffset': 0, 'linematch': 'def generate_random_container(', 'context': '    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    """"""Generate a random list defined by the size.""""""\n    # generate a list of random values for a specific size', 'min': 1, 'max': 10, 'check_name': 'Function uses loop variable', 'description': 'The loop variable is not bound in the function definition, so it will always have the value it had in the last iteration'}",generate_random_container,25-33,"[{'name': 'Mutant #140', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else,['F002'],"{'lineno': 71, 'coloffset': 4, 'linematch': 'if len(right) == 0:', 'context': '    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):', 'min': 1, 'max': 10, 'check_name': 'Number of conditions (if, if-else, and switch) in a Function', 'description': 'Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.'}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else,['F002'],"{'lineno': 86, 'coloffset': 8, 'linematch': 'if index_right == len(right):', 'context': '            index_right += 1\n        # If the reach the end of either array, then you can\n        # add the remaining elements from the other array to\n        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break', 'min': 1, 'max': 10, 'check_name': 'Number of conditions (if, if-else, and switch) in a Function', 'description': 'Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.'}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else,['F002'],"{'lineno': 89, 'coloffset': 8, 'linematch': 'if index_left == len(left):', 'context': '        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break\n\n    return result\n', 'min': 1, 'max': 10, 'check_name': 'Number of conditions (if, if-else, and switch) in a Function', 'description': 'Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.'}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef//If/descendant::If,['CL001'],"{'lineno': 113, 'coloffset': 8, 'linematch': 'elif item == pivot:', 'context': '    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)', 'min': 1, 'max': 1, 'check_name': 'The number of nested conditions (e.g., if{if{}}) in a Function', 'description': 'Ensure there is at least one nested condition (e.g., if{if{}}) in a function.'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef//If/descendant::If,['CL001'],"{'lineno': 115, 'coloffset': 8, 'linematch': 'elif item > pivot:', 'context': '        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)\n\n', 'min': 1, 'max': 1, 'check_name': 'The number of nested conditions (e.g., if{if{}}) in a Function', 'description': 'Ensure there is at least one nested condition (e.g., if{if{}}) in a function.'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],['C002'],"{'lineno': 21, 'coloffset': 0, 'linematch': 'def bubble_sort(array: List[int]) -> List[int]:', 'context': '# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{if{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.'}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],['C002'],"{'lineno': 41, 'coloffset': 0, 'linematch': 'def insertion_sort(array: List[int]) -> List[int]:', 'context': '            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    """"""Run an insertion sort on the provided array.""""""\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{if{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.'}",insertion_sort,41-60,"[{'name': 'Mutant #18', 'line': 44, 'description': ['    for i in range(1, len(array)):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     """"""Run an insertion sort on the provided array.""""""\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 46, 'description': ['        key_item = array[i]'], 'failure': []}, {'name': 'Mutant #20', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #21', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #22', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #23', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': []}, {'name': 'Mutant #27', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #34', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #35', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",44.44444444444444
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],['C002'],"{'lineno': 63, 'coloffset': 0, 'linematch': 'def merge(left: List[int], right: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{if{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.'}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],['C002'],"{'lineno': 96, 'coloffset': 0, 'linematch': 'def merge_sort(array: List[int]) -> List[int]:', 'context': '\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{if{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.'}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],['C002'],"{'lineno': 104, 'coloffset': 0, 'linematch': 'def quick_sort(array: List[int]) -> List[int]:', 'context': '    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{if{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.'}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],['C002'],"{'lineno': 121, 'coloffset': 0, 'linematch': 'def insertion_sort_time(array: List[int], left: int = 0, right=None):', 'context': '\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{if{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.'}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],['C002'],"{'lineno': 135, 'coloffset': 0, 'linematch': 'def tim_sort(array: List[int]) -> List[int]:', 'context': '        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{if{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.'}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef//For[.//For],['F001'],"{'lineno': 26, 'coloffset': 4, 'linematch': 'for i in range(n):', 'context': '    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there\'s nothing left to sort\n        already_sorted = True\n        # Start looking at each item of the list one by one,\n        # comparing it with its adjacent value. With each iteration\n        # the portion of the array that you look at shrinks because the remaining items have already been sorted', 'min': 1, 'max': 10, 'check_name': 'The number of nested loop-conditions (e.g., for{for{}}) in a Function', 'description': 'Ensure the presence of nested loop-conditions (e.g., for{for{}}) in a function.'}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 22, 'coloffset': 4, 'linematch': '""""""Sort an input list called array using bubble sort.""""""', 'context': '# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there\'s nothing left to sort', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 24, 'coloffset': 4, 'linematch': 'n = len(array)', 'context': '\ndef bubble_sort(array: List[int]) -> List[int]:\n    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there\'s nothing left to sort\n        already_sorted = True\n        # Start looking at each item of the list one by one,', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 26, 'coloffset': 4, 'linematch': 'for i in range(n):', 'context': '    """"""Sort an input list called array using bubble sort.""""""\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there\'s nothing left to sort\n        already_sorted = True\n        # Start looking at each item of the list one by one,\n        # comparing it with its adjacent value. With each iteration\n        # the portion of the array that you look at shrinks because the remaining items have already been sorted', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 38, 'coloffset': 4, 'linematch': 'return array', 'context': '                array[j], array[j + 1] = array[j + 1], array[j]\n                already_sorted = False\n        if already_sorted:\n            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    """"""Run an insertion sort on the provided array.""""""\n    # Loop from the second element of the array until the last element', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",bubble_sort,21-38,"[{'name': 'Mutant #1', 'line': 24, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #2', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3', 'line': 28, 'description': ['        already_sorted = True'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #5', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #6', 'line': 32, 'description': ['        for j in range(n - i - 1):'], 'failure': []}, {'name': 'Mutant #7', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #9', 'line': 33, 'description': ['            if array[j] > array[j + 1]:'], 'failure': []}, {'name': 'Mutant #10', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #11', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #12', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #13', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #14', 'line': 34, 'description': ['                array[j], array[j + 1] = array[j + 1], array[j]'], 'failure': []}, {'name': 'Mutant #15', 'line': 35, 'description': ['                already_sorted = False'], 'failure': []}, {'name': 'Mutant #16', 'line': 35, 'description': ['                already_sorted = False'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 37, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",70.58823529411765
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 42, 'coloffset': 4, 'linematch': '""""""Run an insertion sort on the provided array.""""""', 'context': '    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    """"""Run an insertion sort on the provided array.""""""\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]\n        # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",insertion_sort,41-60,"[{'name': 'Mutant #18', 'line': 44, 'description': ['    for i in range(1, len(array)):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     """"""Run an insertion sort on the provided array.""""""\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 46, 'description': ['        key_item = array[i]'], 'failure': []}, {'name': 'Mutant #20', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #21', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #22', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #23', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': []}, {'name': 'Mutant #27', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #34', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #35', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",44.44444444444444
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 44, 'coloffset': 4, 'linematch': 'for i in range(1, len(array)):', 'context': '\ndef insertion_sort(array: List[int]) -> List[int]:\n    """"""Run an insertion sort on the provided array.""""""\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]\n        # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n        j = i - 1\n        # Run through the list of the items (the left portion of the array) and find the correct position', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",insertion_sort,41-60,"[{'name': 'Mutant #18', 'line': 44, 'description': ['    for i in range(1, len(array)):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     """"""Run an insertion sort on the provided array.""""""\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 46, 'description': ['        key_item = array[i]'], 'failure': []}, {'name': 'Mutant #20', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #21', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #22', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #23', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': []}, {'name': 'Mutant #27', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #34', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #35', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",44.44444444444444
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 60, 'coloffset': 4, 'linematch': 'return array', 'context': '            j -= 1\n        # When you finish shifting the elements, you can position\n        # `key_item` in its correct location\n        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",insertion_sort,41-60,"[{'name': 'Mutant #18', 'line': 44, 'description': ['    for i in range(1, len(array)):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     """"""Run an insertion sort on the provided array.""""""\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 46, 'description': ['        key_item = array[i]'], 'failure': []}, {'name': 'Mutant #20', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #21', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #22', 'line': 48, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #23', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': [{'inner': ""--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 51, 'description': ['        while j >= 0 and array[j] > key_item:'], 'failure': []}, {'name': 'Mutant #27', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 55, 'description': ['            array[j + 1] = array[j]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 56, 'description': ['            j -= 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #34', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #35', 'line': 59, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",44.44444444444444
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 64, 'coloffset': 4, 'linematch': '""""""Define a convenience method that supports the merging of lists.""""""', 'context': '    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 67, 'coloffset': 4, 'linematch': 'if len(left) == 0:', 'context': 'def merge(left: List[int], right: List[int]) -> List[int]:\n    """"""Define a convenience method that supports the merging of lists.""""""\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 71, 'coloffset': 4, 'linematch': 'if len(right) == 0:', 'context': '    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 74, 'coloffset': 4, 'linematch': 'result: List[int] = []', 'context': '    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 75, 'coloffset': 4, 'linematch': 'index_left = index_right = 0', 'context': '    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1\n        else:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 76, 'coloffset': 4, 'linematch': 'while len(result) < len(left) + len(right):', 'context': '        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1\n        else:\n            result.append(right[index_right])', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 93, 'coloffset': 4, 'linematch': 'return result', 'context': '        if index_left == len(left):\n            result += right[index_right:]\n            break\n\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge,63-93,"[{'name': 'Mutant #36', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #37', 'line': 67, 'description': ['    if len(left) == 0:'], 'failure': []}, {'name': 'Mutant #38', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #39', 'line': 71, 'description': ['    if len(right) == 0:'], 'failure': []}, {'name': 'Mutant #40', 'line': 74, 'description': ['    result: List[int] = []'], 'failure': []}, {'name': 'Mutant #41', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #42', 'line': 75, 'description': ['    index_left = index_right = 0'], 'failure': []}, {'name': 'Mutant #43', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 76, 'description': ['    while len(result) < len(left) + len(right):'], 'failure': []}, {'name': 'Mutant #45', 'line': 77, 'description': ['        if left[index_left] <= right[index_right]:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #47', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #48', 'line': 79, 'description': ['            index_left += 1'], 'failure': []}, {'name': 'Mutant #49', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 82, 'description': ['            index_right += 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 86, 'description': ['        if index_right == len(right):'], 'failure': []}, {'name': 'Mutant #53', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 87, 'description': ['            result += left[index_left:]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #55', 'line': 88, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 89, 'description': ['        if index_left == len(left):'], 'failure': []}, {'name': 'Mutant #57', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #58', 'line': 90, 'description': ['            result += right[index_right:]'], 'failure': []}, {'name': 'Mutant #59', 'line': 91, 'description': ['            break'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 97, 'coloffset': 4, 'linematch': '""""""Sort the provided list called array with the merge sort algorithm.""""""', 'context': '    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 98, 'coloffset': 4, 'linematch': 'if len(array) < 2:', 'context': '\n\ndef merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 100, 'coloffset': 4, 'linematch': 'midpoint = len(array) // 2', 'context': 'def merge_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 101, 'coloffset': 4, 'linematch': 'return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))', 'context': '    """"""Sort the provided list called array with the merge sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",merge_sort,96-101,"[{'name': 'Mutant #60', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #61', 'line': 98, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the merge sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #62', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #63', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}, {'name': 'Mutant #64', 'line': 100, 'description': ['    midpoint = len(array) // 2'], 'failure': []}]",60.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 105, 'coloffset': 4, 'linematch': '""""""Sort the provided list called array with the quick sort algorithm.""""""', 'context': '    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 106, 'coloffset': 4, 'linematch': 'if len(array) < 2:', 'context': '\n\ndef quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 108, 'coloffset': 4, 'linematch': 'low, same, high = [], [], []', 'context': 'def quick_sort(array: List[int]) -> List[int]:\n    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 109, 'coloffset': 4, 'linematch': 'pivot = array[randint(0, len(array) - 1)]', 'context': '    """"""Sort the provided list called array with the quick sort algorithm.""""""\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 110, 'coloffset': 4, 'linematch': 'for item in array:', 'context': '    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 118, 'coloffset': 4, 'linematch': 'return quick_sort(low) + same + quick_sort(high)', 'context': '            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",quick_sort,104-118,"[{'name': 'Mutant #65', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #66', 'line': 106, 'description': ['    if len(array) < 2:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     """"""Sort the provided list called array with the quick sort algorithm.""""""\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 108, 'description': ['    low, same, high = [], [], []'], 'failure': []}, {'name': 'Mutant #68', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #69', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #70', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #71', 'line': 109, 'description': ['    pivot = array[randint(0, len(array) - 1)]'], 'failure': []}, {'name': 'Mutant #72', 'line': 111, 'description': ['        if item < pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #73', 'line': 113, 'description': ['        elif item == pivot:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        elif item > pivot:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}, {'name': 'Mutant #76', 'line': 118, 'description': ['    return quick_sort(low) + same + quick_sort(high)'], 'failure': []}]",50.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 122, 'coloffset': 4, 'linematch': '""""""Use an internal sorting algorithm for the timsort algorithm.""""""', 'context': '    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 123, 'coloffset': 4, 'linematch': 'if right is None:', 'context': '\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 125, 'coloffset': 4, 'linematch': 'for i in range(left + 1, right + 1):', 'context': 'def insertion_sort_time(array: List[int], left: int = 0, right=None):\n    """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:\n            array[j + 1] = array[j]\n            j -= 1', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 132, 'coloffset': 4, 'linematch': 'return array', 'context': '        while j >= left and array[j] > key_item:\n            array[j + 1] = array[j]\n            j -= 1\n        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",insertion_sort_time,121-132,"[{'name': 'Mutant #77', 'line': 121, 'description': ['def insertion_sort_time(array: List[int], left: int = 0, right=None):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #78', 'line': 123, 'description': ['    if right is None:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #79', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #80', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #81', 'line': 124, 'description': ['        right = len(array) - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #82', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #85', 'line': 125, 'description': ['    for i in range(left + 1, right + 1):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     """"""Use an internal sorting algorithm for the timsort algorithm.""""""\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #86', 'line': 126, 'description': ['        key_item = array[i]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #87', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #88', 'line': 127, 'description': ['        j = i - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #89', 'line': 127, 'description': ['        j = i - 1'], 'failure': []}, {'name': 'Mutant #90', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #91', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #92', 'line': 128, 'description': ['        while j >= left and array[j] > key_item:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #93', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #94', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #95', 'line': 129, 'description': ['            array[j + 1] = array[j]'], 'failure': []}, {'name': 'Mutant #96', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #97', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #98', 'line': 130, 'description': ['            j -= 1'], 'failure': []}, {'name': 'Mutant #99', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #100', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}, {'name': 'Mutant #101', 'line': 131, 'description': ['        array[j + 1] = key_item'], 'failure': []}]",40.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 136, 'coloffset': 4, 'linematch': '""""""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""', 'context': '    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 137, 'coloffset': 4, 'linematch': 'min_run = 32', 'context': '\n\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 138, 'coloffset': 4, 'linematch': 'n = len(array)', 'context': '\ndef tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 139, 'coloffset': 4, 'linematch': 'for i in range(0, n, min_run):', 'context': 'def tim_sort(array: List[int]) -> List[int]:\n    """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):\n            midpoint = start + size - 1', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 141, 'coloffset': 4, 'linematch': 'size = min_run', 'context': '    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):\n            midpoint = start + size - 1\n            end = min((start + size * 2 - 1), (n - 1))\n', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 142, 'coloffset': 4, 'linematch': 'while size < n:', 'context': '    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):\n            midpoint = start + size - 1\n            end = min((start + size * 2 - 1), (n - 1))\n\n            merged_array = merge(', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 153, 'coloffset': 4, 'linematch': 'return array', 'context': '            )\n            array[start : start + len(merged_array)] = merged_array\n\n        size *= 2\n    return array', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",tim_sort,135-153,"[{'name': 'Mutant #102', 'line': 137, 'description': ['    min_run = 32'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #103', 'line': 137, 'description': ['    min_run = 32'], 'failure': []}, {'name': 'Mutant #104', 'line': 138, 'description': ['    n = len(array)'], 'failure': []}, {'name': 'Mutant #105', 'line': 139, 'description': ['    for i in range(0, n, min_run):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     """"""Sort the list called array with the tim sort algorithm using a special insertion sort.""""""\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #106', 'line': 140, 'description': ['        insertion_sort(array)'], 'failure': []}, {'name': 'Mutant #107', 'line': 141, 'description': ['    size = min_run'], 'failure': []}, {'name': 'Mutant #108', 'line': 142, 'description': ['    while size < n:'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #110', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #111', 'line': 143, 'description': ['        for start in range(0, n, size * 2):'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #114', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 144, 'description': ['            midpoint = start + size - 1'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #119', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 145, 'description': ['            end = min((start + size * 2 - 1), (n - 1))'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 148, 'description': ['                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 149, 'description': ['            )'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #132', 'line': 150, 'description': ['            array[start : start + len(merged_array)] = merged_array'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #133', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #134', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #135', 'line': 152, 'description': ['        size *= 2'], 'failure': [{'inner': '--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 11, 'coloffset': 4, 'linematch': '""""""Round a number up and then encode with five decimal places.""""""', 'context': 'from typing import Tuple\n\n\ndef format_decimal(number: float):\n    """"""Round a number up and then encode with five decimal places.""""""\n    # round the provided floating point value with format function\n    format_float = ""{:.5f}"".format(number)\n    return format_float\n\n', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",format_decimal,10-14,"[{'name': 'Mutant #136', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = ""XX{:.5f}XX"".format(number)\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #137', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = None\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 13, 'coloffset': 4, 'linematch': 'format_float = ""{:.5f}"".format(number)', 'context': '\ndef format_decimal(number: float):\n    """"""Round a number up and then encode with five decimal places.""""""\n    # round the provided floating point value with format function\n    format_float = ""{:.5f}"".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    """"""Generate a random list defined by the size.""""""', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",format_decimal,10-14,"[{'name': 'Mutant #136', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = ""XX{:.5f}XX"".format(number)\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #137', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = None\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 14, 'coloffset': 4, 'linematch': 'return format_float', 'context': 'def format_decimal(number: float):\n    """"""Round a number up and then encode with five decimal places.""""""\n    # round the provided floating point value with format function\n    format_float = ""{:.5f}"".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    """"""Generate a random list defined by the size.""""""\n    # generate a random value that is bound by 0 and a maximum', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",format_decimal,10-14,"[{'name': 'Mutant #136', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = ""XX{:.5f}XX"".format(number)\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #137', 'line': 13, 'description': ['    format_float = ""{:.5f}"".format(number)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     """"""Round a number up and then encode with five decimal places.""""""\n     # round the provided floating point value with format function\n-    format_float = ""{:.5f}"".format(number)\n+    format_float = None\n     return format_float\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 18, 'coloffset': 4, 'linematch': '""""""Generate a random list defined by the size.""""""', 'context': '    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    """"""Generate a random list defined by the size.""""""\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value\n', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",generate_random_number,17-22,"[{'name': 'Mutant #138', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = random.randint(1, maximum)\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #139', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = None\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 20, 'coloffset': 4, 'linematch': 'random_value = random.randint(0, maximum)', 'context': '\ndef generate_random_number(maximum: int) -> int:\n    """"""Generate a random list defined by the size.""""""\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",generate_random_number,17-22,"[{'name': 'Mutant #138', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = random.randint(1, maximum)\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #139', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = None\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 22, 'coloffset': 4, 'linematch': 'return random_value', 'context': '    """"""Generate a random list defined by the size.""""""\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",generate_random_number,17-22,"[{'name': 'Mutant #138', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = random.randint(1, maximum)\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #139', 'line': 20, 'description': ['    random_value = random.randint(0, maximum)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     """"""Generate a random list defined by the size.""""""\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = None\n     # return the randomly generated number\n     return random_value\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 29, 'coloffset': 4, 'linematch': '""""""Generate a random list defined by the size.""""""', 'context': 'def generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    """"""Generate a random list defined by the size.""""""\n    # generate a list of random values for a specific size\n    # and with a number up to a specific maximum\n    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",generate_random_container,25-33,"[{'name': 'Mutant #140', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 32, 'coloffset': 4, 'linematch': 'random_list = [random.randrange(1, maximum, 1) for _ in range(size)]', 'context': ') -> List[int]:\n    """"""Generate a random list defined by the size.""""""\n    # generate a list of random values for a specific size\n    # and with a number up to a specific maximum\n    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    """"""Run a sorting algorithm and profile it with the timeit package.""""""', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",generate_random_container,25-33,"[{'name': 'Mutant #140', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 33, 'coloffset': 4, 'linematch': 'return random_list', 'context': '    """"""Generate a random list defined by the size.""""""\n    # generate a list of random values for a specific size\n    # and with a number up to a specific maximum\n    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    """"""Run a sorting algorithm and profile it with the timeit package.""""""\n    # set up the context and prepare the call to the specified', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",generate_random_container,25-33,"[{'name': 'Mutant #140', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 32, 'description': ['    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     """"""Generate a random list defined by the size.""""""\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 37, 'coloffset': 4, 'linematch': '""""""Run a sorting algorithm and profile it with the timeit package.""""""', 'context': '    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    """"""Run a sorting algorithm and profile it with the timeit package.""""""\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it\'s not the built-in `sorted()`.\n    setup_code = f""from listsorting.sorting import {algorithm}""\n    stmt = f""{algorithm}({array})""', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 41, 'coloffset': 4, 'linematch': 'setup_code = f""from listsorting.sorting import {algorithm}""', 'context': '    """"""Run a sorting algorithm and profile it with the timeit package.""""""\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it\'s not the built-in `sorted()`.\n    setup_code = f""from listsorting.sorting import {algorithm}""\n    stmt = f""{algorithm}({array})""\n    # execute the code ten different times and return the time\n    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 42, 'coloffset': 4, 'linematch': 'stmt = f""{algorithm}({array})""', 'context': '    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it\'s not the built-in `sorted()`.\n    setup_code = f""from listsorting.sorting import {algorithm}""\n    stmt = f""{algorithm}({array})""\n    # execute the code ten different times and return the time\n    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:\n    # (minimum execution time, maximum execution time, average execution time)', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 45, 'coloffset': 4, 'linematch': 'times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)', 'context': '    setup_code = f""from listsorting.sorting import {algorithm}""\n    stmt = f""{algorithm}({array})""\n    # execute the code ten different times and return the time\n    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:\n    # (minimum execution time, maximum execution time, average execution time)\n    return (\n        format_decimal(min(times)),\n        format_decimal(max(times)),', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 48, 'coloffset': 4, 'linematch': 'return (', 'context': '    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:\n    # (minimum execution time, maximum execution time, average execution time)\n    return (\n        format_decimal(min(times)),\n        format_decimal(max(times)),\n        format_decimal((sum(times) / len(times))),\n    )\n', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm,36-52,"[{'name': 'Mutant #143', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = f""XXfrom listsorting.sorting import {algorithm}XX""\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 41, 'description': ['    setup_code = f""from listsorting.sorting import {algorithm}""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n-    setup_code = f""from listsorting.sorting import {algorithm}""\n+    setup_code = None\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = f""XX{algorithm}({array})XX""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #146', 'line': 42, 'description': ['    stmt = f""{algorithm}({array})""'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it\'s not the built-in `sorted()`.\n     setup_code = f""from listsorting.sorting import {algorithm}""\n-    stmt = f""{algorithm}({array})""\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #147', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #148', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #149', 'line': 45, 'description': ['    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f""{algorithm}({array})""\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 51, 'description': ['        format_decimal((sum(times) / len(times))),'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 61, 'coloffset': 4, 'linematch': '""""""Run an entire sorting algorithm experiment campaign.""""""', 'context': '    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:\n    """"""Run an entire sorting algorithm experiment campaign.""""""\n    data_table = []\n    # run a total of number_doubles number of doubles for the input size\n    while number_doubles > 0:\n        # generate a random list based on the current size of the data\n        random_list = generate_random_container(starting_size, maximum_value)', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm_experiment_campaign,55-81,"[{'name': 'Mutant #151', 'line': 62, 'description': ['    data_table = []'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #152', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #153', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #154', 'line': 66, 'description': ['        random_list = generate_random_container(starting_size, maximum_value)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #155', 'line': 68, 'description': ['        performance_data = run_sorting_algorithm(algorithm, random_list)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #156', 'line': 72, 'description': ['            performance_data[0],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #157', 'line': 73, 'description': ['            performance_data[1],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #158', 'line': 74, 'description': ['            performance_data[2],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #159', 'line': 75, 'description': ['        ]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #160', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #161', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #162', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #163', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #164', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #165', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 62, 'coloffset': 4, 'linematch': 'data_table = []', 'context': '    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:\n    """"""Run an entire sorting algorithm experiment campaign.""""""\n    data_table = []\n    # run a total of number_doubles number of doubles for the input size\n    while number_doubles > 0:\n        # generate a random list based on the current size of the data\n        random_list = generate_random_container(starting_size, maximum_value)\n        # run the sorting algorithm and collect the timing data from timeit', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm_experiment_campaign,55-81,"[{'name': 'Mutant #151', 'line': 62, 'description': ['    data_table = []'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #152', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #153', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #154', 'line': 66, 'description': ['        random_list = generate_random_container(starting_size, maximum_value)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #155', 'line': 68, 'description': ['        performance_data = run_sorting_algorithm(algorithm, random_list)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #156', 'line': 72, 'description': ['            performance_data[0],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #157', 'line': 73, 'description': ['            performance_data[1],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #158', 'line': 74, 'description': ['            performance_data[2],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #159', 'line': 75, 'description': ['        ]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #160', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #161', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #162', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #163', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #164', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #165', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 64, 'coloffset': 4, 'linematch': 'while number_doubles > 0:', 'context': ') -> List[List[Any]]:\n    """"""Run an entire sorting algorithm experiment campaign.""""""\n    data_table = []\n    # run a total of number_doubles number of doubles for the input size\n    while number_doubles > 0:\n        # generate a random list based on the current size of the data\n        random_list = generate_random_container(starting_size, maximum_value)\n        # run the sorting algorithm and collect the timing data from timeit\n        performance_data = run_sorting_algorithm(algorithm, random_list)\n        # create the row of data from this specific execution of the algorithm', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm_experiment_campaign,55-81,"[{'name': 'Mutant #151', 'line': 62, 'description': ['    data_table = []'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #152', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #153', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #154', 'line': 66, 'description': ['        random_list = generate_random_container(starting_size, maximum_value)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #155', 'line': 68, 'description': ['        performance_data = run_sorting_algorithm(algorithm, random_list)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #156', 'line': 72, 'description': ['            performance_data[0],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #157', 'line': 73, 'description': ['            performance_data[1],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #158', 'line': 74, 'description': ['            performance_data[2],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #159', 'line': 75, 'description': ['        ]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #160', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #161', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #162', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #163', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #164', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #165', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 81, 'coloffset': 4, 'linematch': 'return data_table', 'context': '        data_table.append(data_table_row)\n        # move to the next round of the doubling experiment\n        number_doubles = number_doubles - 1\n        starting_size = starting_size * 2\n    return data_table', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",run_sorting_algorithm_experiment_campaign,55-81,"[{'name': 'Mutant #151', 'line': 62, 'description': ['    data_table = []'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #152', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #153', 'line': 64, 'description': ['    while number_doubles > 0:'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     """"""Run an entire sorting algorithm experiment campaign.""""""\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #154', 'line': 66, 'description': ['        random_list = generate_random_container(starting_size, maximum_value)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #155', 'line': 68, 'description': ['        performance_data = run_sorting_algorithm(algorithm, random_list)'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #156', 'line': 72, 'description': ['            performance_data[0],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #157', 'line': 73, 'description': ['            performance_data[1],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #158', 'line': 74, 'description': ['            performance_data[2],'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #159', 'line': 75, 'description': ['        ]'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #160', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #161', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #162', 'line': 79, 'description': ['        number_doubles = number_doubles - 1'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #163', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #164', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #165', 'line': 80, 'description': ['        starting_size = starting_size * 2'], 'failure': [{'inner': '--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 51, 'coloffset': 4, 'linematch': '""""""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""', 'context': '    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:\n    """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n    # display diagnostics messages of the experiment\n    console.print(\n        ""✨ Conducting an experiment to measure the performance of list sorting!""\n    )\n    console.print()', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 53, 'coloffset': 4, 'linematch': 'console.print(', 'context': '    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:\n    """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n    # display diagnostics messages of the experiment\n    console.print(\n        ""✨ Conducting an experiment to measure the performance of list sorting!""\n    )\n    console.print()\n    console.print(f""The chosen sorting algorithm: {approach}"")\n    console.print(f""Starting size of the data container {starting_size}"")', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 56, 'coloffset': 4, 'linematch': 'console.print()', 'context': '    # display diagnostics messages of the experiment\n    console.print(\n        ""✨ Conducting an experiment to measure the performance of list sorting!""\n    )\n    console.print()\n    console.print(f""The chosen sorting algorithm: {approach}"")\n    console.print(f""Starting size of the data container {starting_size}"")\n    console.print(f""Number of doubles to execute: {number_doubles}"")\n    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 57, 'coloffset': 4, 'linematch': 'console.print(f""The chosen sorting algorithm: {approach}"")', 'context': '    console.print(\n        ""✨ Conducting an experiment to measure the performance of list sorting!""\n    )\n    console.print()\n    console.print(f""The chosen sorting algorithm: {approach}"")\n    console.print(f""Starting size of the data container {starting_size}"")\n    console.print(f""Number of doubles to execute: {number_doubles}"")\n    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 58, 'coloffset': 4, 'linematch': 'console.print(f""Starting size of the data container {starting_size}"")', 'context': '        ""✨ Conducting an experiment to measure the performance of list sorting!""\n    )\n    console.print()\n    console.print(f""The chosen sorting algorithm: {approach}"")\n    console.print(f""Starting size of the data container {starting_size}"")\n    console.print(f""Number of doubles to execute: {number_doubles}"")\n    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()\n    # define the name approach', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 59, 'coloffset': 4, 'linematch': 'console.print(f""Number of doubles to execute: {number_doubles}"")', 'context': '    )\n    console.print()\n    console.print(f""The chosen sorting algorithm: {approach}"")\n    console.print(f""Starting size of the data container {starting_size}"")\n    console.print(f""Number of doubles to execute: {number_doubles}"")\n    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 60, 'coloffset': 4, 'linematch': 'console.print()', 'context': '    console.print()\n    console.print(f""The chosen sorting algorithm: {approach}"")\n    console.print(f""Starting size of the data container {starting_size}"")\n    console.print(f""Number of doubles to execute: {number_doubles}"")\n    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 61, 'coloffset': 4, 'linematch': 'console.print(""✨ Here are the results from running the experiment!"")', 'context': '    console.print(f""The chosen sorting algorithm: {approach}"")\n    console.print(f""Starting size of the data container {starting_size}"")\n    console.print(f""Number of doubles to execute: {number_doubles}"")\n    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 62, 'coloffset': 4, 'linematch': 'console.print()', 'context': '    console.print(f""Starting size of the data container {starting_size}"")\n    console.print(f""Number of doubles to execute: {number_doubles}"")\n    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 64, 'coloffset': 4, 'linematch': 'algorithm = approach + UNDERSCORE + SORT', 'context': '    console.print()\n    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )\n    data = [\n        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 65, 'coloffset': 4, 'linematch': 'result = experiment.run_sorting_algorithm_experiment_campaign(', 'context': '    console.print(""✨ Here are the results from running the experiment!"")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )\n    data = [\n        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n        result[0],', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 68, 'coloffset': 4, 'linematch': 'data = [', 'context': '    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )\n    data = [\n        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n        result[0],\n        result[1],\n        result[2],\n        result[3],', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 77, 'coloffset': 4, 'linematch': 'table = tabulate(data, headers=""firstrow"")', 'context': '        result[3],\n        result[4],\n    ]\n    # call tabulate function to construct a table based of data\n    table = tabulate(data, headers=""firstrow"")\n    print(table)', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py,//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,['CML001'],"{'lineno': 78, 'coloffset': 4, 'linematch': 'print(table)', 'context': '        result[4],\n    ]\n    # call tabulate function to construct a table based of data\n    table = tabulate(data, headers=""firstrow"")\n    print(table)', 'min': 1, 'max': 10, 'check_name': 'count-method-lines', 'description': ""Count the lines within methods in functions of type 'str'.""}",listsorting,45-78,"[{'name': 'Mutant #183', 'line': 46, 'description': ['    starting_size: int = typer.Option(1000000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #184', 'line': 47, 'description': ['    maximum_value: int = typer.Option(10000),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #185', 'line': 48, 'description': ['    number_doubles: int = typer.Option(10),'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #186', 'line': 54, 'description': ['        ""✨ Conducting an experiment to measure the performance of list sorting!""'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     """"""Conduct a doubling experiment to measure the performance of list sorting for various algorithms.""""""\n     # display diagnostics messages of the experiment\n     console.print(\n-        ""✨ Conducting an experiment to measure the performance of list sorting!""\n+        ""XX✨ Conducting an experiment to measure the performance of list sorting!XX""\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #187', 'line': 57, 'description': ['    console.print(f""The chosen sorting algorithm: {approach}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         ""✨ Conducting an experiment to measure the performance of list sorting!""\n     )\n     console.print()\n-    console.print(f""The chosen sorting algorithm: {approach}"")\n+    console.print(f""XXThe chosen sorting algorithm: {approach}XX"")\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #188', 'line': 58, 'description': ['    console.print(f""Starting size of the data container {starting_size}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n-    console.print(f""Starting size of the data container {starting_size}"")\n+    console.print(f""XXStarting size of the data container {starting_size}XX"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 59, 'description': ['    console.print(f""Number of doubles to execute: {number_doubles}"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f""The chosen sorting algorithm: {approach}"")\n     console.print(f""Starting size of the data container {starting_size}"")\n-    console.print(f""Number of doubles to execute: {number_doubles}"")\n+    console.print(f""XXNumber of doubles to execute: {number_doubles}XX"")\n     console.print()\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #190', 'line': 61, 'description': ['    console.print(""✨ Here are the results from running the experiment!"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f""Starting size of the data container {starting_size}"")\n     console.print(f""Number of doubles to execute: {number_doubles}"")\n     console.print()\n-    console.print(""✨ Here are the results from running the experiment!"")\n+    console.print(""XX✨ Here are the results from running the experiment!XX"")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #191', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #192', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 64, 'description': ['    algorithm = approach + UNDERSCORE + SORT'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(""✨ Here are the results from running the experiment!"")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 67, 'description': ['    )'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #195', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""XXInput SizeXX"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #196', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""XXMin time (s)XX"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #197', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""XXMax time (s)XX"", ""Avg time (s)""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 69, 'description': ['        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n+        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""XXAvg time (s)XX""],\n         result[0],\n         result[1],\n         result[2],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #199', 'line': 70, 'description': ['        result[0],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #200', 'line': 71, 'description': ['        result[1],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #201', 'line': 72, 'description': ['        result[2],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #202', 'line': 73, 'description': ['        result[3],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #203', 'line': 74, 'description': ['        result[4],'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 75, 'description': ['    ]'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [""Input Size"", ""Min time (s)"", ""Max time (s)"", ""Avg time (s)""],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n     print(table)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #205', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = tabulate(data, headers=""XXfirstrowXX"")\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #206', 'line': 77, 'description': ['    table = tabulate(data, headers=""firstrow"")'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=""firstrow"")\n+    table = None\n     print(table)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #207', 'line': 78, 'description': ['    print(table)'], 'failure': [{'inner': '--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=""firstrow"")\n-    print(table)\n+    print(None)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0
