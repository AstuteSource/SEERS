.//FunctionDef/body//If[ancestor::If and not(parent::orelse)],//FunctionDef[not(args/arg/annotation) or not(returns)],"//ImportFrom[@module='__future']/alias[not(starts-with(@name, 'division') or starts-with(@name, 'absolute_import') or starts-with(@name, 'print_function') or starts-with(@name, 'unicode_literals'))]",//FunctionDef/body/For[target/Name/@id = iter/Name/@id],"//*[starts-with(., 'with open')]",//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)],//Try/ExceptHandler[not(ExceptHandler/type)],//FunctionDef//For[.//For],.//Try/ExceptHandler[not(ExceptHandler/type)],//Assert[count(.//Call[func/Name/@id='test_function']) > 0],"//FunctionDef[@name=""init""]/body/Return",//FunctionDef//if//For,.//ClassDef,//FunctionDef[@type='str']/body/Assert,//FunctionDef//If/descendant::If,//Compare/ops/Is | //Compare/ops/Eq,.//FunctionDef/body//If,"//Compare/left[@id=""input_dirs""]/following-sibling::Compare/ops/NotEq | //Compare/comparators[@id=""input_dirs""]/following-sibling::Compare/ops/NotEq","//FunctionDef[@name=""tp""]/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id = @id]","//ImportFrom/keyword[@name=""from""]",".//FunctionDef[not(contains(@name, ""test_""))]","//FunctionDef//Call/func/Attribute[@attr=""keys""]","//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return,//function[@name='your_function_name']/*[your_xpath_condition],//FunctionDef//FunctionDef/ancestor::*,"//FunctionDef//ImportFrom[starts-with(@module, 'import') and @names=('*')]",.//FunctionDef,//FunctionDef[body//comprehension/target/Name],//FunctionDef[BreakStmt[count(ancestor::For|ancestor::While|ancestor::If) = 0]],//FunctionDef[./body/Assert/test/Tuple],//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else,mutation_category
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,1,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,1,high
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,high
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,1,0,0,0,0,
0,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,1,0,0,1,0,1,0,1,1,0,0,1,high
