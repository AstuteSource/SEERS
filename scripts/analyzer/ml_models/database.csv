filename,function_name,function_scope,patterns,mutants,mutation_score,check_ids,unique_patterns,pattern_existence,mutation_category
diagrams_output.json,pre_mutation,3-11,"[{'lineno': 6, 'coloffset': 4, 'linematch': 'if any(op in context.source for op in arithmetic_operators):', 'context': ""\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return\n    else:\n        # Skip all other mutations\n        context.skip = True"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 3, 'coloffset': 0, 'linematch': 'def pre_mutation(context):', 'context': ""from mutmut import MutationID, mutate\n\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return"", 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 3, 'coloffset': 0, 'linematch': 'def pre_mutation(context):', 'context': ""from mutmut import MutationID, mutate\n\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return"", 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 4, 'coloffset': 4, 'linematch': ""arithmetic_operators = ['+', '-', '*', '/']"", 'context': ""from mutmut import MutationID, mutate\n\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return\n    else:"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 6, 'coloffset': 4, 'linematch': 'if any(op in context.source for op in arithmetic_operators):', 'context': ""\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return\n    else:\n        # Skip all other mutations\n        context.skip = True"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #367', 'line': 9, 'description': ['    _provider = ""openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = ""openstack""\n+    _provider = ""XXopenstackXX""\n     _icon_dir = ""resources/openstack""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #368', 'line': 9, 'description': ['    _provider = ""openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = ""openstack""\n+    _provider = None\n     _icon_dir = ""resources/openstack""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #369', 'line': 10, 'description': ['    _icon_dir = ""resources/openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = ""openstack""\n-    _icon_dir = ""resources/openstack""\n+    _icon_dir = ""XXresources/openstackXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #370', 'line': 10, 'description': ['    _icon_dir = ""resources/openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = ""openstack""\n-    _icon_dir = ""resources/openstack""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #473', 'line': 5, 'description': ['    _provider = ""outscale""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -2,7 +2,7 @@\n \n \n class _Outscale(Node):\n-    _provider = ""outscale""\n+    _provider = ""XXoutscaleXX""\n     _icon_dir = ""resources/outscale""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #474', 'line': 5, 'description': ['    _provider = ""outscale""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -2,7 +2,7 @@\n \n \n class _Outscale(Node):\n-    _provider = ""outscale""\n+    _provider = None\n     _icon_dir = ""resources/outscale""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #475', 'line': 6, 'description': ['    _icon_dir = ""resources/outscale""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -3,7 +3,7 @@\n \n class _Outscale(Node):\n     _provider = ""outscale""\n-    _icon_dir = ""resources/outscale""\n+    _icon_dir = ""XXresources/outscaleXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #476', 'line': 6, 'description': ['    _icon_dir = ""resources/outscale""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -3,7 +3,7 @@\n \n class _Outscale(Node):\n     _provider = ""outscale""\n-    _icon_dir = ""resources/outscale""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #477', 'line': 8, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = ""outscale""\n     _icon_dir = ""resources/outscale""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #478', 'line': 8, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = ""outscale""\n     _icon_dir = ""resources/outscale""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #566', 'line': 9, 'description': ['    _provider = ""elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = ""elastic""\n+    _provider = ""XXelasticXX""\n     _icon_dir = ""resources/elastic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #567', 'line': 9, 'description': ['    _provider = ""elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = ""elastic""\n+    _provider = None\n     _icon_dir = ""resources/elastic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #568', 'line': 10, 'description': ['    _icon_dir = ""resources/elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = ""elastic""\n-    _icon_dir = ""resources/elastic""\n+    _icon_dir = ""XXresources/elasticXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #569', 'line': 10, 'description': ['    _icon_dir = ""resources/elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = ""elastic""\n-    _icon_dir = ""resources/elastic""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #744', 'line': 9, 'description': ['    _provider = ""azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = ""azure""\n+    _provider = ""XXazureXX""\n     _icon_dir = ""resources/azure""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #745', 'line': 9, 'description': ['    _provider = ""azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = ""azure""\n+    _provider = None\n     _icon_dir = ""resources/azure""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #746', 'line': 10, 'description': ['    _icon_dir = ""resources/azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = ""azure""\n-    _icon_dir = ""resources/azure""\n+    _icon_dir = ""XXresources/azureXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #747', 'line': 10, 'description': ['    _icon_dir = ""resources/azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = ""azure""\n-    _icon_dir = ""resources/azure""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1402', 'line': 9, 'description': ['    _provider = ""onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = ""onprem""\n+    _provider = ""XXonpremXX""\n     _icon_dir = ""resources/onprem""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1403', 'line': 9, 'description': ['    _provider = ""onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = ""onprem""\n+    _provider = None\n     _icon_dir = ""resources/onprem""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1404', 'line': 10, 'description': ['    _icon_dir = ""resources/onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = ""onprem""\n-    _icon_dir = ""resources/onprem""\n+    _icon_dir = ""XXresources/onpremXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1405', 'line': 10, 'description': ['    _icon_dir = ""resources/onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = ""onprem""\n-    _icon_dir = ""resources/onprem""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1710', 'line': 9, 'description': ['    _provider = ""k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = ""k8s""\n+    _provider = ""XXk8sXX""\n     _icon_dir = ""resources/k8s""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1711', 'line': 9, 'description': ['    _provider = ""k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = ""k8s""\n+    _provider = None\n     _icon_dir = ""resources/k8s""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1712', 'line': 10, 'description': ['    _icon_dir = ""resources/k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = ""k8s""\n-    _icon_dir = ""resources/k8s""\n+    _icon_dir = ""XXresources/k8sXX""\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1713', 'line': 10, 'description': ['    _icon_dir = ""resources/k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = ""k8s""\n-    _icon_dir = ""resources/k8s""\n+    _icon_dir = None\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1828', 'line': 9, 'description': ['    _provider = ""digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = ""digitalocean""\n+    _provider = ""XXdigitaloceanXX""\n     _icon_dir = ""resources/digitalocean""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1829', 'line': 9, 'description': ['    _provider = ""digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = ""digitalocean""\n+    _provider = None\n     _icon_dir = ""resources/digitalocean""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1830', 'line': 10, 'description': ['    _icon_dir = ""resources/digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = ""digitalocean""\n-    _icon_dir = ""resources/digitalocean""\n+    _icon_dir = ""XXresources/digitaloceanXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1831', 'line': 10, 'description': ['    _icon_dir = ""resources/digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = ""digitalocean""\n-    _icon_dir = ""resources/digitalocean""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2048', 'line': 9, 'description': ['    _provider = ""oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = ""oci""\n+    _provider = ""XXociXX""\n     _icon_dir = ""resources/oci""\n \n     fontcolor = ""#312D2A""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2049', 'line': 9, 'description': ['    _provider = ""oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = ""oci""\n+    _provider = None\n     _icon_dir = ""resources/oci""\n \n     fontcolor = ""#312D2A""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2050', 'line': 10, 'description': ['    _icon_dir = ""resources/oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = ""oci""\n-    _icon_dir = ""resources/oci""\n+    _icon_dir = ""XXresources/ociXX""\n \n     fontcolor = ""#312D2A""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2051', 'line': 10, 'description': ['    _icon_dir = ""resources/oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = ""oci""\n-    _icon_dir = ""resources/oci""\n+    _icon_dir = None\n \n     fontcolor = ""#312D2A""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2257', 'line': 9, 'description': ['    _provider = ""gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = ""gcp""\n+    _provider = ""XXgcpXX""\n     _icon_dir = ""resources/gcp""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2258', 'line': 9, 'description': ['    _provider = ""gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = ""gcp""\n+    _provider = None\n     _icon_dir = ""resources/gcp""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2259', 'line': 10, 'description': ['    _icon_dir = ""resources/gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = ""gcp""\n-    _icon_dir = ""resources/gcp""\n+    _icon_dir = ""XXresources/gcpXX""\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2260', 'line': 10, 'description': ['    _icon_dir = ""resources/gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = ""gcp""\n-    _icon_dir = ""resources/gcp""\n+    _icon_dir = None\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2572', 'line': 9, 'description': ['    _provider = ""alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = ""alibabacloud""\n+    _provider = ""XXalibabacloudXX""\n     _icon_dir = ""resources/alibabacloud""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2573', 'line': 9, 'description': ['    _provider = ""alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = ""alibabacloud""\n+    _provider = None\n     _icon_dir = ""resources/alibabacloud""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2574', 'line': 10, 'description': ['    _icon_dir = ""resources/alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = ""alibabacloud""\n-    _icon_dir = ""resources/alibabacloud""\n+    _icon_dir = ""XXresources/alibabacloudXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2575', 'line': 10, 'description': ['    _icon_dir = ""resources/alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = ""alibabacloud""\n-    _icon_dir = ""resources/alibabacloud""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2889', 'line': 9, 'description': ['    _provider = ""ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = ""ibm""\n+    _provider = ""XXibmXX""\n     _icon_dir = ""resources/ibm""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2890', 'line': 9, 'description': ['    _provider = ""ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = ""ibm""\n+    _provider = None\n     _icon_dir = ""resources/ibm""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2891', 'line': 10, 'description': ['    _icon_dir = ""resources/ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = ""ibm""\n-    _icon_dir = ""resources/ibm""\n+    _icon_dir = ""XXresources/ibmXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2892', 'line': 10, 'description': ['    _icon_dir = ""resources/ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = ""ibm""\n-    _icon_dir = ""resources/ibm""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3194', 'line': 9, 'description': ['    _provider = ""firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = ""firebase""\n+    _provider = ""XXfirebaseXX""\n     _icon_dir = ""resources/firebase""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3195', 'line': 9, 'description': ['    _provider = ""firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = ""firebase""\n+    _provider = None\n     _icon_dir = ""resources/firebase""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3196', 'line': 10, 'description': ['    _icon_dir = ""resources/firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = ""firebase""\n-    _icon_dir = ""resources/firebase""\n+    _icon_dir = ""XXresources/firebaseXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3197', 'line': 10, 'description': ['    _icon_dir = ""resources/firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = ""firebase""\n-    _icon_dir = ""resources/firebase""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3276', 'line': 9, 'description': ['    _provider = ""programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = ""programming""\n+    _provider = ""XXprogrammingXX""\n     _icon_dir = ""resources/programming""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3277', 'line': 9, 'description': ['    _provider = ""programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = ""programming""\n+    _provider = None\n     _icon_dir = ""resources/programming""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3278', 'line': 10, 'description': ['    _icon_dir = ""resources/programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = ""programming""\n-    _icon_dir = ""resources/programming""\n+    _icon_dir = ""XXresources/programmingXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3279', 'line': 10, 'description': ['    _icon_dir = ""resources/programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = ""programming""\n-    _icon_dir = ""resources/programming""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3446', 'line': 9, 'description': ['    provider = ""generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = ""generic""\n+    provider = ""XXgenericXX""\n     _icon_dir = ""resources/generic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3447', 'line': 9, 'description': ['    provider = ""generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = ""generic""\n+    provider = None\n     _icon_dir = ""resources/generic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3448', 'line': 10, 'description': ['    _icon_dir = ""resources/generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = ""generic""\n-    _icon_dir = ""resources/generic""\n+    _icon_dir = ""XXresources/genericXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3449', 'line': 10, 'description': ['    _icon_dir = ""resources/generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = ""generic""\n-    _icon_dir = ""resources/generic""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3763', 'line': 9, 'description': ['    _provider = ""aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = ""aws""\n+    _provider = ""XXawsXX""\n     _icon_dir = ""resources/aws""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3764', 'line': 9, 'description': ['    _provider = ""aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = ""aws""\n+    _provider = None\n     _icon_dir = ""resources/aws""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3765', 'line': 10, 'description': ['    _icon_dir = ""resources/aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = ""aws""\n-    _icon_dir = ""resources/aws""\n+    _icon_dir = ""XXresources/awsXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3766', 'line': 10, 'description': ['    _icon_dir = ""resources/aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = ""aws""\n-    _icon_dir = ""resources/aws""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4603', 'line': 11, 'description': ['    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n-    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n+    title = f\'XX<font point-size=""12""><b>{html.escape(name)}</b></font><br/>XX\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4604', 'line': 11, 'description': ['    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n-    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n+    title = None\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4718', 'line': 9, 'description': ['    _provider = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = ""custom""\n+    _provider = ""XXcustomXX""\n     _type = ""custom""\n     _icon_dir = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4719', 'line': 9, 'description': ['    _provider = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = ""custom""\n+    _provider = None\n     _type = ""custom""\n     _icon_dir = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4720', 'line': 10, 'description': ['    _type = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = ""custom""\n-    _type = ""custom""\n+    _type = ""XXcustomXX""\n     _icon_dir = None\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4721', 'line': 10, 'description': ['    _type = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = ""custom""\n-    _type = ""custom""\n+    _type = None\n     _icon_dir = None\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4722', 'line': 11, 'description': ['    _icon_dir = None'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -8,7 +8,7 @@\n class Custom(Node):\n     _provider = ""custom""\n     _type = ""custom""\n-    _icon_dir = None\n+    _icon_dir = """"\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4758', 'line': 9, 'description': ['    _provider = ""saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = ""saas""\n+    _provider = ""XXsaasXX""\n     _icon_dir = ""resources/saas""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4759', 'line': 9, 'description': ['    _provider = ""saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = ""saas""\n+    _provider = None\n     _icon_dir = ""resources/saas""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4760', 'line': 10, 'description': ['    _icon_dir = ""resources/saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = ""saas""\n-    _icon_dir = ""resources/saas""\n+    _icon_dir = ""XXresources/saasXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4761', 'line': 10, 'description': ['    _icon_dir = ""resources/saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = ""saas""\n-    _icon_dir = ""resources/saas""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4838', 'line': 9, 'description': ['    _provider = ""base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = ""base""\n+    _provider = ""XXbaseXX""\n     _icon_dir = ""resources/base""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4839', 'line': 9, 'description': ['    _provider = ""base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = ""base""\n+    _provider = None\n     _icon_dir = ""resources/base""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4840', 'line': 10, 'description': ['    _icon_dir = ""resources/base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = ""base""\n-    _icon_dir = ""resources/base""\n+    _icon_dir = ""XXresources/baseXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4841', 'line': 10, 'description': ['    _icon_dir = ""resources/base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = ""base""\n-    _icon_dir = ""resources/base""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'FLV001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,render,193-198,"[{'lineno': 194, 'coloffset': 8, 'linematch': 'if isinstance(self.outformat, list):', 'context': '        """"""Create a subgraph for clustering""""""\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 193, 'coloffset': 4, 'linematch': 'def render(self) -> None:', 'context': '    def subgraph(self, dot: Digraph) -> None:\n        """"""Create a subgraph for clustering""""""\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 193, 'coloffset': 4, 'linematch': 'def render(self) -> None:', 'context': '    def subgraph(self, dot: Digraph) -> None:\n        """"""Create a subgraph for clustering""""""\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 194, 'coloffset': 8, 'linematch': 'if isinstance(self.outformat, list):', 'context': '        """"""Create a subgraph for clustering""""""\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #107', 'line': 196, 'description': ['                self.dot.render(format=one_format, view=self.show, quiet=True)'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -193,7 +193,7 @@\n     def render(self) -> None:\n         if isinstance(self.outformat, list):\n             for one_format in self.outformat:\n-                self.dot.render(format=one_format, view=self.show, quiet=True)\n+                self.dot.render(format=one_format, view=self.show, quiet=False)\n         else:\n             self.dot.render(format=self.outformat, view=self.show, quiet=True)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #108', 'line': 198, 'description': ['            self.dot.render(format=self.outformat, view=self.show, quiet=True)'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -195,7 +195,7 @@\n             for one_format in self.outformat:\n                 self.dot.render(format=one_format, view=self.show, quiet=True)\n         else:\n-            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n+            self.dot.render(format=self.outformat, view=self.show, quiet=False)\n \n \n class Cluster:\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,__init__,446-487,"[{'lineno': 466, 'coloffset': 8, 'linematch': 'if node is not None:', 'context': '        :param color: Edge color.\n        :param style: Edge style.\n        :param attrs: Other edge attributes\n        """"""\n        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 479, 'coloffset': 8, 'linematch': 'if label:', 'context': '        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 483, 'coloffset': 8, 'linematch': 'if color:', 'context': '        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color\n        if style:\n            self._attrs[""style""] = style\n        self._attrs.update(attrs)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 485, 'coloffset': 8, 'linematch': 'if style:', 'context': '            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color\n        if style:\n            self._attrs[""style""] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implement Self - Node or Edge and Self - [Nodes]""""""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 446, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '        ""fontname"": ""XXSans-SerifXX"",\n        ""fontsize"": ""13"",\n    }\n\n    def __init__(\n        self,\n        node: ""Node"" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = """",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 18, 'coloffset': 4, 'linematch': 'def __init__(self, label, icon_path, *args, **kwargs):', 'context': '\n    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 479, 'coloffset': 8, 'linematch': 'if label:', 'context': '        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 483, 'coloffset': 8, 'linematch': 'if color:', 'context': '        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color\n        if style:\n            self._attrs[""style""] = style\n        self._attrs.update(attrs)\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 485, 'coloffset': 8, 'linematch': 'if style:', 'context': '            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color\n        if style:\n            self._attrs[""style""] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implement Self - Node or Edge and Self - [Nodes]""""""', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 446, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '        ""fontname"": ""XXSans-SerifXX"",\n        ""fontsize"": ""13"",\n    }\n\n    def __init__(\n        self,\n        node: ""Node"" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = """",', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 456, 'coloffset': 8, 'linematch': '""""""Edge represents an edge between two nodes.', 'context': '        color: str = """",\n        style: str = """",\n        **attrs: Dict,\n    ):\n        """"""Edge represents an edge between two nodes.\n\n        :param node: Parent node.\n        :param forward: Points forward.\n        :param reverse: Points backward.\n        :param label: Edge label.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 466, 'coloffset': 8, 'linematch': 'if node is not None:', 'context': '        :param color: Edge color.\n        :param style: Edge style.\n        :param attrs: Other edge attributes\n        """"""\n        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 469, 'coloffset': 8, 'linematch': 'self.node = node', 'context': '        """"""\n        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 470, 'coloffset': 8, 'linematch': 'self.forward = forward', 'context': '        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n\n        # Set attributes.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 471, 'coloffset': 8, 'linematch': 'self.reverse = reverse', 'context': '            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n\n        # Set attributes.\n        for k, v in self._default_edge_attrs.items():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 473, 'coloffset': 8, 'linematch': 'self._attrs = {}', 'context': '        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n\n        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 476, 'coloffset': 8, 'linematch': 'for k, v in self._default_edge_attrs.items():', 'context': '\n        self._attrs = {}\n\n        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 479, 'coloffset': 8, 'linematch': 'if label:', 'context': '        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 483, 'coloffset': 8, 'linematch': 'if color:', 'context': '        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color\n        if style:\n            self._attrs[""style""] = style\n        self._attrs.update(attrs)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 485, 'coloffset': 8, 'linematch': 'if style:', 'context': '            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[""label""] = label\n        if color:\n            self._attrs[""color""] = color\n        if style:\n            self._attrs[""style""] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implement Self - Node or Edge and Self - [Nodes]""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 487, 'coloffset': 8, 'linematch': 'self._attrs.update(attrs)', 'context': '        if color:\n            self._attrs[""color""] = color\n        if style:\n            self._attrs[""style""] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implement Self - Node or Edge and Self - [Nodes]""""""\n        return self.connect(other)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 19, 'coloffset': 8, 'linematch': 'self._icon = icon_path', 'context': '    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 20, 'coloffset': 8, 'linematch': 'super().__init__(label, *args, **kwargs)', 'context': '        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 446, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '        ""fontname"": ""XXSans-SerifXX"",\n        ""fontsize"": ""13"",\n    }\n\n    def __init__(\n        self,\n        node: ""Node"" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = """",', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 446, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '        ""fontname"": ""XXSans-SerifXX"",\n        ""fontsize"": ""13"",\n    }\n\n    def __init__(\n        self,\n        node: ""Node"" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = """",', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #224', 'line': 449, 'description': ['        forward: bool = False,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -446,7 +446,7 @@\n     def __init__(\n         self,\n         node: ""Node"" = None,\n-        forward: bool = False,\n+        forward: bool = True,\n         reverse: bool = False,\n         label: str = """",\n         color: str = """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #225', 'line': 450, 'description': ['        reverse: bool = False,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -447,7 +447,7 @@\n         self,\n         node: ""Node"" = None,\n         forward: bool = False,\n-        reverse: bool = False,\n+        reverse: bool = True,\n         label: str = """",\n         color: str = """",\n         style: str = """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #226', 'line': 451, 'description': ['        label: str = """",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -448,7 +448,7 @@\n         node: ""Node"" = None,\n         forward: bool = False,\n         reverse: bool = False,\n-        label: str = """",\n+        label: str = ""XXXX"",\n         color: str = """",\n         style: str = """",\n         **attrs: Dict,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #227', 'line': 452, 'description': ['        color: str = """",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -449,7 +449,7 @@\n         forward: bool = False,\n         reverse: bool = False,\n         label: str = """",\n-        color: str = """",\n+        color: str = ""XXXX"",\n         style: str = """",\n         **attrs: Dict,\n     ):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #228', 'line': 453, 'description': ['        style: str = """",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -450,7 +450,7 @@\n         reverse: bool = False,\n         label: str = """",\n         color: str = """",\n-        style: str = """",\n+        style: str = ""XXXX"",\n         **attrs: Dict,\n     ):\n         """"""Edge represents an edge between two nodes.\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #229', 'line': 466, 'description': ['        if node is not None:'], 'failure': []}, {'name': 'Mutant #230', 'line': 469, 'description': ['        self.node = node'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -466,7 +466,7 @@\n         if node is not None:\n             assert isinstance(node, Node)\n \n-        self.node = node\n+        self.node = None\n         self.forward = forward\n         self.reverse = reverse\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #231', 'line': 470, 'description': ['        self.forward = forward'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -467,7 +467,7 @@\n             assert isinstance(node, Node)\n \n         self.node = node\n-        self.forward = forward\n+        self.forward = None\n         self.reverse = reverse\n \n         self._attrs = {}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #232', 'line': 471, 'description': ['        self.reverse = reverse'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -468,7 +468,7 @@\n \n         self.node = node\n         self.forward = forward\n-        self.reverse = reverse\n+        self.reverse = None\n \n         self._attrs = {}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #233', 'line': 473, 'description': ['        self._attrs = {}'], 'failure': []}, {'name': 'Mutant #234', 'line': 477, 'description': ['            self._attrs[k] = v'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -474,7 +474,7 @@\n \n         # Set attributes.\n         for k, v in self._default_edge_attrs.items():\n-            self._attrs[k] = v\n+            self._attrs[k] = None\n \n         if label:\n             # Graphviz complaining about using label for edges, so replace it with xlabel.\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #235', 'line': 482, 'description': ['            self._attrs[""label""] = label'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -479,7 +479,7 @@\n         if label:\n             # Graphviz complaining about using label for edges, so replace it with xlabel.\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n-            self._attrs[""label""] = label\n+            self._attrs[""XXlabelXX""] = label\n         if color:\n             self._attrs[""color""] = color\n         if style:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #236', 'line': 482, 'description': ['            self._attrs[""label""] = label'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -479,7 +479,7 @@\n         if label:\n             # Graphviz complaining about using label for edges, so replace it with xlabel.\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n-            self._attrs[""label""] = label\n+            self._attrs[""label""] = None\n         if color:\n             self._attrs[""color""] = color\n         if style:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #237', 'line': 484, 'description': ['            self._attrs[""color""] = color'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -481,7 +481,7 @@\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n             self._attrs[""label""] = label\n         if color:\n-            self._attrs[""color""] = color\n+            self._attrs[""XXcolorXX""] = color\n         if style:\n             self._attrs[""style""] = style\n         self._attrs.update(attrs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #238', 'line': 484, 'description': ['            self._attrs[""color""] = color'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -481,7 +481,7 @@\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n             self._attrs[""label""] = label\n         if color:\n-            self._attrs[""color""] = color\n+            self._attrs[""color""] = None\n         if style:\n             self._attrs[""style""] = style\n         self._attrs.update(attrs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #239', 'line': 486, 'description': ['            self._attrs[""style""] = style'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -483,7 +483,7 @@\n         if color:\n             self._attrs[""color""] = color\n         if style:\n-            self._attrs[""style""] = style\n+            self._attrs[""XXstyleXX""] = style\n         self._attrs.update(attrs)\n \n     def __sub__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #240', 'line': 486, 'description': ['            self._attrs[""style""] = style'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -483,7 +483,7 @@\n         if color:\n             self._attrs[""color""] = color\n         if style:\n-            self._attrs[""style""] = style\n+            self._attrs[""style""] = None\n         self._attrs.update(attrs)\n \n     def __sub__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.76470588235294,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,append,515-525,"[{'lineno': 518, 'coloffset': 12, 'linematch': 'if isinstance(o, Edge):', 'context': '\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse\n                self._attrs = o.attrs.copy()\n                result.append(o)\n            else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 515, 'coloffset': 4, 'linematch': 'def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:', 'context': '    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 515, 'coloffset': 4, 'linematch': 'def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:', 'context': '    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 516, 'coloffset': 8, 'linematch': 'result = []', 'context': '        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse\n                self._attrs = o.attrs.copy()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 517, 'coloffset': 8, 'linematch': 'for o in other:', 'context': '        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse\n                self._attrs = o.attrs.copy()\n                result.append(o)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 525, 'coloffset': 8, 'linematch': 'return result', 'context': '                self._attrs = o.attrs.copy()\n                result.append(o)\n            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #247', 'line': 516, 'description': ['        result = []'], 'failure': []}, {'name': 'Mutant #248', 'line': 519, 'description': ['                o.forward = forward if forward else o.forward'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -516,7 +516,7 @@\n         result = []\n         for o in other:\n             if isinstance(o, Edge):\n-                o.forward = forward if forward else o.forward\n+                o.forward = None\n                 o.reverse = forward if forward else o.reverse\n                 self._attrs = o.attrs.copy()\n                 result.append(o)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #249', 'line': 520, 'description': ['                o.reverse = forward if forward else o.reverse'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -517,7 +517,7 @@\n         for o in other:\n             if isinstance(o, Edge):\n                 o.forward = forward if forward else o.forward\n-                o.reverse = forward if forward else o.reverse\n+                o.reverse = None\n                 self._attrs = o.attrs.copy()\n                 result.append(o)\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #250', 'line': 521, 'description': ['                self._attrs = o.attrs.copy()'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -518,7 +518,7 @@\n             if isinstance(o, Edge):\n                 o.forward = forward if forward else o.forward\n                 o.reverse = forward if forward else o.reverse\n-                self._attrs = o.attrs.copy()\n+                self._attrs = None\n                 result.append(o)\n             else:\n                 result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n', 'type': 'failure', 'message': 'bad_survived'}]}]",25.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,connect,527-540,"[{'lineno': 528, 'coloffset': 8, 'linematch': 'if isinstance(other, list):', 'context': '                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 532, 'coloffset': 8, 'linematch': 'elif isinstance(other, Edge):', 'context': '        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 536, 'coloffset': 12, 'linematch': 'if self.node is not None:', 'context': '        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)\n            else:\n                self.node = other\n                return self\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 527, 'coloffset': 4, 'linematch': 'def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 532, 'coloffset': 8, 'linematch': 'elif isinstance(other, Edge):', 'context': '        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 536, 'coloffset': 12, 'linematch': 'if self.node is not None:', 'context': '        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)\n            else:\n                self.node = other\n                return self\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 527, 'coloffset': 4, 'linematch': 'def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 528, 'coloffset': 8, 'linematch': 'if isinstance(other, list):', 'context': '                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 527, 'coloffset': 4, 'linematch': 'def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 527, 'coloffset': 4, 'linematch': 'def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 527, 'coloffset': 4, 'linematch': 'def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #251', 'line': 533, 'description': ['            self._attrs = other._attrs.copy()'], 'failure': []}, {'name': 'Mutant #252', 'line': 536, 'description': ['            if self.node is not None:'], 'failure': []}, {'name': 'Mutant #253', 'line': 539, 'description': ['                self.node = other'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001' 'MRET001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,attrs,543-552,"[{'lineno': 544, 'coloffset': 8, 'linematch': 'if self.forward and self.reverse:', 'context': '                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:\n            direction = ""back""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 546, 'coloffset': 8, 'linematch': 'elif self.forward:', 'context': '    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:\n            direction = ""back""\n        else:\n            direction = ""none""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 548, 'coloffset': 8, 'linematch': 'elif self.reverse:', 'context': '        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:\n            direction = ""back""\n        else:\n            direction = ""none""\n        return {**self._attrs, ""dir"": direction}\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 543, 'coloffset': 4, 'linematch': 'def attrs(self) -> Dict:', 'context': '                self.node = other\n                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 546, 'coloffset': 8, 'linematch': 'elif self.forward:', 'context': '    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:\n            direction = ""back""\n        else:\n            direction = ""none""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 548, 'coloffset': 8, 'linematch': 'elif self.reverse:', 'context': '        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:\n            direction = ""back""\n        else:\n            direction = ""none""\n        return {**self._attrs, ""dir"": direction}\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 543, 'coloffset': 4, 'linematch': 'def attrs(self) -> Dict:', 'context': '                self.node = other\n                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 544, 'coloffset': 8, 'linematch': 'if self.forward and self.reverse:', 'context': '                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = ""both""\n        elif self.forward:\n            direction = ""forward""\n        elif self.reverse:\n            direction = ""back""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 552, 'coloffset': 8, 'linematch': 'return {**self._attrs, ""dir"": direction}', 'context': '        elif self.reverse:\n            direction = ""back""\n        else:\n            direction = ""none""\n        return {**self._attrs, ""dir"": direction}\n\n\nGroup = Cluster', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #255', 'line': 544, 'description': ['        if self.forward and self.reverse:'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -541,7 +541,7 @@\n \n     @property\n     def attrs(self) -> Dict:\n-        if self.forward and self.reverse:\n+        if self.forward or self.reverse:\n             direction = ""both""\n         elif self.forward:\n             direction = ""forward""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #256', 'line': 545, 'description': ['            direction = ""both""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -542,7 +542,7 @@\n     @property\n     def attrs(self) -> Dict:\n         if self.forward and self.reverse:\n-            direction = ""both""\n+            direction = ""XXbothXX""\n         elif self.forward:\n             direction = ""forward""\n         elif self.reverse:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #257', 'line': 545, 'description': ['            direction = ""both""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -542,7 +542,7 @@\n     @property\n     def attrs(self) -> Dict:\n         if self.forward and self.reverse:\n-            direction = ""both""\n+            direction = None\n         elif self.forward:\n             direction = ""forward""\n         elif self.reverse:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #258', 'line': 547, 'description': ['            direction = ""forward""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -544,7 +544,7 @@\n         if self.forward and self.reverse:\n             direction = ""both""\n         elif self.forward:\n-            direction = ""forward""\n+            direction = ""XXforwardXX""\n         elif self.reverse:\n             direction = ""back""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #259', 'line': 547, 'description': ['            direction = ""forward""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -544,7 +544,7 @@\n         if self.forward and self.reverse:\n             direction = ""both""\n         elif self.forward:\n-            direction = ""forward""\n+            direction = None\n         elif self.reverse:\n             direction = ""back""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #260', 'line': 549, 'description': ['            direction = ""back""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -546,7 +546,7 @@\n         elif self.forward:\n             direction = ""forward""\n         elif self.reverse:\n-            direction = ""back""\n+            direction = ""XXbackXX""\n         else:\n             direction = ""none""\n         return {**self._attrs, ""dir"": direction}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #261', 'line': 549, 'description': ['            direction = ""back""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -546,7 +546,7 @@\n         elif self.forward:\n             direction = ""forward""\n         elif self.reverse:\n-            direction = ""back""\n+            direction = None\n         else:\n             direction = ""none""\n         return {**self._attrs, ""dir"": direction}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #262', 'line': 551, 'description': ['            direction = ""none""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -548,7 +548,7 @@\n         elif self.reverse:\n             direction = ""back""\n         else:\n-            direction = ""none""\n+            direction = ""XXnoneXX""\n         return {**self._attrs, ""dir"": direction}\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #263', 'line': 551, 'description': ['            direction = ""none""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -548,7 +548,7 @@\n         elif self.reverse:\n             direction = ""back""\n         else:\n-            direction = ""none""\n+            direction = None\n         return {**self._attrs, ""dir"": direction}\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #264', 'line': 552, 'description': ['        return {**self._attrs, ""dir"": direction}'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -549,7 +549,7 @@\n             direction = ""back""\n         else:\n             direction = ""none""\n-        return {**self._attrs, ""dir"": direction}\n+        return {*self._attrs, ""dir"": direction}\n \n \n Group = Cluster\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #265', 'line': 552, 'description': ['        return {**self._attrs, ""dir"": direction}'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -549,7 +549,7 @@\n             direction = ""back""\n         else:\n             direction = ""none""\n-        return {**self._attrs, ""dir"": direction}\n+        return {**self._attrs, ""XXdirXX"": direction}\n \n \n Group = Cluster\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,C4Node,40-57,"[{'lineno': 54, 'coloffset': 4, 'linematch': 'if not description:', 'context': '        ""fillcolor"": ""dodgerblue3"",\n        ""fontcolor"": ""white"",\n    }\n    # collapse boxes to a smaller form if they don\'t have a description\n    if not description:\n        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 40, 'coloffset': 0, 'linematch': 'def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):', 'context': '    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'\n\n\ndef C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n    key = f""{type}: {technology}"" if technology else type\n    node_attributes = {\n        ""label"": _format_node_label(name, key, description),\n        ""labelloc"": ""c"",\n        ""shape"": ""rect"",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 41, 'coloffset': 4, 'linematch': 'key = f""{type}: {technology}"" if technology else type', 'context': '    return f\'<<font point-size=""10"">{text}</font>>\'\n\n\ndef C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n    key = f""{type}: {technology}"" if technology else type\n    node_attributes = {\n        ""label"": _format_node_label(name, key, description),\n        ""labelloc"": ""c"",\n        ""shape"": ""rect"",\n        ""width"": ""2.6"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 42, 'coloffset': 4, 'linematch': 'node_attributes = {', 'context': '\n\ndef C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n    key = f""{type}: {technology}"" if technology else type\n    node_attributes = {\n        ""label"": _format_node_label(name, key, description),\n        ""labelloc"": ""c"",\n        ""shape"": ""rect"",\n        ""width"": ""2.6"",\n        ""height"": ""1.6"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 54, 'coloffset': 4, 'linematch': 'if not description:', 'context': '        ""fillcolor"": ""dodgerblue3"",\n        ""fontcolor"": ""white"",\n    }\n    # collapse boxes to a smaller form if they don\'t have a description\n    if not description:\n        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 56, 'coloffset': 4, 'linematch': 'node_attributes.update(kwargs)', 'context': '    }\n    # collapse boxes to a smaller form if they don\'t have a description\n    if not description:\n        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n\ndef Container(name, technology="""", description="""", **kwargs):\n    container_attributes = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 57, 'coloffset': 4, 'linematch': 'return Node(**node_attributes)', 'context': '    # collapse boxes to a smaller form if they don\'t have a description\n    if not description:\n        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n\ndef Container(name, technology="""", description="""", **kwargs):\n    container_attributes = {\n        ""name"": name,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #6', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #7', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #8', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #9', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #10', 'line': 42, 'description': ['    __curvestyles = (""ortho"", ""curved"")'], 'failure': []}, {'name': 'Mutant #11', 'line': 42, 'description': ['    __curvestyles = (""ortho"", ""curved"")'], 'failure': []}, {'name': 'Mutant #12', 'line': 42, 'description': ['    __curvestyles = (""ortho"", ""curved"")'], 'failure': []}, {'name': 'Mutant #13', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #14', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #15', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #16', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #17', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #18', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #19', 'line': 47, 'description': ['        ""pad"": ""2.0"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""pad"": ""2.0"",\n+        ""XXpadXX"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #20', 'line': 47, 'description': ['        ""pad"": ""2.0"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""pad"": ""2.0"",\n+        ""pad"": ""XX2.0XX"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #21', 'line': 48, 'description': ['        ""splines"": ""ortho"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n-        ""splines"": ""ortho"",\n+        ""XXsplinesXX"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #22', 'line': 48, 'description': ['        ""splines"": ""ortho"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n-        ""splines"": ""ortho"",\n+        ""splines"": ""XXorthoXX"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #23', 'line': 49, 'description': ['        ""nodesep"": ""0.60"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n-        ""nodesep"": ""0.60"",\n+        ""XXnodesepXX"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 49, 'description': ['        ""nodesep"": ""0.60"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n-        ""nodesep"": ""0.60"",\n+        ""nodesep"": ""XX0.60XX"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 50, 'description': ['        ""ranksep"": ""0.75"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n-        ""ranksep"": ""0.75"",\n+        ""XXranksepXX"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 50, 'description': ['        ""ranksep"": ""0.75"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n-        ""ranksep"": ""0.75"",\n+        ""ranksep"": ""XX0.75XX"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #27', 'line': 51, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""XXfontnameXX"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 51, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""fontname"": ""XXSans-SerifXX"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 52, 'description': ['        ""fontsize"": ""15"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""15"",\n+        ""XXfontsizeXX"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 52, 'description': ['        ""fontsize"": ""15"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""15"",\n+        ""fontsize"": ""XX15XX"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 53, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""XXfontcolorXX"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 53, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""fontcolor"": ""XX#2D3436XX"",\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 54, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #34', 'line': 56, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n-        ""shape"": ""box"",\n+        ""XXshapeXX"": ""box"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #35', 'line': 56, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n-        ""shape"": ""box"",\n+        ""shape"": ""XXboxXX"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #36', 'line': 57, 'description': ['        ""style"": ""rounded"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n-        ""style"": ""rounded"",\n+        ""XXstyleXX"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #37', 'line': 57, 'description': ['        ""style"": ""rounded"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n-        ""style"": ""rounded"",\n+        ""style"": ""XXroundedXX"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4630', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology=""XXXX"", description="""", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4631', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology="""", description=""XXXX"", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4632', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology="""", description="""", type=""XXContainerXX"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4633', 'line': 41, 'description': ['    key = f""{type}: {technology}"" if technology else type'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n-    key = f""{type}: {technology}"" if technology else type\n+    key = f""XX{type}: {technology}XX"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4634', 'line': 41, 'description': ['    key = f""{type}: {technology}"" if technology else type'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n-    key = f""{type}: {technology}"" if technology else type\n+    key = None\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4635', 'line': 43, 'description': ['        ""label"": _format_node_label(name, key, description),'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n-        ""label"": _format_node_label(name, key, description),\n+        ""XXlabelXX"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4636', 'line': 44, 'description': ['        ""labelloc"": ""c"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n-        ""labelloc"": ""c"",\n+        ""XXlabellocXX"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4637', 'line': 44, 'description': ['        ""labelloc"": ""c"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n-        ""labelloc"": ""c"",\n+        ""labelloc"": ""XXcXX"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4638', 'line': 45, 'description': ['        ""shape"": ""rect"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n-        ""shape"": ""rect"",\n+        ""XXshapeXX"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4639', 'line': 45, 'description': ['        ""shape"": ""rect"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n-        ""shape"": ""rect"",\n+        ""shape"": ""XXrectXX"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4640', 'line': 46, 'description': ['        ""width"": ""2.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n-        ""width"": ""2.6"",\n+        ""XXwidthXX"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4641', 'line': 46, 'description': ['        ""width"": ""2.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n-        ""width"": ""2.6"",\n+        ""width"": ""XX2.6XX"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4642', 'line': 47, 'description': ['        ""height"": ""1.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n-        ""height"": ""1.6"",\n+        ""XXheightXX"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4643', 'line': 47, 'description': ['        ""height"": ""1.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n-        ""height"": ""1.6"",\n+        ""height"": ""XX1.6XX"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4644', 'line': 48, 'description': ['        ""fixedsize"": ""true"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n-        ""fixedsize"": ""true"",\n+        ""XXfixedsizeXX"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4645', 'line': 48, 'description': ['        ""fixedsize"": ""true"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n-        ""fixedsize"": ""true"",\n+        ""fixedsize"": ""XXtrueXX"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4646', 'line': 49, 'description': ['        ""style"": ""filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n-        ""style"": ""filled"",\n+        ""XXstyleXX"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4647', 'line': 49, 'description': ['        ""style"": ""filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n-        ""style"": ""filled"",\n+        ""style"": ""XXfilledXX"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4648', 'line': 50, 'description': ['        ""fillcolor"": ""dodgerblue3"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n-        ""fillcolor"": ""dodgerblue3"",\n+        ""XXfillcolorXX"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4649', 'line': 50, 'description': ['        ""fillcolor"": ""dodgerblue3"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n-        ""fillcolor"": ""dodgerblue3"",\n+        ""fillcolor"": ""XXdodgerblue3XX"",\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4650', 'line': 51, 'description': ['        ""fontcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n-        ""fontcolor"": ""white"",\n+        ""XXfontcolorXX"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4651', 'line': 51, 'description': ['        ""fontcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n-        ""fontcolor"": ""white"",\n+        ""fontcolor"": ""XXwhiteXX"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4652', 'line': 52, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #4653', 'line': 54, 'description': ['    if not description:'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({""width"": ""2"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4654', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""XXwidthXX"": ""2"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4655', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""XX2XX"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4656', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""2"", ""XXheightXX"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4657', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""2"", ""height"": ""XX1XX""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",26.229508196721312,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,up_or_title,19-24,"[{'lineno': 20, 'coloffset': 4, 'linematch': 'if s in cfg.UPPER_WORDS.get(pvd, ()):', 'context': '    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 22, 'coloffset': 4, 'linematch': 'if s in cfg.TITLE_WORDS.get(pvd, {}):', 'context': '\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 19, 'coloffset': 0, 'linematch': 'def up_or_title(pvd: str, s: str) -> str:', 'context': '    env.filters[""up_or_title""] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 22, 'coloffset': 4, 'linematch': 'if s in cfg.TITLE_WORDS.get(pvd, {}):', 'context': '\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 20, 'coloffset': 4, 'linematch': 'if s in cfg.UPPER_WORDS.get(pvd, ()):', 'context': '    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 22, 'coloffset': 4, 'linematch': 'if s in cfg.TITLE_WORDS.get(pvd, {}):', 'context': '\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 24, 'coloffset': 4, 'linematch': 'return s.title()', 'context': '    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    """"""Generate all service node classes based on resources paths with class templates.""""""\n    tmpl = load_tmpl(cfg.TMPL_MODULE)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 19, 'coloffset': 0, 'linematch': 'def up_or_title(pvd: str, s: str) -> str:', 'context': '    env.filters[""up_or_title""] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #4725', 'line': 19, 'description': ['        self._icon = icon_path'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'F002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,generate,82-104,"[{'lineno': 94, 'coloffset': 8, 'linematch': 'if typ == pvd:', 'context': '        paths = list(filter(lambda f: ""rounded"" not in f, pngs))\n\n        # Skip the top-root directory.\n        typ = os.path.basename(root)\n        if typ == pvd:\n            continue\n\n        resource_root = os.path.relpath(root, base)\n        classes = gen_classes(pvd, typ, paths)\n        make_module(pvd, typ, classes)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 94, 'coloffset': 11, 'linematch': 'if typ == pvd:', 'context': '        paths = list(filter(lambda f: ""rounded"" not in f, pngs))\n\n        # Skip the top-root directory.\n        typ = os.path.basename(root)\n        if typ == pvd:\n            continue\n\n        resource_root = os.path.relpath(root, base)\n        classes = gen_classes(pvd, typ, paths)\n        make_module(pvd, typ, classes)', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 82, 'coloffset': 0, 'linematch': 'def generate(pvd: str) -> None:', 'context': '    with open(mod_path, ""w+"") as f:\n        f.write(content)\n\n\ndef generate(pvd: str) -> None:\n    """"""Generates a service node classes.""""""\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 83, 'coloffset': 4, 'linematch': '""""""Generates a service node classes.""""""', 'context': '        f.write(content)\n\n\ndef generate(pvd: str) -> None:\n    """"""Generates a service node classes.""""""\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 84, 'coloffset': 4, 'linematch': 'typ_paths = {}', 'context': '\n\ndef generate(pvd: str) -> None:\n    """"""Generates a service node classes.""""""\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()\n        pngs = list(filter(lambda f: f.endswith("".png""), files))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 85, 'coloffset': 4, 'linematch': 'base = base_dir()', 'context': '\ndef generate(pvd: str) -> None:\n    """"""Generates a service node classes.""""""\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()\n        pngs = list(filter(lambda f: f.endswith("".png""), files))\n        paths = list(filter(lambda f: ""rounded"" not in f, pngs))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 86, 'coloffset': 4, 'linematch': 'for root, _, files in os.walk(resource_dir(pvd)):', 'context': 'def generate(pvd: str) -> None:\n    """"""Generates a service node classes.""""""\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()\n        pngs = list(filter(lambda f: f.endswith("".png""), files))\n        paths = list(filter(lambda f: ""rounded"" not in f, pngs))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 103, 'coloffset': 4, 'linematch': 'apidoc = gen_apidoc(pvd, typ_paths)', 'context': '        make_module(pvd, typ, classes)\n\n        typ_paths[typ] = (paths, resource_root)\n    # Build API documentation\n    apidoc = gen_apidoc(pvd, typ_paths)\n    make_apidoc(pvd, apidoc)\n\n\nif __name__ == ""__main__"":\n    pvd = sys.argv[1]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 104, 'coloffset': 4, 'linematch': 'make_apidoc(pvd, apidoc)', 'context': '\n        typ_paths[typ] = (paths, resource_root)\n    # Build API documentation\n    apidoc = gen_apidoc(pvd, typ_paths)\n    make_apidoc(pvd, apidoc)\n\n\nif __name__ == ""__main__"":\n    pvd = sys.argv[1]\n    if pvd not in cfg.PROVIDERS:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #59', 'line': 82, 'description': ['        filename: str = """",'], 'failure': []}, {'name': 'Mutant #60', 'line': 83, 'description': ['        direction: str = ""LR"",'], 'failure': []}, {'name': 'Mutant #61', 'line': 84, 'description': ['        curvestyle: str = ""ortho"",'], 'failure': []}, {'name': 'Mutant #62', 'line': 85, 'description': ['        outformat: str = ""png"",'], 'failure': []}, {'name': 'Mutant #63', 'line': 86, 'description': ['        autolabel: bool = False,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -83,7 +83,7 @@\n         direction: str = ""LR"",\n         curvestyle: str = ""ortho"",\n         outformat: str = ""png"",\n-        autolabel: bool = False,\n+        autolabel: bool = True,\n         show: bool = True,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #64', 'line': 87, 'description': ['        show: bool = True,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -84,7 +84,7 @@\n         curvestyle: str = ""ortho"",\n         outformat: str = ""png"",\n         autolabel: bool = False,\n-        show: bool = True,\n+        show: bool = False,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #65', 'line': 88, 'description': ['        strict: bool = False,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -85,7 +85,7 @@\n         outformat: str = ""png"",\n         autolabel: bool = False,\n         show: bool = True,\n-        strict: bool = False,\n+        strict: bool = True,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n         edge_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4678', 'line': 84, 'description': ['def System(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description="""", external=False, **kwargs):\n+def System(name, description=""XXXX"", external=False, **kwargs):\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4679', 'line': 84, 'description': ['def System(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description="""", external=False, **kwargs):\n+def System(name, description="""", external=True, **kwargs):\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4680', 'line': 86, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4681', 'line': 87, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -84,7 +84,7 @@\n def System(name, description="""", external=False, **kwargs):\n     system_attributes = {\n         ""name"": name,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""External System"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4682', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""XXtypeXX"": ""External System"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4683', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""type"": ""XXExternal SystemXX"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4684', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""type"": ""External System"" if external else ""XXSystemXX"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4685', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""XXfillcolorXX"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4686', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""XXgray60XX"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4687', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""gray60"" if external else ""XXdodgerblue4XX"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4688', 'line': 90, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #4689', 'line': 95, 'description': ['def Person(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description="""", external=False, **kwargs):\n+def Person(name, description=""XXXX"", external=False, **kwargs):\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4690', 'line': 95, 'description': ['def Person(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description="""", external=False, **kwargs):\n+def Person(name, description="""", external=True, **kwargs):\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4691', 'line': 97, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4692', 'line': 98, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -95,7 +95,7 @@\n def Person(name, description="""", external=False, **kwargs):\n     person_attributes = {\n         ""name"": name,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4693', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""XXtypeXX"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4694', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""type"": ""XXExternal PersonXX"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4695', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""type"": ""External Person"" if external else ""XXPersonXX"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4696', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""XXfillcolorXX"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4697', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""XXgray60XX"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4698', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""gray60"" if external else ""XXdodgerblue4XX"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4699', 'line': 101, 'description': ['        ""style"": ""rounded,filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n-        ""style"": ""rounded,filled"",\n+        ""XXstyleXX"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4700', 'line': 101, 'description': ['        ""style"": ""rounded,filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n-        ""style"": ""rounded,filled"",\n+        ""style"": ""XXrounded,filledXX"",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4701', 'line': 102, 'description': ['    }'], 'failure': []}]",25.806451612903224,['CL001' 'BOOL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_aws,24-35,"[{'lineno': 32, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': '    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")\n    for p in cfg.FILE_PREFIXES[""aws""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 24, 'coloffset': 0, 'linematch': 'def cleaner_aws(f):', 'context': '    f = f.replace(""_"", ""-"")\n    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""@4x"", """")\n    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 25, 'coloffset': 4, 'linematch': 'f = f.replace(""_"", ""-"")', 'context': '    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""@4x"", """")\n    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 26, 'coloffset': 4, 'linematch': 'f = f.replace(""@4x"", """")', 'context': '\n\ndef cleaner_aws(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""@4x"", """")\n    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")\n    for p in cfg.FILE_PREFIXES[""aws""]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 27, 'coloffset': 4, 'linematch': 'f = f.replace(""@5x"", """")', 'context': '\ndef cleaner_aws(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""@4x"", """")\n    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")\n    for p in cfg.FILE_PREFIXES[""aws""]:\n        if f.startswith(p):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 28, 'coloffset': 4, 'linematch': 'f = f.replace(""2.0"", ""2-0"")', 'context': 'def cleaner_aws(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""@4x"", """")\n    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")\n    for p in cfg.FILE_PREFIXES[""aws""]:\n        if f.startswith(p):\n            f = f[len(p) :]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 29, 'coloffset': 4, 'linematch': 'f = f.replace(""-light-bg4x"", """")', 'context': '    f = f.replace(""_"", ""-"")\n    f = f.replace(""@4x"", """")\n    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")\n    for p in cfg.FILE_PREFIXES[""aws""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 30, 'coloffset': 4, 'linematch': 'f = f.replace(""-light-bg"", """")', 'context': '    f = f.replace(""@4x"", """")\n    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")\n    for p in cfg.FILE_PREFIXES[""aws""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 31, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""aws""]:', 'context': '    f = f.replace(""@5x"", """")\n    f = f.replace(""2.0"", ""2-0"")\n    f = f.replace(""-light-bg4x"", """")\n    f = f.replace(""-light-bg"", """")\n    for p in cfg.FILE_PREFIXES[""aws""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 35, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""aws""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_azure(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""("", """").replace("")"", """")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4612', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     """"""\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=41, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4613', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     """"""\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=40, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4614', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': []}, {'name': 'Mutant #4615', 'line': 27, 'description': ['    lines = [html.escape(line) for line in wrapper.wrap(description)]'], 'failure': []}, {'name': 'Mutant #4616', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines = [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4617', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': []}, {'name': 'Mutant #4618', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""XXXX""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4619', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': []}, {'name': 'Mutant #4620', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""""] * (4 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4621', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""""] * (3 + len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4622', 'line': 29, 'description': ['    return ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return ""<br/>"".join(lines)\n+    return ""XX<br/>XX"".join(lines)\n \n \n def _format_edge_label(description):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4623', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     """"""Create a graphviz label string for a C4 edge""""""\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=25, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4624', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     """"""Create a graphviz label string for a C4 edge""""""\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=24, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4625', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': []}, {'name': 'Mutant #4626', 'line': 35, 'description': ['    lines = [html.escape(line) for line in wrapper.wrap(description)]'], 'failure': []}]",40.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,cleaner_azure,38-46,"[{'lineno': 43, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': '    f = f.replace(""_"", ""-"")\n    f = f.replace(""("", """").replace("")"", """")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""azure""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 38, 'coloffset': 0, 'linematch': 'def cleaner_azure(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_azure(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""("", """").replace("")"", """")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""azure""]:\n        if f.startswith(p):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 39, 'coloffset': 4, 'linematch': 'f = f.replace(""_"", ""-"")', 'context': '    return f.lower()\n\n\ndef cleaner_azure(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""("", """").replace("")"", """")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""azure""]:\n        if f.startswith(p):\n            f = f[len(p) :]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 40, 'coloffset': 4, 'linematch': 'f = f.replace(""("", """").replace("")"", """")', 'context': '\n\ndef cleaner_azure(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""("", """").replace("")"", """")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""azure""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 41, 'coloffset': 4, 'linematch': 'f = ""-"".join(f.split())', 'context': '\ndef cleaner_azure(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""("", """").replace("")"", """")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""azure""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 42, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""azure""]:', 'context': 'def cleaner_azure(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""("", """").replace("")"", """")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""azure""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 46, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""azure""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_gcp(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #6', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #7', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #8', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #9', 'line': 41, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #10', 'line': 42, 'description': ['    __curvestyles = (""ortho"", ""curved"")'], 'failure': []}, {'name': 'Mutant #11', 'line': 42, 'description': ['    __curvestyles = (""ortho"", ""curved"")'], 'failure': []}, {'name': 'Mutant #12', 'line': 42, 'description': ['    __curvestyles = (""ortho"", ""curved"")'], 'failure': []}, {'name': 'Mutant #13', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #14', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #15', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #16', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #17', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #18', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #4630', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology=""XXXX"", description="""", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4631', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology="""", description=""XXXX"", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4632', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology="""", description="""", type=""XXContainerXX"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4633', 'line': 41, 'description': ['    key = f""{type}: {technology}"" if technology else type'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n-    key = f""{type}: {technology}"" if technology else type\n+    key = f""XX{type}: {technology}XX"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4634', 'line': 41, 'description': ['    key = f""{type}: {technology}"" if technology else type'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n-    key = f""{type}: {technology}"" if technology else type\n+    key = None\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4635', 'line': 43, 'description': ['        ""label"": _format_node_label(name, key, description),'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n-        ""label"": _format_node_label(name, key, description),\n+        ""XXlabelXX"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4636', 'line': 44, 'description': ['        ""labelloc"": ""c"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n-        ""labelloc"": ""c"",\n+        ""XXlabellocXX"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4637', 'line': 44, 'description': ['        ""labelloc"": ""c"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n-        ""labelloc"": ""c"",\n+        ""labelloc"": ""XXcXX"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4638', 'line': 45, 'description': ['        ""shape"": ""rect"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n-        ""shape"": ""rect"",\n+        ""XXshapeXX"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4639', 'line': 45, 'description': ['        ""shape"": ""rect"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n-        ""shape"": ""rect"",\n+        ""shape"": ""XXrectXX"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4640', 'line': 46, 'description': ['        ""width"": ""2.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n-        ""width"": ""2.6"",\n+        ""XXwidthXX"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4641', 'line': 46, 'description': ['        ""width"": ""2.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n-        ""width"": ""2.6"",\n+        ""width"": ""XX2.6XX"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",53.84615384615385,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,cleaner_gcp,49-56,"[{'lineno': 53, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': 'def cleaner_gcp(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""gcp""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 49, 'coloffset': 0, 'linematch': 'def cleaner_gcp(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_gcp(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""gcp""]:\n        if f.startswith(p):\n            f = f[len(p) :]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 50, 'coloffset': 4, 'linematch': 'f = f.replace(""_"", ""-"")', 'context': '    return f.lower()\n\n\ndef cleaner_gcp(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""gcp""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 51, 'coloffset': 4, 'linematch': 'f = ""-"".join(f.split())', 'context': '\n\ndef cleaner_gcp(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""gcp""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 52, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""gcp""]:', 'context': '\ndef cleaner_gcp(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""gcp""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 56, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""gcp""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_ibm(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #23', 'line': 49, 'description': ['        ""nodesep"": ""0.60"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n-        ""nodesep"": ""0.60"",\n+        ""XXnodesepXX"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 49, 'description': ['        ""nodesep"": ""0.60"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n-        ""nodesep"": ""0.60"",\n+        ""nodesep"": ""XX0.60XX"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 50, 'description': ['        ""ranksep"": ""0.75"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n-        ""ranksep"": ""0.75"",\n+        ""XXranksepXX"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 50, 'description': ['        ""ranksep"": ""0.75"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n-        ""ranksep"": ""0.75"",\n+        ""ranksep"": ""XX0.75XX"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #27', 'line': 51, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""XXfontnameXX"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 51, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""fontname"": ""XXSans-SerifXX"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 52, 'description': ['        ""fontsize"": ""15"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""15"",\n+        ""XXfontsizeXX"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 52, 'description': ['        ""fontsize"": ""15"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""15"",\n+        ""fontsize"": ""XX15XX"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 53, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""XXfontcolorXX"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 53, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""fontcolor"": ""XX#2D3436XX"",\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 54, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #34', 'line': 56, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n-        ""shape"": ""box"",\n+        ""XXshapeXX"": ""box"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #35', 'line': 56, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n-        ""shape"": ""box"",\n+        ""shape"": ""XXboxXX"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4646', 'line': 49, 'description': ['        ""style"": ""filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n-        ""style"": ""filled"",\n+        ""XXstyleXX"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4647', 'line': 49, 'description': ['        ""style"": ""filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n-        ""style"": ""filled"",\n+        ""style"": ""XXfilledXX"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4648', 'line': 50, 'description': ['        ""fillcolor"": ""dodgerblue3"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n-        ""fillcolor"": ""dodgerblue3"",\n+        ""XXfillcolorXX"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4649', 'line': 50, 'description': ['        ""fillcolor"": ""dodgerblue3"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n-        ""fillcolor"": ""dodgerblue3"",\n+        ""fillcolor"": ""XXdodgerblue3XX"",\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4650', 'line': 51, 'description': ['        ""fontcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n-        ""fontcolor"": ""white"",\n+        ""XXfontcolorXX"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4651', 'line': 51, 'description': ['        ""fontcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n-        ""fontcolor"": ""white"",\n+        ""fontcolor"": ""XXwhiteXX"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4652', 'line': 52, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #4653', 'line': 54, 'description': ['    if not description:'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({""width"": ""2"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4654', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""XXwidthXX"": ""2"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4655', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""XX2XX"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4656', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""2"", ""XXheightXX"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4657', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""2"", ""height"": ""XX1XX""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",8.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_ibm,59-66,"[{'lineno': 63, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': 'def cleaner_ibm(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""ibm""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 59, 'coloffset': 0, 'linematch': 'def cleaner_ibm(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_ibm(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""ibm""]:\n        if f.startswith(p):\n            f = f[len(p) :]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 60, 'coloffset': 4, 'linematch': 'f = f.replace(""_"", ""-"")', 'context': '    return f.lower()\n\n\ndef cleaner_ibm(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""ibm""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'f = ""-"".join(f.split())', 'context': '\n\ndef cleaner_ibm(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""ibm""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 62, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""ibm""]:', 'context': '\ndef cleaner_ibm(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""ibm""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 66, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""ibm""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_firebase(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #40', 'line': 59, 'description': ['        ""width"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n-        ""width"": ""1.4"",\n+        ""XXwidthXX"": ""1.4"",\n         ""height"": ""1.4"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #41', 'line': 59, 'description': ['        ""width"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n-        ""width"": ""1.4"",\n+        ""width"": ""XX1.4XX"",\n         ""height"": ""1.4"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #42', 'line': 60, 'description': ['        ""height"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n-        ""height"": ""1.4"",\n+        ""XXheightXX"": ""1.4"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #43', 'line': 60, 'description': ['        ""height"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n-        ""height"": ""1.4"",\n+        ""height"": ""XX1.4XX"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 61, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n-        ""labelloc"": ""b"",\n+        ""XXlabellocXX"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #45', 'line': 61, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n-        ""labelloc"": ""b"",\n+        ""labelloc"": ""XXbXX"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 66, 'description': ['        ""imagescale"": ""true"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # ""imagepos"": ""tc"",\n-        ""imagescale"": ""true"",\n+        ""XXimagescaleXX"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #47', 'line': 66, 'description': ['        ""imagescale"": ""true"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # ""imagepos"": ""tc"",\n-        ""imagescale"": ""true"",\n+        ""imagescale"": ""XXtrueXX"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4658', 'line': 60, 'description': ['def Container(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology="""", description="""", **kwargs):\n+def Container(name, technology=""XXXX"", description="""", **kwargs):\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4659', 'line': 60, 'description': ['def Container(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology="""", description="""", **kwargs):\n+def Container(name, technology="""", description=""XXXX"", **kwargs):\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4660', 'line': 62, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4661', 'line': 63, 'description': ['        ""technology"": technology,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -60,7 +60,7 @@\n def Container(name, technology="""", description="""", **kwargs):\n     container_attributes = {\n         ""name"": name,\n-        ""technology"": technology,\n+        ""XXtechnologyXX"": technology,\n         ""description"": description,\n         ""type"": ""Container"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4662', 'line': 64, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -61,7 +61,7 @@\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""Container"",\n     }\n     container_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4663', 'line': 65, 'description': ['        ""type"": ""Container"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Container"",\n+        ""XXtypeXX"": ""Container"",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4664', 'line': 65, 'description': ['        ""type"": ""Container"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Container"",\n+        ""type"": ""XXContainerXX"",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4665', 'line': 66, 'description': ['    }'], 'failure': []}]",12.5,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_firebase,69-76,"[{'lineno': 73, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': 'def cleaner_firebase(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""firebase""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 69, 'coloffset': 0, 'linematch': 'def cleaner_firebase(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_firebase(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""firebase""]:\n        if f.startswith(p):\n            f = f[len(p) :]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 70, 'coloffset': 4, 'linematch': 'f = f.replace(""_"", ""-"")', 'context': '    return f.lower()\n\n\ndef cleaner_firebase(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""firebase""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 71, 'coloffset': 4, 'linematch': 'f = ""-"".join(f.split())', 'context': '\n\ndef cleaner_firebase(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""firebase""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 72, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""firebase""]:', 'context': '\ndef cleaner_firebase(f):\n    f = f.replace(""_"", ""-"")\n    f = ""-"".join(f.split())\n    for p in cfg.FILE_PREFIXES[""firebase""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 76, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""firebase""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_k8s(f):\n    f = f.replace(""-256"", """")\n    for p in cfg.FILE_PREFIXES[""k8s""]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #52', 'line': 69, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""XXfontcolorXX"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n         ""color"": ""#7B8894"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #53', 'line': 69, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""fontcolor"": ""XX#2D3436XX"",\n     }\n     _default_edge_attrs = {\n         ""color"": ""#7B8894"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 70, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #55', 'line': 72, 'description': ['        ""color"": ""#7B8894"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n-        ""color"": ""#7B8894"",\n+        ""XXcolorXX"": ""#7B8894"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 72, 'description': ['        ""color"": ""#7B8894"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n-        ""color"": ""#7B8894"",\n+        ""color"": ""XX#7B8894XX"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #57', 'line': 73, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #4666', 'line': 71, 'description': ['def Database(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology="""", description="""", **kwargs):\n+def Database(name, technology=""XXXX"", description="""", **kwargs):\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4667', 'line': 71, 'description': ['def Database(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology="""", description="""", **kwargs):\n+def Database(name, technology="""", description=""XXXX"", **kwargs):\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4668', 'line': 73, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4669', 'line': 74, 'description': ['        ""technology"": technology,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -71,7 +71,7 @@\n def Database(name, technology="""", description="""", **kwargs):\n     database_attributes = {\n         ""name"": name,\n-        ""technology"": technology,\n+        ""XXtechnologyXX"": technology,\n         ""description"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4670', 'line': 75, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -72,7 +72,7 @@\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4671', 'line': 76, 'description': ['        ""type"": ""Database"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Database"",\n+        ""XXtypeXX"": ""Database"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4672', 'line': 76, 'description': ['        ""type"": ""Database"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Database"",\n+        ""type"": ""XXDatabaseXX"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}]",23.076923076923077,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_k8s,79-85,"[{'lineno': 82, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': '\ndef cleaner_k8s(f):\n    f = f.replace(""-256"", """")\n    for p in cfg.FILE_PREFIXES[""k8s""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 79, 'coloffset': 0, 'linematch': 'def cleaner_k8s(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_k8s(f):\n    f = f.replace(""-256"", """")\n    for p in cfg.FILE_PREFIXES[""k8s""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 80, 'coloffset': 4, 'linematch': 'f = f.replace(""-256"", """")', 'context': '    return f.lower()\n\n\ndef cleaner_k8s(f):\n    f = f.replace(""-256"", """")\n    for p in cfg.FILE_PREFIXES[""k8s""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 81, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""k8s""]:', 'context': '\n\ndef cleaner_k8s(f):\n    f = f.replace(""-256"", """")\n    for p in cfg.FILE_PREFIXES[""k8s""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 85, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""k8s""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(""-32"", """")\n    for p in cfg.FILE_PREFIXES[""digitalocean""]:\n        if f.startswith(p):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #58', 'line': 81, 'description': ['        name: str = """",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -78,7 +78,7 @@\n     # TODO: Save directory option (filename + directory?)\n     def __init__(\n         self,\n-        name: str = """",\n+        name: str = ""XXXX"",\n         filename: str = """",\n         direction: str = ""LR"",\n         curvestyle: str = ""ortho"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #59', 'line': 82, 'description': ['        filename: str = """",'], 'failure': []}, {'name': 'Mutant #60', 'line': 83, 'description': ['        direction: str = ""LR"",'], 'failure': []}, {'name': 'Mutant #61', 'line': 84, 'description': ['        curvestyle: str = ""ortho"",'], 'failure': []}, {'name': 'Mutant #62', 'line': 85, 'description': ['        outformat: str = ""png"",'], 'failure': []}, {'name': 'Mutant #4677', 'line': 79, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #4678', 'line': 84, 'description': ['def System(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description="""", external=False, **kwargs):\n+def System(name, description=""XXXX"", external=False, **kwargs):\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4679', 'line': 84, 'description': ['def System(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description="""", external=False, **kwargs):\n+def System(name, description="""", external=True, **kwargs):\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",62.5,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,cleaner_digitalocean,87-93,"[{'lineno': 90, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': '\ndef cleaner_digitalocean(f):\n    f = f.replace(""-32"", """")\n    for p in cfg.FILE_PREFIXES[""digitalocean""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 87, 'coloffset': 0, 'linematch': 'def cleaner_digitalocean(f):', 'context': '            f = f[len(p) :]\n            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(""-32"", """")\n    for p in cfg.FILE_PREFIXES[""digitalocean""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 88, 'coloffset': 4, 'linematch': 'f = f.replace(""-32"", """")', 'context': '            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(""-32"", """")\n    for p in cfg.FILE_PREFIXES[""digitalocean""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 89, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""digitalocean""]:', 'context': '    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(""-32"", """")\n    for p in cfg.FILE_PREFIXES[""digitalocean""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 93, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""digitalocean""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[""alibabacloud""]:\n        if f.startswith(p):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #64', 'line': 87, 'description': ['        show: bool = True,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -84,7 +84,7 @@\n         curvestyle: str = ""ortho"",\n         outformat: str = ""png"",\n         autolabel: bool = False,\n-        show: bool = True,\n+        show: bool = False,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #65', 'line': 88, 'description': ['        strict: bool = False,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -85,7 +85,7 @@\n         outformat: str = ""png"",\n         autolabel: bool = False,\n         show: bool = True,\n-        strict: bool = False,\n+        strict: bool = True,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n         edge_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4681', 'line': 87, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -84,7 +84,7 @@\n def System(name, description="""", external=False, **kwargs):\n     system_attributes = {\n         ""name"": name,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""External System"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4682', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""XXtypeXX"": ""External System"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4683', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""type"": ""XXExternal SystemXX"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4684', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""type"": ""External System"" if external else ""XXSystemXX"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4685', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""XXfillcolorXX"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4686', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""XXgray60XX"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4687', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""gray60"" if external else ""XXdodgerblue4XX"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4688', 'line': 90, 'description': ['    }'], 'failure': []}]",10.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_alibabacloud,96-101,"[{'lineno': 98, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': '\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[""alibabacloud""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 96, 'coloffset': 0, 'linematch': 'def cleaner_alibabacloud(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[""alibabacloud""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 97, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""alibabacloud""]:', 'context': '    return f.lower()\n\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[""alibabacloud""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 101, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""alibabacloud""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_oci(f):\n    f = f.replace("" "", ""-"")\n    f = f.replace(""_"", ""-"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4691', 'line': 97, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4692', 'line': 98, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -95,7 +95,7 @@\n def Person(name, description="""", external=False, **kwargs):\n     person_attributes = {\n         ""name"": name,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4693', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""XXtypeXX"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4694', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""type"": ""XXExternal PersonXX"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4695', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""type"": ""External Person"" if external else ""XXPersonXX"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4696', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""XXfillcolorXX"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4697', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""XXgray60XX"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4698', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""gray60"" if external else ""XXdodgerblue4XX"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4699', 'line': 101, 'description': ['        ""style"": ""rounded,filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n-        ""style"": ""rounded,filled"",\n+        ""XXstyleXX"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4700', 'line': 101, 'description': ['        ""style"": ""rounded,filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n-        ""style"": ""rounded,filled"",\n+        ""style"": ""XXrounded,filledXX"",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}]",10.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_oci,104-111,"[{'lineno': 108, 'coloffset': 8, 'linematch': 'if f.startswith(p):', 'context': 'def cleaner_oci(f):\n    f = f.replace("" "", ""-"")\n    f = f.replace(""_"", ""-"")\n    for p in cfg.FILE_PREFIXES[""oci""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 104, 'coloffset': 0, 'linematch': 'def cleaner_oci(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_oci(f):\n    f = f.replace("" "", ""-"")\n    f = f.replace(""_"", ""-"")\n    for p in cfg.FILE_PREFIXES[""oci""]:\n        if f.startswith(p):\n            f = f[len(p) :]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 105, 'coloffset': 4, 'linematch': 'f = f.replace("" "", ""-"")', 'context': '    return f.lower()\n\n\ndef cleaner_oci(f):\n    f = f.replace("" "", ""-"")\n    f = f.replace(""_"", ""-"")\n    for p in cfg.FILE_PREFIXES[""oci""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 106, 'coloffset': 4, 'linematch': 'f = f.replace(""_"", ""-"")', 'context': '\n\ndef cleaner_oci(f):\n    f = f.replace("" "", ""-"")\n    f = f.replace(""_"", ""-"")\n    for p in cfg.FILE_PREFIXES[""oci""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 107, 'coloffset': 4, 'linematch': 'for p in cfg.FILE_PREFIXES[""oci""]:', 'context': '\ndef cleaner_oci(f):\n    f = f.replace("" "", ""-"")\n    f = f.replace(""_"", ""-"")\n    for p in cfg.FILE_PREFIXES[""oci""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 111, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    for p in cfg.FILE_PREFIXES[""oci""]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_programming(f):\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #66', 'line': 108, 'description': ['        if graph_attr is None:'], 'failure': []}, {'name': 'Mutant #67', 'line': 109, 'description': ['            graph_attr = {}'], 'failure': []}, {'name': 'Mutant #68', 'line': 110, 'description': ['        if node_attr is None:'], 'failure': []}, {'name': 'Mutant #69', 'line': 111, 'description': ['            node_attr = {}'], 'failure': []}, {'name': 'Mutant #4702', 'line': 109, 'description': ['        ""label"": html.escape(name),'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -106,7 +106,7 @@\n \n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n-        ""label"": html.escape(name),\n+        ""XXlabelXX"": html.escape(name),\n         ""bgcolor"": ""white"",\n         ""margin"": ""16"",\n         ""style"": ""dashed"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4703', 'line': 110, 'description': ['        ""bgcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         ""label"": html.escape(name),\n-        ""bgcolor"": ""white"",\n+        ""XXbgcolorXX"": ""white"",\n         ""margin"": ""16"",\n         ""style"": ""dashed"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4704', 'line': 110, 'description': ['        ""bgcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         ""label"": html.escape(name),\n-        ""bgcolor"": ""white"",\n+        ""bgcolor"": ""XXwhiteXX"",\n         ""margin"": ""16"",\n         ""style"": ""dashed"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4705', 'line': 111, 'description': ['        ""margin"": ""16"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         ""label"": html.escape(name),\n         ""bgcolor"": ""white"",\n-        ""margin"": ""16"",\n+        ""XXmarginXX"": ""16"",\n         ""style"": ""dashed"",\n     }\n     graph_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4706', 'line': 111, 'description': ['        ""margin"": ""16"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         ""label"": html.escape(name),\n         ""bgcolor"": ""white"",\n-        ""margin"": ""16"",\n+        ""margin"": ""XX16XX"",\n         ""style"": ""dashed"",\n     }\n     graph_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}]",44.44444444444444,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,configure,13-14,"[{'lineno': 13, 'coloffset': 0, 'linematch': 'def configure(context):', 'context': '    else:\n        # Skip all other mutations\n        context.skip = True\n\ndef configure(context):\n    context.pre_mutation = pre_mutation', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 14, 'coloffset': 4, 'linematch': 'context.pre_mutation = pre_mutation', 'context': '        # Skip all other mutations\n        context.skip = True\n\ndef configure(context):\n    context.pre_mutation = pre_mutation', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #1', 'line': 14, 'description': ['__diagram = contextvars.ContextVar(""diagrams"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -11,7 +11,7 @@\n # These global contexts are for letting the clusters and nodes know\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n-__diagram = contextvars.ContextVar(""diagrams"")\n+__diagram = contextvars.ContextVar(""XXdiagramsXX"")\n __cluster = contextvars.ContextVar(""cluster"")\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2', 'line': 14, 'description': ['__diagram = contextvars.ContextVar(""diagrams"")'], 'failure': []}, {'name': 'Mutant #4608', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = f\'XX<br/><font point-size=""10"">{_format_description(description)}</font>XX\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4609', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else ""XXXX""\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4610', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = None\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4611', 'line': 14, 'description': ['    return f""<{title}{subtitle}{text}>""'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -11,7 +11,7 @@\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n-    return f""<{title}{subtitle}{text}>""\n+    return f""XX<{title}{subtitle}{text}>XX""\n \n \n def _format_description(description):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4723', 'line': 13, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = ""custom""\n     _icon_dir = None\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n     def _load_icon(self):\n         return self._icon\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4724', 'line': 13, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = ""custom""\n     _icon_dir = None\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n     def _load_icon(self):\n         return self._icon\n', 'type': 'failure', 'message': 'bad_survived'}]}]",12.5,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,getdiagram,18-22,"[{'lineno': 18, 'coloffset': 0, 'linematch': 'def getdiagram() -> ""Diagram"":', 'context': '__diagram = contextvars.ContextVar(""diagrams"")\n__cluster = contextvars.ContextVar(""cluster"")\n\n\ndef getdiagram() -> ""Diagram"":\n    try:\n        return __diagram.get()\n    except LookupError:\n        return None\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 18, 'coloffset': 0, 'linematch': 'def getdiagram() -> ""Diagram"":', 'context': '__diagram = contextvars.ContextVar(""diagrams"")\n__cluster = contextvars.ContextVar(""cluster"")\n\n\ndef getdiagram() -> ""Diagram"":\n    try:\n        return __diagram.get()\n    except LookupError:\n        return None\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 19, 'coloffset': 4, 'linematch': 'try:', 'context': '__cluster = contextvars.ContextVar(""cluster"")\n\n\ndef getdiagram() -> ""Diagram"":\n    try:\n        return __diagram.get()\n    except LookupError:\n        return None\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4725', 'line': 19, 'description': ['        self._icon = icon_path'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,setdiagram,25-26,"[{'lineno': 25, 'coloffset': 0, 'linematch': 'def setdiagram(diagram: ""Diagram""):', 'context': '    except LookupError:\n        return None\n\n\ndef setdiagram(diagram: ""Diagram""):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> ""Cluster"":\n    try:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 25, 'coloffset': 0, 'linematch': 'def setdiagram(diagram: ""Diagram""):', 'context': '    except LookupError:\n        return None\n\n\ndef setdiagram(diagram: ""Diagram""):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> ""Cluster"":\n    try:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 26, 'coloffset': 4, 'linematch': '__diagram.set(diagram)', 'context': '        return None\n\n\ndef setdiagram(diagram: ""Diagram""):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> ""Cluster"":\n    try:\n        return __cluster.get()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4612', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     """"""\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=41, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4613', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     """"""\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=40, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4614', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': []}]",33.33333333333333,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,getcluster,29-33,"[{'lineno': 29, 'coloffset': 0, 'linematch': 'def getcluster() -> ""Cluster"":', 'context': 'def setdiagram(diagram: ""Diagram""):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> ""Cluster"":\n    try:\n        return __cluster.get()\n    except LookupError:\n        return None\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 29, 'coloffset': 0, 'linematch': 'def getcluster() -> ""Cluster"":', 'context': 'def setdiagram(diagram: ""Diagram""):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> ""Cluster"":\n    try:\n        return __cluster.get()\n    except LookupError:\n        return None\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 30, 'coloffset': 4, 'linematch': 'try:', 'context': '    __diagram.set(diagram)\n\n\ndef getcluster() -> ""Cluster"":\n    try:\n        return __cluster.get()\n    except LookupError:\n        return None\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4622', 'line': 29, 'description': ['    return ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return ""<br/>"".join(lines)\n+    return ""XX<br/>XX"".join(lines)\n \n \n def _format_edge_label(description):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,setcluster,36-37,"[{'lineno': 36, 'coloffset': 0, 'linematch': 'def setcluster(cluster: ""Cluster""):', 'context': '    except LookupError:\n        return None\n\n\ndef setcluster(cluster: ""Cluster""):\n    __cluster.set(cluster)\n\n\nclass Diagram:\n    __directions = (""TB"", ""BT"", ""LR"", ""RL"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def setcluster(cluster: ""Cluster""):', 'context': '    except LookupError:\n        return None\n\n\ndef setcluster(cluster: ""Cluster""):\n    __cluster.set(cluster)\n\n\nclass Diagram:\n    __directions = (""TB"", ""BT"", ""LR"", ""RL"")', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 37, 'coloffset': 4, 'linematch': '__cluster.set(cluster)', 'context': '        return None\n\n\ndef setcluster(cluster: ""Cluster""):\n    __cluster.set(cluster)\n\n\nclass Diagram:\n    __directions = (""TB"", ""BT"", ""LR"", ""RL"")\n    __curvestyles = (""ortho"", ""curved"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4627', 'line': 36, 'description': ['    text = ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     """"""Create a graphviz label string for a C4 edge""""""\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = ""<br/>"".join(lines)\n+    text = ""XX<br/>XX"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4628', 'line': 36, 'description': ['    text = ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     """"""Create a graphviz label string for a C4 edge""""""\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = ""<br/>"".join(lines)\n+    text = None\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4629', 'line': 37, 'description': ['    return f\'<<font point-size=""10"">{text}</font>>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n-    return f\'<<font point-size=""10"">{text}</font>>\'\n+    return f\'XX<<font point-size=""10"">{text}</font>>XX\'\n \n \n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,_repr_png_,169-170,"[{'lineno': 169, 'coloffset': 4, 'linematch': 'def _repr_png_(self):', 'context': '        # Remove the graphviz file leaving only the image.\n        os.remove(self.filename)\n        setdiagram(None)\n\n    def _repr_png_(self):\n        return self.dot.pipe(format=""png"")\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 169, 'coloffset': 4, 'linematch': 'def _repr_png_(self):', 'context': '        # Remove the graphviz file leaving only the image.\n        os.remove(self.filename)\n        setdiagram(None)\n\n    def _repr_png_(self):\n        return self.dot.pipe(format=""png"")\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 170, 'coloffset': 8, 'linematch': 'return self.dot.pipe(format=""png"")', 'context': '        os.remove(self.filename)\n        setdiagram(None)\n\n    def _repr_png_(self):\n        return self.dot.pipe(format=""png"")\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #103', 'line': 170, 'description': ['        return self.dot.pipe(format=""png"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -167,7 +167,7 @@\n         setdiagram(None)\n \n     def _repr_png_(self):\n-        return self.dot.pipe(format=""png"")\n+        return self.dot.pipe(format=""XXpngXX"")\n \n     def _validate_direction(self, direction: str) -> bool:\n         return direction.upper() in self.__directions\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,_validate_curvestyle,175-176,"[{'lineno': 175, 'coloffset': 4, 'linematch': 'def _validate_curvestyle(self, curvestyle: str) -> bool:', 'context': '\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 175, 'coloffset': 4, 'linematch': 'def _validate_curvestyle(self, curvestyle: str) -> bool:', 'context': '\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 176, 'coloffset': 8, 'linematch': 'return curvestyle.lower() in self.__curvestyles', 'context': '    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #105', 'line': 176, 'description': ['        return curvestyle.lower() in self.__curvestyles'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,_validate_outformat,178-179,"[{'lineno': 178, 'coloffset': 4, 'linematch': 'def _validate_outformat(self, outformat: str) -> bool:', 'context': '\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        """"""Create a new node.""""""\n        self.dot.node(nodeid, label=label, **attrs)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 178, 'coloffset': 4, 'linematch': 'def _validate_outformat(self, outformat: str) -> bool:', 'context': '\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        """"""Create a new node.""""""\n        self.dot.node(nodeid, label=label, **attrs)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 179, 'coloffset': 8, 'linematch': 'return outformat.lower() in self.__outformats', 'context': '    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        """"""Create a new node.""""""\n        self.dot.node(nodeid, label=label, **attrs)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #106', 'line': 179, 'description': ['        return outformat.lower() in self.__outformats'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,__enter__,262-264,"[{'lineno': 262, 'coloffset': 4, 'linematch': 'def __enter__(self):', 'context': '\n        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 262, 'coloffset': 4, 'linematch': 'def __enter__(self):', 'context': '\n        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 263, 'coloffset': 8, 'linematch': 'setcluster(self)', 'context': '        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 264, 'coloffset': 8, 'linematch': 'return self', 'context': '        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #160', 'line': 263, 'description': ['        setcluster(self)'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,_validate_direction,273-274,"[{'lineno': 273, 'coloffset': 4, 'linematch': 'def _validate_direction(self, direction: str) -> bool:', 'context': '        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        """"""Create a new node in the cluster.""""""\n        self.dot.node(nodeid, label=label, **attrs)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 273, 'coloffset': 4, 'linematch': 'def _validate_direction(self, direction: str) -> bool:', 'context': '        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        """"""Create a new node in the cluster.""""""\n        self.dot.node(nodeid, label=label, **attrs)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 274, 'coloffset': 8, 'linematch': 'return direction.upper() in self.__directions', 'context': '            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        """"""Create a new node in the cluster.""""""\n        self.dot.node(nodeid, label=label, **attrs)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #161', 'line': 274, 'description': ['        return direction.upper() in self.__directions'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,__repr__,338-340,"[{'lineno': 338, 'coloffset': 4, 'linematch': 'def __repr__(self):', 'context': '            self._cluster.node(self._id, self.label, **self._attrs)\n        else:\n            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f""<{self._provider}.{self._type}.{_name}>""\n\n    def __sub__(self, other: Union[""Node"", List[""Node""], ""Edge""]):\n        """"""Implement Self - Node, Self - [Nodes] and Self - Edge.""""""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 338, 'coloffset': 4, 'linematch': 'def __repr__(self):', 'context': '            self._cluster.node(self._id, self.label, **self._attrs)\n        else:\n            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f""<{self._provider}.{self._type}.{_name}>""\n\n    def __sub__(self, other: Union[""Node"", List[""Node""], ""Edge""]):\n        """"""Implement Self - Node, Self - [Nodes] and Self - Edge.""""""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 339, 'coloffset': 8, 'linematch': '_name = self.__class__.__name__', 'context': '        else:\n            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f""<{self._provider}.{self._type}.{_name}>""\n\n    def __sub__(self, other: Union[""Node"", List[""Node""], ""Edge""]):\n        """"""Implement Self - Node, Self - [Nodes] and Self - Edge.""""""\n        if isinstance(other, list):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 340, 'coloffset': 8, 'linematch': 'return f""<{self._provider}.{self._type}.{_name}>""', 'context': '            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f""<{self._provider}.{self._type}.{_name}>""\n\n    def __sub__(self, other: Union[""Node"", List[""Node""], ""Edge""]):\n        """"""Implement Self - Node, Self - [Nodes] and Self - Edge.""""""\n        if isinstance(other, list):\n            for node in other:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #192', 'line': 339, 'description': ['        _name = self.__class__.__name__'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -336,7 +336,7 @@\n             self._diagram.node(self._id, self.label, **self._attrs)\n \n     def __repr__(self):\n-        _name = self.__class__.__name__\n+        _name = None\n         return f""<{self._provider}.{self._type}.{_name}>""\n \n     def __sub__(self, other: Union[""Node"", List[""Node""], ""Edge""]):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #193', 'line': 340, 'description': ['        return f""<{self._provider}.{self._type}.{_name}>""'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -337,7 +337,7 @@\n \n     def __repr__(self):\n         _name = self.__class__.__name__\n-        return f""<{self._provider}.{self._type}.{_name}>""\n+        return f""XX<{self._provider}.{self._type}.{_name}>XX""\n \n     def __sub__(self, other: Union[""Node"", List[""Node""], ""Edge""]):\n         """"""Implement Self - Node, Self - [Nodes] and Self - Edge.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,_load_icon,432-434,"[{'lineno': 432, 'coloffset': 4, 'linematch': 'def _load_icon(self):', 'context': '    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 15, 'coloffset': 4, 'linematch': 'def _load_icon(self):', 'context': '    _icon_dir = None\n\n    fontcolor = ""#ffffff""\n\n    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 432, 'coloffset': 4, 'linematch': 'def _load_icon(self):', 'context': '    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 433, 'coloffset': 8, 'linematch': 'basedir = Path(os.path.abspath(os.path.dirname(__file__)))', 'context': '    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:\n    """"""Edge represents an edge between two nodes.""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 434, 'coloffset': 8, 'linematch': 'return os.path.join(basedir.parent, self._icon_dir, self._icon)', 'context': '        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:\n    """"""Edge represents an edge between two nodes.""""""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 16, 'coloffset': 8, 'linematch': 'return self._icon', 'context': '\n    fontcolor = ""#ffffff""\n\n    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #216', 'line': 433, 'description': ['        basedir = Path(os.path.abspath(os.path.dirname(__file__)))'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -430,7 +430,7 @@\n         return uuid.uuid4().hex\n \n     def _load_icon(self):\n-        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n+        basedir = None\n         return os.path.join(basedir.parent, self._icon_dir, self._icon)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,__rshift__,497-500,"[{'lineno': 497, 'coloffset': 4, 'linematch': 'def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '    def __rsub__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] - Self because list don\'t have __sub__ operators.""""""\n        return self.append(other)\n\n    def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 497, 'coloffset': 4, 'linematch': 'def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '    def __rsub__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] - Self because list don\'t have __sub__ operators.""""""\n        return self.append(other)\n\n    def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 498, 'coloffset': 8, 'linematch': '""""""Implements Self >> Node or Edge and Self >> [Nodes].""""""', 'context': '        """"""Called for [Nodes] or [Edges] - Self because list don\'t have __sub__ operators.""""""\n        return self.append(other)\n\n    def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 499, 'coloffset': 8, 'linematch': 'self.forward = True', 'context': '        return self.append(other)\n\n    def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 500, 'coloffset': 8, 'linematch': 'return self.connect(other)', 'context': '\n    def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #241', 'line': 499, 'description': ['        self.forward = True'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -496,7 +496,7 @@\n \n     def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n         """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n-        self.forward = True\n+        self.forward = False\n         return self.connect(other)\n \n     def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #242', 'line': 499, 'description': ['        self.forward = True'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -496,7 +496,7 @@\n \n     def __rshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n         """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n-        self.forward = True\n+        self.forward = None\n         return self.connect(other)\n \n     def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,__lshift__,502-505,"[{'lineno': 502, 'coloffset': 4, 'linematch': 'def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '        """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 502, 'coloffset': 4, 'linematch': 'def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):', 'context': '        """"""Implements Self >> Node or Edge and Self >> [Nodes].""""""\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 503, 'coloffset': 8, 'linematch': '""""""Implements Self << Node or Edge and Self << [Nodes].""""""', 'context': '        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 504, 'coloffset': 8, 'linematch': 'self.reverse = True', 'context': '        return self.connect(other)\n\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 505, 'coloffset': 8, 'linematch': 'return self.connect(other)', 'context': '\n    def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #243', 'line': 504, 'description': ['        self.reverse = True'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -501,7 +501,7 @@\n \n     def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n         """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n-        self.reverse = True\n+        self.reverse = False\n         return self.connect(other)\n \n     def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #244', 'line': 504, 'description': ['        self.reverse = True'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -501,7 +501,7 @@\n \n     def __lshift__(self, other: Union[""Node"", ""Edge"", List[""Node""]]):\n         """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n-        self.reverse = True\n+        self.reverse = None\n         return self.connect(other)\n \n     def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,__rrshift__,507-509,"[{'lineno': 507, 'coloffset': 4, 'linematch': 'def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:', 'context': '        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 507, 'coloffset': 4, 'linematch': 'def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:', 'context': '        """"""Implements Self << Node or Edge and Self << [Nodes].""""""\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 508, 'coloffset': 8, 'linematch': '""""""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""', 'context': '        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 509, 'coloffset': 8, 'linematch': 'return self.append(other, forward=True)', 'context': '        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #245', 'line': 509, 'description': ['        return self.append(other, forward=True)'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -506,7 +506,7 @@\n \n     def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n         """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n-        return self.append(other, forward=True)\n+        return self.append(other, forward=False)\n \n     def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n         """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,__rlshift__,511-513,"[{'lineno': 511, 'coloffset': 4, 'linematch': 'def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:', 'context': '    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 511, 'coloffset': 4, 'linematch': 'def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:', 'context': '    def __rrshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 512, 'coloffset': 8, 'linematch': '""""""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""', 'context': '        """"""Called for [Nodes] or [Edges] >> Self because list of Edges don\'t have __rshift__ operators.""""""\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []\n        for o in other:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 513, 'coloffset': 8, 'linematch': 'return self.append(other, reverse=True)', 'context': '        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n        """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #246', 'line': 513, 'description': ['        return self.append(other, reverse=True)'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -510,7 +510,7 @@\n \n     def __rlshift__(self, other: Union[List[""Node""], List[""Edge""]]) -> List[""Edge""]:\n         """"""Called for [Nodes] or [Edges] << Self because list of Edges don\'t have __lshift__ operators.""""""\n-        return self.append(other, reverse=True)\n+        return self.append(other, reverse=False)\n \n     def append(self, other: Union[List[""Node""], List[""Edge""]], forward=None, reverse=None) -> List[""Edge""]:\n         result = []\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,_format_node_label,9-14,"[{'lineno': 9, 'coloffset': 0, 'linematch': 'def _format_node_label(name, key, description):', 'context': 'import textwrap\nfrom diagrams import Cluster, Node, Edge\n\n\ndef _format_node_label(name, key, description):\n    """"""Create a graphviz label string for a C4 node""""""\n    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 10, 'coloffset': 4, 'linematch': '""""""Create a graphviz label string for a C4 node""""""', 'context': 'from diagrams import Cluster, Node, Edge\n\n\ndef _format_node_label(name, key, description):\n    """"""Create a graphviz label string for a C4 node""""""\n    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 11, 'coloffset': 4, 'linematch': 'title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'', 'context': '\n\ndef _format_node_label(name, key, description):\n    """"""Create a graphviz label string for a C4 node""""""\n    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 12, 'coloffset': 4, 'linematch': 'subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"', 'context': '\ndef _format_node_label(name, key, description):\n    """"""Create a graphviz label string for a C4 node""""""\n    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""\n\n\ndef _format_description(description):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 13, 'coloffset': 4, 'linematch': 'text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"', 'context': 'def _format_node_label(name, key, description):\n    """"""Create a graphviz label string for a C4 node""""""\n    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""\n\n\ndef _format_description(description):\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 14, 'coloffset': 4, 'linematch': 'return f""<{title}{subtitle}{text}>""', 'context': '    """"""Create a graphviz label string for a C4 node""""""\n    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""\n\n\ndef _format_description(description):\n    """"""\n    Formats the description string so it fits into the C4 nodes.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #1', 'line': 14, 'description': ['__diagram = contextvars.ContextVar(""diagrams"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -11,7 +11,7 @@\n # These global contexts are for letting the clusters and nodes know\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n-__diagram = contextvars.ContextVar(""diagrams"")\n+__diagram = contextvars.ContextVar(""XXdiagramsXX"")\n __cluster = contextvars.ContextVar(""cluster"")\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2', 'line': 14, 'description': ['__diagram = contextvars.ContextVar(""diagrams"")'], 'failure': []}, {'name': 'Mutant #367', 'line': 9, 'description': ['    _provider = ""openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = ""openstack""\n+    _provider = ""XXopenstackXX""\n     _icon_dir = ""resources/openstack""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #368', 'line': 9, 'description': ['    _provider = ""openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = ""openstack""\n+    _provider = None\n     _icon_dir = ""resources/openstack""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #369', 'line': 10, 'description': ['    _icon_dir = ""resources/openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = ""openstack""\n-    _icon_dir = ""resources/openstack""\n+    _icon_dir = ""XXresources/openstackXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #370', 'line': 10, 'description': ['    _icon_dir = ""resources/openstack""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = ""openstack""\n-    _icon_dir = ""resources/openstack""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #371', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""openstack""\n     _icon_dir = ""resources/openstack""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #372', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""openstack""\n     _icon_dir = ""resources/openstack""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #566', 'line': 9, 'description': ['    _provider = ""elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = ""elastic""\n+    _provider = ""XXelasticXX""\n     _icon_dir = ""resources/elastic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #567', 'line': 9, 'description': ['    _provider = ""elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = ""elastic""\n+    _provider = None\n     _icon_dir = ""resources/elastic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #568', 'line': 10, 'description': ['    _icon_dir = ""resources/elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = ""elastic""\n-    _icon_dir = ""resources/elastic""\n+    _icon_dir = ""XXresources/elasticXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #569', 'line': 10, 'description': ['    _icon_dir = ""resources/elastic""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = ""elastic""\n-    _icon_dir = ""resources/elastic""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #570', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""elastic""\n     _icon_dir = ""resources/elastic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #571', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""elastic""\n     _icon_dir = ""resources/elastic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #744', 'line': 9, 'description': ['    _provider = ""azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = ""azure""\n+    _provider = ""XXazureXX""\n     _icon_dir = ""resources/azure""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #745', 'line': 9, 'description': ['    _provider = ""azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = ""azure""\n+    _provider = None\n     _icon_dir = ""resources/azure""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #746', 'line': 10, 'description': ['    _icon_dir = ""resources/azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = ""azure""\n-    _icon_dir = ""resources/azure""\n+    _icon_dir = ""XXresources/azureXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #747', 'line': 10, 'description': ['    _icon_dir = ""resources/azure""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = ""azure""\n-    _icon_dir = ""resources/azure""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #748', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""azure""\n     _icon_dir = ""resources/azure""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #749', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""azure""\n     _icon_dir = ""resources/azure""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1402', 'line': 9, 'description': ['    _provider = ""onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = ""onprem""\n+    _provider = ""XXonpremXX""\n     _icon_dir = ""resources/onprem""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1403', 'line': 9, 'description': ['    _provider = ""onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = ""onprem""\n+    _provider = None\n     _icon_dir = ""resources/onprem""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1404', 'line': 10, 'description': ['    _icon_dir = ""resources/onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = ""onprem""\n-    _icon_dir = ""resources/onprem""\n+    _icon_dir = ""XXresources/onpremXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1405', 'line': 10, 'description': ['    _icon_dir = ""resources/onprem""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = ""onprem""\n-    _icon_dir = ""resources/onprem""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1406', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""onprem""\n     _icon_dir = ""resources/onprem""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1407', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""onprem""\n     _icon_dir = ""resources/onprem""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1710', 'line': 9, 'description': ['    _provider = ""k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = ""k8s""\n+    _provider = ""XXk8sXX""\n     _icon_dir = ""resources/k8s""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1711', 'line': 9, 'description': ['    _provider = ""k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = ""k8s""\n+    _provider = None\n     _icon_dir = ""resources/k8s""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1712', 'line': 10, 'description': ['    _icon_dir = ""resources/k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = ""k8s""\n-    _icon_dir = ""resources/k8s""\n+    _icon_dir = ""XXresources/k8sXX""\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1713', 'line': 10, 'description': ['    _icon_dir = ""resources/k8s""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = ""k8s""\n-    _icon_dir = ""resources/k8s""\n+    _icon_dir = None\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1714', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""k8s""\n     _icon_dir = ""resources/k8s""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = ""XX#2d3436XX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1715', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""k8s""\n     _icon_dir = ""resources/k8s""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1828', 'line': 9, 'description': ['    _provider = ""digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = ""digitalocean""\n+    _provider = ""XXdigitaloceanXX""\n     _icon_dir = ""resources/digitalocean""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1829', 'line': 9, 'description': ['    _provider = ""digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = ""digitalocean""\n+    _provider = None\n     _icon_dir = ""resources/digitalocean""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1830', 'line': 10, 'description': ['    _icon_dir = ""resources/digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = ""digitalocean""\n-    _icon_dir = ""resources/digitalocean""\n+    _icon_dir = ""XXresources/digitaloceanXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1831', 'line': 10, 'description': ['    _icon_dir = ""resources/digitalocean""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = ""digitalocean""\n-    _icon_dir = ""resources/digitalocean""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1832', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""digitalocean""\n     _icon_dir = ""resources/digitalocean""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1833', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""digitalocean""\n     _icon_dir = ""resources/digitalocean""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2048', 'line': 9, 'description': ['    _provider = ""oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = ""oci""\n+    _provider = ""XXociXX""\n     _icon_dir = ""resources/oci""\n \n     fontcolor = ""#312D2A""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2049', 'line': 9, 'description': ['    _provider = ""oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = ""oci""\n+    _provider = None\n     _icon_dir = ""resources/oci""\n \n     fontcolor = ""#312D2A""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2050', 'line': 10, 'description': ['    _icon_dir = ""resources/oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = ""oci""\n-    _icon_dir = ""resources/oci""\n+    _icon_dir = ""XXresources/ociXX""\n \n     fontcolor = ""#312D2A""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2051', 'line': 10, 'description': ['    _icon_dir = ""resources/oci""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = ""oci""\n-    _icon_dir = ""resources/oci""\n+    _icon_dir = None\n \n     fontcolor = ""#312D2A""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2052', 'line': 12, 'description': ['    fontcolor = ""#312D2A""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""oci""\n     _icon_dir = ""resources/oci""\n \n-    fontcolor = ""#312D2A""\n+    fontcolor = ""XX#312D2AXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2053', 'line': 12, 'description': ['    fontcolor = ""#312D2A""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""oci""\n     _icon_dir = ""resources/oci""\n \n-    fontcolor = ""#312D2A""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2257', 'line': 9, 'description': ['    _provider = ""gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = ""gcp""\n+    _provider = ""XXgcpXX""\n     _icon_dir = ""resources/gcp""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2258', 'line': 9, 'description': ['    _provider = ""gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = ""gcp""\n+    _provider = None\n     _icon_dir = ""resources/gcp""\n \n     fontcolor = ""#2d3436""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2259', 'line': 10, 'description': ['    _icon_dir = ""resources/gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = ""gcp""\n-    _icon_dir = ""resources/gcp""\n+    _icon_dir = ""XXresources/gcpXX""\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2260', 'line': 10, 'description': ['    _icon_dir = ""resources/gcp""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = ""gcp""\n-    _icon_dir = ""resources/gcp""\n+    _icon_dir = None\n \n     fontcolor = ""#2d3436""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2261', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""gcp""\n     _icon_dir = ""resources/gcp""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = ""XX#2d3436XX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2262', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""gcp""\n     _icon_dir = ""resources/gcp""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2572', 'line': 9, 'description': ['    _provider = ""alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = ""alibabacloud""\n+    _provider = ""XXalibabacloudXX""\n     _icon_dir = ""resources/alibabacloud""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2573', 'line': 9, 'description': ['    _provider = ""alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = ""alibabacloud""\n+    _provider = None\n     _icon_dir = ""resources/alibabacloud""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2574', 'line': 10, 'description': ['    _icon_dir = ""resources/alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = ""alibabacloud""\n-    _icon_dir = ""resources/alibabacloud""\n+    _icon_dir = ""XXresources/alibabacloudXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2575', 'line': 10, 'description': ['    _icon_dir = ""resources/alibabacloud""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = ""alibabacloud""\n-    _icon_dir = ""resources/alibabacloud""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2576', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""alibabacloud""\n     _icon_dir = ""resources/alibabacloud""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2577', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""alibabacloud""\n     _icon_dir = ""resources/alibabacloud""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2889', 'line': 9, 'description': ['    _provider = ""ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = ""ibm""\n+    _provider = ""XXibmXX""\n     _icon_dir = ""resources/ibm""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2890', 'line': 9, 'description': ['    _provider = ""ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = ""ibm""\n+    _provider = None\n     _icon_dir = ""resources/ibm""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2891', 'line': 10, 'description': ['    _icon_dir = ""resources/ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = ""ibm""\n-    _icon_dir = ""resources/ibm""\n+    _icon_dir = ""XXresources/ibmXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2892', 'line': 10, 'description': ['    _icon_dir = ""resources/ibm""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = ""ibm""\n-    _icon_dir = ""resources/ibm""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2893', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""ibm""\n     _icon_dir = ""resources/ibm""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2894', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""ibm""\n     _icon_dir = ""resources/ibm""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3194', 'line': 9, 'description': ['    _provider = ""firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = ""firebase""\n+    _provider = ""XXfirebaseXX""\n     _icon_dir = ""resources/firebase""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3195', 'line': 9, 'description': ['    _provider = ""firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = ""firebase""\n+    _provider = None\n     _icon_dir = ""resources/firebase""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3196', 'line': 10, 'description': ['    _icon_dir = ""resources/firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = ""firebase""\n-    _icon_dir = ""resources/firebase""\n+    _icon_dir = ""XXresources/firebaseXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3197', 'line': 10, 'description': ['    _icon_dir = ""resources/firebase""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = ""firebase""\n-    _icon_dir = ""resources/firebase""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3198', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""firebase""\n     _icon_dir = ""resources/firebase""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3199', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""firebase""\n     _icon_dir = ""resources/firebase""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3276', 'line': 9, 'description': ['    _provider = ""programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = ""programming""\n+    _provider = ""XXprogrammingXX""\n     _icon_dir = ""resources/programming""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3277', 'line': 9, 'description': ['    _provider = ""programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = ""programming""\n+    _provider = None\n     _icon_dir = ""resources/programming""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3278', 'line': 10, 'description': ['    _icon_dir = ""resources/programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = ""programming""\n-    _icon_dir = ""resources/programming""\n+    _icon_dir = ""XXresources/programmingXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3279', 'line': 10, 'description': ['    _icon_dir = ""resources/programming""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = ""programming""\n-    _icon_dir = ""resources/programming""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3280', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""programming""\n     _icon_dir = ""resources/programming""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3281', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""programming""\n     _icon_dir = ""resources/programming""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3446', 'line': 9, 'description': ['    provider = ""generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = ""generic""\n+    provider = ""XXgenericXX""\n     _icon_dir = ""resources/generic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3447', 'line': 9, 'description': ['    provider = ""generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = ""generic""\n+    provider = None\n     _icon_dir = ""resources/generic""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3448', 'line': 10, 'description': ['    _icon_dir = ""resources/generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = ""generic""\n-    _icon_dir = ""resources/generic""\n+    _icon_dir = ""XXresources/genericXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3449', 'line': 10, 'description': ['    _icon_dir = ""resources/generic""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = ""generic""\n-    _icon_dir = ""resources/generic""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3450', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = ""generic""\n     _icon_dir = ""resources/generic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3451', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = ""generic""\n     _icon_dir = ""resources/generic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3763', 'line': 9, 'description': ['    _provider = ""aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = ""aws""\n+    _provider = ""XXawsXX""\n     _icon_dir = ""resources/aws""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3764', 'line': 9, 'description': ['    _provider = ""aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = ""aws""\n+    _provider = None\n     _icon_dir = ""resources/aws""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3765', 'line': 10, 'description': ['    _icon_dir = ""resources/aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = ""aws""\n-    _icon_dir = ""resources/aws""\n+    _icon_dir = ""XXresources/awsXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3766', 'line': 10, 'description': ['    _icon_dir = ""resources/aws""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = ""aws""\n-    _icon_dir = ""resources/aws""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3767', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""aws""\n     _icon_dir = ""resources/aws""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3768', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""aws""\n     _icon_dir = ""resources/aws""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4603', 'line': 11, 'description': ['    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n-    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n+    title = f\'XX<font point-size=""12""><b>{html.escape(name)}</b></font><br/>XX\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4604', 'line': 11, 'description': ['    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n-    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n+    title = None\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4605', 'line': 12, 'description': ['    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n-    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n+    subtitle = f\'XX<font point-size=""9"">[{html.escape(key)}]<br/></font>XX\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4606', 'line': 12, 'description': ['    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n-    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n+    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else ""XXXX""\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4607', 'line': 12, 'description': ['    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n-    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n+    subtitle = None\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4608', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = f\'XX<br/><font point-size=""10"">{_format_description(description)}</font>XX\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4609', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else ""XXXX""\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4610', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = None\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4611', 'line': 14, 'description': ['    return f""<{title}{subtitle}{text}>""'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -11,7 +11,7 @@\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n-    return f""<{title}{subtitle}{text}>""\n+    return f""XX<{title}{subtitle}{text}>XX""\n \n \n def _format_description(description):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4718', 'line': 9, 'description': ['    _provider = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = ""custom""\n+    _provider = ""XXcustomXX""\n     _type = ""custom""\n     _icon_dir = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4719', 'line': 9, 'description': ['    _provider = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = ""custom""\n+    _provider = None\n     _type = ""custom""\n     _icon_dir = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4720', 'line': 10, 'description': ['    _type = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = ""custom""\n-    _type = ""custom""\n+    _type = ""XXcustomXX""\n     _icon_dir = None\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4721', 'line': 10, 'description': ['    _type = ""custom""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = ""custom""\n-    _type = ""custom""\n+    _type = None\n     _icon_dir = None\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4722', 'line': 11, 'description': ['    _icon_dir = None'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -8,7 +8,7 @@\n class Custom(Node):\n     _provider = ""custom""\n     _type = ""custom""\n-    _icon_dir = None\n+    _icon_dir = """"\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4723', 'line': 13, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = ""custom""\n     _icon_dir = None\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n     def _load_icon(self):\n         return self._icon\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4724', 'line': 13, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = ""custom""\n     _icon_dir = None\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n     def _load_icon(self):\n         return self._icon\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4758', 'line': 9, 'description': ['    _provider = ""saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = ""saas""\n+    _provider = ""XXsaasXX""\n     _icon_dir = ""resources/saas""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4759', 'line': 9, 'description': ['    _provider = ""saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = ""saas""\n+    _provider = None\n     _icon_dir = ""resources/saas""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4760', 'line': 10, 'description': ['    _icon_dir = ""resources/saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = ""saas""\n-    _icon_dir = ""resources/saas""\n+    _icon_dir = ""XXresources/saasXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4761', 'line': 10, 'description': ['    _icon_dir = ""resources/saas""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = ""saas""\n-    _icon_dir = ""resources/saas""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4762', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""saas""\n     _icon_dir = ""resources/saas""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4763', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""saas""\n     _icon_dir = ""resources/saas""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4838', 'line': 9, 'description': ['    _provider = ""base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = ""base""\n+    _provider = ""XXbaseXX""\n     _icon_dir = ""resources/base""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4839', 'line': 9, 'description': ['    _provider = ""base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = ""base""\n+    _provider = None\n     _icon_dir = ""resources/base""\n \n     fontcolor = ""#ffffff""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4840', 'line': 10, 'description': ['    _icon_dir = ""resources/base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = ""base""\n-    _icon_dir = ""resources/base""\n+    _icon_dir = ""XXresources/baseXX""\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4841', 'line': 10, 'description': ['    _icon_dir = ""resources/base""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = ""base""\n-    _icon_dir = ""resources/base""\n+    _icon_dir = None\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4842', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""base""\n     _icon_dir = ""resources/base""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4843', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""base""\n     _icon_dir = ""resources/base""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.8771929824561401,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,_format_description,17-29,"[{'lineno': 17, 'coloffset': 0, 'linematch': 'def _format_description(description):', 'context': '    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""\n\n\ndef _format_description(description):\n    """"""\n    Formats the description string so it fits into the C4 nodes.\n\n    It line-breaks the description so it fits onto exactly three lines. If there are more\n    than three lines, all further lines are discarded and ""..."" inserted on the last line to', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 17, 'coloffset': 0, 'linematch': 'def _format_description(description):', 'context': '    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n    return f""<{title}{subtitle}{text}>""\n\n\ndef _format_description(description):\n    """"""\n    Formats the description string so it fits into the C4 nodes.\n\n    It line-breaks the description so it fits onto exactly three lines. If there are more\n    than three lines, all further lines are discarded and ""..."" inserted on the last line to', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 18, 'coloffset': 4, 'linematch': '""""""', 'context': '    return f""<{title}{subtitle}{text}>""\n\n\ndef _format_description(description):\n    """"""\n    Formats the description string so it fits into the C4 nodes.\n\n    It line-breaks the description so it fits onto exactly three lines. If there are more\n    than three lines, all further lines are discarded and ""..."" inserted on the last line to\n    indicate that it was shortened. This will also html-escape the description so it can', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 26, 'coloffset': 4, 'linematch': 'wrapper = textwrap.TextWrapper(width=40, max_lines=3)', 'context': '    than three lines, all further lines are discarded and ""..."" inserted on the last line to\n    indicate that it was shortened. This will also html-escape the description so it can\n    safely be included in a HTML label.\n    """"""\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return ""<br/>"".join(lines)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 27, 'coloffset': 4, 'linematch': 'lines = [html.escape(line) for line in wrapper.wrap(description)]', 'context': '    indicate that it was shortened. This will also html-escape the description so it can\n    safely be included in a HTML label.\n    """"""\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return ""<br/>"".join(lines)\n\n\ndef _format_edge_label(description):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 28, 'coloffset': 4, 'linematch': 'lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three', 'context': '    safely be included in a HTML label.\n    """"""\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return ""<br/>"".join(lines)\n\n\ndef _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 29, 'coloffset': 4, 'linematch': 'return ""<br/>"".join(lines)', 'context': '    """"""\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return ""<br/>"".join(lines)\n\n\ndef _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4612', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     """"""\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=41, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4613', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     """"""\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=40, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4614', 'line': 26, 'description': ['    wrapper = textwrap.TextWrapper(width=40, max_lines=3)'], 'failure': []}, {'name': 'Mutant #4615', 'line': 27, 'description': ['    lines = [html.escape(line) for line in wrapper.wrap(description)]'], 'failure': []}, {'name': 'Mutant #4616', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines = [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4617', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': []}, {'name': 'Mutant #4618', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""XXXX""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4619', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': []}, {'name': 'Mutant #4620', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""""] * (4 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4621', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""""] * (3 + len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4622', 'line': 29, 'description': ['    return ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return ""<br/>"".join(lines)\n+    return ""XX<br/>XX"".join(lines)\n \n \n def _format_edge_label(description):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4725', 'line': 19, 'description': ['        self._icon = icon_path'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",33.33333333333333,['ANNOT001' 'FLV001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,_format_edge_label,32-37,"[{'lineno': 32, 'coloffset': 0, 'linematch': 'def _format_edge_label(description):', 'context': '    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return ""<br/>"".join(lines)\n\n\ndef _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 32, 'coloffset': 0, 'linematch': 'def _format_edge_label(description):', 'context': '    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return ""<br/>"".join(lines)\n\n\ndef _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 33, 'coloffset': 4, 'linematch': '""""""Create a graphviz label string for a C4 edge""""""', 'context': '    return ""<br/>"".join(lines)\n\n\ndef _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 34, 'coloffset': 4, 'linematch': 'wrapper = textwrap.TextWrapper(width=24, max_lines=3)', 'context': '\n\ndef _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 35, 'coloffset': 4, 'linematch': 'lines = [html.escape(line) for line in wrapper.wrap(description)]', 'context': '\ndef _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'\n\n\ndef C4Node(name, technology="""", description="""", type=""Container"", **kwargs):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 36, 'coloffset': 4, 'linematch': 'text = ""<br/>"".join(lines)', 'context': 'def _format_edge_label(description):\n    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'\n\n\ndef C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n    key = f""{type}: {technology}"" if technology else type', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 37, 'coloffset': 4, 'linematch': 'return f\'<<font point-size=""10"">{text}</font>>\'', 'context': '    """"""Create a graphviz label string for a C4 edge""""""\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = ""<br/>"".join(lines)\n    return f\'<<font point-size=""10"">{text}</font>>\'\n\n\ndef C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n    key = f""{type}: {technology}"" if technology else type\n    node_attributes = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4623', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     """"""Create a graphviz label string for a C4 edge""""""\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=25, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4624', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     """"""Create a graphviz label string for a C4 edge""""""\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=24, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4625', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': []}, {'name': 'Mutant #4626', 'line': 35, 'description': ['    lines = [html.escape(line) for line in wrapper.wrap(description)]'], 'failure': []}, {'name': 'Mutant #4627', 'line': 36, 'description': ['    text = ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     """"""Create a graphviz label string for a C4 edge""""""\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = ""<br/>"".join(lines)\n+    text = ""XX<br/>XX"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4628', 'line': 36, 'description': ['    text = ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     """"""Create a graphviz label string for a C4 edge""""""\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = ""<br/>"".join(lines)\n+    text = None\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4629', 'line': 37, 'description': ['    return f\'<<font point-size=""10"">{text}</font>>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n-    return f\'<<font point-size=""10"">{text}</font>>\'\n+    return f\'XX<<font point-size=""10"">{text}</font>>XX\'\n \n \n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",28.57142857142857,['ANNOT001' 'FLV001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,Container,60-68,"[{'lineno': 60, 'coloffset': 0, 'linematch': 'def Container(name, technology="""", description="""", **kwargs):', 'context': '    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n\ndef Container(name, technology="""", description="""", **kwargs):\n    container_attributes = {\n        ""name"": name,\n        ""technology"": technology,\n        ""description"": description,\n        ""type"": ""Container"",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'container_attributes = {', 'context': '    return Node(**node_attributes)\n\n\ndef Container(name, technology="""", description="""", **kwargs):\n    container_attributes = {\n        ""name"": name,\n        ""technology"": technology,\n        ""description"": description,\n        ""type"": ""Container"",\n    }', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 67, 'coloffset': 4, 'linematch': 'container_attributes.update(kwargs)', 'context': '        ""technology"": technology,\n        ""description"": description,\n        ""type"": ""Container"",\n    }\n    container_attributes.update(kwargs)\n    return C4Node(**container_attributes)\n\n\ndef Database(name, technology="""", description="""", **kwargs):\n    database_attributes = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 68, 'coloffset': 4, 'linematch': 'return C4Node(**container_attributes)', 'context': '        ""description"": description,\n        ""type"": ""Container"",\n    }\n    container_attributes.update(kwargs)\n    return C4Node(**container_attributes)\n\n\ndef Database(name, technology="""", description="""", **kwargs):\n    database_attributes = {\n        ""name"": name,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #42', 'line': 60, 'description': ['        ""height"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n-        ""height"": ""1.4"",\n+        ""XXheightXX"": ""1.4"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #43', 'line': 60, 'description': ['        ""height"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n-        ""height"": ""1.4"",\n+        ""height"": ""XX1.4XX"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 61, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n-        ""labelloc"": ""b"",\n+        ""XXlabellocXX"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #45', 'line': 61, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n-        ""labelloc"": ""b"",\n+        ""labelloc"": ""XXbXX"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #46', 'line': 66, 'description': ['        ""imagescale"": ""true"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # ""imagepos"": ""tc"",\n-        ""imagescale"": ""true"",\n+        ""XXimagescaleXX"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #47', 'line': 66, 'description': ['        ""imagescale"": ""true"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # ""imagepos"": ""tc"",\n-        ""imagescale"": ""true"",\n+        ""imagescale"": ""XXtrueXX"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #48', 'line': 67, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -64,7 +64,7 @@\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # ""imagepos"": ""tc"",\n         ""imagescale"": ""true"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""XXfontnameXX"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #49', 'line': 67, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -64,7 +64,7 @@\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # ""imagepos"": ""tc"",\n         ""imagescale"": ""true"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""fontname"": ""XXSans-SerifXX"",\n         ""fontsize"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #50', 'line': 68, 'description': ['        ""fontsize"": ""13"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # ""imagepos"": ""tc"",\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""13"",\n+        ""XXfontsizeXX"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 68, 'description': ['        ""fontsize"": ""13"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # ""imagepos"": ""tc"",\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""13"",\n+        ""fontsize"": ""XX13XX"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4658', 'line': 60, 'description': ['def Container(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology="""", description="""", **kwargs):\n+def Container(name, technology=""XXXX"", description="""", **kwargs):\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4659', 'line': 60, 'description': ['def Container(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology="""", description="""", **kwargs):\n+def Container(name, technology="""", description=""XXXX"", **kwargs):\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4660', 'line': 62, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4661', 'line': 63, 'description': ['        ""technology"": technology,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -60,7 +60,7 @@\n def Container(name, technology="""", description="""", **kwargs):\n     container_attributes = {\n         ""name"": name,\n-        ""technology"": technology,\n+        ""XXtechnologyXX"": technology,\n         ""description"": description,\n         ""type"": ""Container"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4662', 'line': 64, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -61,7 +61,7 @@\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""Container"",\n     }\n     container_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4663', 'line': 65, 'description': ['        ""type"": ""Container"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Container"",\n+        ""XXtypeXX"": ""Container"",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4664', 'line': 65, 'description': ['        ""type"": ""Container"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Container"",\n+        ""type"": ""XXContainerXX"",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4665', 'line': 66, 'description': ['    }'], 'failure': []}]",11.11111111111111,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,Database,71-81,"[{'lineno': 71, 'coloffset': 0, 'linematch': 'def Database(name, technology="""", description="""", **kwargs):', 'context': '    container_attributes.update(kwargs)\n    return C4Node(**container_attributes)\n\n\ndef Database(name, technology="""", description="""", **kwargs):\n    database_attributes = {\n        ""name"": name,\n        ""technology"": technology,\n        ""description"": description,\n        ""type"": ""Database"",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 72, 'coloffset': 4, 'linematch': 'database_attributes = {', 'context': '    return C4Node(**container_attributes)\n\n\ndef Database(name, technology="""", description="""", **kwargs):\n    database_attributes = {\n        ""name"": name,\n        ""technology"": technology,\n        ""description"": description,\n        ""type"": ""Database"",\n        ""shape"": ""cylinder"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 80, 'coloffset': 4, 'linematch': 'database_attributes.update(kwargs)', 'context': '        ""type"": ""Database"",\n        ""shape"": ""cylinder"",\n        ""labelloc"": ""b"",\n    }\n    database_attributes.update(kwargs)\n    return C4Node(**database_attributes)\n\n\ndef System(name, description="""", external=False, **kwargs):\n    system_attributes = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 81, 'coloffset': 4, 'linematch': 'return C4Node(**database_attributes)', 'context': '        ""shape"": ""cylinder"",\n        ""labelloc"": ""b"",\n    }\n    database_attributes.update(kwargs)\n    return C4Node(**database_attributes)\n\n\ndef System(name, description="""", external=False, **kwargs):\n    system_attributes = {\n        ""name"": name,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #55', 'line': 72, 'description': ['        ""color"": ""#7B8894"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n-        ""color"": ""#7B8894"",\n+        ""XXcolorXX"": ""#7B8894"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 72, 'description': ['        ""color"": ""#7B8894"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n-        ""color"": ""#7B8894"",\n+        ""color"": ""XX#7B8894XX"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #57', 'line': 73, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #58', 'line': 81, 'description': ['        name: str = """",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -78,7 +78,7 @@\n     # TODO: Save directory option (filename + directory?)\n     def __init__(\n         self,\n-        name: str = """",\n+        name: str = ""XXXX"",\n         filename: str = """",\n         direction: str = ""LR"",\n         curvestyle: str = ""ortho"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4666', 'line': 71, 'description': ['def Database(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology="""", description="""", **kwargs):\n+def Database(name, technology=""XXXX"", description="""", **kwargs):\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4667', 'line': 71, 'description': ['def Database(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology="""", description="""", **kwargs):\n+def Database(name, technology="""", description=""XXXX"", **kwargs):\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4668', 'line': 73, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4669', 'line': 74, 'description': ['        ""technology"": technology,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -71,7 +71,7 @@\n def Database(name, technology="""", description="""", **kwargs):\n     database_attributes = {\n         ""name"": name,\n-        ""technology"": technology,\n+        ""XXtechnologyXX"": technology,\n         ""description"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4670', 'line': 75, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -72,7 +72,7 @@\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4671', 'line': 76, 'description': ['        ""type"": ""Database"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Database"",\n+        ""XXtypeXX"": ""Database"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4672', 'line': 76, 'description': ['        ""type"": ""Database"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Database"",\n+        ""type"": ""XXDatabaseXX"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4673', 'line': 77, 'description': ['        ""shape"": ""cylinder"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         ""technology"": technology,\n         ""description"": description,\n         ""type"": ""Database"",\n-        ""shape"": ""cylinder"",\n+        ""XXshapeXX"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n     database_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4674', 'line': 77, 'description': ['        ""shape"": ""cylinder"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         ""technology"": technology,\n         ""description"": description,\n         ""type"": ""Database"",\n-        ""shape"": ""cylinder"",\n+        ""shape"": ""XXcylinderXX"",\n         ""labelloc"": ""b"",\n     }\n     database_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4675', 'line': 78, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         ""description"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n-        ""labelloc"": ""b"",\n+        ""XXlabellocXX"": ""b"",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4676', 'line': 78, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         ""description"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n-        ""labelloc"": ""b"",\n+        ""labelloc"": ""XXbXX"",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4677', 'line': 79, 'description': ['    }'], 'failure': []}]",18.75,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,System,84-92,"[{'lineno': 84, 'coloffset': 0, 'linematch': 'def System(name, description="""", external=False, **kwargs):', 'context': '    database_attributes.update(kwargs)\n    return C4Node(**database_attributes)\n\n\ndef System(name, description="""", external=False, **kwargs):\n    system_attributes = {\n        ""name"": name,\n        ""description"": description,\n        ""type"": ""External System"" if external else ""System"",\n        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 85, 'coloffset': 4, 'linematch': 'system_attributes = {', 'context': '    return C4Node(**database_attributes)\n\n\ndef System(name, description="""", external=False, **kwargs):\n    system_attributes = {\n        ""name"": name,\n        ""description"": description,\n        ""type"": ""External System"" if external else ""System"",\n        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n    }', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 91, 'coloffset': 4, 'linematch': 'system_attributes.update(kwargs)', 'context': '        ""description"": description,\n        ""type"": ""External System"" if external else ""System"",\n        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n    }\n    system_attributes.update(kwargs)\n    return C4Node(**system_attributes)\n\n\ndef Person(name, description="""", external=False, **kwargs):\n    person_attributes = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 92, 'coloffset': 4, 'linematch': 'return C4Node(**system_attributes)', 'context': '        ""type"": ""External System"" if external else ""System"",\n        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n    }\n    system_attributes.update(kwargs)\n    return C4Node(**system_attributes)\n\n\ndef Person(name, description="""", external=False, **kwargs):\n    person_attributes = {\n        ""name"": name,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #61', 'line': 84, 'description': ['        curvestyle: str = ""ortho"",'], 'failure': []}, {'name': 'Mutant #62', 'line': 85, 'description': ['        outformat: str = ""png"",'], 'failure': []}, {'name': 'Mutant #63', 'line': 86, 'description': ['        autolabel: bool = False,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -83,7 +83,7 @@\n         direction: str = ""LR"",\n         curvestyle: str = ""ortho"",\n         outformat: str = ""png"",\n-        autolabel: bool = False,\n+        autolabel: bool = True,\n         show: bool = True,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #64', 'line': 87, 'description': ['        show: bool = True,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -84,7 +84,7 @@\n         curvestyle: str = ""ortho"",\n         outformat: str = ""png"",\n         autolabel: bool = False,\n-        show: bool = True,\n+        show: bool = False,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #65', 'line': 88, 'description': ['        strict: bool = False,'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -85,7 +85,7 @@\n         outformat: str = ""png"",\n         autolabel: bool = False,\n         show: bool = True,\n-        strict: bool = False,\n+        strict: bool = True,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n         edge_attr: Optional[dict] = None,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4678', 'line': 84, 'description': ['def System(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description="""", external=False, **kwargs):\n+def System(name, description=""XXXX"", external=False, **kwargs):\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4679', 'line': 84, 'description': ['def System(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description="""", external=False, **kwargs):\n+def System(name, description="""", external=True, **kwargs):\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4680', 'line': 86, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4681', 'line': 87, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -84,7 +84,7 @@\n def System(name, description="""", external=False, **kwargs):\n     system_attributes = {\n         ""name"": name,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""External System"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4682', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""XXtypeXX"": ""External System"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4683', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""type"": ""XXExternal SystemXX"" if external else ""System"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4684', 'line': 88, 'description': ['        ""type"": ""External System"" if external else ""System"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External System"" if external else ""System"",\n+        ""type"": ""External System"" if external else ""XXSystemXX"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4685', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""XXfillcolorXX"": ""gray60"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4686', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""XXgray60XX"" if external else ""dodgerblue4"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4687', 'line': 89, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External System"" if external else ""System"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""gray60"" if external else ""XXdodgerblue4XX"",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4688', 'line': 90, 'description': ['    }'], 'failure': []}]",25.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,Person,95-104,"[{'lineno': 95, 'coloffset': 0, 'linematch': 'def Person(name, description="""", external=False, **kwargs):', 'context': '    system_attributes.update(kwargs)\n    return C4Node(**system_attributes)\n\n\ndef Person(name, description="""", external=False, **kwargs):\n    person_attributes = {\n        ""name"": name,\n        ""description"": description,\n        ""type"": ""External Person"" if external else ""Person"",\n        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 96, 'coloffset': 4, 'linematch': 'person_attributes = {', 'context': '    return C4Node(**system_attributes)\n\n\ndef Person(name, description="""", external=False, **kwargs):\n    person_attributes = {\n        ""name"": name,\n        ""description"": description,\n        ""type"": ""External Person"" if external else ""Person"",\n        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n        ""style"": ""rounded,filled"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 103, 'coloffset': 4, 'linematch': 'person_attributes.update(kwargs)', 'context': '        ""type"": ""External Person"" if external else ""Person"",\n        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n        ""style"": ""rounded,filled"",\n    }\n    person_attributes.update(kwargs)\n    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 104, 'coloffset': 4, 'linematch': 'return C4Node(**person_attributes)', 'context': '        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n        ""style"": ""rounded,filled"",\n    }\n    person_attributes.update(kwargs)\n    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {\n        ""label"": html.escape(name),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4689', 'line': 95, 'description': ['def Person(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description="""", external=False, **kwargs):\n+def Person(name, description=""XXXX"", external=False, **kwargs):\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4690', 'line': 95, 'description': ['def Person(name, description="""", external=False, **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description="""", external=False, **kwargs):\n+def Person(name, description="""", external=True, **kwargs):\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4691', 'line': 97, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4692', 'line': 98, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -95,7 +95,7 @@\n def Person(name, description="""", external=False, **kwargs):\n     person_attributes = {\n         ""name"": name,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4693', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""XXtypeXX"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4694', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""type"": ""XXExternal PersonXX"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4695', 'line': 99, 'description': ['        ""type"": ""External Person"" if external else ""Person"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         ""name"": name,\n         ""description"": description,\n-        ""type"": ""External Person"" if external else ""Person"",\n+        ""type"": ""External Person"" if external else ""XXPersonXX"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4696', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""XXfillcolorXX"": ""gray60"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4697', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""XXgray60XX"" if external else ""dodgerblue4"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4698', 'line': 100, 'description': ['        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         ""name"": name,\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n-        ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n+        ""fillcolor"": ""gray60"" if external else ""XXdodgerblue4XX"",\n         ""style"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4699', 'line': 101, 'description': ['        ""style"": ""rounded,filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n-        ""style"": ""rounded,filled"",\n+        ""XXstyleXX"": ""rounded,filled"",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4700', 'line': 101, 'description': ['        ""style"": ""rounded,filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         ""description"": description,\n         ""type"": ""External Person"" if external else ""Person"",\n         ""fillcolor"": ""gray60"" if external else ""dodgerblue4"",\n-        ""style"": ""rounded,filled"",\n+        ""style"": ""XXrounded,filledXX"",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4701', 'line': 102, 'description': ['    }'], 'failure': []}]",15.384615384615385,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,SystemBoundary,107-115,"[{'lineno': 107, 'coloffset': 0, 'linematch': 'def SystemBoundary(name, **kwargs):', 'context': '    person_attributes.update(kwargs)\n    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {\n        ""label"": html.escape(name),\n        ""bgcolor"": ""white"",\n        ""margin"": ""16"",\n        ""style"": ""dashed"",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 108, 'coloffset': 4, 'linematch': 'graph_attributes = {', 'context': '    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {\n        ""label"": html.escape(name),\n        ""bgcolor"": ""white"",\n        ""margin"": ""16"",\n        ""style"": ""dashed"",\n    }', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 114, 'coloffset': 4, 'linematch': 'graph_attributes.update(kwargs)', 'context': '        ""bgcolor"": ""white"",\n        ""margin"": ""16"",\n        ""style"": ""dashed"",\n    }\n    graph_attributes.update(kwargs)\n    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label="""", **kwargs):\n    edge_attributes = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 115, 'coloffset': 4, 'linematch': 'return Cluster(name, graph_attr=graph_attributes)', 'context': '        ""margin"": ""16"",\n        ""style"": ""dashed"",\n    }\n    graph_attributes.update(kwargs)\n    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label="""", **kwargs):\n    edge_attributes = {\n        ""style"": ""dashed"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #66', 'line': 108, 'description': ['        if graph_attr is None:'], 'failure': []}, {'name': 'Mutant #67', 'line': 109, 'description': ['            graph_attr = {}'], 'failure': []}, {'name': 'Mutant #68', 'line': 110, 'description': ['        if node_attr is None:'], 'failure': []}, {'name': 'Mutant #69', 'line': 111, 'description': ['            node_attr = {}'], 'failure': []}, {'name': 'Mutant #70', 'line': 112, 'description': ['        if edge_attr is None:'], 'failure': []}, {'name': 'Mutant #71', 'line': 113, 'description': ['            edge_attr = {}'], 'failure': []}, {'name': 'Mutant #72', 'line': 114, 'description': ['        self.name = name'], 'failure': []}, {'name': 'Mutant #73', 'line': 115, 'description': ['        if not name and not filename:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        if not name and not filename:'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -112,7 +112,7 @@\n         if edge_attr is None:\n             edge_attr = {}\n         self.name = name\n-        if not name and not filename:\n+        if not name and  filename:\n             filename = None\n         elif not filename:\n             filename = ""_"".join(self.name.split()).lower()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 115, 'description': ['        if not name and not filename:'], 'failure': []}, {'name': 'Mutant #4702', 'line': 109, 'description': ['        ""label"": html.escape(name),'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -106,7 +106,7 @@\n \n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n-        ""label"": html.escape(name),\n+        ""XXlabelXX"": html.escape(name),\n         ""bgcolor"": ""white"",\n         ""margin"": ""16"",\n         ""style"": ""dashed"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4703', 'line': 110, 'description': ['        ""bgcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         ""label"": html.escape(name),\n-        ""bgcolor"": ""white"",\n+        ""XXbgcolorXX"": ""white"",\n         ""margin"": ""16"",\n         ""style"": ""dashed"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4704', 'line': 110, 'description': ['        ""bgcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         ""label"": html.escape(name),\n-        ""bgcolor"": ""white"",\n+        ""bgcolor"": ""XXwhiteXX"",\n         ""margin"": ""16"",\n         ""style"": ""dashed"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4705', 'line': 111, 'description': ['        ""margin"": ""16"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         ""label"": html.escape(name),\n         ""bgcolor"": ""white"",\n-        ""margin"": ""16"",\n+        ""XXmarginXX"": ""16"",\n         ""style"": ""dashed"",\n     }\n     graph_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4706', 'line': 111, 'description': ['        ""margin"": ""16"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         ""label"": html.escape(name),\n         ""bgcolor"": ""white"",\n-        ""margin"": ""16"",\n+        ""margin"": ""XX16XX"",\n         ""style"": ""dashed"",\n     }\n     graph_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4707', 'line': 112, 'description': ['        ""style"": ""dashed"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -109,7 +109,7 @@\n         ""label"": html.escape(name),\n         ""bgcolor"": ""white"",\n         ""margin"": ""16"",\n-        ""style"": ""dashed"",\n+        ""XXstyleXX"": ""dashed"",\n     }\n     graph_attributes.update(kwargs)\n     return Cluster(name, graph_attr=graph_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4708', 'line': 112, 'description': ['        ""style"": ""dashed"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -109,7 +109,7 @@\n         ""label"": html.escape(name),\n         ""bgcolor"": ""white"",\n         ""margin"": ""16"",\n-        ""style"": ""dashed"",\n+        ""style"": ""XXdashedXX"",\n     }\n     graph_attributes.update(kwargs)\n     return Cluster(name, graph_attr=graph_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4709', 'line': 113, 'description': ['    }'], 'failure': []}]",55.55555555555556,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,Relationship,118-125,"[{'lineno': 118, 'coloffset': 0, 'linematch': 'def Relationship(label="""", **kwargs):', 'context': '    graph_attributes.update(kwargs)\n    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label="""", **kwargs):\n    edge_attributes = {\n        ""style"": ""dashed"",\n        ""color"": ""gray60"",\n        ""label"": _format_edge_label(label) if label else """",\n    }', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 119, 'coloffset': 4, 'linematch': 'edge_attributes = {', 'context': '    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label="""", **kwargs):\n    edge_attributes = {\n        ""style"": ""dashed"",\n        ""color"": ""gray60"",\n        ""label"": _format_edge_label(label) if label else """",\n    }\n    edge_attributes.update(kwargs)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 124, 'coloffset': 4, 'linematch': 'edge_attributes.update(kwargs)', 'context': '        ""style"": ""dashed"",\n        ""color"": ""gray60"",\n        ""label"": _format_edge_label(label) if label else """",\n    }\n    edge_attributes.update(kwargs)\n    return Edge(**edge_attributes)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 125, 'coloffset': 4, 'linematch': 'return Edge(**edge_attributes)', 'context': '        ""color"": ""gray60"",\n        ""label"": _format_edge_label(label) if label else """",\n    }\n    edge_attributes.update(kwargs)\n    return Edge(**edge_attributes)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #78', 'line': 118, 'description': ['            filename = ""_"".join(self.name.split()).lower()'], 'failure': []}, {'name': 'Mutant #79', 'line': 118, 'description': ['            filename = ""_"".join(self.name.split()).lower()'], 'failure': []}, {'name': 'Mutant #80', 'line': 119, 'description': ['        self.filename = filename'], 'failure': []}, {'name': 'Mutant #81', 'line': 120, 'description': ['        self.dot = Digraph(self.name, filename=self.filename, strict=strict)'], 'failure': []}, {'name': 'Mutant #82', 'line': 124, 'description': ['            self.dot.graph_attr[k] = v'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -121,7 +121,7 @@\n \n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n-            self.dot.graph_attr[k] = v\n+            self.dot.graph_attr[k] = None\n         self.dot.graph_attr[""label""] = self.name\n         for k, v in self._default_node_attrs.items():\n             self.dot.node_attr[k] = v\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #83', 'line': 125, 'description': ['        self.dot.graph_attr[""label""] = self.name'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -122,7 +122,7 @@\n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n             self.dot.graph_attr[k] = v\n-        self.dot.graph_attr[""label""] = self.name\n+        self.dot.graph_attr[""XXlabelXX""] = self.name\n         for k, v in self._default_node_attrs.items():\n             self.dot.node_attr[k] = v\n         for k, v in self._default_edge_attrs.items():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #84', 'line': 125, 'description': ['        self.dot.graph_attr[""label""] = self.name'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -122,7 +122,7 @@\n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n             self.dot.graph_attr[k] = v\n-        self.dot.graph_attr[""label""] = self.name\n+        self.dot.graph_attr[""label""] = None\n         for k, v in self._default_node_attrs.items():\n             self.dot.node_attr[k] = v\n         for k, v in self._default_edge_attrs.items():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4710', 'line': 118, 'description': ['def Relationship(label="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -115,7 +115,7 @@\n     return Cluster(name, graph_attr=graph_attributes)\n \n \n-def Relationship(label="""", **kwargs):\n+def Relationship(label=""XXXX"", **kwargs):\n     edge_attributes = {\n         ""style"": ""dashed"",\n         ""color"": ""gray60"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4711', 'line': 120, 'description': ['        ""style"": ""dashed"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -117,7 +117,7 @@\n \n def Relationship(label="""", **kwargs):\n     edge_attributes = {\n-        ""style"": ""dashed"",\n+        ""XXstyleXX"": ""dashed"",\n         ""color"": ""gray60"",\n         ""label"": _format_edge_label(label) if label else """",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4712', 'line': 120, 'description': ['        ""style"": ""dashed"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -117,7 +117,7 @@\n \n def Relationship(label="""", **kwargs):\n     edge_attributes = {\n-        ""style"": ""dashed"",\n+        ""style"": ""XXdashedXX"",\n         ""color"": ""gray60"",\n         ""label"": _format_edge_label(label) if label else """",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4713', 'line': 121, 'description': ['        ""color"": ""gray60"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -118,7 +118,7 @@\n def Relationship(label="""", **kwargs):\n     edge_attributes = {\n         ""style"": ""dashed"",\n-        ""color"": ""gray60"",\n+        ""XXcolorXX"": ""gray60"",\n         ""label"": _format_edge_label(label) if label else """",\n     }\n     edge_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4714', 'line': 121, 'description': ['        ""color"": ""gray60"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -118,7 +118,7 @@\n def Relationship(label="""", **kwargs):\n     edge_attributes = {\n         ""style"": ""dashed"",\n-        ""color"": ""gray60"",\n+        ""color"": ""XXgray60XX"",\n         ""label"": _format_edge_label(label) if label else """",\n     }\n     edge_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4715', 'line': 122, 'description': ['        ""label"": _format_edge_label(label) if label else """",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         ""style"": ""dashed"",\n         ""color"": ""gray60"",\n-        ""label"": _format_edge_label(label) if label else """",\n+        ""XXlabelXX"": _format_edge_label(label) if label else """",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4716', 'line': 122, 'description': ['        ""label"": _format_edge_label(label) if label else """",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         ""style"": ""dashed"",\n         ""color"": ""gray60"",\n-        ""label"": _format_edge_label(label) if label else """",\n+        ""label"": _format_edge_label(label) if label else ""XXXX"",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4717', 'line': 123, 'description': ['    }'], 'failure': []}]",33.33333333333333,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,setUp,206-207,"[{'lineno': 206, 'coloffset': 4, 'linematch': 'def setUp(self):', 'context': '                self.assertEqual(nodes << node1, node1)\n\n\nclass EdgeTest(unittest.TestCase):\n    def setUp(self):\n        self.name = ""edge_test""\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 12, 'coloffset': 4, 'linematch': 'def setUp(self):', 'context': 'from diagrams.c4 import Person, Container, Database, System, SystemBoundary, Relationship\n\n\nclass C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = ""diagram-"" + """".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 12, 'coloffset': 4, 'linematch': 'def setUp(self):', 'context': 'from diagrams.c4 import Person, Container, Database, System, SystemBoundary, Relationship\n\n\nclass C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = ""diagram-"" + """".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 207, 'coloffset': 8, 'linematch': 'self.name = ""edge_test""', 'context': '\n\nclass EdgeTest(unittest.TestCase):\n    def setUp(self):\n        self.name = ""edge_test""\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 13, 'coloffset': 8, 'linematch': 'self.name = ""diagram-"" + """".join([random.choice(string.hexdigits) for n in range(7)]).lower()', 'context': '\n\nclass C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = ""diagram-"" + """".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #119', 'line': 207, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""shape"": ""box"",\n+        ""XXshapeXX"": ""box"",\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 207, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""shape"": ""box"",\n+        ""shape"": ""XXboxXX"",\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'FLV001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,tearDown,209-216,"[{'lineno': 209, 'coloffset': 4, 'linematch': 'def tearDown(self):', 'context': 'class EdgeTest(unittest.TestCase):\n    def setUp(self):\n        self.name = ""edge_test""\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 15, 'coloffset': 4, 'linematch': 'def tearDown(self):', 'context': 'class C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = ""diagram-"" + """".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + "".png"")\n        except FileNotFoundError:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'setdiagram(None)', 'context': '    def setUp(self):\n        self.name = ""edge_test""\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 211, 'coloffset': 8, 'linematch': 'setcluster(None)', 'context': '        self.name = ""edge_test""\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:\n            pass', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 213, 'coloffset': 8, 'linematch': 'try:', 'context': '    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:\n            pass\n\n    def test_node_to_node(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 16, 'coloffset': 8, 'linematch': 'setdiagram(None)', 'context': '    def setUp(self):\n        self.name = ""diagram-"" + """".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + "".png"")\n        except FileNotFoundError:\n            pass', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 17, 'coloffset': 8, 'linematch': 'setcluster(None)', 'context': '        self.name = ""diagram-"" + """".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + "".png"")\n        except FileNotFoundError:\n            pass\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 18, 'coloffset': 8, 'linematch': 'try:', 'context': '\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + "".png"")\n        except FileNotFoundError:\n            pass\n\n    def test_nodes(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #123', 'line': 209, 'description': ['        ""labeljust"": ""l"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n-        ""labeljust"": ""l"",\n+        ""XXlabeljustXX"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""12"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 209, 'description': ['        ""labeljust"": ""l"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n-        ""labeljust"": ""l"",\n+        ""labeljust"": ""XXlXX"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""12"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 210, 'description': ['        ""pencolor"": ""#AEB6BE"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -207,7 +207,7 @@\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n-        ""pencolor"": ""#AEB6BE"",\n+        ""XXpencolorXX"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""12"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #126', 'line': 210, 'description': ['        ""pencolor"": ""#AEB6BE"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -207,7 +207,7 @@\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n-        ""pencolor"": ""#AEB6BE"",\n+        ""pencolor"": ""XX#AEB6BEXX"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""12"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #127', 'line': 211, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -208,7 +208,7 @@\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""XXfontnameXX"": ""Sans-Serif"",\n         ""fontsize"": ""12"",\n     }\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #128', 'line': 211, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -208,7 +208,7 @@\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""fontname"": ""XXSans-SerifXX"",\n         ""fontsize"": ""12"",\n     }\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 212, 'description': ['        ""fontsize"": ""12"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -209,7 +209,7 @@\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""12"",\n+        ""XXfontsizeXX"": ""12"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 212, 'description': ['        ""fontsize"": ""12"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -209,7 +209,7 @@\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""12"",\n+        ""fontsize"": ""XX12XX"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #131', 'line': 213, 'description': ['    }'], 'failure': []}]",11.11111111111111,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,load_tmpl,13-16,"[{'lineno': 13, 'coloffset': 0, 'linematch': 'def load_tmpl(tmpl: str) -> Template:', 'context': '\n_usage = ""Usage: generate.py <provider>""\n\n\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[""up_or_title""] = up_or_title\n    return env.get_template(tmpl)\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 14, 'coloffset': 4, 'linematch': 'env = Environment(loader=FileSystemLoader(template_dir()))', 'context': '_usage = ""Usage: generate.py <provider>""\n\n\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[""up_or_title""] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 15, 'coloffset': 4, 'linematch': 'env.filters[""up_or_title""] = up_or_title', 'context': '\n\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[""up_or_title""] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 16, 'coloffset': 4, 'linematch': 'return env.get_template(tmpl)', 'context': '\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[""up_or_title""] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #1', 'line': 14, 'description': ['__diagram = contextvars.ContextVar(""diagrams"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -11,7 +11,7 @@\n # These global contexts are for letting the clusters and nodes know\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n-__diagram = contextvars.ContextVar(""diagrams"")\n+__diagram = contextvars.ContextVar(""XXdiagramsXX"")\n __cluster = contextvars.ContextVar(""cluster"")\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2', 'line': 14, 'description': ['__diagram = contextvars.ContextVar(""diagrams"")'], 'failure': []}, {'name': 'Mutant #3', 'line': 15, 'description': ['__cluster = contextvars.ContextVar(""cluster"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -12,7 +12,7 @@\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n __diagram = contextvars.ContextVar(""diagrams"")\n-__cluster = contextvars.ContextVar(""cluster"")\n+__cluster = contextvars.ContextVar(""XXclusterXX"")\n \n \n def getdiagram() -> ""Diagram"":\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 15, 'description': ['__cluster = contextvars.ContextVar(""cluster"")'], 'failure': []}, {'name': 'Mutant #4608', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = f\'XX<br/><font point-size=""10"">{_format_description(description)}</font>XX\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4609', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else ""XXXX""\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4610', 'line': 13, 'description': ['    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n-    text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n+    text = None\n     return f""<{title}{subtitle}{text}>""\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4611', 'line': 14, 'description': ['    return f""<{title}{subtitle}{text}>""'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -11,7 +11,7 @@\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n-    return f""<{title}{subtitle}{text}>""\n+    return f""XX<{title}{subtitle}{text}>XX""\n \n \n def _format_description(description):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4723', 'line': 13, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = ""custom""\n     _icon_dir = None\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n     def _load_icon(self):\n         return self._icon\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4724', 'line': 13, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = ""custom""\n     _icon_dir = None\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n     def _load_icon(self):\n         return self._icon\n', 'type': 'failure', 'message': 'bad_survived'}]}]",20.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,gen_classes,27-40,"[{'lineno': 27, 'coloffset': 0, 'linematch': 'def gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:', 'context': '        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    """"""Generate all service node classes based on resources paths with class templates.""""""\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 33, 'coloffset': 4, 'linematch': 'def _gen_class_meta(path: str) -> dict:', 'context': '    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 27, 'coloffset': 0, 'linematch': 'def gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:', 'context': '        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    """"""Generate all service node classes based on resources paths with class templates.""""""\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 33, 'coloffset': 4, 'linematch': 'def _gen_class_meta(path: str) -> dict:', 'context': '    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 27, 'coloffset': 0, 'linematch': 'def gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:', 'context': '        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    """"""Generate all service node classes based on resources paths with class templates.""""""\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 28, 'coloffset': 4, 'linematch': '""""""Generate all service node classes based on resources paths with class templates.""""""', 'context': '    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    """"""Generate all service node classes based on resources paths with class templates.""""""\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 29, 'coloffset': 4, 'linematch': 'tmpl = load_tmpl(cfg.TMPL_MODULE)', 'context': '\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    """"""Generate all service node classes based on resources paths with class templates.""""""\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 33, 'coloffset': 4, 'linematch': 'def _gen_class_meta(path: str) -> dict:', 'context': '    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 34, 'coloffset': 8, 'linematch': 'base = os.path.splitext(path)[0]', 'context': '\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 35, 'coloffset': 8, 'linematch': 'name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])', 'context': '    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 36, 'coloffset': 8, 'linematch': 'return {""name"": name, ""icon"": path}', 'context': '    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 38, 'coloffset': 4, 'linematch': 'metas = map(_gen_class_meta, paths)', 'context': '        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 39, 'coloffset': 4, 'linematch': 'aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}', 'context': '        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 40, 'coloffset': 4, 'linematch': 'return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)', 'context': '        return {""name"": name, ""icon"": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split(\'.\')', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4615', 'line': 27, 'description': ['    lines = [html.escape(line) for line in wrapper.wrap(description)]'], 'failure': []}, {'name': 'Mutant #4616', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines = [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4617', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': []}, {'name': 'Mutant #4618', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""XXXX""] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4619', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': []}, {'name': 'Mutant #4620', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""""] * (4 - len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4621', 'line': 28, 'description': ['    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     """"""\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [""""] * (3 + len(lines))  # fill up with empty lines so it is always three\n     return ""<br/>"".join(lines)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4622', 'line': 29, 'description': ['    return ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [""""] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return ""<br/>"".join(lines)\n+    return ""XX<br/>XX"".join(lines)\n \n \n def _format_edge_label(description):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4623', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     """"""Create a graphviz label string for a C4 edge""""""\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=25, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4624', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     """"""Create a graphviz label string for a C4 edge""""""\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=24, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4625', 'line': 34, 'description': ['    wrapper = textwrap.TextWrapper(width=24, max_lines=3)'], 'failure': []}, {'name': 'Mutant #4626', 'line': 35, 'description': ['    lines = [html.escape(line) for line in wrapper.wrap(description)]'], 'failure': []}, {'name': 'Mutant #4627', 'line': 36, 'description': ['    text = ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     """"""Create a graphviz label string for a C4 edge""""""\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = ""<br/>"".join(lines)\n+    text = ""XX<br/>XX"".join(lines)\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4628', 'line': 36, 'description': ['    text = ""<br/>"".join(lines)'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     """"""Create a graphviz label string for a C4 edge""""""\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = ""<br/>"".join(lines)\n+    text = None\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4629', 'line': 37, 'description': ['    return f\'<<font point-size=""10"">{text}</font>>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = ""<br/>"".join(lines)\n-    return f\'<<font point-size=""10"">{text}</font>>\'\n+    return f\'XX<<font point-size=""10"">{text}</font>>XX\'\n \n \n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4630', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology=""XXXX"", description="""", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4631', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology="""", description=""XXXX"", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4632', 'line': 40, 'description': ['def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f\'<<font point-size=""10"">{text}</font>>\'\n \n \n-def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n+def C4Node(name, technology="""", description="""", type=""XXContainerXX"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n', 'type': 'failure', 'message': 'bad_survived'}]}]",27.77777777777778,['ANNOT001' 'FLV001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,gen_apidoc,43-65,"[{'lineno': 43, 'coloffset': 0, 'linematch': 'def gen_apidoc(pvd: str, typ_paths: dict) -> str:', 'context': '    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split(\'.\')\n      tmpl_file = f""{default_tmp[0]}_{pvd}.{default_tmp[1]}""\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 52, 'coloffset': 4, 'linematch': 'def _gen_class_name(path: str) -> str:', 'context': '    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 43, 'coloffset': 0, 'linematch': 'def gen_apidoc(pvd: str, typ_paths: dict) -> str:', 'context': '    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split(\'.\')\n      tmpl_file = f""{default_tmp[0]}_{pvd}.{default_tmp[1]}""\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 52, 'coloffset': 4, 'linematch': 'def _gen_class_name(path: str) -> str:', 'context': '    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 43, 'coloffset': 0, 'linematch': 'def gen_apidoc(pvd: str, typ_paths: dict) -> str:', 'context': '    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split(\'.\')\n      tmpl_file = f""{default_tmp[0]}_{pvd}.{default_tmp[1]}""\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 58, 'coloffset': 4, 'linematch': 'for typ, (paths, resource_root) in sorted(typ_paths.items()):', 'context': '        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:\n            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)\n            alias = cfg.ALIASES[pvd].get(typ, {}).get(name)', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 44, 'coloffset': 4, 'linematch': 'try:', 'context': '    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split(\'.\')\n      tmpl_file = f""{default_tmp[0]}_{pvd}.{default_tmp[1]}""\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 52, 'coloffset': 4, 'linematch': 'def _gen_class_name(path: str) -> str:', 'context': '    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 53, 'coloffset': 8, 'linematch': 'base = os.path.splitext(path)[0]', 'context': '      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 54, 'coloffset': 8, 'linematch': 'name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])', 'context': '\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 55, 'coloffset': 8, 'linematch': 'return name', 'context': '    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 57, 'coloffset': 4, 'linematch': 'typ_classes = {}', 'context': '        base = os.path.splitext(path)[0]\n        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:\n            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 58, 'coloffset': 4, 'linematch': 'for typ, (paths, resource_root) in sorted(typ_paths.items()):', 'context': '        name = """".join([up_or_title(pvd, s) for s in base.split(""-"")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:\n            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)\n            alias = cfg.ALIASES[pvd].get(typ, {}).get(name)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 65, 'coloffset': 4, 'linematch': 'return tmpl.render(pvd=pvd, typ_classes=typ_classes)', 'context': '            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)\n            alias = cfg.ALIASES[pvd].get(typ, {}).get(name)\n            typ_classes[typ].append({""name"": name, ""alias"": alias, ""resource_path"": resource_path})\n    return tmpl.render(pvd=pvd, typ_classes=typ_classes)\n\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    """"""Create a module file""""""\n    mod_path = os.path.join(app_root_dir(pvd), f""{typ}.py"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #13', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #14', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #15', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #16', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #17', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #18', 'line': 43, 'description': ['    __outformats = (""png"", ""jpg"", ""svg"", ""pdf"", ""dot"")'], 'failure': []}, {'name': 'Mutant #19', 'line': 47, 'description': ['        ""pad"": ""2.0"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""pad"": ""2.0"",\n+        ""XXpadXX"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #20', 'line': 47, 'description': ['        ""pad"": ""2.0"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""pad"": ""2.0"",\n+        ""pad"": ""XX2.0XX"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #21', 'line': 48, 'description': ['        ""splines"": ""ortho"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n-        ""splines"": ""ortho"",\n+        ""XXsplinesXX"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #22', 'line': 48, 'description': ['        ""splines"": ""ortho"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n-        ""splines"": ""ortho"",\n+        ""splines"": ""XXorthoXX"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #23', 'line': 49, 'description': ['        ""nodesep"": ""0.60"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n-        ""nodesep"": ""0.60"",\n+        ""XXnodesepXX"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #24', 'line': 49, 'description': ['        ""nodesep"": ""0.60"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n-        ""nodesep"": ""0.60"",\n+        ""nodesep"": ""XX0.60XX"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #25', 'line': 50, 'description': ['        ""ranksep"": ""0.75"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n-        ""ranksep"": ""0.75"",\n+        ""XXranksepXX"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #26', 'line': 50, 'description': ['        ""ranksep"": ""0.75"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         ""pad"": ""2.0"",\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n-        ""ranksep"": ""0.75"",\n+        ""ranksep"": ""XX0.75XX"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #27', 'line': 51, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""XXfontnameXX"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #28', 'line': 51, 'description': ['        ""fontname"": ""Sans-Serif"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         ""splines"": ""ortho"",\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n-        ""fontname"": ""Sans-Serif"",\n+        ""fontname"": ""XXSans-SerifXX"",\n         ""fontsize"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 52, 'description': ['        ""fontsize"": ""15"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""15"",\n+        ""XXfontsizeXX"": ""15"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 52, 'description': ['        ""fontsize"": ""15"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         ""nodesep"": ""0.60"",\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""15"",\n+        ""fontsize"": ""XX15XX"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 53, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""XXfontcolorXX"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #32', 'line': 53, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         ""ranksep"": ""0.75"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""15"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""fontcolor"": ""XX#2D3436XX"",\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #33', 'line': 54, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #34', 'line': 56, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n-        ""shape"": ""box"",\n+        ""XXshapeXX"": ""box"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #35', 'line': 56, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_node_attrs = {\n-        ""shape"": ""box"",\n+        ""shape"": ""XXboxXX"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #36', 'line': 57, 'description': ['        ""style"": ""rounded"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n-        ""style"": ""rounded"",\n+        ""XXstyleXX"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #37', 'line': 57, 'description': ['        ""style"": ""rounded"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         ""shape"": ""box"",\n-        ""style"": ""rounded"",\n+        ""style"": ""XXroundedXX"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #38', 'line': 58, 'description': ['        ""fixedsize"": ""true"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -55,7 +55,7 @@\n     _default_node_attrs = {\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n-        ""fixedsize"": ""true"",\n+        ""XXfixedsizeXX"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n         ""labelloc"": ""b"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #39', 'line': 58, 'description': ['        ""fixedsize"": ""true"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -55,7 +55,7 @@\n     _default_node_attrs = {\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n-        ""fixedsize"": ""true"",\n+        ""fixedsize"": ""XXtrueXX"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n         ""labelloc"": ""b"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #40', 'line': 59, 'description': ['        ""width"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n-        ""width"": ""1.4"",\n+        ""XXwidthXX"": ""1.4"",\n         ""height"": ""1.4"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #41', 'line': 59, 'description': ['        ""width"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n-        ""width"": ""1.4"",\n+        ""width"": ""XX1.4XX"",\n         ""height"": ""1.4"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #42', 'line': 60, 'description': ['        ""height"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n-        ""height"": ""1.4"",\n+        ""XXheightXX"": ""1.4"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #43', 'line': 60, 'description': ['        ""height"": ""1.4"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         ""style"": ""rounded"",\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n-        ""height"": ""1.4"",\n+        ""height"": ""XX1.4XX"",\n         ""labelloc"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #44', 'line': 61, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n-        ""labelloc"": ""b"",\n+        ""XXlabellocXX"": ""b"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #45', 'line': 61, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         ""fixedsize"": ""true"",\n         ""width"": ""1.4"",\n         ""height"": ""1.4"",\n-        ""labelloc"": ""b"",\n+        ""labelloc"": ""XXbXX"",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if ""imagepos"" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4635', 'line': 43, 'description': ['        ""label"": _format_node_label(name, key, description),'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology="""", description="""", type=""Container"", **kwargs):\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n-        ""label"": _format_node_label(name, key, description),\n+        ""XXlabelXX"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4636', 'line': 44, 'description': ['        ""labelloc"": ""c"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n-        ""labelloc"": ""c"",\n+        ""XXlabellocXX"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4637', 'line': 44, 'description': ['        ""labelloc"": ""c"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f""{type}: {technology}"" if technology else type\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n-        ""labelloc"": ""c"",\n+        ""labelloc"": ""XXcXX"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4638', 'line': 45, 'description': ['        ""shape"": ""rect"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n-        ""shape"": ""rect"",\n+        ""XXshapeXX"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4639', 'line': 45, 'description': ['        ""shape"": ""rect"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n-        ""shape"": ""rect"",\n+        ""shape"": ""XXrectXX"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4640', 'line': 46, 'description': ['        ""width"": ""2.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n-        ""width"": ""2.6"",\n+        ""XXwidthXX"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4641', 'line': 46, 'description': ['        ""width"": ""2.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         ""label"": _format_node_label(name, key, description),\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n-        ""width"": ""2.6"",\n+        ""width"": ""XX2.6XX"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4642', 'line': 47, 'description': ['        ""height"": ""1.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n-        ""height"": ""1.6"",\n+        ""XXheightXX"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4643', 'line': 47, 'description': ['        ""height"": ""1.6"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         ""labelloc"": ""c"",\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n-        ""height"": ""1.6"",\n+        ""height"": ""XX1.6XX"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4644', 'line': 48, 'description': ['        ""fixedsize"": ""true"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n-        ""fixedsize"": ""true"",\n+        ""XXfixedsizeXX"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4645', 'line': 48, 'description': ['        ""fixedsize"": ""true"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         ""shape"": ""rect"",\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n-        ""fixedsize"": ""true"",\n+        ""fixedsize"": ""XXtrueXX"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4646', 'line': 49, 'description': ['        ""style"": ""filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n-        ""style"": ""filled"",\n+        ""XXstyleXX"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4647', 'line': 49, 'description': ['        ""style"": ""filled"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         ""width"": ""2.6"",\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n-        ""style"": ""filled"",\n+        ""style"": ""XXfilledXX"",\n         ""fillcolor"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4648', 'line': 50, 'description': ['        ""fillcolor"": ""dodgerblue3"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n-        ""fillcolor"": ""dodgerblue3"",\n+        ""XXfillcolorXX"": ""dodgerblue3"",\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4649', 'line': 50, 'description': ['        ""fillcolor"": ""dodgerblue3"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         ""height"": ""1.6"",\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n-        ""fillcolor"": ""dodgerblue3"",\n+        ""fillcolor"": ""XXdodgerblue3XX"",\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4650', 'line': 51, 'description': ['        ""fontcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n-        ""fontcolor"": ""white"",\n+        ""XXfontcolorXX"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4651', 'line': 51, 'description': ['        ""fontcolor"": ""white"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         ""fixedsize"": ""true"",\n         ""style"": ""filled"",\n         ""fillcolor"": ""dodgerblue3"",\n-        ""fontcolor"": ""white"",\n+        ""fontcolor"": ""XXwhiteXX"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4652', 'line': 52, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #4653', 'line': 54, 'description': ['    if not description:'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         ""fontcolor"": ""white"",\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({""width"": ""2"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4654', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""XXwidthXX"": ""2"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4655', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""XX2XX"", ""height"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4656', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""2"", ""XXheightXX"": ""1""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4657', 'line': 55, 'description': ['        node_attributes.update({""width"": ""2"", ""height"": ""1""})'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don\'t have a description\n     if not description:\n-        node_attributes.update({""width"": ""2"", ""height"": ""1""})\n+        node_attributes.update({""width"": ""2"", ""height"": ""XX1XX""})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4658', 'line': 60, 'description': ['def Container(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology="""", description="""", **kwargs):\n+def Container(name, technology=""XXXX"", description="""", **kwargs):\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4659', 'line': 60, 'description': ['def Container(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology="""", description="""", **kwargs):\n+def Container(name, technology="""", description=""XXXX"", **kwargs):\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4660', 'line': 62, 'description': ['        ""name"": name,'], 'failure': []}, {'name': 'Mutant #4661', 'line': 63, 'description': ['        ""technology"": technology,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -60,7 +60,7 @@\n def Container(name, technology="""", description="""", **kwargs):\n     container_attributes = {\n         ""name"": name,\n-        ""technology"": technology,\n+        ""XXtechnologyXX"": technology,\n         ""description"": description,\n         ""type"": ""Container"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4662', 'line': 64, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -61,7 +61,7 @@\n     container_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""Container"",\n     }\n     container_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4663', 'line': 65, 'description': ['        ""type"": ""Container"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Container"",\n+        ""XXtypeXX"": ""Container"",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4664', 'line': 65, 'description': ['        ""type"": ""Container"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Container"",\n+        ""type"": ""XXContainerXX"",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}]",14.285714285714285,['ANNOT001' 'FLV001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*' './/FunctionDef//For[.//For]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 1, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,make_module,68-72,"[{'lineno': 68, 'coloffset': 0, 'linematch': 'def make_module(pvd: str, typ: str, classes: str) -> None:', 'context': '            typ_classes[typ].append({""name"": name, ""alias"": alias, ""resource_path"": resource_path})\n    return tmpl.render(pvd=pvd, typ_classes=typ_classes)\n\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    """"""Create a module file""""""\n    mod_path = os.path.join(app_root_dir(pvd), f""{typ}.py"")\n    with open(mod_path, ""w+"") as f:\n        f.write(classes)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 69, 'coloffset': 4, 'linematch': '""""""Create a module file""""""', 'context': '    return tmpl.render(pvd=pvd, typ_classes=typ_classes)\n\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    """"""Create a module file""""""\n    mod_path = os.path.join(app_root_dir(pvd), f""{typ}.py"")\n    with open(mod_path, ""w+"") as f:\n        f.write(classes)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 70, 'coloffset': 4, 'linematch': 'mod_path = os.path.join(app_root_dir(pvd), f""{typ}.py"")', 'context': '\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    """"""Create a module file""""""\n    mod_path = os.path.join(app_root_dir(pvd), f""{typ}.py"")\n    with open(mod_path, ""w+"") as f:\n        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 71, 'coloffset': 4, 'linematch': 'with open(mod_path, ""w+"") as f:', 'context': '\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    """"""Create a module file""""""\n    mod_path = os.path.join(app_root_dir(pvd), f""{typ}.py"")\n    with open(mod_path, ""w+"") as f:\n        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    """"""Create an api documentation file""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #50', 'line': 68, 'description': ['        ""fontsize"": ""13"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # ""imagepos"": ""tc"",\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""13"",\n+        ""XXfontsizeXX"": ""13"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #51', 'line': 68, 'description': ['        ""fontsize"": ""13"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # ""imagepos"": ""tc"",\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n-        ""fontsize"": ""13"",\n+        ""fontsize"": ""XX13XX"",\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #52', 'line': 69, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""XXfontcolorXX"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n         ""color"": ""#7B8894"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #53', 'line': 69, 'description': ['        ""fontcolor"": ""#2D3436"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         ""imagescale"": ""true"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""13"",\n-        ""fontcolor"": ""#2D3436"",\n+        ""fontcolor"": ""XX#2D3436XX"",\n     }\n     _default_edge_attrs = {\n         ""color"": ""#7B8894"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #54', 'line': 70, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #55', 'line': 72, 'description': ['        ""color"": ""#7B8894"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n-        ""color"": ""#7B8894"",\n+        ""XXcolorXX"": ""#7B8894"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #56', 'line': 72, 'description': ['        ""color"": ""#7B8894"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         ""fontcolor"": ""#2D3436"",\n     }\n     _default_edge_attrs = {\n-        ""color"": ""#7B8894"",\n+        ""color"": ""XX#7B8894XX"",\n     }\n \n     # fmt: on\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4666', 'line': 71, 'description': ['def Database(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology="""", description="""", **kwargs):\n+def Database(name, technology=""XXXX"", description="""", **kwargs):\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4667', 'line': 71, 'description': ['def Database(name, technology="""", description="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology="""", description="""", **kwargs):\n+def Database(name, technology="""", description=""XXXX"", **kwargs):\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",11.11111111111111,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,make_apidoc,75-79,"[{'lineno': 75, 'coloffset': 0, 'linematch': 'def make_apidoc(pvd: str, content: str) -> None:', 'context': '    with open(mod_path, ""w+"") as f:\n        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    """"""Create an api documentation file""""""\n    mod_path = os.path.join(doc_root_dir(), f""{pvd}.md"")\n    with open(mod_path, ""w+"") as f:\n        f.write(content)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 76, 'coloffset': 4, 'linematch': '""""""Create an api documentation file""""""', 'context': '        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    """"""Create an api documentation file""""""\n    mod_path = os.path.join(doc_root_dir(), f""{pvd}.md"")\n    with open(mod_path, ""w+"") as f:\n        f.write(content)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 77, 'coloffset': 4, 'linematch': 'mod_path = os.path.join(doc_root_dir(), f""{pvd}.md"")', 'context': '\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    """"""Create an api documentation file""""""\n    mod_path = os.path.join(doc_root_dir(), f""{pvd}.md"")\n    with open(mod_path, ""w+"") as f:\n        f.write(content)\n\n\ndef generate(pvd: str) -> None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 78, 'coloffset': 4, 'linematch': 'with open(mod_path, ""w+"") as f:', 'context': '\ndef make_apidoc(pvd: str, content: str) -> None:\n    """"""Create an api documentation file""""""\n    mod_path = os.path.join(doc_root_dir(), f""{pvd}.md"")\n    with open(mod_path, ""w+"") as f:\n        f.write(content)\n\n\ndef generate(pvd: str) -> None:\n    """"""Generates a service node classes.""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4670', 'line': 75, 'description': ['        ""description"": description,'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -72,7 +72,7 @@\n     database_attributes = {\n         ""name"": name,\n         ""technology"": technology,\n-        ""description"": description,\n+        ""XXdescriptionXX"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4671', 'line': 76, 'description': ['        ""type"": ""Database"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Database"",\n+        ""XXtypeXX"": ""Database"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4672', 'line': 76, 'description': ['        ""type"": ""Database"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         ""name"": name,\n         ""technology"": technology,\n         ""description"": description,\n-        ""type"": ""Database"",\n+        ""type"": ""XXDatabaseXX"",\n         ""shape"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4673', 'line': 77, 'description': ['        ""shape"": ""cylinder"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         ""technology"": technology,\n         ""description"": description,\n         ""type"": ""Database"",\n-        ""shape"": ""cylinder"",\n+        ""XXshapeXX"": ""cylinder"",\n         ""labelloc"": ""b"",\n     }\n     database_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4674', 'line': 77, 'description': ['        ""shape"": ""cylinder"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         ""technology"": technology,\n         ""description"": description,\n         ""type"": ""Database"",\n-        ""shape"": ""cylinder"",\n+        ""shape"": ""XXcylinderXX"",\n         ""labelloc"": ""b"",\n     }\n     database_attributes.update(kwargs)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4675', 'line': 78, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         ""description"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n-        ""labelloc"": ""b"",\n+        ""XXlabellocXX"": ""b"",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4676', 'line': 78, 'description': ['        ""labelloc"": ""b"",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         ""description"": description,\n         ""type"": ""Database"",\n         ""shape"": ""cylinder"",\n-        ""labelloc"": ""b"",\n+        ""labelloc"": ""XXbXX"",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4677', 'line': 79, 'description': ['    }'], 'failure': []}]",12.5,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_onprem,19-21,"[{'lineno': 19, 'coloffset': 0, 'linematch': 'def cleaner_onprem(f):', 'context': '\n_usage = ""Usage: resource.py <cmd> <pvd>""\n\n\ndef cleaner_onprem(f):\n    f = f.replace(""_"", ""-"")\n    return f.lower()\n\n\ndef cleaner_aws(f):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 20, 'coloffset': 4, 'linematch': 'f = f.replace(""_"", ""-"")', 'context': '_usage = ""Usage: resource.py <cmd> <pvd>""\n\n\ndef cleaner_onprem(f):\n    f = f.replace(""_"", ""-"")\n    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(""_"", ""-"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 21, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '\n\ndef cleaner_onprem(f):\n    f = f.replace(""_"", ""-"")\n    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(""_"", ""-"")\n    f = f.replace(""@4x"", """")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4725', 'line': 19, 'description': ['        self._icon = icon_path'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_programming,114-115,"[{'lineno': 114, 'coloffset': 0, 'linematch': 'def cleaner_programming(f):', 'context': '            break\n    return f.lower()\n\n\ndef cleaner_programming(f):\n    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 115, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    return f.lower()\n\n\ndef cleaner_programming(f):\n    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #72', 'line': 114, 'description': ['        self.name = name'], 'failure': []}, {'name': 'Mutant #73', 'line': 115, 'description': ['        if not name and not filename:'], 'failure': []}, {'name': 'Mutant #74', 'line': 115, 'description': ['        if not name and not filename:'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -112,7 +112,7 @@\n         if edge_attr is None:\n             edge_attr = {}\n         self.name = name\n-        if not name and not filename:\n+        if not name and  filename:\n             filename = None\n         elif not filename:\n             filename = ""_"".join(self.name.split()).lower()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #75', 'line': 115, 'description': ['        if not name and not filename:'], 'failure': []}]",75.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,cleaner_generic,118-119,"[{'lineno': 118, 'coloffset': 0, 'linematch': 'def cleaner_generic(f):', 'context': 'def cleaner_programming(f):\n    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 119, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #78', 'line': 118, 'description': ['            filename = ""_"".join(self.name.split()).lower()'], 'failure': []}, {'name': 'Mutant #79', 'line': 118, 'description': ['            filename = ""_"".join(self.name.split()).lower()'], 'failure': []}, {'name': 'Mutant #80', 'line': 119, 'description': ['        self.filename = filename'], 'failure': []}, {'name': 'Mutant #4710', 'line': 118, 'description': ['def Relationship(label="""", **kwargs):'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -115,7 +115,7 @@\n     return Cluster(name, graph_attr=graph_attributes)\n \n \n-def Relationship(label="""", **kwargs):\n+def Relationship(label=""XXXX"", **kwargs):\n     edge_attributes = {\n         ""style"": ""dashed"",\n         ""color"": ""gray60"",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",75.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,cleaner_saas,122-123,"[{'lineno': 122, 'coloffset': 0, 'linematch': 'def cleaner_saas(f):', 'context': 'def cleaner_generic(f):\n    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4715', 'line': 122, 'description': ['        ""label"": _format_edge_label(label) if label else """",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         ""style"": ""dashed"",\n         ""color"": ""gray60"",\n-        ""label"": _format_edge_label(label) if label else """",\n+        ""XXlabelXX"": _format_edge_label(label) if label else """",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4716', 'line': 122, 'description': ['        ""label"": _format_edge_label(label) if label else """",'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         ""style"": ""dashed"",\n         ""color"": ""gray60"",\n-        ""label"": _format_edge_label(label) if label else """",\n+        ""label"": _format_edge_label(label) if label else ""XXXX"",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4717', 'line': 123, 'description': ['    }'], 'failure': []}]",33.33333333333333,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,cleaner_elastic,126-127,"[{'lineno': 126, 'coloffset': 0, 'linematch': 'def cleaner_elastic(f):', 'context': 'def cleaner_saas(f):\n    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 127, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #85', 'line': 127, 'description': ['            self.dot.node_attr[k] = v'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,cleaner_outscale,130-131,"[{'lineno': 130, 'coloffset': 0, 'linematch': 'def cleaner_outscale(f):', 'context': 'def cleaner_elastic(f):\n    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 131, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #87', 'line': 131, 'description': ['        if not self._validate_direction(direction):'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,cleaner_openstack,134-135,"[{'lineno': 134, 'coloffset': 0, 'linematch': 'def cleaner_openstack(f):', 'context': 'def cleaner_outscale(f):\n    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()\n\n\ncleaners = {\n    ""onprem"": cleaner_onprem,', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 135, 'coloffset': 4, 'linematch': 'return f.lower()', 'context': '    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()\n\n\ncleaners = {\n    ""onprem"": cleaner_onprem,\n    ""aws"": cleaner_aws,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #91', 'line': 135, 'description': ['        if not self._validate_curvestyle(curvestyle):'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,clean_png,158-169,"[{'lineno': 158, 'coloffset': 0, 'linematch': 'def clean_png(pvd: str) -> None:', 'context': '    ""openstack"": cleaner_openstack,\n}\n\n\ndef clean_png(pvd: str) -> None:\n    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 161, 'coloffset': 4, 'linematch': 'def _rename(base: str, png: str):', 'context': '\ndef clean_png(pvd: str) -> None:\n    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 158, 'coloffset': 0, 'linematch': 'def clean_png(pvd: str) -> None:', 'context': '    ""openstack"": cleaner_openstack,\n}\n\n\ndef clean_png(pvd: str) -> None:\n    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 158, 'coloffset': 0, 'linematch': 'def clean_png(pvd: str) -> None:', 'context': '    ""openstack"": cleaner_openstack,\n}\n\n\ndef clean_png(pvd: str) -> None:\n    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 159, 'coloffset': 4, 'linematch': '""""""Refine the resources files names.""""""', 'context': '}\n\n\ndef clean_png(pvd: str) -> None:\n    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 161, 'coloffset': 4, 'linematch': 'def _rename(base: str, png: str):', 'context': '\ndef clean_png(pvd: str) -> None:\n    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 162, 'coloffset': 8, 'linematch': 'new = cleaners[pvd](png)', 'context': 'def clean_png(pvd: str) -> None:\n    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 163, 'coloffset': 8, 'linematch': 'old_path = os.path.join(base, png)', 'context': '    """"""Refine the resources files names.""""""\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 164, 'coloffset': 8, 'linematch': 'new_path = os.path.join(base, new)', 'context': '\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)\n        [_rename(root, png) for png in pngs]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 165, 'coloffset': 8, 'linematch': 'os.rename(old_path, new_path)', 'context': '    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)\n        [_rename(root, png) for png in pngs]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 167, 'coloffset': 4, 'linematch': 'for root, _, files in os.walk(resource_dir(pvd)):', 'context': '        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #102', 'line': 160, 'description': ['        setdiagram(self)'], 'failure': []}]",100.0,['ANNOT001' 'FLV001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,round_png,172-182,"[{'lineno': 172, 'coloffset': 0, 'linematch': 'def round_png(pvd: str) -> None:', 'context': '        pngs = filter(lambda f: f.endswith("".png""), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 175, 'coloffset': 4, 'linematch': 'def _round(base: str, path: str):', 'context': '\ndef round_png(pvd: str) -> None:\n    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 172, 'coloffset': 0, 'linematch': 'def round_png(pvd: str) -> None:', 'context': '        pngs = filter(lambda f: f.endswith("".png""), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 172, 'coloffset': 0, 'linematch': 'def round_png(pvd: str) -> None:', 'context': '        pngs = filter(lambda f: f.endswith("".png""), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 173, 'coloffset': 4, 'linematch': '""""""Round the images.""""""', 'context': '        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 175, 'coloffset': 4, 'linematch': 'def _round(base: str, path: str):', 'context': '\ndef round_png(pvd: str) -> None:\n    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 176, 'coloffset': 8, 'linematch': 'path = os.path.join(base, path)', 'context': 'def round_png(pvd: str) -> None:\n    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)\n        paths = filter(lambda f: ""rounded"" not in f, pngs)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 177, 'coloffset': 8, 'linematch': 'subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])', 'context': '    """"""Round the images.""""""\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)\n        paths = filter(lambda f: ""rounded"" not in f, pngs)\n        [_round(root, path) for path in paths]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 179, 'coloffset': 4, 'linematch': 'for root, _, files in os.walk(resource_dir(pvd)):', 'context': '    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith("".png""), files)\n        paths = filter(lambda f: ""rounded"" not in f, pngs)\n        [_round(root, path) for path in paths]\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #104', 'line': 173, 'description': ['        return direction.upper() in self.__directions'], 'failure': []}, {'name': 'Mutant #105', 'line': 176, 'description': ['        return curvestyle.lower() in self.__curvestyles'], 'failure': []}, {'name': 'Mutant #106', 'line': 179, 'description': ['        return outformat.lower() in self.__outformats'], 'failure': []}]",100.0,['ANNOT001' 'FLV001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,svg2png2,198-209,"[{'lineno': 198, 'coloffset': 0, 'linematch': 'def svg2png2(pvd: str) -> None:', 'context': '        svgs = filter(lambda f: f.endswith("".svg""), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 201, 'coloffset': 4, 'linematch': 'def _convert(base: str, path: str):', 'context': '\ndef svg2png2(pvd: str) -> None:\n    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([""rm"", path_src])\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 198, 'coloffset': 0, 'linematch': 'def svg2png2(pvd: str) -> None:', 'context': '        svgs = filter(lambda f: f.endswith("".svg""), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 198, 'coloffset': 0, 'linematch': 'def svg2png2(pvd: str) -> None:', 'context': '        svgs = filter(lambda f: f.endswith("".svg""), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 199, 'coloffset': 4, 'linematch': '""""""Convert the svg into png using image magick""""""', 'context': '        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 201, 'coloffset': 4, 'linematch': 'def _convert(base: str, path: str):', 'context': '\ndef svg2png2(pvd: str) -> None:\n    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([""rm"", path_src])\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 202, 'coloffset': 8, 'linematch': 'path_src = os.path.join(base, path)', 'context': 'def svg2png2(pvd: str) -> None:\n    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([""rm"", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 203, 'coloffset': 8, 'linematch': 'path_dest = path_src.replace("".svg"", "".png"")', 'context': '    """"""Convert the svg into png using image magick""""""\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([""rm"", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith("".svg""), files)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 204, 'coloffset': 8, 'linematch': 'subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])', 'context': '\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([""rm"", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith("".svg""), files)\n        [_convert(root, path) for path in svgs]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 205, 'coloffset': 8, 'linematch': 'subprocess.run([""rm"", path_src])', 'context': '    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([""rm"", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith("".svg""), files)\n        [_convert(root, path) for path in svgs]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 207, 'coloffset': 4, 'linematch': 'for root, _, files in os.walk(resource_dir(pvd)):', 'context': '        path_dest = path_src.replace("".svg"", "".png"")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([""rm"", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith("".svg""), files)\n        [_convert(root, path) for path in svgs]\n\n\n# fmt: off', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #108', 'line': 198, 'description': ['            self.dot.render(format=self.outformat, view=self.show, quiet=True)'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -195,7 +195,7 @@\n             for one_format in self.outformat:\n                 self.dot.render(format=one_format, view=self.show, quiet=True)\n         else:\n-            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n+            self.dot.render(format=self.outformat, view=self.show, quiet=False)\n \n \n class Cluster:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #109', 'line': 202, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #110', 'line': 202, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #111', 'line': 202, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #112', 'line': 202, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #113', 'line': 202, 'description': ['    __directions = (""TB"", ""BT"", ""LR"", ""RL"")'], 'failure': []}, {'name': 'Mutant #114', 'line': 203, 'description': ['    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (""TB"", ""BT"", ""LR"", ""RL"")\n-    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")\n+    __bgcolors = (""XX#E5F5FDXX"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")\n \n     # fmt: off\n     _default_graph_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 203, 'description': ['    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (""TB"", ""BT"", ""LR"", ""RL"")\n-    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")\n+    __bgcolors = (""#E5F5FD"", ""XX#EBF3E7XX"", ""#ECE8F6"", ""#FDF7E3"")\n \n     # fmt: off\n     _default_graph_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 203, 'description': ['    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (""TB"", ""BT"", ""LR"", ""RL"")\n-    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")\n+    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""XX#ECE8F6XX"", ""#FDF7E3"")\n \n     # fmt: off\n     _default_graph_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 203, 'description': ['    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (""TB"", ""BT"", ""LR"", ""RL"")\n-    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")\n+    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""XX#FDF7E3XX"")\n \n     # fmt: off\n     _default_graph_attrs = {\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 203, 'description': ['    __bgcolors = (""#E5F5FD"", ""#EBF3E7"", ""#ECE8F6"", ""#FDF7E3"")'], 'failure': []}, {'name': 'Mutant #119', 'line': 207, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""shape"": ""box"",\n+        ""XXshapeXX"": ""box"",\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 207, 'description': ['        ""shape"": ""box"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        ""shape"": ""box"",\n+        ""shape"": ""XXboxXX"",\n         ""style"": ""rounded"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #121', 'line': 208, 'description': ['        ""style"": ""rounded"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -205,7 +205,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         ""shape"": ""box"",\n-        ""style"": ""rounded"",\n+        ""XXstyleXX"": ""rounded"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 208, 'description': ['        ""style"": ""rounded"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -205,7 +205,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         ""shape"": ""box"",\n-        ""style"": ""rounded"",\n+        ""style"": ""XXroundedXX"",\n         ""labeljust"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 209, 'description': ['        ""labeljust"": ""l"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n-        ""labeljust"": ""l"",\n+        ""XXlabeljustXX"": ""l"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""12"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #124', 'line': 209, 'description': ['        ""labeljust"": ""l"",'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         ""shape"": ""box"",\n         ""style"": ""rounded"",\n-        ""labeljust"": ""l"",\n+        ""labeljust"": ""XXlXX"",\n         ""pencolor"": ""#AEB6BE"",\n         ""fontname"": ""Sans-Serif"",\n         ""fontsize"": ""12"",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",35.294117647058826,['ANNOT001' 'FLV001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,base_dir,7-8,"[{'lineno': 7, 'coloffset': 0, 'linematch': 'def base_dir() -> str:', 'context': '\nimport config as cfg\n\n\ndef base_dir() -> str:\n    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 8, 'coloffset': 4, 'linematch': 'return Path(os.path.abspath(os.path.dirname(__file__))).parent', 'context': 'import config as cfg\n\n\ndef base_dir() -> str:\n    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #477', 'line': 8, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = ""outscale""\n     _icon_dir = ""resources/outscale""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #478', 'line': 8, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = ""outscale""\n     _icon_dir = ""resources/outscale""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,app_root_dir,11-12,"[{'lineno': 11, 'coloffset': 0, 'linematch': 'def app_root_dir(pvd: str) -> str:', 'context': 'def base_dir() -> str:\n    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 12, 'coloffset': 4, 'linematch': 'return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)', 'context': '    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #371', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""openstack""\n     _icon_dir = ""resources/openstack""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #372', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""openstack""\n     _icon_dir = ""resources/openstack""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #570', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""elastic""\n     _icon_dir = ""resources/elastic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #571', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""elastic""\n     _icon_dir = ""resources/elastic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #748', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""azure""\n     _icon_dir = ""resources/azure""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #749', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""azure""\n     _icon_dir = ""resources/azure""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1406', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""onprem""\n     _icon_dir = ""resources/onprem""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1407', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""onprem""\n     _icon_dir = ""resources/onprem""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1714', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""k8s""\n     _icon_dir = ""resources/k8s""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = ""XX#2d3436XX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1715', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""k8s""\n     _icon_dir = ""resources/k8s""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1832', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""digitalocean""\n     _icon_dir = ""resources/digitalocean""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #1833', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""digitalocean""\n     _icon_dir = ""resources/digitalocean""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2052', 'line': 12, 'description': ['    fontcolor = ""#312D2A""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""oci""\n     _icon_dir = ""resources/oci""\n \n-    fontcolor = ""#312D2A""\n+    fontcolor = ""XX#312D2AXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2053', 'line': 12, 'description': ['    fontcolor = ""#312D2A""'], 'failure': [{'inner': '--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""oci""\n     _icon_dir = ""resources/oci""\n \n-    fontcolor = ""#312D2A""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2261', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""gcp""\n     _icon_dir = ""resources/gcp""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = ""XX#2d3436XX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2262', 'line': 12, 'description': ['    fontcolor = ""#2d3436""'], 'failure': [{'inner': '--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""gcp""\n     _icon_dir = ""resources/gcp""\n \n-    fontcolor = ""#2d3436""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2576', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""alibabacloud""\n     _icon_dir = ""resources/alibabacloud""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2577', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""alibabacloud""\n     _icon_dir = ""resources/alibabacloud""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2893', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""ibm""\n     _icon_dir = ""resources/ibm""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #2894', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""ibm""\n     _icon_dir = ""resources/ibm""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3198', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""firebase""\n     _icon_dir = ""resources/firebase""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3199', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""firebase""\n     _icon_dir = ""resources/firebase""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3280', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""programming""\n     _icon_dir = ""resources/programming""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3281', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""programming""\n     _icon_dir = ""resources/programming""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3450', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = ""generic""\n     _icon_dir = ""resources/generic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3451', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = ""generic""\n     _icon_dir = ""resources/generic""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3767', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""aws""\n     _icon_dir = ""resources/aws""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3768', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""aws""\n     _icon_dir = ""resources/aws""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4603', 'line': 11, 'description': ['    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n-    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n+    title = f\'XX<font point-size=""12""><b>{html.escape(name)}</b></font><br/>XX\'\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4604', 'line': 11, 'description': ['    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\''], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n-    title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n+    title = None\n     subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4605', 'line': 12, 'description': ['    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n-    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n+    subtitle = f\'XX<font point-size=""9"">[{html.escape(key)}]<br/></font>XX\' if key else """"\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4606', 'line': 12, 'description': ['    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n-    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n+    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else ""XXXX""\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4607', 'line': 12, 'description': ['    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"'], 'failure': [{'inner': '--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     """"""Create a graphviz label string for a C4 node""""""\n     title = f\'<font point-size=""12""><b>{html.escape(name)}</b></font><br/>\'\n-    subtitle = f\'<font point-size=""9"">[{html.escape(key)}]<br/></font>\' if key else """"\n+    subtitle = None\n     text = f\'<br/><font point-size=""10"">{_format_description(description)}</font>\' if description else """"\n     return f""<{title}{subtitle}{text}>""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4722', 'line': 11, 'description': ['    _icon_dir = None'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -8,7 +8,7 @@\n class Custom(Node):\n     _provider = ""custom""\n     _type = ""custom""\n-    _icon_dir = None\n+    _icon_dir = """"\n \n     fontcolor = ""#ffffff""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4762', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""saas""\n     _icon_dir = ""resources/saas""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4763', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""saas""\n     _icon_dir = ""resources/saas""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4842', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""base""\n     _icon_dir = ""resources/base""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = ""XX#ffffffXX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4843', 'line': 12, 'description': ['    fontcolor = ""#ffffff""'], 'failure': [{'inner': '--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = ""base""\n     _icon_dir = ""resources/base""\n \n-    fontcolor = ""#ffffff""\n+    fontcolor = None\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
diagrams_output.json,doc_root_dir,15-16,"[{'lineno': 15, 'coloffset': 0, 'linematch': 'def doc_root_dir() -> str:', 'context': 'def app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 16, 'coloffset': 4, 'linematch': 'return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)', 'context': '    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3', 'line': 15, 'description': ['__cluster = contextvars.ContextVar(""cluster"")'], 'failure': [{'inner': '--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -12,7 +12,7 @@\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n __diagram = contextvars.ContextVar(""diagrams"")\n-__cluster = contextvars.ContextVar(""cluster"")\n+__cluster = contextvars.ContextVar(""XXclusterXX"")\n \n \n def getdiagram() -> ""Diagram"":\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #4', 'line': 15, 'description': ['__cluster = contextvars.ContextVar(""cluster"")'], 'failure': []}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
diagrams_output.json,resource_dir,19-20,"[{'lineno': 19, 'coloffset': 0, 'linematch': 'def resource_dir(pvd: str) -> str:', 'context': 'def doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n\n\ndef template_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_TEMPLATE)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 20, 'coloffset': 4, 'linematch': 'return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)', 'context': '    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n\n\ndef template_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_TEMPLATE)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #4725', 'line': 19, 'description': ['        self._icon = icon_path'], 'failure': [{'inner': '--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pythonPoetry_output.json,generate_random_uuid,13-21,"[{'lineno': 13, 'coloffset': 0, 'linematch': 'def generate_random_uuid():', 'context': '\nimport uuid\n\n\ndef generate_random_uuid():\n    """"""\n    Generate random uuid\n    @return: uuid\n    """"""\n    # Generate a random UUID (version 4)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 14, 'coloffset': 4, 'linematch': '""""""', 'context': 'import uuid\n\n\ndef generate_random_uuid():\n    """"""\n    Generate random uuid\n    @return: uuid\n    """"""\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 19, 'coloffset': 4, 'linematch': 'random_uuid = uuid.uuid4()', 'context': '    Generate random uuid\n    @return: uuid\n    """"""\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()\n    print(""Random UUID (version 4):"", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 20, 'coloffset': 4, 'linematch': 'print(""Random UUID (version 4):"", random_uuid)', 'context': '    @return: uuid\n    """"""\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()\n    print(""Random UUID (version 4):"", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 21, 'coloffset': 4, 'linematch': 'return random_uuid', 'context': '    """"""\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()\n    print(""Random UUID (version 4):"", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():\n    """"""\n    geterating time base uuid', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #1', 'line': 19, 'description': ['    random_uuid = uuid.uuid4()'], 'failure': []}, {'name': 'Mutant #2', 'line': 20, 'description': ['    print(""Random UUID (version 4):"", random_uuid)'], 'failure': [{'inner': '--- src/generate_uuids.py\n+++ src/generate_uuids.py\n@@ -17,7 +17,7 @@\n     """"""\n     # Generate a random UUID (version 4)\n     random_uuid = uuid.uuid4()\n-    print(""Random UUID (version 4):"", random_uuid)\n+    print(""XXRandom UUID (version 4):XX"", random_uuid)\n     return random_uuid\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pythonPoetry_output.json,generate_time_based_uuid,24-33,"[{'lineno': 24, 'coloffset': 0, 'linematch': 'def generate_time_based_uuid():', 'context': '    print(""Random UUID (version 4):"", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():\n    """"""\n    geterating time base uuid\n\n    @return: uuid\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 25, 'coloffset': 4, 'linematch': '""""""', 'context': '    return random_uuid\n\n\ndef generate_time_based_uuid():\n    """"""\n    geterating time base uuid\n\n    @return: uuid\n    """"""\n    # Generate a UUID based on the host\'s MAC address and the current time (version 1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 31, 'coloffset': 4, 'linematch': 'time_based_uuid = uuid.uuid1()', 'context': '\n    @return: uuid\n    """"""\n    # Generate a UUID based on the host\'s MAC address and the current time (version 1)\n    time_based_uuid = uuid.uuid1()\n    print(""Time-based UUID (version 1):"", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 32, 'coloffset': 4, 'linematch': 'print(""Time-based UUID (version 1):"", time_based_uuid)', 'context': '    @return: uuid\n    """"""\n    # Generate a UUID based on the host\'s MAC address and the current time (version 1)\n    time_based_uuid = uuid.uuid1()\n    print(""Time-based UUID (version 1):"", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 33, 'coloffset': 4, 'linematch': 'return time_based_uuid', 'context': '    """"""\n    # Generate a UUID based on the host\'s MAC address and the current time (version 1)\n    time_based_uuid = uuid.uuid1()\n    print(""Time-based UUID (version 1):"", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    """"""\n    Generate a UUID based on a namespace and a name (version 5)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3', 'line': 31, 'description': ['    time_based_uuid = uuid.uuid1()'], 'failure': []}, {'name': 'Mutant #4', 'line': 32, 'description': ['    print(""Time-based UUID (version 1):"", time_based_uuid)'], 'failure': [{'inner': '--- src/generate_uuids.py\n+++ src/generate_uuids.py\n@@ -29,7 +29,7 @@\n     """"""\n     # Generate a UUID based on the host\'s MAC address and the current time (version 1)\n     time_based_uuid = uuid.uuid1()\n-    print(""Time-based UUID (version 1):"", time_based_uuid)\n+    print(""XXTime-based UUID (version 1):XX"", time_based_uuid)\n     return time_based_uuid\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pythonPoetry_output.json,generate_namespace_based_uuid,36-49,"[{'lineno': 36, 'coloffset': 0, 'linematch': 'def generate_namespace_based_uuid(namespace, name):', 'context': '    print(""Time-based UUID (version 1):"", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    """"""\n    Generate a UUID based on a namespace and a name (version 5)\n    namespace = uuid.UUID(""6ba7b810-9dad-11d1-80b4-00c04fd430c8"")\n    name = ""example.com""\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 37, 'coloffset': 4, 'linematch': '""""""', 'context': '    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    """"""\n    Generate a UUID based on a namespace and a name (version 5)\n    namespace = uuid.UUID(""6ba7b810-9dad-11d1-80b4-00c04fd430c8"")\n    name = ""example.com""\n\n    @param namespace:str', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 47, 'coloffset': 4, 'linematch': 'namespace_based_uuid = uuid.uuid5(namespace, name)', 'context': '    @name str\n\n    @return: uuid\n    """"""\n    namespace_based_uuid = uuid.uuid5(namespace, name)\n    print(""Namespace-based UUID (version 5):"", namespace_based_uuid)\n    return namespace_based_uuid', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 48, 'coloffset': 4, 'linematch': 'print(""Namespace-based UUID (version 5):"", namespace_based_uuid)', 'context': '\n    @return: uuid\n    """"""\n    namespace_based_uuid = uuid.uuid5(namespace, name)\n    print(""Namespace-based UUID (version 5):"", namespace_based_uuid)\n    return namespace_based_uuid', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 49, 'coloffset': 4, 'linematch': 'return namespace_based_uuid', 'context': '    @return: uuid\n    """"""\n    namespace_based_uuid = uuid.uuid5(namespace, name)\n    print(""Namespace-based UUID (version 5):"", namespace_based_uuid)\n    return namespace_based_uuid', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5', 'line': 47, 'description': ['    namespace_based_uuid = uuid.uuid5(namespace, name)'], 'failure': []}, {'name': 'Mutant #6', 'line': 48, 'description': ['    print(""Namespace-based UUID (version 5):"", namespace_based_uuid)'], 'failure': [{'inner': '--- src/generate_uuids.py\n+++ src/generate_uuids.py\n@@ -45,6 +45,6 @@\n     @return: uuid\n     """"""\n     namespace_based_uuid = uuid.uuid5(namespace, name)\n-    print(""Namespace-based UUID (version 5):"", namespace_based_uuid)\n+    print(""XXNamespace-based UUID (version 5):XX"", namespace_based_uuid)\n     return namespace_based_uuid\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,fermat,46-59,"[{'lineno': 58, 'coloffset': 16, 'linematch': 'if x**n + y**n == z**n:', 'context': '\n    for x in range(100):\n        for y in range(1, x+1):\n            for z in range(1, x**n+y**n + 1):\n                if x**n + y**n == z**n:\n                    yield x, y, z\n\n\nprint(""SF %s"" % simple_func(10))\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 58, 'coloffset': 19, 'linematch': 'if x**n + y**n == z**n:', 'context': '\n    for x in range(100):\n        for y in range(1, x+1):\n            for z in range(1, x**n+y**n + 1):\n                if x**n + y**n == z**n:\n                    yield x, y, z\n\n\nprint(""SF %s"" % simple_func(10))\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 46, 'coloffset': 0, 'linematch': 'def fermat(n):', 'context': '\n    return 2*x\n\n\ndef fermat(n):\n    """"""Returns triplets of the form x^n + y^n = z^n.\n    Warning! Untested with n > 2.\n    """"""\n\n    # source: ""Fermat\'s last Python script""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 55, 'coloffset': 4, 'linematch': 'for x in range(100):', 'context': '    # source: ""Fermat\'s last Python script""\n    # https://earthboundkid.jottit.com/fermat.py\n    # :)\n\n    for x in range(100):\n        for y in range(1, x+1):\n            for z in range(1, x**n+y**n + 1):\n                if x**n + y**n == z**n:\n                    yield x, y, z\n', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 56, 'coloffset': 8, 'linematch': 'for y in range(1, x+1):', 'context': '    # https://earthboundkid.jottit.com/fermat.py\n    # :)\n\n    for x in range(100):\n        for y in range(1, x+1):\n            for z in range(1, x**n+y**n + 1):\n                if x**n + y**n == z**n:\n                    yield x, y, z\n\n', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 47, 'coloffset': 4, 'linematch': '""""""Returns triplets of the form x^n + y^n = z^n.', 'context': '    return 2*x\n\n\ndef fermat(n):\n    """"""Returns triplets of the form x^n + y^n = z^n.\n    Warning! Untested with n > 2.\n    """"""\n\n    # source: ""Fermat\'s last Python script""\n    # https://earthboundkid.jottit.com/fermat.py', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 55, 'coloffset': 4, 'linematch': 'for x in range(100):', 'context': '    # source: ""Fermat\'s last Python script""\n    # https://earthboundkid.jottit.com/fermat.py\n    # :)\n\n    for x in range(100):\n        for y in range(1, x+1):\n            for z in range(1, x**n+y**n + 1):\n                if x**n + y**n == z**n:\n                    yield x, y, z\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 57, 'coloffset': 30, 'linematch': 'for z in range(1, x**n+y**n + 1):', 'context': '    # :)\n\n    for x in range(100):\n        for y in range(1, x+1):\n            for z in range(1, x**n+y**n + 1):\n                if x**n + y**n == z**n:\n                    yield x, y, z\n\n\nprint(""SF %s"" % simple_func(10))', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 46, 'coloffset': 0, 'linematch': 'def fermat(n):', 'context': '\n    return 2*x\n\n\ndef fermat(n):\n    """"""Returns triplets of the form x^n + y^n = z^n.\n    Warning! Untested with n > 2.\n    """"""\n\n    # source: ""Fermat\'s last Python script""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 46, 'coloffset': 0, 'linematch': 'def fermat(n):', 'context': '\n    return 2*x\n\n\ndef fermat(n):\n    """"""Returns triplets of the form x^n + y^n = z^n.\n    Warning! Untested with n > 2.\n    """"""\n\n    # source: ""Fermat\'s last Python script""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3543', 'line': 55, 'description': ['        if cls is PudbCollection:'], 'failure': []}, {'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3546', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3547', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5170', 'line': 46, 'description': ['            s = strifier(value)'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}, {'name': 'Mutant #5173', 'line': 55, 'description': ['        self.paths_to_expand = paths_to_expand'], 'failure': []}, {'name': 'Mutant #5174', 'line': 59, 'description': ['            id_path, read_only)'], 'failure': []}]",100.0,['CL001' 'BOOL001' 'ANNOT001' 'F001' 'CML001' 'COMPLEX001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//For[.//For]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef//BinOp[count(descendant::BinOp) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 1, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 1, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,method_factory,95-107,"[{'lineno': 103, 'coloffset': 12, 'linematch': 'if (method_name == ""__getitem__""', 'context': '            return func(*args, **kwargs)\n        except KeyError:\n            # Classes without __iter__ are expected to raise IndexError in this\n            # sort of case. Frustrating, I know.\n            if (method_name == ""__getitem__""\n                    and args and isinstance(args[0], int)):\n                raise IndexError from None\n            raise\n    return method\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 103, 'coloffset': 16, 'linematch': 'if (method_name == ""__getitem__""', 'context': '            return func(*args, **kwargs)\n        except KeyError:\n            # Classes without __iter__ are expected to raise IndexError in this\n            # sort of case. Frustrating, I know.\n            if (method_name == ""__getitem__""\n                    and args and isinstance(args[0], int)):\n                raise IndexError from None\n            raise\n    return method\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 95, 'coloffset': 0, 'linematch': 'def method_factory(method_name):', 'context': '    def __magicsomething__(self):\n        return ""amazing""\n\n\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):\n        func = getattr(self.__internal_dict__, method_name)\n        try:\n            return func(*args, **kwargs)\n        except KeyError:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 96, 'coloffset': 4, 'linematch': 'def method(self, *args, **kwargs):', 'context': '        return ""amazing""\n\n\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):\n        func = getattr(self.__internal_dict__, method_name)\n        try:\n            return func(*args, **kwargs)\n        except KeyError:\n            # Classes without __iter__ are expected to raise IndexError in this', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 95, 'coloffset': 0, 'linematch': 'def method_factory(method_name):', 'context': '    def __magicsomething__(self):\n        return ""amazing""\n\n\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):\n        func = getattr(self.__internal_dict__, method_name)\n        try:\n            return func(*args, **kwargs)\n        except KeyError:', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 96, 'coloffset': 4, 'linematch': 'def method(self, *args, **kwargs):', 'context': '        return ""amazing""\n\n\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):\n        func = getattr(self.__internal_dict__, method_name)\n        try:\n            return func(*args, **kwargs)\n        except KeyError:\n            # Classes without __iter__ are expected to raise IndexError in this', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 97, 'coloffset': 8, 'linematch': 'func = getattr(self.__internal_dict__, method_name)', 'context': '\n\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):\n        func = getattr(self.__internal_dict__, method_name)\n        try:\n            return func(*args, **kwargs)\n        except KeyError:\n            # Classes without __iter__ are expected to raise IndexError in this\n            # sort of case. Frustrating, I know.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 98, 'coloffset': 8, 'linematch': 'try:', 'context': '\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):\n        func = getattr(self.__internal_dict__, method_name)\n        try:\n            return func(*args, **kwargs)\n        except KeyError:\n            # Classes without __iter__ are expected to raise IndexError in this\n            # sort of case. Frustrating, I know.\n            if (method_name == ""__getitem__""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 107, 'coloffset': 4, 'linematch': 'return method', 'context': '            if (method_name == ""__getitem__""\n                    and args and isinstance(args[0], int)):\n                raise IndexError from None\n            raise\n    return method\n\n\ndef generate_containerlike_class():\n    methods = {\n        ""__contains__"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3559', 'line': 98, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3560', 'line': 107, 'description': ['                yield str(count), entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -104,7 +104,7 @@\n         assert isinstance(sequence, cls)\n         try:\n             for count, entry in enumerate(sequence):\n-                yield str(count), entry, f""[{count:d}]""\n+                yield str(count), entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5195', 'line': 97, 'description': ['        func = getattr(self.__internal_dict__, method_name)'], 'failure': []}, {'name': 'Mutant #5196', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name != ""__getitem__""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5197', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name == ""XX__getitem__XX""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5198', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -101,7 +101,7 @@\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n             if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+                    and args and isinstance(args[1], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5199', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,8 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+            if (method_name == ""__getitem__"" or args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}]",28.57142857142857,['CL001' 'BOOL001' 'ANNOT001' 'F001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_inspect_info,57-66,"[{'lineno': 64, 'coloffset': 8, 'linematch': 'if id_path in self.paths_to_expand:', 'context': '        iinfo.access_level = ""all""\n        iinfo.display_type = ""repr""\n        iinfo.show_methods = True\n\n        if id_path in self.paths_to_expand:\n            iinfo.show_detail = True\n        return iinfo\n\n\nclass Reasonable:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 179, 'coloffset': 8, 'linematch': 'if read_only:', 'context': '        self.id_path_to_iinfo = {}\n        self.watches = []\n\n    def get_inspect_info(self, id_path, read_only):\n        if read_only:\n            return self.id_path_to_iinfo.get(\n                    id_path, InspectInfo())\n        else:\n            return self.id_path_to_iinfo.setdefault(\n                    id_path, InspectInfo())', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 57, 'coloffset': 4, 'linematch': 'def get_inspect_info(self, id_path, read_only):', 'context': '        if paths_to_expand is None:\n            paths_to_expand = set()\n        self.paths_to_expand = paths_to_expand\n\n    def get_inspect_info(self, id_path, read_only):\n        iinfo = super().get_inspect_info(\n            id_path, read_only)\n        iinfo.access_level = ""all""\n        iinfo.display_type = ""repr""\n        iinfo.show_methods = True', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 178, 'coloffset': 4, 'linematch': 'def get_inspect_info(self, id_path, read_only):', 'context': '    def __init__(self):\n        self.id_path_to_iinfo = {}\n        self.watches = []\n\n    def get_inspect_info(self, id_path, read_only):\n        if read_only:\n            return self.id_path_to_iinfo.get(\n                    id_path, InspectInfo())\n        else:\n            return self.id_path_to_iinfo.setdefault(', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 178, 'coloffset': 4, 'linematch': 'def get_inspect_info(self, id_path, read_only):', 'context': '    def __init__(self):\n        self.id_path_to_iinfo = {}\n        self.watches = []\n\n    def get_inspect_info(self, id_path, read_only):\n        if read_only:\n            return self.id_path_to_iinfo.get(\n                    id_path, InspectInfo())\n        else:\n            return self.id_path_to_iinfo.setdefault(', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 58, 'coloffset': 8, 'linematch': 'iinfo = super().get_inspect_info(', 'context': '            paths_to_expand = set()\n        self.paths_to_expand = paths_to_expand\n\n    def get_inspect_info(self, id_path, read_only):\n        iinfo = super().get_inspect_info(\n            id_path, read_only)\n        iinfo.access_level = ""all""\n        iinfo.display_type = ""repr""\n        iinfo.show_methods = True\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 60, 'coloffset': 8, 'linematch': 'iinfo.access_level = ""all""', 'context': '\n    def get_inspect_info(self, id_path, read_only):\n        iinfo = super().get_inspect_info(\n            id_path, read_only)\n        iinfo.access_level = ""all""\n        iinfo.display_type = ""repr""\n        iinfo.show_methods = True\n\n        if id_path in self.paths_to_expand:\n            iinfo.show_detail = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 61, 'coloffset': 8, 'linematch': 'iinfo.display_type = ""repr""', 'context': '    def get_inspect_info(self, id_path, read_only):\n        iinfo = super().get_inspect_info(\n            id_path, read_only)\n        iinfo.access_level = ""all""\n        iinfo.display_type = ""repr""\n        iinfo.show_methods = True\n\n        if id_path in self.paths_to_expand:\n            iinfo.show_detail = True\n        return iinfo', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 62, 'coloffset': 8, 'linematch': 'iinfo.show_methods = True', 'context': '        iinfo = super().get_inspect_info(\n            id_path, read_only)\n        iinfo.access_level = ""all""\n        iinfo.display_type = ""repr""\n        iinfo.show_methods = True\n\n        if id_path in self.paths_to_expand:\n            iinfo.show_detail = True\n        return iinfo\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 64, 'coloffset': 8, 'linematch': 'if id_path in self.paths_to_expand:', 'context': '        iinfo.access_level = ""all""\n        iinfo.display_type = ""repr""\n        iinfo.show_methods = True\n\n        if id_path in self.paths_to_expand:\n            iinfo.show_detail = True\n        return iinfo\n\n\nclass Reasonable:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 66, 'coloffset': 8, 'linematch': 'return iinfo', 'context': '        iinfo.show_methods = True\n\n        if id_path in self.paths_to_expand:\n            iinfo.show_detail = True\n        return iinfo\n\n\nclass Reasonable:\n    def __init__(self):\n        self.x = 42', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 179, 'coloffset': 8, 'linematch': 'if read_only:', 'context': '        self.id_path_to_iinfo = {}\n        self.watches = []\n\n    def get_inspect_info(self, id_path, read_only):\n        if read_only:\n            return self.id_path_to_iinfo.get(\n                    id_path, InspectInfo())\n        else:\n            return self.id_path_to_iinfo.setdefault(\n                    id_path, InspectInfo())', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3546', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3547', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3548', 'line': 65, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5174', 'line': 59, 'description': ['            id_path, read_only)'], 'failure': []}, {'name': 'Mutant #5175', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5176', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5177', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5178', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5179', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5180', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5181', 'line': 64, 'description': ['        if id_path in self.paths_to_expand:'], 'failure': []}, {'name': 'Mutant #5182', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5183', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,value_string,163-166,"[{'lineno': 164, 'coloffset': 8, 'linematch': 'if expand and obj in self.values_to_expand:', 'context': '            ""other"": 0,\n        }\n\n    def value_string(self, obj, expand=True):\n        if expand and obj in self.values_to_expand:\n            return repr(obj) + self.MOD_STR\n        return repr(obj)\n\n    def walked_values(self):\n        return [(w.var_label, w.value_str)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 163, 'coloffset': 4, 'linematch': 'def value_string(self, obj, expand=True):', 'context': '            ""collections"": 0,\n            ""other"": 0,\n        }\n\n    def value_string(self, obj, expand=True):\n        if expand and obj in self.values_to_expand:\n            return repr(obj) + self.MOD_STR\n        return repr(obj)\n\n    def walked_values(self):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 164, 'coloffset': 8, 'linematch': 'if expand and obj in self.values_to_expand:', 'context': '            ""other"": 0,\n        }\n\n    def value_string(self, obj, expand=True):\n        if expand and obj in self.values_to_expand:\n            return repr(obj) + self.MOD_STR\n        return repr(obj)\n\n    def walked_values(self):\n        return [(w.var_label, w.value_str)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 166, 'coloffset': 8, 'linematch': 'return repr(obj)', 'context': '\n    def value_string(self, obj, expand=True):\n        if expand and obj in self.values_to_expand:\n            return repr(obj) + self.MOD_STR\n        return repr(obj)\n\n    def walked_values(self):\n        return [(w.var_label, w.value_str)\n                for w in self.walker.widget_list]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3580', 'line': 166, 'description': [')'], 'failure': []}, {'name': 'Mutant #5233', 'line': 163, 'description': ['    def value_string(self, obj, expand=True):'], 'failure': []}, {'name': 'Mutant #5234', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5235', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5236', 'line': 165, 'description': ['            return repr(obj) + self.MOD_STR'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,assert_walks_contents,198-228,"[{'lineno': 205, 'coloffset': 8, 'linematch': 'if isinstance(container, PudbMapping):', 'context': '        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.\n        expected = [(label, self.value_string(container))]\n        if isinstance(container, PudbMapping):\n            expected.extend([(f""[{repr(key)}]"", repr(container[key]))\n                             for key in container.keys()]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""mappings""] += 1\n        elif isinstance(container, PudbSequence):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'elif isinstance(container, PudbSequence):', 'context': '            expected.extend([(f""[{repr(key)}]"", repr(container[key]))\n                             for key in container.keys()]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""mappings""] += 1\n        elif isinstance(container, PudbSequence):\n            expected.extend([(f""[{repr(index)}]"", repr(entry))\n                             for index, entry in enumerate(container)]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""sequences""] += 1\n        elif isinstance(container, PudbCollection):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 215, 'coloffset': 8, 'linematch': 'elif isinstance(container, PudbCollection):', 'context': '            expected.extend([(f""[{repr(index)}]"", repr(entry))\n                             for index, entry in enumerate(container)]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""sequences""] += 1\n        elif isinstance(container, PudbCollection):\n            expected.extend([(""[]"", repr(entry))\n                             for entry in container]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""collections""] += 1\n        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 198, 'coloffset': 4, 'linematch': 'def assert_walks_contents(self, container, label=""xs""):', 'context': '            yield\n        finally:\n            ui_log.exception = old_logger\n\n    def assert_walks_contents(self, container, label=""xs""):\n        expand_paths = {label}\n        self.values_to_expand = [container]\n        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 207, 'coloffset': 40, 'linematch': 'for key in container.keys()]', 'context': '        # Build out list of expected view contents according to container type.\n        expected = [(label, self.value_string(container))]\n        if isinstance(container, PudbMapping):\n            expected.extend([(f""[{repr(key)}]"", repr(container[key]))\n                             for key in container.keys()]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""mappings""] += 1\n        elif isinstance(container, PudbSequence):\n            expected.extend([(f""[{repr(index)}]"", repr(entry))\n                             for index, entry in enumerate(container)]', 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 198, 'coloffset': 4, 'linematch': 'def assert_walks_contents(self, container, label=""xs""):', 'context': '            yield\n        finally:\n            ui_log.exception = old_logger\n\n    def assert_walks_contents(self, container, label=""xs""):\n        expand_paths = {label}\n        self.values_to_expand = [container]\n        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'elif isinstance(container, PudbSequence):', 'context': '            expected.extend([(f""[{repr(key)}]"", repr(container[key]))\n                             for key in container.keys()]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""mappings""] += 1\n        elif isinstance(container, PudbSequence):\n            expected.extend([(f""[{repr(index)}]"", repr(entry))\n                             for index, entry in enumerate(container)]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""sequences""] += 1\n        elif isinstance(container, PudbCollection):', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 215, 'coloffset': 8, 'linematch': 'elif isinstance(container, PudbCollection):', 'context': '            expected.extend([(f""[{repr(index)}]"", repr(entry))\n                             for index, entry in enumerate(container)]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""sequences""] += 1\n        elif isinstance(container, PudbCollection):\n            expected.extend([(""[]"", repr(entry))\n                             for entry in container]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""collections""] += 1\n        else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 199, 'coloffset': 8, 'linematch': 'expand_paths = {label}', 'context': '        finally:\n            ui_log.exception = old_logger\n\n    def assert_walks_contents(self, container, label=""xs""):\n        expand_paths = {label}\n        self.values_to_expand = [container]\n        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.\n        expected = [(label, self.value_string(container))]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 200, 'coloffset': 8, 'linematch': 'self.values_to_expand = [container]', 'context': '            ui_log.exception = old_logger\n\n    def assert_walks_contents(self, container, label=""xs""):\n        expand_paths = {label}\n        self.values_to_expand = [container]\n        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.\n        expected = [(label, self.value_string(container))]\n        if isinstance(container, PudbMapping):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 201, 'coloffset': 8, 'linematch': 'self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))', 'context': '\n    def assert_walks_contents(self, container, label=""xs""):\n        expand_paths = {label}\n        self.values_to_expand = [container]\n        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.\n        expected = [(label, self.value_string(container))]\n        if isinstance(container, PudbMapping):\n            expected.extend([(f""[{repr(key)}]"", repr(container[key]))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 204, 'coloffset': 8, 'linematch': 'expected = [(label, self.value_string(container))]', 'context': '        self.values_to_expand = [container]\n        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.\n        expected = [(label, self.value_string(container))]\n        if isinstance(container, PudbMapping):\n            expected.extend([(f""[{repr(key)}]"", repr(container[key]))\n                             for key in container.keys()]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""mappings""] += 1', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 205, 'coloffset': 8, 'linematch': 'if isinstance(container, PudbMapping):', 'context': '        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n\n        # Build out list of expected view contents according to container type.\n        expected = [(label, self.value_string(container))]\n        if isinstance(container, PudbMapping):\n            expected.extend([(f""[{repr(key)}]"", repr(container[key]))\n                             for key in container.keys()]\n                            or [self.EMPTY_ITEM])\n            self.class_counts[""mappings""] += 1\n        elif isinstance(container, PudbSequence):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 222, 'coloffset': 8, 'linematch': 'expected.extend(self.expected_attrs(container))', 'context': '                            or [self.EMPTY_ITEM])\n            self.class_counts[""collections""] += 1\n        else:\n            self.class_counts[""other""] += 1\n        expected.extend(self.expected_attrs(container))\n\n        with self.patched_logging():\n            self.walker.walk_value(parent=None, label=label, value=container)\n\n        received = self.walked_values()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 224, 'coloffset': 8, 'linematch': 'with self.patched_logging():', 'context': '        else:\n            self.class_counts[""other""] += 1\n        expected.extend(self.expected_attrs(container))\n\n        with self.patched_logging():\n            self.walker.walk_value(parent=None, label=label, value=container)\n\n        received = self.walked_values()\n        self.assertListEqual(expected, received)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 227, 'coloffset': 8, 'linematch': 'received = self.walked_values()', 'context': '\n        with self.patched_logging():\n            self.walker.walk_value(parent=None, label=label, value=container)\n\n        received = self.walked_values()\n        self.assertListEqual(expected, received)\n\n    def assert_class_counts_equal(self, seen=None):\n        """"""\n        This is kinda weird since at first it looks like its testing the test', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 228, 'coloffset': 8, 'linematch': 'self.assertListEqual(expected, received)', 'context': '        with self.patched_logging():\n            self.walker.walk_value(parent=None, label=label, value=container)\n\n        received = self.walked_values()\n        self.assertListEqual(expected, received)\n\n    def assert_class_counts_equal(self, seen=None):\n        """"""\n        This is kinda weird since at first it looks like its testing the test\n        code, but really it\'s testing the `isinstance` checks. But it is also', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3595', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': []}, {'name': 'Mutant #3596', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -195,7 +195,7 @@\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n-        self.wrap = CONFIG[""wrap_variables""]\n+        self.wrap = None\n \n \n class WatchExpression:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3597', 'line': 203, 'description': ['        self.expression = expression'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -200,7 +200,7 @@\n \n class WatchExpression:\n     def __init__(self, expression):\n-        self.expression = expression\n+        self.expression = None\n \n \n class WatchEvalError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3598', 'line': 208, 'description': ['        return ""<error>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -205,7 +205,7 @@\n \n class WatchEvalError:\n     def __str__(self):\n-        return ""<error>""\n+        return ""XX<error>XX""\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3599', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -213,7 +213,7 @@\n # {{{ widget\n \n class VariableWidget(urwid.FlowWidget):\n-    PREFIX = ""| ""\n+    PREFIX = ""XX| XX""\n \n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3600', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': []}, {'name': 'Mutant #3601', 'line': 221, 'description': ['        self.parent = parent'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -218,7 +218,7 @@\n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n-        self.parent = parent\n+        self.parent = None\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3602', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 1 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3603', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3604', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level - 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3605', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level + 2\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3606', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3607', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': []}, {'name': 'Mutant #3608', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -220,7 +220,7 @@\n         assert isinstance(id_path, str)\n         self.parent = parent\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n-        self.prefix = self.PREFIX * self.nesting_level\n+        self.prefix = None\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3609', 'line': 224, 'description': ['        self.var_label = var_label'], 'failure': []}, {'name': 'Mutant #3610', 'line': 225, 'description': ['        self.value_str = value_str'], 'failure': []}, {'name': 'Mutant #3611', 'line': 226, 'description': ['        self.id_path = id_path'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -223,7 +223,7 @@\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n-        self.id_path = id_path\n+        self.id_path = None\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3612', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix or ""XXvarXX""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3613', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix and ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3614', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = None\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3615', 'line': 228, 'description': ['        self.watch_expr = watch_expr'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -225,7 +225,7 @@\n         self.value_str = value_str\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n-        self.watch_expr = watch_expr\n+        self.watch_expr = None\n         if iinfo is None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5245', 'line': 198, 'description': ['    def assert_walks_contents(self, container, label=""xs""):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -195,7 +195,7 @@\n         finally:\n             ui_log.exception = old_logger\n \n-    def assert_walks_contents(self, container, label=""xs""):\n+    def assert_walks_contents(self, container, label=""XXxsXX""):\n         expand_paths = {label}\n         self.values_to_expand = [container]\n         self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5246', 'line': 199, 'description': ['        expand_paths = {label}'], 'failure': []}, {'name': 'Mutant #5247', 'line': 200, 'description': ['        self.values_to_expand = [container]'], 'failure': []}, {'name': 'Mutant #5248', 'line': 201, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))'], 'failure': []}, {'name': 'Mutant #5249', 'line': 204, 'description': ['        expected = [(label, self.value_string(container))]'], 'failure': []}, {'name': 'Mutant #5250', 'line': 206, 'description': ['            expected.extend([(f""[{repr(key)}]"", repr(container[key]))'], 'failure': []}, {'name': 'Mutant #5251', 'line': 208, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5252', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5253', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5254', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5255', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5256', 'line': 211, 'description': ['            expected.extend([(f""[{repr(index)}]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5257', 'line': 213, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5258', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5259', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5260', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5261', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5262', 'line': 216, 'description': ['            expected.extend([(""[]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5263', 'line': 218, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5264', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5265', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5266', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5267', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5268', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5269', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5270', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5271', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5272', 'line': 227, 'description': ['        received = self.walked_values()'], 'failure': []}]",69.38775510204081,['CL001' 'ANNOT001' 'KF001' 'FLV001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//Call/func/Attribute[@attr=""keys""]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 1, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,assert_class_counts_equal,230-244,"[{'lineno': 242, 'coloffset': 8, 'linematch': 'if seen is not None:', 'context': '            ""sequences"": 0,\n            ""collections"": 0,\n            ""other"": 0,\n        }\n        if seen is not None:\n            expected.update(seen)\n        self.assertDictEqual(expected, self.class_counts)\n\n\nclass ValueWalkerTest(BaseValueWalkerTestCase):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 230, 'coloffset': 4, 'linematch': 'def assert_class_counts_equal(self, seen=None):', 'context': '\n        received = self.walked_values()\n        self.assertListEqual(expected, received)\n\n    def assert_class_counts_equal(self, seen=None):\n        """"""\n        This is kinda weird since at first it looks like its testing the test\n        code, but really it\'s testing the `isinstance` checks. But it is also\n        true that it tests the test code, kind of like a sanity check.\n        """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 231, 'coloffset': 8, 'linematch': '""""""', 'context': '        received = self.walked_values()\n        self.assertListEqual(expected, received)\n\n    def assert_class_counts_equal(self, seen=None):\n        """"""\n        This is kinda weird since at first it looks like its testing the test\n        code, but really it\'s testing the `isinstance` checks. But it is also\n        true that it tests the test code, kind of like a sanity check.\n        """"""\n        expected = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 236, 'coloffset': 8, 'linematch': 'expected = {', 'context': '        This is kinda weird since at first it looks like its testing the test\n        code, but really it\'s testing the `isinstance` checks. But it is also\n        true that it tests the test code, kind of like a sanity check.\n        """"""\n        expected = {\n            ""mappings"": 0,\n            ""sequences"": 0,\n            ""collections"": 0,\n            ""other"": 0,\n        }', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 242, 'coloffset': 8, 'linematch': 'if seen is not None:', 'context': '            ""sequences"": 0,\n            ""collections"": 0,\n            ""other"": 0,\n        }\n        if seen is not None:\n            expected.update(seen)\n        self.assertDictEqual(expected, self.class_counts)\n\n\nclass ValueWalkerTest(BaseValueWalkerTestCase):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 244, 'coloffset': 8, 'linematch': 'self.assertDictEqual(expected, self.class_counts)', 'context': '            ""other"": 0,\n        }\n        if seen is not None:\n            expected.update(seen)\n        self.assertDictEqual(expected, self.class_counts)\n\n\nclass ValueWalkerTest(BaseValueWalkerTestCase):\n    def test_simple_values(self):\n        self.walker = BasicValueWalker(FrameVarInfoForTesting())', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3617', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = CONFIG[""XXwrap_variablesXX""]\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3618', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = None\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3619', 'line': 235, 'description': ['            self.wrap = iinfo.wrap'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -232,7 +232,7 @@\n \n             self.wrap = CONFIG[""wrap_variables""]\n         else:\n-            self.wrap = iinfo.wrap\n+            self.wrap = None\n \n     def __str__(self):\n         return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3620', 'line': 238, 'description': ['        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -235,7 +235,7 @@\n             self.wrap = iinfo.wrap\n \n     def __str__(self):\n-        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n+        return (""XXVariableWidget: {value_str}, level {nesting_level}, at {id_path}XX""\n                 .format(\n                     value_str=self.value_str,\n                     nesting_level=self.nesting_level,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5275', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5276', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5279', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5280', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5281', 'line': 241, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}]",71.42857142857143,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_remove_common_indentation,36-58,"[{'lineno': 37, 'coloffset': 4, 'linematch': 'if ""\\n"" not in code:', 'context': '\n# {{{ remove common indentation\n\ndef _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 40, 'coloffset': 4, 'linematch': 'if require_leading_newline and not code.startswith(""\\n""):', 'context': 'def _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code\n\n    lines = code.split(""\\n"")\n    while lines[0].strip() == """":\n        lines.pop(0)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 49, 'coloffset': 4, 'linematch': 'if lines:', 'context': '        lines.pop(0)\n    while lines[-1].strip() == """":\n        lines.pop(-1)\n\n    if lines:\n        base_indent = 0\n        while lines[0][base_indent] in "" \\t"":\n            base_indent += 1\n\n        for line in lines[1:]:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 55, 'coloffset': 12, 'linematch': 'if line[:base_indent].strip():', 'context': '        while lines[0][base_indent] in "" \\t"":\n            base_indent += 1\n\n        for line in lines[1:]:\n            if line[:base_indent].strip():\n                raise ValueError(""inconsistent indentation"")\n\n    return ""\\n"".join(line[base_indent:] for line in lines)\n\n# }}}', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 55, 'coloffset': 12, 'linematch': 'if line[:base_indent].strip():', 'context': '        while lines[0][base_indent] in "" \\t"":\n            base_indent += 1\n\n        for line in lines[1:]:\n            if line[:base_indent].strip():\n                raise ValueError(""inconsistent indentation"")\n\n    return ""\\n"".join(line[base_indent:] for line in lines)\n\n# }}}', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def _remove_common_indentation(code, require_leading_newline=True):', 'context': '\n\n# {{{ remove common indentation\n\ndef _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def _remove_common_indentation(code, require_leading_newline=True):', 'context': '\n\n# {{{ remove common indentation\n\ndef _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 40, 'coloffset': 4, 'linematch': 'if require_leading_newline and not code.startswith(""\\n""):', 'context': 'def _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code\n\n    lines = code.split(""\\n"")\n    while lines[0].strip() == """":\n        lines.pop(0)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 49, 'coloffset': 4, 'linematch': 'if lines:', 'context': '        lines.pop(0)\n    while lines[-1].strip() == """":\n        lines.pop(-1)\n\n    if lines:\n        base_indent = 0\n        while lines[0][base_indent] in "" \\t"":\n            base_indent += 1\n\n        for line in lines[1:]:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 55, 'coloffset': 12, 'linematch': 'if line[:base_indent].strip():', 'context': '        while lines[0][base_indent] in "" \\t"":\n            base_indent += 1\n\n        for line in lines[1:]:\n            if line[:base_indent].strip():\n                raise ValueError(""inconsistent indentation"")\n\n    return ""\\n"".join(line[base_indent:] for line in lines)\n\n# }}}', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 37, 'coloffset': 4, 'linematch': 'if ""\\n"" not in code:', 'context': '\n# {{{ remove common indentation\n\ndef _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 40, 'coloffset': 4, 'linematch': 'if require_leading_newline and not code.startswith(""\\n""):', 'context': 'def _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code\n\n    lines = code.split(""\\n"")\n    while lines[0].strip() == """":\n        lines.pop(0)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 43, 'coloffset': 4, 'linematch': 'lines = code.split(""\\n"")', 'context': '\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code\n\n    lines = code.split(""\\n"")\n    while lines[0].strip() == """":\n        lines.pop(0)\n    while lines[-1].strip() == """":\n        lines.pop(-1)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 44, 'coloffset': 4, 'linematch': 'while lines[0].strip() == """":', 'context': '    if require_leading_newline and not code.startswith(""\\n""):\n        return code\n\n    lines = code.split(""\\n"")\n    while lines[0].strip() == """":\n        lines.pop(0)\n    while lines[-1].strip() == """":\n        lines.pop(-1)\n\n    if lines:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 46, 'coloffset': 4, 'linematch': 'while lines[-1].strip() == """":', 'context': '\n    lines = code.split(""\\n"")\n    while lines[0].strip() == """":\n        lines.pop(0)\n    while lines[-1].strip() == """":\n        lines.pop(-1)\n\n    if lines:\n        base_indent = 0\n        while lines[0][base_indent] in "" \\t"":', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 49, 'coloffset': 4, 'linematch': 'if lines:', 'context': '        lines.pop(0)\n    while lines[-1].strip() == """":\n        lines.pop(-1)\n\n    if lines:\n        base_indent = 0\n        while lines[0][base_indent] in "" \\t"":\n            base_indent += 1\n\n        for line in lines[1:]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 58, 'coloffset': 4, 'linematch': 'return ""\\n"".join(line[base_indent:] for line in lines)', 'context': '        for line in lines[1:]:\n            if line[:base_indent].strip():\n                raise ValueError(""inconsistent indentation"")\n\n    return ""\\n"".join(line[base_indent:] for line in lines)\n\n# }}}\n\n\ndef test_executable_lines():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def _remove_common_indentation(code, require_leading_newline=True):', 'context': '\n\n# {{{ remove common indentation\n\ndef _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def _remove_common_indentation(code, require_leading_newline=True):', 'context': '\n\n# {{{ remove common indentation\n\ndef _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def _remove_common_indentation(code, require_leading_newline=True):', 'context': '\n\n# {{{ remove common indentation\n\ndef _remove_common_indentation(code, require_leading_newline=True):\n    if ""\\n"" not in code:\n        return code\n\n    if require_leading_newline and not code.startswith(""\\n""):\n        return code', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3540', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = 1\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3541', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = None\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3543', 'line': 55, 'description': ['        if cls is PudbCollection:'], 'failure': []}, {'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5161', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""XXlólXX"".encode(), ""lól"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5162', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""lól"".encode(), ""XXlólXX"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5163', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233124, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5164', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""XXlólXX"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5165', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""lól"".encode(), ""XXlólXX""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5166', 'line': 39, 'description': ['            ] + numpy_values:'], 'failure': []}, {'name': 'Mutant #5167', 'line': 41, 'description': ['            iinfo = InspectInfo()'], 'failure': []}, {'name': 'Mutant #5168', 'line': 42, 'description': ['            iinfo.display_type = display_type'], 'failure': []}, {'name': 'Mutant #5169', 'line': 44, 'description': ['            strifier = get_stringifier(iinfo)'], 'failure': []}, {'name': 'Mutant #5170', 'line': 46, 'description': ['            s = strifier(value)'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}, {'name': 'Mutant #5173', 'line': 55, 'description': ['        self.paths_to_expand = paths_to_expand'], 'failure': []}]",57.14285714285714,"['CL001' 'CL002' 'ANNOT001' 'FLV001' 'F002' 'CML001' 'MRET001' 'F030'
 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,pudb_shell,19-49,"[{'lineno': 41, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '        have_readline = True\n    except ImportError:\n        have_readline = False\n\n    if have_readline:\n        readline.set_completer(\n                rlcompleter.Completer(ns).complete)\n        readline.parse_and_bind(""tab: complete"")\n        readline.clear_history()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 19, 'coloffset': 0, 'linematch': 'def pudb_shell(_globals, _locals):', 'context': '""""""\n\n\n# Define this a function with this name and signature at the module level.\ndef pudb_shell(_globals, _locals):\n    """"""\n    This example shell runs a classic Python shell. It is based on\n    run_classic_shell in pudb.shell.\n\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 20, 'coloffset': 4, 'linematch': '""""""', 'context': '\n\n# Define this a function with this name and signature at the module level.\ndef pudb_shell(_globals, _locals):\n    """"""\n    This example shell runs a classic Python shell. It is based on\n    run_classic_shell in pudb.shell.\n\n    """"""\n    # Many shells only let you pass in a single locals dictionary, rather than', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 31, 'coloffset': 4, 'linematch': 'from pudb.shell import SetPropagatingDict', 'context': '    # pudb.shell.SetPropagatingDict to automatically merge the two into a\n    # single dictionary. It does this in such a way that assignments propogate\n    # to _locals, so that when the debugger is at the module level, variables\n    # can be reassigned in the shell.\n    from pudb.shell import SetPropagatingDict\n    ns = SetPropagatingDict([_locals, _globals], _locals)\n\n    try:\n        import readline\n        import rlcompleter', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 32, 'coloffset': 4, 'linematch': 'ns = SetPropagatingDict([_locals, _globals], _locals)', 'context': '    # single dictionary. It does this in such a way that assignments propogate\n    # to _locals, so that when the debugger is at the module level, variables\n    # can be reassigned in the shell.\n    from pudb.shell import SetPropagatingDict\n    ns = SetPropagatingDict([_locals, _globals], _locals)\n\n    try:\n        import readline\n        import rlcompleter\n        have_readline = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 34, 'coloffset': 4, 'linematch': 'try:', 'context': '    # can be reassigned in the shell.\n    from pudb.shell import SetPropagatingDict\n    ns = SetPropagatingDict([_locals, _globals], _locals)\n\n    try:\n        import readline\n        import rlcompleter\n        have_readline = True\n    except ImportError:\n        have_readline = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 41, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '        have_readline = True\n    except ImportError:\n        have_readline = False\n\n    if have_readline:\n        readline.set_completer(\n                rlcompleter.Completer(ns).complete)\n        readline.parse_and_bind(""tab: complete"")\n        readline.clear_history()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 47, 'coloffset': 4, 'linematch': 'from code import InteractiveConsole', 'context': '                rlcompleter.Completer(ns).complete)\n        readline.parse_and_bind(""tab: complete"")\n        readline.clear_history()\n\n    from code import InteractiveConsole\n    cons = InteractiveConsole(ns)\n    cons.interact(""Press Ctrl-D to return to the debugger"")\n    # When the function returns, control will be returned to the debugger.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 48, 'coloffset': 4, 'linematch': 'cons = InteractiveConsole(ns)', 'context': '        readline.parse_and_bind(""tab: complete"")\n        readline.clear_history()\n\n    from code import InteractiveConsole\n    cons = InteractiveConsole(ns)\n    cons.interact(""Press Ctrl-D to return to the debugger"")\n    # When the function returns, control will be returned to the debugger.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 49, 'coloffset': 4, 'linematch': 'cons.interact(""Press Ctrl-D to return to the debugger"")', 'context': '        readline.clear_history()\n\n    from code import InteractiveConsole\n    cons = InteractiveConsole(ns)\n    cons.interact(""Press Ctrl-D to return to the debugger"")\n    # When the function returns, control will be returned to the debugger.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3540', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = 1\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3541', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = None\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5157', 'line': 32, 'description': ['        numpy_values = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -29,7 +29,7 @@\n     try:\n         import numpy as np\n     except ImportError:\n-        numpy_values = []\n+        numpy_values = None\n     else:\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5158', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(6), np.zeros(5)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5159', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(5), np.zeros(6)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5160', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': []}, {'name': 'Mutant #5161', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""XXlólXX"".encode(), ""lól"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5162', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""lól"".encode(), ""XXlólXX"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5163', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233124, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5164', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""XXlólXX"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5165', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""lól"".encode(), ""XXlólXX""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5166', 'line': 39, 'description': ['            ] + numpy_values:'], 'failure': []}, {'name': 'Mutant #5167', 'line': 41, 'description': ['            iinfo = InspectInfo()'], 'failure': []}, {'name': 'Mutant #5168', 'line': 42, 'description': ['            iinfo.display_type = display_type'], 'failure': []}, {'name': 'Mutant #5169', 'line': 44, 'description': ['            strifier = get_stringifier(iinfo)'], 'failure': []}, {'name': 'Mutant #5170', 'line': 46, 'description': ['            s = strifier(value)'], 'failure': []}]",33.33333333333333,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_argparse_parser,21-70,"[{'lineno': 34, 'coloffset': 4, 'linematch': 'if sys.argv[1:] == [""-v""]:', 'context': '    from pudb import VERSION\n\n    version_info = ""%(prog)s v"" + VERSION\n\n    if sys.argv[1:] == [""-v""]:\n        print(version_info % {""prog"": ""pudb""})\n        sys.exit(os.EX_OK)\n\n    parser = argparse.ArgumentParser(\n        ""pudb"",', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 34, 'coloffset': 7, 'linematch': 'if sys.argv[1:] == [""-v""]:', 'context': '    from pudb import VERSION\n\n    version_info = ""%(prog)s v"" + VERSION\n\n    if sys.argv[1:] == [""-v""]:\n        print(version_info % {""prog"": ""pudb""})\n        sys.exit(os.EX_OK)\n\n    parser = argparse.ArgumentParser(\n        ""pudb"",', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 21, 'coloffset': 0, 'linematch': 'def get_argparse_parser():', 'context': '}\nSCRIPT_ARGS = {""zsh"": ""_script_args""}\n\n\ndef get_argparse_parser():\n    import argparse\n    import os\n    import sys\n    try:\n        import shtab', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 22, 'coloffset': 4, 'linematch': 'import argparse', 'context': 'SCRIPT_ARGS = {""zsh"": ""_script_args""}\n\n\ndef get_argparse_parser():\n    import argparse\n    import os\n    import sys\n    try:\n        import shtab\n    except ImportError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 23, 'coloffset': 4, 'linematch': 'import os', 'context': '\n\ndef get_argparse_parser():\n    import argparse\n    import os\n    import sys\n    try:\n        import shtab\n    except ImportError:\n        from . import _shtab as shtab', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 24, 'coloffset': 4, 'linematch': 'import sys', 'context': '\ndef get_argparse_parser():\n    import argparse\n    import os\n    import sys\n    try:\n        import shtab\n    except ImportError:\n        from . import _shtab as shtab\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 25, 'coloffset': 4, 'linematch': 'try:', 'context': 'def get_argparse_parser():\n    import argparse\n    import os\n    import sys\n    try:\n        import shtab\n    except ImportError:\n        from . import _shtab as shtab\n\n    from pudb import VERSION', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 30, 'coloffset': 4, 'linematch': 'from pudb import VERSION', 'context': '        import shtab\n    except ImportError:\n        from . import _shtab as shtab\n\n    from pudb import VERSION\n\n    version_info = ""%(prog)s v"" + VERSION\n\n    if sys.argv[1:] == [""-v""]:\n        print(version_info % {""prog"": ""pudb""})', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 32, 'coloffset': 4, 'linematch': 'version_info = ""%(prog)s v"" + VERSION', 'context': '        from . import _shtab as shtab\n\n    from pudb import VERSION\n\n    version_info = ""%(prog)s v"" + VERSION\n\n    if sys.argv[1:] == [""-v""]:\n        print(version_info % {""prog"": ""pudb""})\n        sys.exit(os.EX_OK)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 34, 'coloffset': 4, 'linematch': 'if sys.argv[1:] == [""-v""]:', 'context': '    from pudb import VERSION\n\n    version_info = ""%(prog)s v"" + VERSION\n\n    if sys.argv[1:] == [""-v""]:\n        print(version_info % {""prog"": ""pudb""})\n        sys.exit(os.EX_OK)\n\n    parser = argparse.ArgumentParser(\n        ""pudb"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 38, 'coloffset': 4, 'linematch': 'parser = argparse.ArgumentParser(', 'context': '    if sys.argv[1:] == [""-v""]:\n        print(version_info % {""prog"": ""pudb""})\n        sys.exit(os.EX_OK)\n\n    parser = argparse.ArgumentParser(\n        ""pudb"",\n        usage=""%(prog)s [options] [-m] SCRIPT-OR-MODULE-TO-RUN [SCRIPT_ARGS]"",\n        epilog=version_info\n    )\n    shtab.add_argument_to(parser, preamble=PREAMBLE)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 43, 'coloffset': 4, 'linematch': 'shtab.add_argument_to(parser, preamble=PREAMBLE)', 'context': '        ""pudb"",\n        usage=""%(prog)s [options] [-m] SCRIPT-OR-MODULE-TO-RUN [SCRIPT_ARGS]"",\n        epilog=version_info\n    )\n    shtab.add_argument_to(parser, preamble=PREAMBLE)\n    # dest=""_continue_at_start"" needed as ""continue"" is a python keyword\n    parser.add_argument(\n        ""-c"", ""--continue"",\n        action=""store_true"",\n        dest=""_continue_at_start"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 45, 'coloffset': 4, 'linematch': 'parser.add_argument(', 'context': '        epilog=version_info\n    )\n    shtab.add_argument_to(parser, preamble=PREAMBLE)\n    # dest=""_continue_at_start"" needed as ""continue"" is a python keyword\n    parser.add_argument(\n        ""-c"", ""--continue"",\n        action=""store_true"",\n        dest=""_continue_at_start"",\n        help=""Let the script run until an exception occurs or a breakpoint is hit"",\n    )', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 51, 'coloffset': 4, 'linematch': 'parser.add_argument(""-s"", ""--steal-output"", action=""store_true"")', 'context': '        action=""store_true"",\n        dest=""_continue_at_start"",\n        help=""Let the script run until an exception occurs or a breakpoint is hit"",\n    )\n    parser.add_argument(""-s"", ""--steal-output"", action=""store_true"")\n\n    # note: we\'re implementing -m as a boolean flag, mimicking pdb\'s behavior,\n    # and makes it possible without much fuss to support cases like:\n    #    python -m pudb -m http.server -h\n    # where the -h will be passed to the http.server module', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 57, 'coloffset': 4, 'linematch': 'parser.add_argument(""-m"", ""--module"", action=""store_true"",', 'context': '    # note: we\'re implementing -m as a boolean flag, mimicking pdb\'s behavior,\n    # and makes it possible without much fuss to support cases like:\n    #    python -m pudb -m http.server -h\n    # where the -h will be passed to the http.server module\n    parser.add_argument(""-m"", ""--module"", action=""store_true"",\n                        help=""Debug as module or package instead of as a script"")\n\n    parser.add_argument(""-le"", ""--log-errors"", nargs=1, metavar=""FILE"",\n                        help=""Log internal errors to the given file""\n                        ).complete = shtab.FILE', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 60, 'coloffset': 4, 'linematch': 'parser.add_argument(""-le"", ""--log-errors"", nargs=1, metavar=""FILE"",', 'context': '    # where the -h will be passed to the http.server module\n    parser.add_argument(""-m"", ""--module"", action=""store_true"",\n                        help=""Debug as module or package instead of as a script"")\n\n    parser.add_argument(""-le"", ""--log-errors"", nargs=1, metavar=""FILE"",\n                        help=""Log internal errors to the given file""\n                        ).complete = shtab.FILE\n    parser.add_argument(""--pre-run"", metavar=""COMMAND"",\n                        help=""Run command before each program run"",\n                        default="""").complete = COMMAND', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 63, 'coloffset': 4, 'linematch': 'parser.add_argument(""--pre-run"", metavar=""COMMAND"",', 'context': '\n    parser.add_argument(""-le"", ""--log-errors"", nargs=1, metavar=""FILE"",\n                        help=""Log internal errors to the given file""\n                        ).complete = shtab.FILE\n    parser.add_argument(""--pre-run"", metavar=""COMMAND"",\n                        help=""Run command before each program run"",\n                        default="""").complete = COMMAND\n    parser.add_argument(""--version"", action=""version"", version=version_info)\n    parser.add_argument(""script_args"", nargs=argparse.REMAINDER,\n                        help=""Arguments to pass to script or module""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 66, 'coloffset': 4, 'linematch': 'parser.add_argument(""--version"", action=""version"", version=version_info)', 'context': '                        ).complete = shtab.FILE\n    parser.add_argument(""--pre-run"", metavar=""COMMAND"",\n                        help=""Run command before each program run"",\n                        default="""").complete = COMMAND\n    parser.add_argument(""--version"", action=""version"", version=version_info)\n    parser.add_argument(""script_args"", nargs=argparse.REMAINDER,\n                        help=""Arguments to pass to script or module""\n                        ).complete = SCRIPT_ARGS\n    return parser\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 67, 'coloffset': 4, 'linematch': 'parser.add_argument(""script_args"", nargs=argparse.REMAINDER,', 'context': '    parser.add_argument(""--pre-run"", metavar=""COMMAND"",\n                        help=""Run command before each program run"",\n                        default="""").complete = COMMAND\n    parser.add_argument(""--version"", action=""version"", version=version_info)\n    parser.add_argument(""script_args"", nargs=argparse.REMAINDER,\n                        help=""Arguments to pass to script or module""\n                        ).complete = SCRIPT_ARGS\n    return parser\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 70, 'coloffset': 4, 'linematch': 'return parser', 'context': '    parser.add_argument(""--version"", action=""version"", version=version_info)\n    parser.add_argument(""script_args"", nargs=argparse.REMAINDER,\n                        help=""Arguments to pass to script or module""\n                        ).complete = SCRIPT_ARGS\n    return parser\n\n\ndef main(**kwargs):\n    import sys\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3540', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = 1\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3541', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = None\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3543', 'line': 55, 'description': ['        if cls is PudbCollection:'], 'failure': []}, {'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3546', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3547', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3548', 'line': 65, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5157', 'line': 32, 'description': ['        numpy_values = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -29,7 +29,7 @@\n     try:\n         import numpy as np\n     except ImportError:\n-        numpy_values = []\n+        numpy_values = None\n     else:\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5158', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(6), np.zeros(5)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5159', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(5), np.zeros(6)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5160', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': []}, {'name': 'Mutant #5161', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""XXlólXX"".encode(), ""lól"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5162', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""lól"".encode(), ""XXlólXX"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5163', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233124, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5164', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""XXlólXX"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5165', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""lól"".encode(), ""XXlólXX""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5166', 'line': 39, 'description': ['            ] + numpy_values:'], 'failure': []}, {'name': 'Mutant #5167', 'line': 41, 'description': ['            iinfo = InspectInfo()'], 'failure': []}, {'name': 'Mutant #5168', 'line': 42, 'description': ['            iinfo.display_type = display_type'], 'failure': []}, {'name': 'Mutant #5169', 'line': 44, 'description': ['            strifier = get_stringifier(iinfo)'], 'failure': []}, {'name': 'Mutant #5170', 'line': 46, 'description': ['            s = strifier(value)'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}, {'name': 'Mutant #5173', 'line': 55, 'description': ['        self.paths_to_expand = paths_to_expand'], 'failure': []}, {'name': 'Mutant #5174', 'line': 59, 'description': ['            id_path, read_only)'], 'failure': []}, {'name': 'Mutant #5175', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5176', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5177', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5178', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5179', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5180', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5181', 'line': 64, 'description': ['        if id_path in self.paths_to_expand:'], 'failure': []}, {'name': 'Mutant #5182', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5183', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}]",68.42105263157895,['CL001' 'BOOL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,main,73-108,"[{'lineno': 81, 'coloffset': 4, 'linematch': 'if options.log_errors:', 'context': '\n    options = parser.parse_args()\n    args = options.script_args\n\n    if options.log_errors:\n        from pudb.lowlevel import setlogfile\n        setlogfile(options.log_errors[0])\n\n    options_kwargs = {\n        ""pre_run"": options.pre_run,', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 91, 'coloffset': 4, 'linematch': 'if len(args) < 1:', 'context': '        ""steal_output"": options.steal_output,\n        ""_continue_at_start"": options._continue_at_start,\n    }\n\n    if len(args) < 1:\n        parser.print_help()\n        sys.exit(2)\n\n    mainpyfile = args[0]\n    sys.argv = args', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 98, 'coloffset': 4, 'linematch': 'if options.module:', 'context': '\n    mainpyfile = args[0]\n    sys.argv = args\n\n    if options.module:\n        from pudb import runmodule\n        runmodule(mainpyfile, **options_kwargs)\n    else:\n        from os.path import exists\n        if not exists(mainpyfile):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 103, 'coloffset': 8, 'linematch': 'if not exists(mainpyfile):', 'context': '        from pudb import runmodule\n        runmodule(mainpyfile, **options_kwargs)\n    else:\n        from os.path import exists\n        if not exists(mainpyfile):\n            print(""Error: %s does not exist"" % mainpyfile, file=sys.stderr)\n            sys.exit(1)\n\n        from pudb import runscript\n        runscript(mainpyfile, **options_kwargs)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 73, 'coloffset': 0, 'linematch': 'def main(**kwargs):', 'context': '                        ).complete = SCRIPT_ARGS\n    return parser\n\n\ndef main(**kwargs):\n    import sys\n\n    parser = get_argparse_parser()\n\n    options = parser.parse_args()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 91, 'coloffset': 4, 'linematch': 'if len(args) < 1:', 'context': '        ""steal_output"": options.steal_output,\n        ""_continue_at_start"": options._continue_at_start,\n    }\n\n    if len(args) < 1:\n        parser.print_help()\n        sys.exit(2)\n\n    mainpyfile = args[0]\n    sys.argv = args', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 98, 'coloffset': 4, 'linematch': 'if options.module:', 'context': '\n    mainpyfile = args[0]\n    sys.argv = args\n\n    if options.module:\n        from pudb import runmodule\n        runmodule(mainpyfile, **options_kwargs)\n    else:\n        from os.path import exists\n        if not exists(mainpyfile):', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 103, 'coloffset': 8, 'linematch': 'if not exists(mainpyfile):', 'context': '        from pudb import runmodule\n        runmodule(mainpyfile, **options_kwargs)\n    else:\n        from os.path import exists\n        if not exists(mainpyfile):\n            print(""Error: %s does not exist"" % mainpyfile, file=sys.stderr)\n            sys.exit(1)\n\n        from pudb import runscript\n        runscript(mainpyfile, **options_kwargs)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 74, 'coloffset': 4, 'linematch': 'import sys', 'context': '    return parser\n\n\ndef main(**kwargs):\n    import sys\n\n    parser = get_argparse_parser()\n\n    options = parser.parse_args()\n    args = options.script_args', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 76, 'coloffset': 4, 'linematch': 'parser = get_argparse_parser()', 'context': '\ndef main(**kwargs):\n    import sys\n\n    parser = get_argparse_parser()\n\n    options = parser.parse_args()\n    args = options.script_args\n\n    if options.log_errors:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 78, 'coloffset': 4, 'linematch': 'options = parser.parse_args()', 'context': '    import sys\n\n    parser = get_argparse_parser()\n\n    options = parser.parse_args()\n    args = options.script_args\n\n    if options.log_errors:\n        from pudb.lowlevel import setlogfile\n        setlogfile(options.log_errors[0])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 79, 'coloffset': 4, 'linematch': 'args = options.script_args', 'context': '\n    parser = get_argparse_parser()\n\n    options = parser.parse_args()\n    args = options.script_args\n\n    if options.log_errors:\n        from pudb.lowlevel import setlogfile\n        setlogfile(options.log_errors[0])\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 81, 'coloffset': 4, 'linematch': 'if options.log_errors:', 'context': '\n    options = parser.parse_args()\n    args = options.script_args\n\n    if options.log_errors:\n        from pudb.lowlevel import setlogfile\n        setlogfile(options.log_errors[0])\n\n    options_kwargs = {\n        ""pre_run"": options.pre_run,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 85, 'coloffset': 4, 'linematch': 'options_kwargs = {', 'context': '    if options.log_errors:\n        from pudb.lowlevel import setlogfile\n        setlogfile(options.log_errors[0])\n\n    options_kwargs = {\n        ""pre_run"": options.pre_run,\n        ""steal_output"": options.steal_output,\n        ""_continue_at_start"": options._continue_at_start,\n    }\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 91, 'coloffset': 4, 'linematch': 'if len(args) < 1:', 'context': '        ""steal_output"": options.steal_output,\n        ""_continue_at_start"": options._continue_at_start,\n    }\n\n    if len(args) < 1:\n        parser.print_help()\n        sys.exit(2)\n\n    mainpyfile = args[0]\n    sys.argv = args', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 95, 'coloffset': 4, 'linematch': 'mainpyfile = args[0]', 'context': '    if len(args) < 1:\n        parser.print_help()\n        sys.exit(2)\n\n    mainpyfile = args[0]\n    sys.argv = args\n\n    if options.module:\n        from pudb import runmodule\n        runmodule(mainpyfile, **options_kwargs)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 96, 'coloffset': 4, 'linematch': 'sys.argv = args', 'context': '        parser.print_help()\n        sys.exit(2)\n\n    mainpyfile = args[0]\n    sys.argv = args\n\n    if options.module:\n        from pudb import runmodule\n        runmodule(mainpyfile, **options_kwargs)\n    else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 98, 'coloffset': 4, 'linematch': 'if options.module:', 'context': '\n    mainpyfile = args[0]\n    sys.argv = args\n\n    if options.module:\n        from pudb import runmodule\n        runmodule(mainpyfile, **options_kwargs)\n    else:\n        from os.path import exists\n        if not exists(mainpyfile):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 73, 'coloffset': 0, 'linematch': 'def main(**kwargs):', 'context': '                        ).complete = SCRIPT_ARGS\n    return parser\n\n\ndef main(**kwargs):\n    import sys\n\n    parser = get_argparse_parser()\n\n    options = parser.parse_args()', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 73, 'coloffset': 0, 'linematch': 'def main(**kwargs):', 'context': '                        ).complete = SCRIPT_ARGS\n    return parser\n\n\ndef main(**kwargs):\n    import sys\n\n    parser = get_argparse_parser()\n\n    options = parser.parse_args()', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3550', 'line': 76, 'description': ['            ui_log.error(""Object {l!r} appears to be a collection, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -73,7 +73,7 @@\n             for count, entry in enumerate(collection):\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a collection, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a collection, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3552', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -77,7 +77,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, collection):\n         return len(collection)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #3555', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3556', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3557', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3558', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3559', 'line': 98, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3560', 'line': 107, 'description': ['                yield str(count), entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -104,7 +104,7 @@\n         assert isinstance(sequence, cls)\n         try:\n             for count, entry in enumerate(sequence):\n-                yield str(count), entry, f""[{count:d}]""\n+                yield str(count), entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5187', 'line': 76, 'description': ['    @property'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -73,7 +73,6 @@\n     def bar(self):\n         return True\n \n-    @property\n     def red(self):\n         return ""red""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5189', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -77,7 +77,6 @@\n     def red(self):\n         return ""red""\n \n-    @classmethod\n     def blue(cls):\n         return ""blue""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5191', 'line': 84, 'description': ['    @staticmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -81,7 +81,6 @@\n     def blue(cls):\n         return ""blue""\n \n-    @staticmethod\n     def green():\n         return ""green""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5194', 'line': 92, 'description': ['        return ""amazing""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -89,7 +89,7 @@\n         return ""shh""\n \n     def __magicsomething__(self):\n-        return ""amazing""\n+        return ""XXamazingXX""\n \n \n def method_factory(method_name):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5195', 'line': 97, 'description': ['        func = getattr(self.__internal_dict__, method_name)'], 'failure': []}, {'name': 'Mutant #5196', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name != ""__getitem__""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5197', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name == ""XX__getitem__XX""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5198', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -101,7 +101,7 @@\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n             if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+                    and args and isinstance(args[1], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5199', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,8 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+            if (method_name == ""__getitem__"" or args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}]",30.76923076923077,['CL001' 'ANNOT001' 'F002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,set_style,233-256,"[{'lineno': 241, 'coloffset': 8, 'linematch': 'if not isinstance(style, PaletteEntry):', 'context': '    been defined, and add it to the palette_dict under the given style_name.\n    """"""\n    try:\n        style = palette_dict[style_name]\n        if not isinstance(style, PaletteEntry):\n            style = PaletteEntry(style_name, *style)\n            style.handle_256_colors()\n            palette_dict[style_name] = style\n        return style\n    except KeyError:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 233, 'coloffset': 0, 'linematch': 'def set_style(palette_dict: dict, style_name: str,', 'context': '    # }}}\n}\n\n\ndef set_style(palette_dict: dict, style_name: str,\n              inheritance_overrides: dict) -> PaletteEntry:\n    """"""\n    Recursively search up the style hierarchy for the first style which has\n    been defined, and add it to the palette_dict under the given style_name.\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 235, 'coloffset': 4, 'linematch': '""""""', 'context': '\n\ndef set_style(palette_dict: dict, style_name: str,\n              inheritance_overrides: dict) -> PaletteEntry:\n    """"""\n    Recursively search up the style hierarchy for the first style which has\n    been defined, and add it to the palette_dict under the given style_name.\n    """"""\n    try:\n        style = palette_dict[style_name]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 239, 'coloffset': 4, 'linematch': 'try:', 'context': '    """"""\n    Recursively search up the style hierarchy for the first style which has\n    been defined, and add it to the palette_dict under the given style_name.\n    """"""\n    try:\n        style = palette_dict[style_name]\n        if not isinstance(style, PaletteEntry):\n            style = PaletteEntry(style_name, *style)\n            style.handle_256_colors()\n            palette_dict[style_name] = style', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3617', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = CONFIG[""XXwrap_variablesXX""]\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3618', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = None\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3619', 'line': 235, 'description': ['            self.wrap = iinfo.wrap'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -232,7 +232,7 @@\n \n             self.wrap = CONFIG[""wrap_variables""]\n         else:\n-            self.wrap = iinfo.wrap\n+            self.wrap = None\n \n     def __str__(self):\n         return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3620', 'line': 238, 'description': ['        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -235,7 +235,7 @@\n             self.wrap = iinfo.wrap\n \n     def __str__(self):\n-        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n+        return (""XXVariableWidget: {value_str}, level {nesting_level}, at {id_path}XX""\n                 .format(\n                     value_str=self.value_str,\n                     nesting_level=self.nesting_level,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3621', 'line': 246, 'description': ['        return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -243,7 +243,7 @@\n                 ))\n \n     def selectable(self):\n-        return True\n+        return False\n \n     def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3622', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol = len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3623', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol += len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3624', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3625', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3626', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = None\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5275', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5276', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5279', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5280', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5281', 'line': 241, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}, {'name': 'Mutant #5283', 'line': 249, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting())'], 'failure': []}, {'name': 'Mutant #5284', 'line': 252, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -249,7 +249,7 @@\n         self.walker = BasicValueWalker(FrameVarInfoForTesting())\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5285', 'line': 253, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -250,7 +250,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5286', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5287', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5288', 'line': 255, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -252,7 +252,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}]",40.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,handle_256_colors,48-54,"[{'lineno': 49, 'coloffset': 8, 'linematch': 'if self.foreground.lower().strip().startswith(""h""):', 'context': '    foreground_high: Optional[str] = None\n    background_high: Optional[str] = None\n\n    def handle_256_colors(self):\n        if self.foreground.lower().strip().startswith(""h""):\n            self.foreground_high = self.foreground\n            self.foreground = ""default""\n        if self.background.lower().strip().startswith(""h""):\n            self.background_high = self.background\n            self.background = ""default""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 52, 'coloffset': 8, 'linematch': 'if self.background.lower().strip().startswith(""h""):', 'context': '    def handle_256_colors(self):\n        if self.foreground.lower().strip().startswith(""h""):\n            self.foreground_high = self.foreground\n            self.foreground = ""default""\n        if self.background.lower().strip().startswith(""h""):\n            self.background_high = self.background\n            self.background = ""default""\n\n\n# ------------------------------------------------------------------------------', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 48, 'coloffset': 4, 'linematch': 'def handle_256_colors(self):', 'context': '    mono: Optional[str] = None\n    foreground_high: Optional[str] = None\n    background_high: Optional[str] = None\n\n    def handle_256_colors(self):\n        if self.foreground.lower().strip().startswith(""h""):\n            self.foreground_high = self.foreground\n            self.foreground = ""default""\n        if self.background.lower().strip().startswith(""h""):\n            self.background_high = self.background', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 52, 'coloffset': 8, 'linematch': 'if self.background.lower().strip().startswith(""h""):', 'context': '    def handle_256_colors(self):\n        if self.foreground.lower().strip().startswith(""h""):\n            self.foreground_high = self.foreground\n            self.foreground = ""default""\n        if self.background.lower().strip().startswith(""h""):\n            self.background_high = self.background\n            self.background = ""default""\n\n\n# ------------------------------------------------------------------------------', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 49, 'coloffset': 8, 'linematch': 'if self.foreground.lower().strip().startswith(""h""):', 'context': '    foreground_high: Optional[str] = None\n    background_high: Optional[str] = None\n\n    def handle_256_colors(self):\n        if self.foreground.lower().strip().startswith(""h""):\n            self.foreground_high = self.foreground\n            self.foreground = ""default""\n        if self.background.lower().strip().startswith(""h""):\n            self.background_high = self.background\n            self.background = ""default""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 52, 'coloffset': 8, 'linematch': 'if self.background.lower().strip().startswith(""h""):', 'context': '    def handle_256_colors(self):\n        if self.foreground.lower().strip().startswith(""h""):\n            self.foreground_high = self.foreground\n            self.foreground = ""default""\n        if self.background.lower().strip().startswith(""h""):\n            self.background_high = self.background\n            self.background = ""default""\n\n\n# ------------------------------------------------------------------------------', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'F002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,debugger,251-265,"[{'lineno': 260, 'coloffset': 4, 'linematch': 'if rdb is None:', 'context': '):\n    """"""Return the current debugger instance (if any),\n    or creates a new one.""""""\n    rdb = _current[0]\n    if rdb is None:\n        rdb = _current[0] = RemoteDebugger(\n            host=host, port=port, term_size=term_size, reverse=reverse\n        )\n        atexit.register(lambda e: e.close_remote_session(), rdb)\n    return rdb', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 43, 'coloffset': 4, 'linematch': 'if not (force or self.call_pdb):', 'context': '\ndef debugger(self, force=False):\n    """"""Call the PuDB debugger.""""""\n    from logging import error\n    if not (force or self.call_pdb):\n        return\n\n    if not hasattr(sys, ""last_traceback""):\n        error(""No traceback has been produced, nothing to debug."")\n        return', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 46, 'coloffset': 4, 'linematch': 'if not hasattr(sys, ""last_traceback""):', 'context': '    from logging import error\n    if not (force or self.call_pdb):\n        return\n\n    if not hasattr(sys, ""last_traceback""):\n        error(""No traceback has been produced, nothing to debug."")\n        return\n\n    from pudb import pm\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 251, 'coloffset': 0, 'linematch': 'def debugger(', 'context': '            self._sock.close()\n        self.say(SESSION_ENDED.format(self=self))\n\n\ndef debugger(\n    term_size=None,\n    host=PUDB_RDB_HOST,\n    port=PUDB_RDB_PORT,\n    reverse=PUDB_RDB_REVERSE\n):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 40, 'coloffset': 0, 'linematch': 'def debugger(self, force=False):', 'context': '\nregister_line_magic(pudb)\n\n\ndef debugger(self, force=False):\n    """"""Call the PuDB debugger.""""""\n    from logging import error\n    if not (force or self.call_pdb):\n        return\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 46, 'coloffset': 4, 'linematch': 'if not hasattr(sys, ""last_traceback""):', 'context': '    from logging import error\n    if not (force or self.call_pdb):\n        return\n\n    if not hasattr(sys, ""last_traceback""):\n        error(""No traceback has been produced, nothing to debug."")\n        return\n\n    from pudb import pm\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 257, 'coloffset': 4, 'linematch': '""""""Return the current debugger instance (if any),', 'context': '    host=PUDB_RDB_HOST,\n    port=PUDB_RDB_PORT,\n    reverse=PUDB_RDB_REVERSE\n):\n    """"""Return the current debugger instance (if any),\n    or creates a new one.""""""\n    rdb = _current[0]\n    if rdb is None:\n        rdb = _current[0] = RemoteDebugger(\n            host=host, port=port, term_size=term_size, reverse=reverse', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 259, 'coloffset': 4, 'linematch': 'rdb = _current[0]', 'context': '    reverse=PUDB_RDB_REVERSE\n):\n    """"""Return the current debugger instance (if any),\n    or creates a new one.""""""\n    rdb = _current[0]\n    if rdb is None:\n        rdb = _current[0] = RemoteDebugger(\n            host=host, port=port, term_size=term_size, reverse=reverse\n        )\n        atexit.register(lambda e: e.close_remote_session(), rdb)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 260, 'coloffset': 4, 'linematch': 'if rdb is None:', 'context': '):\n    """"""Return the current debugger instance (if any),\n    or creates a new one.""""""\n    rdb = _current[0]\n    if rdb is None:\n        rdb = _current[0] = RemoteDebugger(\n            host=host, port=port, term_size=term_size, reverse=reverse\n        )\n        atexit.register(lambda e: e.close_remote_session(), rdb)\n    return rdb', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 265, 'coloffset': 4, 'linematch': 'return rdb', 'context': '        rdb = _current[0] = RemoteDebugger(\n            host=host, port=port, term_size=term_size, reverse=reverse\n        )\n        atexit.register(lambda e: e.close_remote_session(), rdb)\n    return rdb\n\n\ndef set_trace(\n    frame=None,\n    term_size=None,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 41, 'coloffset': 4, 'linematch': '""""""Call the PuDB debugger.""""""', 'context': 'register_line_magic(pudb)\n\n\ndef debugger(self, force=False):\n    """"""Call the PuDB debugger.""""""\n    from logging import error\n    if not (force or self.call_pdb):\n        return\n\n    if not hasattr(sys, ""last_traceback""):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 42, 'coloffset': 4, 'linematch': 'from logging import error', 'context': '\n\ndef debugger(self, force=False):\n    """"""Call the PuDB debugger.""""""\n    from logging import error\n    if not (force or self.call_pdb):\n        return\n\n    if not hasattr(sys, ""last_traceback""):\n        error(""No traceback has been produced, nothing to debug."")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 43, 'coloffset': 4, 'linematch': 'if not (force or self.call_pdb):', 'context': '\ndef debugger(self, force=False):\n    """"""Call the PuDB debugger.""""""\n    from logging import error\n    if not (force or self.call_pdb):\n        return\n\n    if not hasattr(sys, ""last_traceback""):\n        error(""No traceback has been produced, nothing to debug."")\n        return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 46, 'coloffset': 4, 'linematch': 'if not hasattr(sys, ""last_traceback""):', 'context': '    from logging import error\n    if not (force or self.call_pdb):\n        return\n\n    if not hasattr(sys, ""last_traceback""):\n        error(""No traceback has been produced, nothing to debug."")\n        return\n\n    from pudb import pm\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 50, 'coloffset': 4, 'linematch': 'from pudb import pm', 'context': '    if not hasattr(sys, ""last_traceback""):\n        error(""No traceback has been produced, nothing to debug."")\n        return\n\n    from pudb import pm\n\n    with self.readline_no_record:\n        pm()\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 52, 'coloffset': 4, 'linematch': 'with self.readline_no_record:', 'context': '        return\n\n    from pudb import pm\n\n    with self.readline_no_record:\n        pm()\n\n\nip = get_ipython()\nip.__class__.debugger = debugger', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3622', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol = len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3623', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol += len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3624', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3625', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3626', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = None\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3630', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label - "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3631', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + ""XX: XX"" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3632', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + "": "" - value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3633', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = None\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3634', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = self.prefix - alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3635', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = None\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3636', 'line': 260, 'description': ['        if not alltext[maxcol:]:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -257,7 +257,7 @@\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n-        if not alltext[maxcol:]:\n+        if  alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3637', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) + maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3638', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol + 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3639', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 3)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3640', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = None\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5284', 'line': 252, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -249,7 +249,7 @@\n         self.walker = BasicValueWalker(FrameVarInfoForTesting())\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5285', 'line': 253, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -250,7 +250,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5286', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5287', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5288', 'line': 255, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -252,7 +252,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5290', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5291', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5292', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5293', 'line': 260, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -257,7 +257,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5294', 'line': 261, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -258,7 +258,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5295', 'line': 262, 'description': ['            ""foo bar"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -259,7 +259,7 @@\n             # strings\n             """",\n             ""a"",\n-            ""foo bar"",\n+            ""XXfoo barXX"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",1.9607843137254901,['CL001' 'ANNOT001' 'F002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,set_trace,268-281,"[{'lineno': 276, 'coloffset': 4, 'linematch': 'if frame is None:', 'context': '    port=PUDB_RDB_PORT,\n    reverse=PUDB_RDB_REVERSE\n):\n    """"""Set breakpoint at current location, or a specified frame""""""\n    if frame is None:\n        frame = _frame().f_back\n\n    return debugger(\n        term_size=term_size, host=host, port=port, reverse=reverse\n    ).set_trace(frame)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 247, 'coloffset': 4, 'linematch': 'if isinstance(threading.current_thread(), threading._MainThread):', 'context': '    import sys\n    dbg = _get_debugger()\n\n    import threading\n    if isinstance(threading.current_thread(), threading._MainThread):\n        set_interrupt_handler()\n\n    dbg.set_trace(sys._getframe().f_back, paused=paused)\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 265, 'coloffset': 8, 'linematch': 'if as_breakpoint is None:', 'context': '        here).\n\n        If paused=False, the debugger will not break here.\n        """"""\n        if as_breakpoint is None:\n            if not paused:\n                as_breakpoint = False\n            else:\n                as_breakpoint = True\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 271, 'coloffset': 8, 'linematch': 'if frame is None:', 'context': '                as_breakpoint = False\n            else:\n                as_breakpoint = True\n\n        if frame is None:\n            frame = thisframe = sys._getframe().f_back\n        else:\n            thisframe = frame\n        # See pudb issue #52. If this works well enough we should upstream to\n        # stdlib bdb.py.', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 286, 'coloffset': 8, 'linematch': 'if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:', 'context': '            frame = frame.f_back\n\n        thisframe_info = (\n                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 266, 'coloffset': 12, 'linematch': 'if not paused:', 'context': '\n        If paused=False, the debugger will not break here.\n        """"""\n        if as_breakpoint is None:\n            if not paused:\n                as_breakpoint = False\n            else:\n                as_breakpoint = True\n\n        if frame is None:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 287, 'coloffset': 12, 'linematch': 'if as_breakpoint:', 'context': '\n        thisframe_info = (\n                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 293, 'coloffset': 12, 'linematch': 'if paused:', 'context': '                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n\n            if paused:\n                self.set_step()\n            else:\n                self.set_continue()\n            sys.settrace(self.trace_dispatch)\n        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 289, 'coloffset': 16, 'linematch': 'if self.ui.source_code_provider is not None:', 'context': '                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n\n            if paused:\n                self.set_step()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 14, 'coloffset': 4, 'linematch': 'if frame is None:', 'context': '    You can call pudb.forked.set_trace() directly or\n    use it with python\'s built-in breakpoint():\n    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""\n    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 16, 'coloffset': 4, 'linematch': 'if term_size is None:', 'context': '    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""\n    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 18, 'coloffset': 8, 'linematch': 'if term_size is not None:', 'context': '    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n        else:\n            try:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 20, 'coloffset': 12, 'linematch': 'if len(term_size) != 2:', 'context': '    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n        else:\n            try:\n                # Getting terminal size\n                s = os.get_terminal_size()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 266, 'coloffset': 12, 'linematch': 'if not paused:', 'context': '\n        If paused=False, the debugger will not break here.\n        """"""\n        if as_breakpoint is None:\n            if not paused:\n                as_breakpoint = False\n            else:\n                as_breakpoint = True\n\n        if frame is None:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 287, 'coloffset': 12, 'linematch': 'if as_breakpoint:', 'context': '\n        thisframe_info = (\n                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 293, 'coloffset': 12, 'linematch': 'if paused:', 'context': '                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n\n            if paused:\n                self.set_step()\n            else:\n                self.set_continue()\n            sys.settrace(self.trace_dispatch)\n        else:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 289, 'coloffset': 16, 'linematch': 'if self.ui.source_code_provider is not None:', 'context': '                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n\n            if paused:\n                self.set_step()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 18, 'coloffset': 8, 'linematch': 'if term_size is not None:', 'context': '    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n        else:\n            try:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 20, 'coloffset': 12, 'linematch': 'if len(term_size) != 2:', 'context': '    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n        else:\n            try:\n                # Getting terminal size\n                s = os.get_terminal_size()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 16, 'coloffset': 7, 'linematch': 'if term_size is None:', 'context': '    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""\n    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 16, 'coloffset': 7, 'linematch': 'if term_size is None:', 'context': '    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""\n    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 268, 'coloffset': 0, 'linematch': 'def set_trace(', 'context': '        atexit.register(lambda e: e.close_remote_session(), rdb)\n    return rdb\n\n\ndef set_trace(\n    frame=None,\n    term_size=None,\n    host=PUDB_RDB_HOST,\n    port=PUDB_RDB_PORT,\n    reverse=PUDB_RDB_REVERSE', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 236, 'coloffset': 0, 'linematch': 'def set_trace(paused=True):', 'context': 'def runcall(*args, **kwargs):\n    return _get_debugger().runcall(*args, **kwargs)\n\n\ndef set_trace(paused=True):\n    """"""\n    Start the debugger\n\n    If paused=False (the default is True), the debugger will not stop here\n    (same as immediately pressing \'c\' to continue).', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 250, 'coloffset': 4, 'linematch': 'def set_trace(self, frame=None, as_breakpoint=None, paused=True):', 'context': '\n    def set_jump(self, frame, line):\n        frame.f_lineno = line\n\n    def set_trace(self, frame=None, as_breakpoint=None, paused=True):\n        """"""Start debugging from `frame`.\n\n        If frame is not specified, debugging starts from caller\'s frame.\n\n        Unlike Bdb.set_trace(), this does not call self.reset(), which causes', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 7, 'coloffset': 0, 'linematch': 'def set_trace(paused=True, frame=None, term_size=None):', 'context': '\nfrom pudb.debugger import Debugger\n\n\ndef set_trace(paused=True, frame=None, term_size=None):\n    """"""Set a breakpoint in a forked process on Unix system, e.g. Linux & MacOS.\n    In- and output will be redirected to /dev/stdin & /dev/stdout.\n    You can call pudb.forked.set_trace() directly or\n    use it with python\'s built-in breakpoint():\n    PYTHONBREAKPOINT=pudb.forked.set_trace python …', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 17, 'coloffset': 0, 'linematch': 'def set_trace():', 'context': '__builtins__[""__origimport__""] = __import__\n__builtins__[""__import__""] = __myimport__\n\n\ndef set_trace():\n    dbg = _get_debugger()\n    set_interrupt_handler()\n    dbg.set_trace(sys._getframe().f_back.f_back)\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 271, 'coloffset': 8, 'linematch': 'if frame is None:', 'context': '                as_breakpoint = False\n            else:\n                as_breakpoint = True\n\n        if frame is None:\n            frame = thisframe = sys._getframe().f_back\n        else:\n            thisframe = frame\n        # See pudb issue #52. If this works well enough we should upstream to\n        # stdlib bdb.py.', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 286, 'coloffset': 8, 'linematch': 'if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:', 'context': '            frame = frame.f_back\n\n        thisframe_info = (\n                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 293, 'coloffset': 12, 'linematch': 'if paused:', 'context': '                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n\n            if paused:\n                self.set_step()\n            else:\n                self.set_continue()\n            sys.settrace(self.trace_dispatch)\n        else:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 16, 'coloffset': 4, 'linematch': 'if term_size is None:', 'context': '    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""\n    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 266, 'coloffset': 12, 'linematch': 'if not paused:', 'context': '\n        If paused=False, the debugger will not break here.\n        """"""\n        if as_breakpoint is None:\n            if not paused:\n                as_breakpoint = False\n            else:\n                as_breakpoint = True\n\n        if frame is None:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 287, 'coloffset': 12, 'linematch': 'if as_breakpoint:', 'context': '\n        thisframe_info = (\n                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 289, 'coloffset': 16, 'linematch': 'if self.ui.source_code_provider is not None:', 'context': '                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n\n            if paused:\n                self.set_step()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 293, 'coloffset': 12, 'linematch': 'if paused:', 'context': '                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)\n\n            if paused:\n                self.set_step()\n            else:\n                self.set_continue()\n            sys.settrace(self.trace_dispatch)\n        else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 18, 'coloffset': 8, 'linematch': 'if term_size is not None:', 'context': '    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n        else:\n            try:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 20, 'coloffset': 12, 'linematch': 'if len(term_size) != 2:', 'context': '    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n        else:\n            try:\n                # Getting terminal size\n                s = os.get_terminal_size()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 250, 'coloffset': 4, 'linematch': 'def set_trace(self, frame=None, as_breakpoint=None, paused=True):', 'context': '\n    def set_jump(self, frame, line):\n        frame.f_lineno = line\n\n    def set_trace(self, frame=None, as_breakpoint=None, paused=True):\n        """"""Start debugging from `frame`.\n\n        If frame is not specified, debugging starts from caller\'s frame.\n\n        Unlike Bdb.set_trace(), this does not call self.reset(), which causes', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 275, 'coloffset': 4, 'linematch': '""""""Set breakpoint at current location, or a specified frame""""""', 'context': '    host=PUDB_RDB_HOST,\n    port=PUDB_RDB_PORT,\n    reverse=PUDB_RDB_REVERSE\n):\n    """"""Set breakpoint at current location, or a specified frame""""""\n    if frame is None:\n        frame = _frame().f_back\n\n    return debugger(\n        term_size=term_size, host=host, port=port, reverse=reverse', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 276, 'coloffset': 4, 'linematch': 'if frame is None:', 'context': '    port=PUDB_RDB_PORT,\n    reverse=PUDB_RDB_REVERSE\n):\n    """"""Set breakpoint at current location, or a specified frame""""""\n    if frame is None:\n        frame = _frame().f_back\n\n    return debugger(\n        term_size=term_size, host=host, port=port, reverse=reverse\n    ).set_trace(frame)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 279, 'coloffset': 4, 'linematch': 'return debugger(', 'context': '    """"""Set breakpoint at current location, or a specified frame""""""\n    if frame is None:\n        frame = _frame().f_back\n\n    return debugger(\n        term_size=term_size, host=host, port=port, reverse=reverse\n    ).set_trace(frame)\n\n\ndef debug_remote_on_single_rank(comm: Any, rank: int, func: Callable,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 237, 'coloffset': 4, 'linematch': '""""""', 'context': '    return _get_debugger().runcall(*args, **kwargs)\n\n\ndef set_trace(paused=True):\n    """"""\n    Start the debugger\n\n    If paused=False (the default is True), the debugger will not stop here\n    (same as immediately pressing \'c\' to continue).\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 243, 'coloffset': 4, 'linematch': 'import sys', 'context': '\n    If paused=False (the default is True), the debugger will not stop here\n    (same as immediately pressing \'c\' to continue).\n    """"""\n    import sys\n    dbg = _get_debugger()\n\n    import threading\n    if isinstance(threading.current_thread(), threading._MainThread):\n        set_interrupt_handler()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 244, 'coloffset': 4, 'linematch': 'dbg = _get_debugger()', 'context': '    If paused=False (the default is True), the debugger will not stop here\n    (same as immediately pressing \'c\' to continue).\n    """"""\n    import sys\n    dbg = _get_debugger()\n\n    import threading\n    if isinstance(threading.current_thread(), threading._MainThread):\n        set_interrupt_handler()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 246, 'coloffset': 4, 'linematch': 'import threading', 'context': '    """"""\n    import sys\n    dbg = _get_debugger()\n\n    import threading\n    if isinstance(threading.current_thread(), threading._MainThread):\n        set_interrupt_handler()\n\n    dbg.set_trace(sys._getframe().f_back, paused=paused)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 247, 'coloffset': 4, 'linematch': 'if isinstance(threading.current_thread(), threading._MainThread):', 'context': '    import sys\n    dbg = _get_debugger()\n\n    import threading\n    if isinstance(threading.current_thread(), threading._MainThread):\n        set_interrupt_handler()\n\n    dbg.set_trace(sys._getframe().f_back, paused=paused)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 250, 'coloffset': 4, 'linematch': 'dbg.set_trace(sys._getframe().f_back, paused=paused)', 'context': '    import threading\n    if isinstance(threading.current_thread(), threading._MainThread):\n        set_interrupt_handler()\n\n    dbg.set_trace(sys._getframe().f_back, paused=paused)\n\n\nstart = set_trace\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 251, 'coloffset': 8, 'linematch': '""""""Start debugging from `frame`.', 'context': '    def set_jump(self, frame, line):\n        frame.f_lineno = line\n\n    def set_trace(self, frame=None, as_breakpoint=None, paused=True):\n        """"""Start debugging from `frame`.\n\n        If frame is not specified, debugging starts from caller\'s frame.\n\n        Unlike Bdb.set_trace(), this does not call self.reset(), which causes\n        the debugger to enter bdb source code. This also implements treating', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 265, 'coloffset': 8, 'linematch': 'if as_breakpoint is None:', 'context': '        here).\n\n        If paused=False, the debugger will not break here.\n        """"""\n        if as_breakpoint is None:\n            if not paused:\n                as_breakpoint = False\n            else:\n                as_breakpoint = True\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 271, 'coloffset': 8, 'linematch': 'if frame is None:', 'context': '                as_breakpoint = False\n            else:\n                as_breakpoint = True\n\n        if frame is None:\n            frame = thisframe = sys._getframe().f_back\n        else:\n            thisframe = frame\n        # See pudb issue #52. If this works well enough we should upstream to\n        # stdlib bdb.py.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 279, 'coloffset': 8, 'linematch': 'while frame:', 'context': '        # See pudb issue #52. If this works well enough we should upstream to\n        # stdlib bdb.py.\n        # self.reset()\n\n        while frame:\n            frame.f_trace = self.trace_dispatch\n            self.botframe = frame\n            frame = frame.f_back\n\n        thisframe_info = (', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 284, 'coloffset': 8, 'linematch': 'thisframe_info = (', 'context': '            frame.f_trace = self.trace_dispatch\n            self.botframe = frame\n            frame = frame.f_back\n\n        thisframe_info = (\n                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 286, 'coloffset': 8, 'linematch': 'if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:', 'context': '            frame = frame.f_back\n\n        thisframe_info = (\n                self.canonic(thisframe.f_code.co_filename), thisframe.f_lineno)\n        if thisframe_info not in self.set_traces or self.set_traces[thisframe_info]:\n            if as_breakpoint:\n                self.set_traces[thisframe_info] = True\n                if self.ui.source_code_provider is not None:\n                    self.ui.set_source_code_provider(\n                            self.ui.source_code_provider, force_update=True)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 8, 'coloffset': 4, 'linematch': '""""""Set a breakpoint in a forked process on Unix system, e.g. Linux & MacOS.', 'context': 'from pudb.debugger import Debugger\n\n\ndef set_trace(paused=True, frame=None, term_size=None):\n    """"""Set a breakpoint in a forked process on Unix system, e.g. Linux & MacOS.\n    In- and output will be redirected to /dev/stdin & /dev/stdout.\n    You can call pudb.forked.set_trace() directly or\n    use it with python\'s built-in breakpoint():\n    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 14, 'coloffset': 4, 'linematch': 'if frame is None:', 'context': '    You can call pudb.forked.set_trace() directly or\n    use it with python\'s built-in breakpoint():\n    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""\n    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 16, 'coloffset': 4, 'linematch': 'if term_size is None:', 'context': '    PYTHONBREAKPOINT=pudb.forked.set_trace python …\n    """"""\n    if frame is None:\n        frame = sys._getframe().f_back\n    if term_size is None:\n        term_size = os.environ.get(""PUDB_TERM_SIZE"")\n        if term_size is not None:\n            term_size = tuple(map(int, term_size.split(""x"")))\n            if len(term_size) != 2:\n                raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 30, 'coloffset': 4, 'linematch': 'Debugger(', 'context': '                term_size = (s.columns, s.lines)\n            except Exception:\n                term_size = (80, 24)\n\n    Debugger(\n        stdin=open(""/dev/stdin""),\n        stdout=open(""/dev/stdout"", ""w""),\n        term_size=term_size,\n    ).set_trace(frame, paused=paused)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 18, 'coloffset': 4, 'linematch': 'dbg = _get_debugger()', 'context': '__builtins__[""__import__""] = __myimport__\n\n\ndef set_trace():\n    dbg = _get_debugger()\n    set_interrupt_handler()\n    dbg.set_trace(sys._getframe().f_back.f_back)\n\n\nset_trace()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 19, 'coloffset': 4, 'linematch': 'set_interrupt_handler()', 'context': '\n\ndef set_trace():\n    dbg = _get_debugger()\n    set_interrupt_handler()\n    dbg.set_trace(sys._getframe().f_back.f_back)\n\n\nset_trace()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 20, 'coloffset': 4, 'linematch': 'dbg.set_trace(sys._getframe().f_back.f_back)', 'context': '\ndef set_trace():\n    dbg = _get_debugger()\n    set_interrupt_handler()\n    dbg.set_trace(sys._getframe().f_back.f_back)\n\n\nset_trace()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 250, 'coloffset': 4, 'linematch': 'def set_trace(self, frame=None, as_breakpoint=None, paused=True):', 'context': '\n    def set_jump(self, frame, line):\n        frame.f_lineno = line\n\n    def set_trace(self, frame=None, as_breakpoint=None, paused=True):\n        """"""Start debugging from `frame`.\n\n        If frame is not specified, debugging starts from caller\'s frame.\n\n        Unlike Bdb.set_trace(), this does not call self.reset(), which causes', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 7, 'coloffset': 0, 'linematch': 'def set_trace(paused=True, frame=None, term_size=None):', 'context': '\nfrom pudb.debugger import Debugger\n\n\ndef set_trace(paused=True, frame=None, term_size=None):\n    """"""Set a breakpoint in a forked process on Unix system, e.g. Linux & MacOS.\n    In- and output will be redirected to /dev/stdin & /dev/stdout.\n    You can call pudb.forked.set_trace() directly or\n    use it with python\'s built-in breakpoint():\n    PYTHONBREAKPOINT=pudb.forked.set_trace python …', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 250, 'coloffset': 4, 'linematch': 'def set_trace(self, frame=None, as_breakpoint=None, paused=True):', 'context': '\n    def set_jump(self, frame, line):\n        frame.f_lineno = line\n\n    def set_trace(self, frame=None, as_breakpoint=None, paused=True):\n        """"""Start debugging from `frame`.\n\n        If frame is not specified, debugging starts from caller\'s frame.\n\n        Unlike Bdb.set_trace(), this does not call self.reset(), which causes', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 7, 'coloffset': 0, 'linematch': 'def set_trace(paused=True, frame=None, term_size=None):', 'context': '\nfrom pudb.debugger import Debugger\n\n\ndef set_trace(paused=True, frame=None, term_size=None):\n    """"""Set a breakpoint in a forked process on Unix system, e.g. Linux & MacOS.\n    In- and output will be redirected to /dev/stdin & /dev/stdout.\n    You can call pudb.forked.set_trace() directly or\n    use it with python\'s built-in breakpoint():\n    PYTHONBREAKPOINT=pudb.forked.set_trace python …', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3660', 'line': 274, 'description': ['            return len(self._get_wrapped_lines(size[0]))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -271,7 +271,7 @@\n         :return: The number of rows required for this widget\n         """"""\n         if self.wrap:\n-            return len(self._get_wrapped_lines(size[0]))\n+            return len(self._get_wrapped_lines(size[1]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3666', 'line': 281, 'description': ['    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -278,7 +278,7 @@\n         else:\n             return 1\n \n-    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n+    def render(self, size: Tuple[int], focus: bool = True) -> urwid.Canvas:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5299', 'line': 268, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -265,7 +265,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for label, value in enumerate(values):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5300', 'line': 270, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}]",27.27272727272727,['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,debug_remote_on_single_rank,284-304,"[{'lineno': 296, 'coloffset': 4, 'linematch': 'if comm.rank == rank:', 'context': '    :param func: the callable to debug.\n    :param args: the arguments passed to ``func``.\n    :param kwargs: the kwargs passed to ``func``.\n    """"""\n    if comm.rank == rank:\n        debugger().runcall(func, *args, **kwargs)\n    else:\n        try:\n            func(*args, **kwargs)\n        finally:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 284, 'coloffset': 0, 'linematch': 'def debug_remote_on_single_rank(comm: Any, rank: int, func: Callable,', 'context': '        term_size=term_size, host=host, port=port, reverse=reverse\n    ).set_trace(frame)\n\n\ndef debug_remote_on_single_rank(comm: Any, rank: int, func: Callable,\n                                *args: Any, **kwargs: Any) -> None:\n    """"""Run a remote debugger on a single rank of an ``mpi4py`` application.\n    *func* will be called on rank *rank* running in a :class:`RemoteDebugger`,\n    and will be called normally on all other ranks.\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 286, 'coloffset': 4, 'linematch': '""""""Run a remote debugger on a single rank of an ``mpi4py`` application.', 'context': '\n\ndef debug_remote_on_single_rank(comm: Any, rank: int, func: Callable,\n                                *args: Any, **kwargs: Any) -> None:\n    """"""Run a remote debugger on a single rank of an ``mpi4py`` application.\n    *func* will be called on rank *rank* running in a :class:`RemoteDebugger`,\n    and will be called normally on all other ranks.\n\n    :param comm: an ``mpi4py`` ``Comm`` object.\n    :param rank: the rank to debug. All other ranks will spin until this rank exits.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 296, 'coloffset': 4, 'linematch': 'if comm.rank == rank:', 'context': '    :param func: the callable to debug.\n    :param args: the arguments passed to ``func``.\n    :param kwargs: the kwargs passed to ``func``.\n    """"""\n    if comm.rank == rank:\n        debugger().runcall(func, *args, **kwargs)\n    else:\n        try:\n            func(*args, **kwargs)\n        finally:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3667', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = size[1]\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3668', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = None\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3669', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""XXfocused XX""+self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3670', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""-self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3671', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix-"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3672', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix+""XX XX""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3673', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = None\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3674', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix-"" ""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3675', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix+""XX XX""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3676', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = None\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3677', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3678', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3679', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = None\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3680', 'line': 299, 'description': ['            text = self._get_wrapped_lines(maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -296,7 +296,7 @@\n         var_label = self.var_label or """"\n \n         if self.wrap:\n-            text = self._get_wrapped_lines(maxcol)\n+            text = None\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3681', 'line': 302, 'description': ['                    text_width(var_label[maxcol:]), maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -298,8 +298,7 @@\n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n \n-            extralabel_full, extralabel_rem = divmod(\n-                    text_width(var_label[maxcol:]), maxcol)\n+            extralabel_full, extralabel_rem = None\n             totallen = sum(text_width(i) for i in text)\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3682', 'line': 303, 'description': ['            totallen = sum(text_width(i) for i in text)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -300,7 +300,7 @@\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n-            totallen = sum(text_width(i) for i in text)\n+            totallen = None\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5303', 'line': 289, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -286,7 +286,7 @@\n         """"""\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5304', 'line': 290, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -287,7 +287,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5305', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5306', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5307', 'line': 292, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -289,7 +289,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5308', 'line': 293, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5309', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5310', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5311', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5312', 'line': 297, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -294,7 +294,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5313', 'line': 298, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -295,7 +295,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5314', 'line': 299, 'description': ['            ""foo bar"",'], 'failure': []}, {'name': 'Mutant #5315', 'line': 301, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -298,7 +298,7 @@\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5316', 'line': 304, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -301,7 +301,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}]",6.666666666666667,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,__init__,123-187,"[{'lineno': 143, 'coloffset': 8, 'linematch': 'if term_size is None:', 'context': '            terminals of the same size.\n        """"""\n        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 174, 'coloffset': 8, 'linematch': 'if not reverse:', 'context': ""\n        self._handle = sys.stdin = sys.stdout = sock_file\n\n        # nc negotiation doesn't support telnet options\n        if not reverse:\n            tn = TelnetCharacters\n\n            raw_sock_file.write(tn.IAC + tn.WILL + tn.SGA)\n            resp = raw_sock_file.read(3)\n            assert resp == tn.IAC + tn.DO + tn.SGA"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 145, 'coloffset': 12, 'linematch': 'if term_size is not None:', 'context': '        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n            else:\n                try:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 147, 'coloffset': 16, 'linematch': 'if len(term_size) != 2:', 'context': '        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n            else:\n                try:\n                    s = os.get_terminal_size()\n                    term_size = (s.columns, s.lines)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2256, 'coloffset': 8, 'linematch': 'if (want_curses_display', 'context': '                        os.environ.get(""TERM"", """").startswith(""xterm"")\n                        or os.environ.get(""TERM"", """").startswith(""rxvt"")\n                    )))\n\n        if (want_curses_display\n                and not (stdin is not None or stdout is not None)\n                and CursesScreen is not None):\n            self.screen = ThreadsafeCursesScreen()\n        else:\n            screen_kwargs = {}', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2276, 'coloffset': 8, 'linematch': 'if curses:', 'context': '                self.screen = ThreadsafeRawScreen()\n\n        del want_curses_display\n\n        if curses:\n            try:\n                curses.setupterm()\n            except Exception:\n                # Something went wrong--oh well. Nobody will die if their\n                # 256 color support breaks. Just carry on without it.', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 971, 'coloffset': 12, 'linematch': 'if direction < 0:', 'context': '            from pudb.settings import save_config\n\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:\n                if weight < 5:\n                    weight *= 1.25', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 972, 'coloffset': 16, 'linematch': 'if weight > 1/5:', 'context': '\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:\n                if weight < 5:\n                    weight *= 1.25\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 975, 'coloffset': 16, 'linematch': 'if weight < 5:', 'context': '            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:\n                if weight < 5:\n                    weight *= 1.25\n\n            CONFIG[name+""_weight""] = weight\n            save_config(CONFIG)\n            self.rhs_col.contents[index] = (', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 992, 'coloffset': 12, 'linematch': 'if iinfo.show_detail:', 'context': '            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:\n                # collapse current variable\n                iinfo.show_detail = False\n            else:\n                # collapse parent/container variable\n                if var.parent is not None:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 997, 'coloffset': 16, 'linematch': 'if var.parent is not None:', 'context': '                # collapse current variable\n                iinfo.show_detail = False\n            else:\n                # collapse parent/container variable\n                if var.parent is not None:\n                    p_iinfo = get_inspect_info(var.parent.id_path)\n                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1010, 'coloffset': 12, 'linematch': 'if var is None:', 'context': '            except IndexError:\n                return\n\n            var = self.var_list._w.focus\n            if var is None:\n                return\n\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1016, 'coloffset': 12, 'linematch': 'if key == ""enter"" or key == ""\\\\"" or key == "" "":', 'context': '\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None\n\n            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1018, 'coloffset': 12, 'linematch': 'elif key == ""h"":', 'context': '            focus_index = None\n\n            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1020, 'coloffset': 12, 'linematch': 'elif key == ""l"":', 'context': '            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1022, 'coloffset': 12, 'linematch': 'elif key == ""d"":', 'context': '            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1024, 'coloffset': 12, 'linematch': 'elif key == ""t"":', 'context': '            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1026, 'coloffset': 12, 'linematch': 'elif key == ""r"":', 'context': '            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1028, 'coloffset': 12, 'linematch': 'elif key == ""s"":', 'context': '            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1030, 'coloffset': 12, 'linematch': 'elif key == ""i"":', 'context': '            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1032, 'coloffset': 12, 'linematch': 'elif key == ""c"":', 'context': '            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1034, 'coloffset': 12, 'linematch': 'elif key == ""H"":', 'context': '            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1036, 'coloffset': 12, 'linematch': 'elif key == ""@"":', 'context': '            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1038, 'coloffset': 12, 'linematch': 'elif key == ""*"":', 'context': '            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1041, 'coloffset': 12, 'linematch': 'elif key == ""w"":', 'context': '                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1043, 'coloffset': 12, 'linematch': 'elif key == ""m"":', 'context': '                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1045, 'coloffset': 12, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1048, 'coloffset': 20, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1056, 'coloffset': 12, 'linematch': 'if var is None:', 'context': '\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n\n            fvi = self.get_frame_var_info(read_only=False)\n            iinfo = fvi.get_inspect_info(var.id_path, read_only=False)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1067, 'coloffset': 12, 'linematch': 'if var.watch_expr is not None:', 'context': '                (""OK"", True),\n                (""Cancel"", False),\n                ]\n\n            if var.watch_expr is not None:\n                watch_edit = urwid.Edit([\n                    (""label"", ""Watch expression: "")\n                    ], var.watch_expr.expression)\n                id_segment = [\n                        urwid.AttrMap(watch_edit, ""input"", ""focused input""),', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1134, 'coloffset': 12, 'linematch': 'if result is True:', 'context': '                ]))\n\n            result = self.dialog(lb, buttons, title=title)\n\n            if result is True:\n                iinfo.show_detail = expanded_checkbox.get_state()\n                iinfo.wrap = wrap_checkbox.get_state()\n                iinfo.highlighted = highlighted_checkbox.get_state()\n                iinfo.repeated_at_top = repeated_at_top_checkbox.get_state()\n                iinfo.show_methods = show_methods_checkbox.get_state()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1141, 'coloffset': 16, 'linematch': 'if rb_show_default.get_state():', 'context': '                iinfo.highlighted = highlighted_checkbox.get_state()\n                iinfo.repeated_at_top = repeated_at_top_checkbox.get_state()\n                iinfo.show_methods = show_methods_checkbox.get_state()\n\n                if rb_show_default.get_state():\n                    iinfo.display_type = ""default""\n                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1154, 'coloffset': 16, 'linematch': 'if rb_access_public.get_state():', 'context': '                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1161, 'coloffset': 16, 'linematch': 'if var.watch_expr is not None:', 'context': '                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1143, 'coloffset': 16, 'linematch': 'elif rb_show_type.get_state():', 'context': '                iinfo.show_methods = show_methods_checkbox.get_state()\n\n                if rb_show_default.get_state():\n                    iinfo.display_type = ""default""\n                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1145, 'coloffset': 16, 'linematch': 'elif rb_show_repr.get_state():', 'context': '                if rb_show_default.get_state():\n                    iinfo.display_type = ""default""\n                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1147, 'coloffset': 16, 'linematch': 'elif rb_show_str.get_state():', 'context': '                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1149, 'coloffset': 16, 'linematch': 'elif rb_show_id.get_state():', 'context': '                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1151, 'coloffset': 16, 'linematch': 'elif rb_show_custom.get_state():', 'context': '                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1156, 'coloffset': 16, 'linematch': 'elif rb_access_private.get_state():', 'context': '                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1158, 'coloffset': 16, 'linematch': 'elif rb_access_all.get_state():', 'context': '                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1164, 'coloffset': 12, 'linematch': 'elif result == ""del"":', 'context': '\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1166, 'coloffset': 20, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view()\n\n        def insert_watch(w, size, key):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1176, 'coloffset': 12, 'linematch': 'if self.dialog(', 'context': '            watch_edit = urwid.Edit([\n                (""label"", ""Watch expression: "")\n                ])\n\n            if self.dialog(\n                    urwid.ListBox(urwid.SimpleListWalker([\n                        urwid.AttrMap(watch_edit, ""input"", ""focused input"")\n                        ])),\n                    [\n                        (""OK"", True),', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1242, 'coloffset': 12, 'linematch': 'if file_changed:', 'context': '                             ""\\n\\n%s"" % ("""".join(format_exception(*sys.exc_info()))),\n                    title=""File Edit Error"")\n                return\n\n            if file_changed:\n                self.message(""File is changed, but the execution is continued with""\n                             "" the \'old\' codebase.\\n""\n                             f""Changed file: {filename_edited}\\n\\n""\n                             ""Please quit and restart to see changes"",\n                             title=""File is changed"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1283, 'coloffset': 12, 'linematch': 'if (bp.file', 'context': '\n        def set_breakpoint_source(bp):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n            if (bp.file\n                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):\n                self.source[bp.line-1].set_breakpoint(bp.enabled)\n\n        def save_breakpoints(w, size, key):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1293, 'coloffset': 12, 'linematch': 'if bp_list:', 'context': '            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:\n                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1300, 'coloffset': 12, 'linematch': 'if err:', 'context': '                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):\n            err = self.debugger.clear_break(bp.file, bp.line)\n            if err:\n                self.message(""Error clearing breakpoint:\\n"" + err)\n            else:\n                bp.enabled = False\n                self.update_breakpoints()\n                set_breakpoint_source(bp)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1310, 'coloffset': 12, 'linematch': 'if bp_entry is None:', 'context': '\n        def enable_disable_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1321, 'coloffset': 12, 'linematch': 'if bp_entry is None:', 'context': '        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return\n\n            bp = self._get_bp_list()[pos]\n\n            if bp.cond is None:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1326, 'coloffset': 12, 'linematch': 'if bp.cond is None:', 'context': '                return\n\n            bp = self._get_bp_list()[pos]\n\n            if bp.cond is None:\n                cond = """"\n            else:\n                cond = str(bp.cond)\n\n            enabled_checkbox = urwid.CheckBox(', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1358, 'coloffset': 12, 'linematch': 'if result is True:', 'context': '                (""Delete"", ""del""),\n                (""Location"", ""loc""),\n                ], title=""Edit Breakpoint"")\n\n            if result is True:\n                bp.enabled = enabled_checkbox.get_state()\n                bp.ignore = int(ign_count_edit.value())\n                cond = cond_edit.get_edit_text()\n                if cond:\n                    bp.cond = cond', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1362, 'coloffset': 16, 'linematch': 'if cond:', 'context': '            if result is True:\n                bp.enabled = enabled_checkbox.get_state()\n                bp.ignore = int(ign_count_edit.value())\n                cond = cond_edit.get_edit_text()\n                if cond:\n                    bp.cond = cond\n                else:\n                    bp.cond = None\n            elif result == ""loc"":\n                self.show_line(bp.line,', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1366, 'coloffset': 12, 'linematch': 'elif result == ""loc"":', 'context': '                if cond:\n                    bp.cond = cond\n                else:\n                    bp.cond = None\n            elif result == ""loc"":\n                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n            elif result == ""del"":\n                delete_breakpoint(bp)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1370, 'coloffset': 12, 'linematch': 'elif result == ""del"":', 'context': '            elif result == ""loc"":\n                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n            elif result == ""del"":\n                delete_breakpoint(bp)\n\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1380, 'coloffset': 12, 'linematch': 'if bp_entry is not None:', 'context': '        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is not None:\n                bp = self._get_bp_list()[pos]\n                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1405, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1412, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_next(self.debugger.curframe)\n                end()\n\n        def step(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_step()\n                end()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1419, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_step()\n                end()\n\n        def finish(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1426, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_return(self.debugger.curframe)\n                end()\n\n        def cont(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_continue()\n                end()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1433, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_continue()\n                end()\n\n        def run_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1442, 'coloffset': 16, 'linematch': 'if bp_source_identifier is None:', 'context': '\n                bp_source_identifier = \\\n                        self.source_code_provider.get_source_identifier()\n\n                if bp_source_identifier is None:\n                    self.message(\n                        ""Cannot currently set a breakpoint here--""\n                        ""source code does not correspond to a file location. ""\n                        ""(perhaps this is generated code)"")\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1452, 'coloffset': 16, 'linematch': 'if invalid_reason is not None:', 'context': '                from pudb.lowlevel import get_breakpoint_invalid_reason\n                invalid_reason = get_breakpoint_invalid_reason(\n                        bp_source_identifier, lineno)\n\n                if invalid_reason is not None:\n                    self.message(\n                        ""Cannot run to the line you indicated, ""\n                        ""for the following reason:\\n\\n""\n                        + invalid_reason)\n                else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1460, 'coloffset': 20, 'linematch': 'if err:', 'context': '                        + invalid_reason)\n                else:\n                    err = self.debugger.set_break(\n                            bp_source_identifier, pos+1, temporary=True)\n                    if err:\n                        self.message(""Error dealing with breakpoint:\\n"" + err)\n\n                    self.debugger.set_continue()\n                    end()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1467, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                    self.debugger.set_continue()\n                    end()\n\n        def jump_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1476, 'coloffset': 16, 'linematch': 'if bp_source_identifier is None:', 'context': '\n                bp_source_identifier = \\\n                        self.source_code_provider.get_source_identifier()\n\n                if bp_source_identifier is None:\n                    self.message(\n                        ""Cannot jump here--""\n                        ""source code does not correspond to a file location. ""\n                        ""(perhaps this is generated code)"")\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1486, 'coloffset': 16, 'linematch': 'if invalid_reason is not None:', 'context': '                from pudb.lowlevel import get_breakpoint_invalid_reason\n                invalid_reason = get_breakpoint_invalid_reason(\n                        bp_source_identifier, lineno)\n\n                if invalid_reason is not None:\n                    self.message(\n                        ""Cannot jump to the line you indicated, ""\n                        ""for the following reason:\\n\\n""\n                        + invalid_reason)\n                else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1514, 'coloffset': 12, 'linematch': 'if self.dialog(', 'context': '            lineno_edit = urwid.IntEdit([\n                (""label"", ""Go to Line   :"")\n                ], None)\n\n            if self.dialog(\n                    urwid.ListBox(urwid.SimpleListWalker([\n                        labelled_value(""File :"",\n                            self.source_code_provider.identifier()),\n                        labelled_value(""Current Line :"", line+1),\n                        urwid.AttrMap(lineno_edit, ""input"", ""focused input"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1527, 'coloffset': 16, 'linematch': 'if value:', 'context': '                        (""Cancel"", False),\n                        ], title=""Go to Line Number""):\n\n                value = lineno_edit.value()\n                if value:\n                    lineno = min(max(0, int(value)-1), len(self.source)-1)\n                    self.source_list.focus_position = lineno\n\n        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1556, 'coloffset': 12, 'linematch': 'if bp_source_identifier:', 'context': '        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position\n                sline = self.source[pos]\n                lineno = pos+1\n\n                existing_breaks = self.debugger.get_breaks(', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1563, 'coloffset': 16, 'linematch': 'if existing_breaks:', 'context': '                lineno = pos+1\n\n                existing_breaks = self.debugger.get_breaks(\n                        bp_source_identifier, lineno)\n                if existing_breaks:\n                    err = None\n                    for bp in existing_breaks:\n                        if not bp.enabled:\n                            bp.enable()\n                            sline.set_breakpoint(True)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1610, 'coloffset': 16, 'linematch': 'if err:', 'context': '                        sline.set_breakpoint(True)\n                    else:\n                        err = None\n\n                if err:\n                    self.message(""Error dealing with breakpoint:\\n"" + err)\n\n                self.update_breakpoints()\n            else:\n                self.message(', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1566, 'coloffset': 24, 'linematch': 'if not bp.enabled:', 'context': '                        bp_source_identifier, lineno)\n                if existing_breaks:\n                    err = None\n                    for bp in existing_breaks:\n                        if not bp.enabled:\n                            bp.enable()\n                            sline.set_breakpoint(True)\n                            # Unsure about this. Are multiple breakpoints even\n                            # possible?\n                            break', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1577, 'coloffset': 20, 'linematch': 'if file_lineno in self.debugger.set_traces:', 'context': '                        err = self.debugger.clear_break(bp_source_identifier, lineno)\n                        sline.set_breakpoint(False)\n                else:\n                    file_lineno = (bp_source_identifier, lineno)\n                    if file_lineno in self.debugger.set_traces:\n                        self.debugger.set_traces[file_lineno] = \\\n                                not self.debugger.set_traces[file_lineno]\n                        sline.set_breakpoint(self.debugger.set_traces[file_lineno])\n                        return\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1587, 'coloffset': 20, 'linematch': 'if invalid_reason is not None:', 'context': '                    from pudb.lowlevel import get_breakpoint_invalid_reason\n                    invalid_reason = get_breakpoint_invalid_reason(\n                            bp_source_identifier, pos+1)\n\n                    if invalid_reason is not None:\n                        do_set = not self.dialog(\n                                urwid.ListBox(\n                                    urwid.SimpleListWalker([\n                                        urwid.Text(\n                                            ""The breakpoint you just set may be ""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1604, 'coloffset': 20, 'linematch': 'if do_set:', 'context': '                                focus_buttons=True)\n                    else:\n                        do_set = True\n\n                    if do_set:\n                        err = self.debugger.set_break(bp_source_identifier, pos+1)\n                        sline.set_breakpoint(True)\n                    else:\n                        err = None\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1625, 'coloffset': 16, 'linematch': 'if not hasattr(mod, ""__file__""):', 'context': '            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1627, 'coloffset': 16, 'linematch': 'if mod.__file__ is None:', 'context': '\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__\n\n                base, ext = splitext(filename)\n                ext = ext.lower()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1636, 'coloffset': 16, 'linematch': 'if ext == "".pyc"":', 'context': '                ext = ext.lower()\n\n                from os.path import exists\n\n                if ext == "".pyc"":\n                    return exists(base+"".py"")\n                else:\n                    return ext == "".py""\n\n            new_mod_text = SelectableText(""-- update me --"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1663, 'coloffset': 16, 'linematch': 'if ext == "".pyc"":', 'context': '            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)\n                if ext == "".pyc"":\n                    ext = "".py""\n                    filename = base+"".py""\n\n                self.set_source_code_provider(\n                        FileSourceCodeProvider(self.debugger, filename))', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1675, 'coloffset': 20, 'linematch': 'if result is None:', 'context': '            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n\n                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(\n                                self.get_edit_text())\n\n                    return result\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1702, 'coloffset': 16, 'linematch': 'if result is True:', 'context': '\n                    ], title=""Pick Module"")\n                self.last_module_filter = filt_edit.get_edit_text()\n\n                if result is True:\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is new_mod_entry:\n                        new_mod_name = filt_edit.get_edit_text()\n                        try:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1705, 'coloffset': 20, 'linematch': 'if widget is new_mod_entry:', 'context': '\n                if result is True:\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is new_mod_entry:\n                        new_mod_name = filt_edit.get_edit_text()\n                        try:\n                            __import__(str(new_mod_name))\n                        except Exception:\n                            from traceback import format_exception', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1723, 'coloffset': 16, 'linematch': 'elif result is False:', 'context': '                            break\n                    else:\n                        show_mod(sys.modules[widget.base_widget.get_text()[0]])\n                        break\n                elif result is False:\n                    break\n                elif result == ""reload"":\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is not new_mod_entry:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1725, 'coloffset': 16, 'linematch': 'elif result == ""reload"":', 'context': '                        show_mod(sys.modules[widget.base_widget.get_text()[0]])\n                        break\n                elif result is False:\n                    break\n                elif result == ""reload"":\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is not new_mod_entry:\n                        mod_name = widget.base_widget.get_text()[0]\n                        mod = sys.modules[mod_name]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1728, 'coloffset': 20, 'linematch': 'if widget is not new_mod_entry:', 'context': '                    break\n                elif result == ""reload"":\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is not new_mod_entry:\n                        mod_name = widget.base_widget.get_text()[0]\n                        mod = sys.modules[mod_name]\n                        import importlib\n                        importlib.reload(mod)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1736, 'coloffset': 24, 'linematch': 'if self.source_code_provider is not None:', 'context': '                        importlib.reload(mod)\n\n                        self.message(""\'%s\' was successfully reloaded."" % mod_name)\n\n                        if self.source_code_provider is not None:\n                            self.source_code_provider.clear_cache()\n\n                        self.set_source_code_provider(self.source_code_provider,\n                                force_update=True)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1804, 'coloffset': 12, 'linematch': 'if LooseVersion(jedi.__version__) < LooseVersion(""0.16.0""):', 'context': '            except ImportError:\n                from distutils.version import LooseVersion\n\n            import jedi\n            if LooseVersion(jedi.__version__) < LooseVersion(""0.16.0""):\n                self.add_cmdline_content(\n                        ""jedi 0.16.0 is required for Tab completion"",\n                        ""command line error"")\n\n            text = self.cmdline_edit.edit_text', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1846, 'coloffset': 12, 'linematch': 'if completed_chopped_text is None:', 'context': '                            common_compl_prefix, completion)\n\n            completed_chopped_text = common_compl_prefix\n\n            if completed_chopped_text is None:\n                return\n\n            if (\n                    len(completed_chopped_text) == 0\n                    and len(completions) > 1):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1849, 'coloffset': 12, 'linematch': 'if (', 'context': '\n            if completed_chopped_text is None:\n                return\n\n            if (\n                    len(completed_chopped_text) == 0\n                    and len(completions) > 1):\n                self.add_cmdline_content(\n                        ""   "".join(full_completions),\n                        ""command line output"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1831, 'coloffset': 20, 'linematch': 'if a_i != b_i:', 'context': '            chopped_completions = [i.complete for i in completions]\n\n            def common_prefix(a, b):\n                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:\n                        return a[:i]\n\n                return a[:max(len(a), len(b))]\n\n            common_compl_prefix = None', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1838, 'coloffset': 16, 'linematch': 'if common_compl_prefix is None:', 'context': '                return a[:max(len(a), len(b))]\n\n            common_compl_prefix = None\n            for completion in chopped_completions:\n                if common_compl_prefix is None:\n                    common_compl_prefix = completion\n                else:\n                    common_compl_prefix = common_prefix(\n                            common_compl_prefix, completion)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1868, 'coloffset': 12, 'linematch': 'if not cmd:', 'context': '            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n\n            self.add_cmdline_content("">>> "" + cmd, ""command line input"")\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1874, 'coloffset': 12, 'linematch': 'if not self.cmdline_history or cmd != self.cmdline_history[-1]:', 'context': '                return\n\n            self.add_cmdline_content("">>> "" + cmd, ""command line input"")\n\n            if not self.cmdline_history or cmd != self.cmdline_history[-1]:\n                self.cmdline_history.append(cmd)\n\n            self.cmdline_history_position = -1\n            self.cmdline_saved_edit_text = """"\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1899, 'coloffset': 16, 'linematch': 'if tb_lines:', 'context': '\n                tblist = traceback.extract_tb(tb)\n                del tblist[:1]\n                tb_lines = traceback.format_list(tblist)\n                if tb_lines:\n                    tb_lines.insert(0, ""Traceback (most recent call last):\\n"")\n                tb_lines[len(tb_lines):] = traceback.format_exception_only(tp, val)\n\n                self.add_cmdline_content("""".join(tb_lines), ""command line error"")\n            else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1907, 'coloffset': 16, 'linematch': 'if sys.stdout.getvalue():', 'context': '                self.add_cmdline_content("""".join(tb_lines), ""command line error"")\n            else:\n                self.cmdline_edit.set_edit_text("""")\n            finally:\n                if sys.stdout.getvalue():\n                    self.add_cmdline_content(sys.stdout.getvalue(),\n                                             ""command line output"")\n\n                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1930, 'coloffset': 16, 'linematch': 'if pos == -1:', 'context': '            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1944, 'coloffset': 16, 'linematch': 'if pos == -1:', 'context': '\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))\n\n                if pos == -1:\n                    return -1, self.cmdline_saved_edit_text\n                return pos, self.cmdline_history[max_hist_index - pos]\n\n            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1931, 'coloffset': 20, 'linematch': 'if text:', 'context': '            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1934, 'coloffset': 20, 'linematch': 'if direction > 0:', 'context': '                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1937, 'coloffset': 20, 'linematch': 'if direction < 0 and not text and self.cmdline_saved_edit_text:', 'context': '                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text\n\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1960, 'coloffset': 12, 'linematch': 'if self.lhs_col.focus is self.cmdline_sigwrap:', 'context': '            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(\n                        self.lhs_col,\n                        self.search_controller.search_AttrMap', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1961, 'coloffset': 16, 'linematch': 'if CONFIG[""hide_cmdline_win""]:', 'context': '\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(\n                        self.lhs_col,\n                        self.search_controller.search_AttrMap\n                        if self.search_controller.search_box else', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 1969, 'coloffset': 16, 'linematch': 'if CONFIG[""hide_cmdline_win""]:', 'context': '                        self.search_controller.search_AttrMap\n                        if self.search_controller.search_box else\n                        self.source_attr)\n            else:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(True)\n                focus_widget_in_container(self.cmdline_pile, self.cmdline_edit_bar)\n                focus_widget_in_container(self.lhs_col, self.cmdline_sigwrap)\n\n        self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2003, 'coloffset': 12, 'linematch': 'if weight < 5:', 'context': '\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)\n\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2010, 'coloffset': 12, 'linematch': 'if weight > 1/2:', 'context': '\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)\n\n        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2060, 'coloffset': 12, 'linematch': 'if weight < 5:', 'context': '            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight < 5:\n                weight *= 1.25\n                CONFIG[""sidebar_width""] = weight\n                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2072, 'coloffset': 12, 'linematch': 'if weight > 1/5:', 'context': '            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight > 1/5:\n                weight /= 1.25\n                CONFIG[""sidebar_width""] = weight\n                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2097, 'coloffset': 12, 'linematch': 'if curr_line is not None:', 'context': '            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)\n\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2109, 'coloffset': 12, 'linematch': 'if self.current_exc_tuple is not None:', 'context': '                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):\n            if self.current_exc_tuple is not None:\n                from traceback import format_exception\n\n                result = self.dialog(\n                        urwid.ListBox(urwid.SimpleListWalker([urwid.Text(\n                            """".join(format_exception(*self.current_exc_tuple)))])),', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2123, 'coloffset': 16, 'linematch': 'if result == ""location"":', 'context': '                        title=""Exception Viewer"",\n                        focus_buttons=True,\n                        bind_enter_esc=False)\n\n                if result == ""location"":\n                    self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n            else:\n                self.message(""No exception available."")\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2134, 'coloffset': 16, 'linematch': 'if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'context': '            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2136, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():', 'context': '\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2138, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:', 'context': '                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2140, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:', 'context': '                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2142, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:', 'context': '                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2144, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""classic"":', 'context': '                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2154, 'coloffset': 24, 'linematch': 'if not shell.custom_shell_dict:  # Only execfile once', 'context': '                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n\n                    try:\n                        if not shell.custom_shell_dict:  # Only execfile once\n                            from os.path import expanduser, expandvars\n                            cshell_fname = expanduser(expandvars(CONFIG[""shell""]))\n                            with open(cshell_fname) as inf:\n                                exec(compile(inf.read(), cshell_fname, ""exec""),\n                                        shell.custom_shell_dict,', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2169, 'coloffset': 24, 'linematch': 'if ""pudb_shell"" not in shell.custom_shell_dict:', 'context': '                        )\n                    except Exception:\n                        runner = fallback(""Error when importing custom shell."")\n                    else:\n                        if ""pudb_shell"" not in shell.custom_shell_dict:\n                            runner = fallback(\n                                ""%s does not contain a function named pudb_shell at ""\n                                ""the module level."" % CONFIG[""shell""]\n                            )\n                        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2182, 'coloffset': 12, 'linematch': 'if CONFIG[""shell""] == ""internal"":', 'context': '\n            self.update_var_view()\n\n        def run_cmdline(w, size, key):\n            if CONFIG[""shell""] == ""internal"":\n                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n\n        def focus_code(w, size, key):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2219, 'coloffset': 12, 'linematch': 'if source_identifier is None:', 'context': '            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if source_identifier is None:\n                self.message(\n                    ""Cannot edit the current file--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n            open_file_editor(source_identifier, pos+1)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2262, 'coloffset': 12, 'linematch': 'if stdin is not None:', 'context': '                and CursesScreen is not None):\n            self.screen = ThreadsafeCursesScreen()\n        else:\n            screen_kwargs = {}\n            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2264, 'coloffset': 12, 'linematch': 'if stdout is not None:', 'context': '        else:\n            screen_kwargs = {}\n            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2266, 'coloffset': 12, 'linematch': 'if term_size is not None:', 'context': '            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:\n                self.screen = ThreadsafeFixedSizeRawScreen(**screen_kwargs)\n            else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2269, 'coloffset': 12, 'linematch': 'if screen_kwargs:', 'context': '                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:\n                self.screen = ThreadsafeFixedSizeRawScreen(**screen_kwargs)\n            else:\n                self.screen = ThreadsafeRawScreen()\n\n        del want_curses_display', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 2287, 'coloffset': 16, 'linematch': 'if color_support == 256 and isinstance(self.screen, RawScreen):', 'context': '                pass\n            else:\n                color_support = curses.tigetnum(""colors"")\n\n                if color_support == 256 and isinstance(self.screen, RawScreen):\n                    self.screen.set_terminal_properties(256)\n\n        self.setup_palette(self.screen)\n\n        self.show_count = 0', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 145, 'coloffset': 12, 'linematch': 'if term_size is not None:', 'context': '        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n            else:\n                try:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 147, 'coloffset': 16, 'linematch': 'if len(term_size) != 2:', 'context': '        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n            else:\n                try:\n                    s = os.get_terminal_size()\n                    term_size = (s.columns, s.lines)', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 972, 'coloffset': 16, 'linematch': 'if weight > 1/5:', 'context': '\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:\n                if weight < 5:\n                    weight *= 1.25\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1048, 'coloffset': 20, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1141, 'coloffset': 16, 'linematch': 'if rb_show_default.get_state():', 'context': '                iinfo.highlighted = highlighted_checkbox.get_state()\n                iinfo.repeated_at_top = repeated_at_top_checkbox.get_state()\n                iinfo.show_methods = show_methods_checkbox.get_state()\n\n                if rb_show_default.get_state():\n                    iinfo.display_type = ""default""\n                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1154, 'coloffset': 16, 'linematch': 'if rb_access_public.get_state():', 'context': '                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1161, 'coloffset': 16, 'linematch': 'if var.watch_expr is not None:', 'context': '                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1166, 'coloffset': 20, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view()\n\n        def insert_watch(w, size, key):', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1362, 'coloffset': 16, 'linematch': 'if cond:', 'context': '            if result is True:\n                bp.enabled = enabled_checkbox.get_state()\n                bp.ignore = int(ign_count_edit.value())\n                cond = cond_edit.get_edit_text()\n                if cond:\n                    bp.cond = cond\n                else:\n                    bp.cond = None\n            elif result == ""loc"":\n                self.show_line(bp.line,', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1527, 'coloffset': 16, 'linematch': 'if value:', 'context': '                        (""Cancel"", False),\n                        ], title=""Go to Line Number""):\n\n                value = lineno_edit.value()\n                if value:\n                    lineno = min(max(0, int(value)-1), len(self.source)-1)\n                    self.source_list.focus_position = lineno\n\n        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1563, 'coloffset': 16, 'linematch': 'if existing_breaks:', 'context': '                lineno = pos+1\n\n                existing_breaks = self.debugger.get_breaks(\n                        bp_source_identifier, lineno)\n                if existing_breaks:\n                    err = None\n                    for bp in existing_breaks:\n                        if not bp.enabled:\n                            bp.enable()\n                            sline.set_breakpoint(True)', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1610, 'coloffset': 16, 'linematch': 'if err:', 'context': '                        sline.set_breakpoint(True)\n                    else:\n                        err = None\n\n                if err:\n                    self.message(""Error dealing with breakpoint:\\n"" + err)\n\n                self.update_breakpoints()\n            else:\n                self.message(', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1566, 'coloffset': 24, 'linematch': 'if not bp.enabled:', 'context': '                        bp_source_identifier, lineno)\n                if existing_breaks:\n                    err = None\n                    for bp in existing_breaks:\n                        if not bp.enabled:\n                            bp.enable()\n                            sline.set_breakpoint(True)\n                            # Unsure about this. Are multiple breakpoints even\n                            # possible?\n                            break', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1705, 'coloffset': 20, 'linematch': 'if widget is new_mod_entry:', 'context': '\n                if result is True:\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is new_mod_entry:\n                        new_mod_name = filt_edit.get_edit_text()\n                        try:\n                            __import__(str(new_mod_name))\n                        except Exception:\n                            from traceback import format_exception', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1728, 'coloffset': 20, 'linematch': 'if widget is not new_mod_entry:', 'context': '                    break\n                elif result == ""reload"":\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is not new_mod_entry:\n                        mod_name = widget.base_widget.get_text()[0]\n                        mod = sys.modules[mod_name]\n                        import importlib\n                        importlib.reload(mod)\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1736, 'coloffset': 24, 'linematch': 'if self.source_code_provider is not None:', 'context': '                        importlib.reload(mod)\n\n                        self.message(""\'%s\' was successfully reloaded."" % mod_name)\n\n                        if self.source_code_provider is not None:\n                            self.source_code_provider.clear_cache()\n\n                        self.set_source_code_provider(self.source_code_provider,\n                                force_update=True)\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1931, 'coloffset': 20, 'linematch': 'if text:', 'context': '            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1934, 'coloffset': 20, 'linematch': 'if direction > 0:', 'context': '                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1937, 'coloffset': 20, 'linematch': 'if direction < 0 and not text and self.cmdline_saved_edit_text:', 'context': '                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text\n\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 1961, 'coloffset': 16, 'linematch': 'if CONFIG[""hide_cmdline_win""]:', 'context': '\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(\n                        self.lhs_col,\n                        self.search_controller.search_AttrMap\n                        if self.search_controller.search_box else', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 2123, 'coloffset': 16, 'linematch': 'if result == ""location"":', 'context': '                        title=""Exception Viewer"",\n                        focus_buttons=True,\n                        bind_enter_esc=False)\n\n                if result == ""location"":\n                    self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n            else:\n                self.message(""No exception available."")\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 2154, 'coloffset': 24, 'linematch': 'if not shell.custom_shell_dict:  # Only execfile once', 'context': '                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n\n                    try:\n                        if not shell.custom_shell_dict:  # Only execfile once\n                            from os.path import expanduser, expandvars\n                            cshell_fname = expanduser(expandvars(CONFIG[""shell""]))\n                            with open(cshell_fname) as inf:\n                                exec(compile(inf.read(), cshell_fname, ""exec""),\n                                        shell.custom_shell_dict,', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 143, 'coloffset': 11, 'linematch': 'if term_size is None:', 'context': '            terminals of the same size.\n        """"""\n        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 143, 'coloffset': 11, 'linematch': 'if term_size is None:', 'context': '            terminals of the same size.\n        """"""\n        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 143, 'coloffset': 11, 'linematch': 'if term_size is None:', 'context': '            terminals of the same size.\n        """"""\n        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1048, 'coloffset': 23, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 1045, 'coloffset': 17, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 8, 'coloffset': 4, 'linematch': 'def __init__(self, a, b):', 'context': 'Color = namedtuple(""Color"", [""red"", ""green"", ""blue"", ""alpha""])\n\n\nclass MyClass(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self._b = [b]\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 70, 'coloffset': 4, 'linematch': 'def __init__(self):', 'context': '        return iinfo\n\n\nclass Reasonable:\n    def __init__(self):\n        self.x = 42\n\n    def bar(self):\n        return True\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '    me = ""pudb""\n    _prev_outs = None\n    _sock = None\n\n    def __init__(\n        self,\n        host=PUDB_RDB_HOST,\n        port=PUDB_RDB_PORT,\n        port_search_limit=100,\n        out=sys.stdout,', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 45, 'coloffset': 4, 'linematch': 'def __init__(self, source_dicts, target_dict):', 'context': '    same as ``globals()``, so propagation doesn\'t happen at all if the\n    debugger is inside a function frame.\n\n    """"""\n    def __init__(self, source_dicts, target_dict):\n        dict.__init__(self)\n        for s in source_dicts[::-1]:\n            self.update(s)\n\n        self.target_dict = target_dict', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 802, 'coloffset': 8, 'linematch': 'def move_up(w, size, key):', 'context': '        # {{{ build ui\n\n        # {{{ key bindings\n\n        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 805, 'coloffset': 8, 'linematch': 'def move_down(w, size, key):', 'context': '\n        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 808, 'coloffset': 8, 'linematch': 'def move_left(w, size, key):', 'context': '\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 811, 'coloffset': 8, 'linematch': 'def move_right(w, size, key):', 'context': '\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 814, 'coloffset': 8, 'linematch': 'def page_up(w, size, key):', 'context': '\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 817, 'coloffset': 8, 'linematch': 'def page_down(w, size, key):', 'context': '\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 820, 'coloffset': 8, 'linematch': 'def move_home(w, size, key):', 'context': '\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 823, 'coloffset': 8, 'linematch': 'def move_end(w, size, key):', 'context': '\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 826, 'coloffset': 8, 'linematch': 'def add_vi_nav_keys(widget):', 'context': '\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 838, 'coloffset': 8, 'linematch': 'def add_help_keys(widget, helpfunc):', 'context': '            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)\n            widget.listen(""?"", helpfunc)\n\n        # }}}\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 862, 'coloffset': 8, 'linematch': 'def clear_cmdline_history(btn):', 'context': '        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")\n        self.cmdline_edit_sigwrap = SignalWrap(\n                cmdline_edit_attr, is_preemptive=True)\n\n        def clear_cmdline_history(btn):\n            del self.cmdline_contents[:]\n            # clear the command input text too,\n            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 869, 'coloffset': 8, 'linematch': 'def initialize_cmdline_history(path):', 'context': '            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)\n\n        def initialize_cmdline_history(path):\n            dq = partial(deque, maxlen=5000)\n            try:\n                # Load global history if present\n                with open(path, ""r"") as histfile:\n                    return dq(histfile.read().splitlines())', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 942, 'coloffset': 8, 'linematch': 'def helpside(w, size, key):', 'context': '                ]), None, ""focused sidebar""),),\n            ])\n        self.rhs_col_sigwrap = SignalWrap(self.rhs_col)\n\n        def helpside(w, size, key):\n            help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)\n\n        add_vi_nav_keys(self.rhs_col_sigwrap)\n        add_help_keys(self.rhs_col_sigwrap, helpside)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 966, 'coloffset': 8, 'linematch': 'def change_rhs_box(name, index, direction, w, size, key):', 'context': '            header))\n\n        # }}}\n\n        def change_rhs_box(name, index, direction, w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 987, 'coloffset': 8, 'linematch': 'def get_inspect_info(id_path, read_only=False):', 'context': '            self.rhs_col._invalidate()\n\n        # {{{ variables listeners\n\n        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 991, 'coloffset': 8, 'linematch': 'def collapse_current(var, pos, iinfo):', 'context': '        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:\n                # collapse current variable\n                iinfo.show_detail = False\n            else:\n                # collapse parent/container variable', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1003, 'coloffset': 8, 'linematch': 'def change_var_state(w, size, key):', 'context': '                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1053, 'coloffset': 8, 'linematch': 'def edit_inspector_detail(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1171, 'coloffset': 8, 'linematch': 'def insert_watch(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view()\n\n        def insert_watch(w, size, key):\n            watch_edit = urwid.Edit([\n                (""label"", ""Watch expression: "")\n                ])\n\n            if self.dialog(', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1219, 'coloffset': 8, 'linematch': 'def examine_frame(w, size, key):', 'context': '        # }}}\n\n        # {{{ stack listeners\n\n        def examine_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1225, 'coloffset': 8, 'linematch': 'def open_file_editor(file_name, line_number):', 'context': '            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n\n        def open_file_editor(file_name, line_number):\n            file_changed = False\n\n            try:\n                original_modification_time = os.path.getmtime(file_name)\n                with StoppedScreen(self.screen):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1249, 'coloffset': 8, 'linematch': 'def open_editor_on_stack_frame(w, size, key):', 'context': '                             f""Changed file: {filename_edited}\\n\\n""\n                             ""Please quit and restart to see changes"",\n                             title=""File is changed"")\n\n        def open_editor_on_stack_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            index = self.translate_ui_stack_index(pos)\n\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1260, 'coloffset': 8, 'linematch': 'def move_stack_top(w, size, key):', 'context': '            open_file_editor(file_name, line_number)\n\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)\n\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1263, 'coloffset': 8, 'linematch': 'def move_stack_up(w, size, key):', 'context': '\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1266, 'coloffset': 8, 'linematch': 'def move_stack_down(w, size, key):', 'context': '\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1280, 'coloffset': 8, 'linematch': 'def set_breakpoint_source(bp):', 'context': '        # }}}\n\n        # {{{ breakpoint listeners\n\n        def set_breakpoint_source(bp):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n            if (bp.file\n                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1288, 'coloffset': 8, 'linematch': 'def save_breakpoints(w, size, key):', 'context': '                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):\n                self.source[bp.line-1].set_breakpoint(bp.enabled)\n\n        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1291, 'coloffset': 8, 'linematch': 'def handle_delete_breakpoint(w, size, key):', 'context': '\n        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:\n                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1298, 'coloffset': 8, 'linematch': 'def delete_breakpoint(bp):', 'context': '                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):\n            err = self.debugger.clear_break(bp.file, bp.line)\n            if err:\n                self.message(""Error clearing breakpoint:\\n"" + err)\n            else:\n                bp.enabled = False', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1307, 'coloffset': 8, 'linematch': 'def enable_disable_breakpoint(w, size, key):', 'context': '                bp.enabled = False\n                self.update_breakpoints()\n                set_breakpoint_source(bp)\n\n        def enable_disable_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1317, 'coloffset': 8, 'linematch': 'def examine_breakpoint(w, size, key):', 'context': '            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1376, 'coloffset': 8, 'linematch': 'def show_breakpoint(w, size, key):', 'context': '\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is not None:\n                bp = self._get_bp_list()[pos]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1400, 'coloffset': 8, 'linematch': 'def end():', 'context': '        # }}}\n\n        # {{{ source listeners\n\n        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1404, 'coloffset': 8, 'linematch': 'def next_line(w, size, key):', 'context': '        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1411, 'coloffset': 8, 'linematch': 'def step(w, size, key):', 'context': '            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()\n\n        def step(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_step()\n                end()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1418, 'coloffset': 8, 'linematch': 'def finish(w, size, key):', 'context': '            else:\n                self.debugger.set_step()\n                end()\n\n        def finish(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1425, 'coloffset': 8, 'linematch': 'def cont(w, size, key):', 'context': '            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()\n\n        def cont(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_continue()\n                end()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1432, 'coloffset': 8, 'linematch': 'def run_to_cursor(w, size, key):', 'context': '            else:\n                self.debugger.set_continue()\n                end()\n\n        def run_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1466, 'coloffset': 8, 'linematch': 'def jump_to_cursor(w, size, key):', 'context': '\n                    self.debugger.set_continue()\n                    end()\n\n        def jump_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1507, 'coloffset': 8, 'linematch': 'def go_to_line(w, size, key):', 'context': '                    # Update UI. end() will run past the line\n                    self.set_current_line(lineno, self.source_code_provider)\n                    self.update_stack()\n\n        def go_to_line(w, size, key):\n            line = self.source.focus\n\n            lineno_edit = urwid.IntEdit([\n                (""label"", ""Go to Line   :"")\n                ], None)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1531, 'coloffset': 8, 'linematch': 'def scroll_left(w, size, key):', 'context': '                if value:\n                    lineno = min(max(0, int(value)-1), len(self.source)-1)\n                    self.source_list.focus_position = lineno\n\n        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(\n                    0,\n                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1538, 'coloffset': 8, 'linematch': 'def scroll_right(w, size, key):', 'context': '                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()\n\n        def scroll_right(w, size, key):\n            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1543, 'coloffset': 8, 'linematch': 'def search(w, size, key):', 'context': '            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1546, 'coloffset': 8, 'linematch': 'def search_next(w, size, key):', 'context': '\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1549, 'coloffset': 8, 'linematch': 'def search_previous(w, size, key):', 'context': '\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1552, 'coloffset': 8, 'linematch': 'def toggle_breakpoint(w, size, key):', 'context': '\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1746, 'coloffset': 8, 'linematch': 'def helpmain(w, size, key):', 'context': '                        pos = self.stack_list._w.focus_position\n                        self.debugger.set_frame_index(\n                                self.translate_ui_stack_index(pos))\n\n        def helpmain(w, size, key):\n            help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)\n\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1781, 'coloffset': 8, 'linematch': 'def cmdline_get_namespace():', 'context': '        # }}}\n\n        # {{{ command line listeners\n\n        def cmdline_get_namespace():\n            curframe = self.debugger.curframe\n\n            from pudb.shell import SetPropagatingDict\n            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1863, 'coloffset': 8, 'linematch': 'def cmdline_append_newline(w, size, key):', 'context': '            self.cmdline_edit.edit_pos = (\n                    len(chopped_text)\n                    + len(completed_chopped_text))\n\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1866, 'coloffset': 8, 'linematch': 'def cmdline_exec(w, size, key):', 'context': '\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1915, 'coloffset': 8, 'linematch': 'def cmdline_history_browse(direction):', 'context': '                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout\n                sys.stderr = prev_sys_stderr\n\n        def cmdline_history_browse(direction):\n            # Browsing the command line history can be illustrated by moving up/down\n            # in the following table (no wrap-around).\n            # The first column shows what is written in the command input text field,\n            # the second one the corresponding value of self.cmdline_history_position\n            # The actual index into the history list is given by the last column.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1952, 'coloffset': 8, 'linematch': 'def cmdline_history_prev(w, size, key):', 'context': '            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)\n            self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)\n\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1955, 'coloffset': 8, 'linematch': 'def cmdline_history_next(w, size, key):', 'context': '\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1958, 'coloffset': 8, 'linematch': 'def toggle_cmdline_focus(w, size, key):', 'context': '\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1986, 'coloffset': 8, 'linematch': 'def set_cmdline_default_size(weight):', 'context': '\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n\n        # {{{ command line sizing\n        def set_cmdline_default_size(weight):\n            from pudb.settings import save_config\n\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1994, 'coloffset': 8, 'linematch': 'def max_cmdline(w, size, key):', 'context': '            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1997, 'coloffset': 8, 'linematch': 'def min_cmdline(w, size, key):', 'context': '\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2000, 'coloffset': 8, 'linematch': 'def grow_cmdline(w, size, key):', 'context': '\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2007, 'coloffset': 8, 'linematch': 'def shrink_cmdline(w, size, key):', 'context': '            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)\n\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2014, 'coloffset': 8, 'linematch': 'def cmdline_results_scroll(w, size, key):', 'context': '            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)\n\n        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)\n            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2031, 'coloffset': 8, 'linematch': 'def max_sidebar(w, size, key):', 'context': '        # }}}\n\n        # {{{ sidebar sizing\n\n        def max_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2043, 'coloffset': 8, 'linematch': 'def min_sidebar(w, size, key):', 'context': '                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def min_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2055, 'coloffset': 8, 'linematch': 'def grow_sidebar(w, size, key):', 'context': '                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def grow_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight < 5:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2067, 'coloffset': 8, 'linematch': 'def shrink_sidebar(w, size, key):', 'context': '                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()\n\n        def shrink_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight > 1/5:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2088, 'coloffset': 8, 'linematch': 'def show_output(w, size, key):', 'context': '        # }}}\n\n        # {{{ top-level listeners\n\n        def show_output(w, size, key):\n            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2092, 'coloffset': 8, 'linematch': 'def reload_breakpoints_and_redisplay():', 'context': '        def show_output(w, size, key):\n            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2101, 'coloffset': 8, 'linematch': 'def reload_breakpoints():', 'context': '            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)\n\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()\n            from pudb.settings import load_breakpoints\n            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2108, 'coloffset': 8, 'linematch': 'def show_traceback(w, size, key):', 'context': '            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):\n            if self.current_exc_tuple is not None:\n                from traceback import format_exception\n\n                result = self.dialog(\n                        urwid.ListBox(urwid.SimpleListWalker([urwid.Text(', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2129, 'coloffset': 8, 'linematch': 'def run_external_cmdline(w, size, key):', 'context': '\n            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2181, 'coloffset': 8, 'linematch': 'def run_cmdline(w, size, key):', 'context': '                runner(curframe.f_globals, curframe.f_locals)\n\n            self.update_var_view()\n\n        def run_cmdline(w, size, key):\n            if CONFIG[""shell""] == ""internal"":\n                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2187, 'coloffset': 8, 'linematch': 'def focus_code(w, size, key):', 'context': '                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n\n        def focus_code(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2199, 'coloffset': 8, 'linematch': 'def quit(w, size, key):', 'context': '            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2205, 'coloffset': 8, 'linematch': 'def do_edit_config(w, size, key):', 'context': '                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2208, 'coloffset': 8, 'linematch': 'def redraw_screen(w, size, key):', 'context': '\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2211, 'coloffset': 8, 'linematch': 'def help(pages):', 'context': '\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2214, 'coloffset': 8, 'linematch': 'def edit_current_frame(w, size, key):', 'context': '\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if source_identifier is None:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1624, 'coloffset': 12, 'linematch': 'def mod_exists(mod):', 'context': '        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1645, 'coloffset': 12, 'linematch': 'def build_filtered_mod_list(filt_string=""""):', 'context': '            new_mod_text = SelectableText(""-- update me --"")\n            new_mod_entry = urwid.AttrMap(new_mod_text,\n                    None, ""focused selectable"")\n\n            def build_filtered_mod_list(filt_string=""""):\n                modules = sorted(name\n                        # mod_exists may change the size of sys.modules,\n                        # causing this to crash. Copy to a list.\n                        for name, mod in list(sys.modules.items())\n                        if mod_exists(mod))', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1659, 'coloffset': 12, 'linematch': 'def show_mod(mod):', 'context': '                new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)\n                result.append(new_mod_entry)\n                return result\n\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)\n                if ext == "".pyc"":\n                    ext = "".py""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1672, 'coloffset': 16, 'linematch': 'def keypress(self, size, key):', 'context': '                        FileSourceCodeProvider(self.debugger, filename))\n                self.source_list.set_focus(0)\n\n            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n\n                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(\n                                self.get_edit_text())', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1829, 'coloffset': 12, 'linematch': 'def common_prefix(a, b):', 'context': '\n            full_completions = [i.name_with_symbols for i in completions]\n            chopped_completions = [i.complete for i in completions]\n\n            def common_prefix(a, b):\n                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:\n                        return a[:i]\n\n                return a[:max(len(a), len(b))]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 1929, 'coloffset': 12, 'linematch': 'def pos_text(pos, text):', 'context': '            # medium_command              |    1     |     1\n            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2147, 'coloffset': 20, 'linematch': 'def fallback(error_message):', 'context': '                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""\n                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2192, 'coloffset': 12, 'linematch': 'def __init__(self, idx):', 'context': '            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2195, 'coloffset': 12, 'linematch': 'def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument', 'context': '        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 287, 'coloffset': 8, 'linematch': 'def __init__(self, debugger_ui, lineno_format, breakpoints, **options):', 'context': '                },\n            }\n\n    class UrwidFormatter(Formatter):\n        def __init__(self, debugger_ui, lineno_format, breakpoints, **options):\n            Formatter.__init__(self, **options)\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 318, 'coloffset': 4, 'linematch': 'def __init__(self, controller):', 'context': '        return False\n\n\nclass SearchBox(urwid.Edit):\n    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 762, 'coloffset': 4, 'linematch': 'def __init__(self):', 'context': '    return result\n\n\nclass FrameVarInfoKeeper:\n    def __init__(self):\n        self.frame_var_info = {}\n\n    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '    me = ""pudb""\n    _prev_outs = None\n    _sock = None\n\n    def __init__(\n        self,\n        host=PUDB_RDB_HOST,\n        port=PUDB_RDB_PORT,\n        port_search_limit=100,\n        out=sys.stdout,', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 1645, 'coloffset': 12, 'linematch': 'def build_filtered_mod_list(filt_string=""""):', 'context': '            new_mod_text = SelectableText(""-- update me --"")\n            new_mod_entry = urwid.AttrMap(new_mod_text,\n                    None, ""focused selectable"")\n\n            def build_filtered_mod_list(filt_string=""""):\n                modules = sorted(name\n                        # mod_exists may change the size of sys.modules,\n                        # causing this to crash. Copy to a list.\n                        for name, mod in list(sys.modules.items())\n                        if mod_exists(mod))', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 1671, 'coloffset': 12, 'linematch': 'class FilterEdit(urwid.Edit):', 'context': '                self.set_source_code_provider(\n                        FileSourceCodeProvider(self.debugger, filename))\n                self.source_list.set_focus(0)\n\n            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n\n                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 1915, 'coloffset': 8, 'linematch': 'def cmdline_history_browse(direction):', 'context': '                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout\n                sys.stderr = prev_sys_stderr\n\n        def cmdline_history_browse(direction):\n            # Browsing the command line history can be illustrated by moving up/down\n            # in the following table (no wrap-around).\n            # The first column shows what is written in the command input text field,\n            # the second one the corresponding value of self.cmdline_history_position\n            # The actual index into the history list is given by the last column.', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2129, 'coloffset': 8, 'linematch': 'def run_external_cmdline(w, size, key):', 'context': '\n            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2130, 'coloffset': 12, 'linematch': 'with StoppedScreen(self.screen):', 'context': '            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2134, 'coloffset': 16, 'linematch': 'if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'context': '            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2136, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():', 'context': '\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2138, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:', 'context': '                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2140, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:', 'context': '                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2142, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:', 'context': '                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2144, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""classic"":', 'context': '                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 2191, 'coloffset': 8, 'linematch': 'class RHColumnFocuser:', 'context': '        def focus_code(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 174, 'coloffset': 8, 'linematch': 'if not reverse:', 'context': ""\n        self._handle = sys.stdin = sys.stdout = sock_file\n\n        # nc negotiation doesn't support telnet options\n        if not reverse:\n            tn = TelnetCharacters\n\n            raw_sock_file.write(tn.IAC + tn.WILL + tn.SGA)\n            resp = raw_sock_file.read(3)\n            assert resp == tn.IAC + tn.DO + tn.SGA"", 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1016, 'coloffset': 12, 'linematch': 'if key == ""enter"" or key == ""\\\\"" or key == "" "":', 'context': '\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None\n\n            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1067, 'coloffset': 12, 'linematch': 'if var.watch_expr is not None:', 'context': '                (""OK"", True),\n                (""Cancel"", False),\n                ]\n\n            if var.watch_expr is not None:\n                watch_edit = urwid.Edit([\n                    (""label"", ""Watch expression: "")\n                    ], var.watch_expr.expression)\n                id_segment = [\n                        urwid.AttrMap(watch_edit, ""input"", ""focused input""),', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1134, 'coloffset': 12, 'linematch': 'if result is True:', 'context': '                ]))\n\n            result = self.dialog(lb, buttons, title=title)\n\n            if result is True:\n                iinfo.show_detail = expanded_checkbox.get_state()\n                iinfo.wrap = wrap_checkbox.get_state()\n                iinfo.highlighted = highlighted_checkbox.get_state()\n                iinfo.repeated_at_top = repeated_at_top_checkbox.get_state()\n                iinfo.show_methods = show_methods_checkbox.get_state()', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1154, 'coloffset': 16, 'linematch': 'if rb_access_public.get_state():', 'context': '                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1161, 'coloffset': 16, 'linematch': 'if var.watch_expr is not None:', 'context': '                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1326, 'coloffset': 12, 'linematch': 'if bp.cond is None:', 'context': '                return\n\n            bp = self._get_bp_list()[pos]\n\n            if bp.cond is None:\n                cond = """"\n            else:\n                cond = str(bp.cond)\n\n            enabled_checkbox = urwid.CheckBox(', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1358, 'coloffset': 12, 'linematch': 'if result is True:', 'context': '                (""Delete"", ""del""),\n                (""Location"", ""loc""),\n                ], title=""Edit Breakpoint"")\n\n            if result is True:\n                bp.enabled = enabled_checkbox.get_state()\n                bp.ignore = int(ign_count_edit.value())\n                cond = cond_edit.get_edit_text()\n                if cond:\n                    bp.cond = cond', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1452, 'coloffset': 16, 'linematch': 'if invalid_reason is not None:', 'context': '                from pudb.lowlevel import get_breakpoint_invalid_reason\n                invalid_reason = get_breakpoint_invalid_reason(\n                        bp_source_identifier, lineno)\n\n                if invalid_reason is not None:\n                    self.message(\n                        ""Cannot run to the line you indicated, ""\n                        ""for the following reason:\\n\\n""\n                        + invalid_reason)\n                else:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1486, 'coloffset': 16, 'linematch': 'if invalid_reason is not None:', 'context': '                from pudb.lowlevel import get_breakpoint_invalid_reason\n                invalid_reason = get_breakpoint_invalid_reason(\n                        bp_source_identifier, lineno)\n\n                if invalid_reason is not None:\n                    self.message(\n                        ""Cannot jump to the line you indicated, ""\n                        ""for the following reason:\\n\\n""\n                        + invalid_reason)\n                else:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1587, 'coloffset': 20, 'linematch': 'if invalid_reason is not None:', 'context': '                    from pudb.lowlevel import get_breakpoint_invalid_reason\n                    invalid_reason = get_breakpoint_invalid_reason(\n                            bp_source_identifier, pos+1)\n\n                    if invalid_reason is not None:\n                        do_set = not self.dialog(\n                                urwid.ListBox(\n                                    urwid.SimpleListWalker([\n                                        urwid.Text(\n                                            ""The breakpoint you just set may be ""', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1604, 'coloffset': 20, 'linematch': 'if do_set:', 'context': '                                focus_buttons=True)\n                    else:\n                        do_set = True\n\n                    if do_set:\n                        err = self.debugger.set_break(bp_source_identifier, pos+1)\n                        sline.set_breakpoint(True)\n                    else:\n                        err = None\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1610, 'coloffset': 16, 'linematch': 'if err:', 'context': '                        sline.set_breakpoint(True)\n                    else:\n                        err = None\n\n                if err:\n                    self.message(""Error dealing with breakpoint:\\n"" + err)\n\n                self.update_breakpoints()\n            else:\n                self.message(', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1627, 'coloffset': 16, 'linematch': 'if mod.__file__ is None:', 'context': '\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__\n\n                base, ext = splitext(filename)\n                ext = ext.lower()', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1636, 'coloffset': 16, 'linematch': 'if ext == "".pyc"":', 'context': '                ext = ext.lower()\n\n                from os.path import exists\n\n                if ext == "".pyc"":\n                    return exists(base+"".py"")\n                else:\n                    return ext == "".py""\n\n            new_mod_text = SelectableText(""-- update me --"")', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1846, 'coloffset': 12, 'linematch': 'if completed_chopped_text is None:', 'context': '                            common_compl_prefix, completion)\n\n            completed_chopped_text = common_compl_prefix\n\n            if completed_chopped_text is None:\n                return\n\n            if (\n                    len(completed_chopped_text) == 0\n                    and len(completions) > 1):', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1849, 'coloffset': 12, 'linematch': 'if (', 'context': '\n            if completed_chopped_text is None:\n                return\n\n            if (\n                    len(completed_chopped_text) == 0\n                    and len(completions) > 1):\n                self.add_cmdline_content(\n                        ""   "".join(full_completions),\n                        ""command line output"")', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1874, 'coloffset': 12, 'linematch': 'if not self.cmdline_history or cmd != self.cmdline_history[-1]:', 'context': '                return\n\n            self.add_cmdline_content("">>> "" + cmd, ""command line input"")\n\n            if not self.cmdline_history or cmd != self.cmdline_history[-1]:\n                self.cmdline_history.append(cmd)\n\n            self.cmdline_history_position = -1\n            self.cmdline_saved_edit_text = """"\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1934, 'coloffset': 20, 'linematch': 'if direction > 0:', 'context': '                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1937, 'coloffset': 20, 'linematch': 'if direction < 0 and not text and self.cmdline_saved_edit_text:', 'context': '                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text\n\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 1944, 'coloffset': 16, 'linematch': 'if pos == -1:', 'context': '\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))\n\n                if pos == -1:\n                    return -1, self.cmdline_saved_edit_text\n                return pos, self.cmdline_history[max_hist_index - pos]\n\n            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 2264, 'coloffset': 12, 'linematch': 'if stdout is not None:', 'context': '        else:\n            screen_kwargs = {}\n            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 2266, 'coloffset': 12, 'linematch': 'if term_size is not None:', 'context': '            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:\n                self.screen = ThreadsafeFixedSizeRawScreen(**screen_kwargs)\n            else:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 2269, 'coloffset': 12, 'linematch': 'if screen_kwargs:', 'context': '                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:\n                self.screen = ThreadsafeFixedSizeRawScreen(**screen_kwargs)\n            else:\n                self.screen = ThreadsafeRawScreen()\n\n        del want_curses_display', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 2276, 'coloffset': 8, 'linematch': 'if curses:', 'context': '                self.screen = ThreadsafeRawScreen()\n\n        del want_curses_display\n\n        if curses:\n            try:\n                curses.setupterm()\n            except Exception:\n                # Something went wrong--oh well. Nobody will die if their\n                # 256 color support breaks. Just carry on without it.', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 145, 'coloffset': 12, 'linematch': 'if term_size is not None:', 'context': '        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n            else:\n                try:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 147, 'coloffset': 16, 'linematch': 'if len(term_size) != 2:', 'context': '        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")\n            else:\n                try:\n                    s = os.get_terminal_size()\n                    term_size = (s.columns, s.lines)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2262, 'coloffset': 12, 'linematch': 'if stdin is not None:', 'context': '                and CursesScreen is not None):\n            self.screen = ThreadsafeCursesScreen()\n        else:\n            screen_kwargs = {}\n            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2264, 'coloffset': 12, 'linematch': 'if stdout is not None:', 'context': '        else:\n            screen_kwargs = {}\n            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2266, 'coloffset': 12, 'linematch': 'if term_size is not None:', 'context': '            if stdin is not None:\n                screen_kwargs[""input""] = stdin\n            if stdout is not None:\n                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:\n                self.screen = ThreadsafeFixedSizeRawScreen(**screen_kwargs)\n            else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2269, 'coloffset': 12, 'linematch': 'if screen_kwargs:', 'context': '                screen_kwargs[""output""] = stdout\n            if term_size is not None:\n                screen_kwargs[""term_size""] = term_size\n\n            if screen_kwargs:\n                self.screen = ThreadsafeFixedSizeRawScreen(**screen_kwargs)\n            else:\n                self.screen = ThreadsafeRawScreen()\n\n        del want_curses_display', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2287, 'coloffset': 16, 'linematch': 'if color_support == 256 and isinstance(self.screen, RawScreen):', 'context': '                pass\n            else:\n                color_support = curses.tigetnum(""colors"")\n\n                if color_support == 256 and isinstance(self.screen, RawScreen):\n                    self.screen.set_terminal_properties(256)\n\n        self.setup_palette(self.screen)\n\n        self.show_count = 0', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 972, 'coloffset': 16, 'linematch': 'if weight > 1/5:', 'context': '\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:\n                if weight < 5:\n                    weight *= 1.25\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 975, 'coloffset': 16, 'linematch': 'if weight < 5:', 'context': '            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:\n                if weight < 5:\n                    weight *= 1.25\n\n            CONFIG[name+""_weight""] = weight\n            save_config(CONFIG)\n            self.rhs_col.contents[index] = (', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 997, 'coloffset': 16, 'linematch': 'if var.parent is not None:', 'context': '                # collapse current variable\n                iinfo.show_detail = False\n            else:\n                # collapse parent/container variable\n                if var.parent is not None:\n                    p_iinfo = get_inspect_info(var.parent.id_path)\n                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1018, 'coloffset': 12, 'linematch': 'elif key == ""h"":', 'context': '            focus_index = None\n\n            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1020, 'coloffset': 12, 'linematch': 'elif key == ""l"":', 'context': '            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1022, 'coloffset': 12, 'linematch': 'elif key == ""d"":', 'context': '            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1024, 'coloffset': 12, 'linematch': 'elif key == ""t"":', 'context': '            elif key == ""l"":\n                iinfo.show_detail = True\n            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1026, 'coloffset': 12, 'linematch': 'elif key == ""r"":', 'context': '            elif key == ""d"":\n                iinfo.display_type = ""default""\n            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1028, 'coloffset': 12, 'linematch': 'elif key == ""s"":', 'context': '            elif key == ""t"":\n                iinfo.display_type = ""type""\n            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1030, 'coloffset': 12, 'linematch': 'elif key == ""i"":', 'context': '            elif key == ""r"":\n                iinfo.display_type = ""repr""\n            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1032, 'coloffset': 12, 'linematch': 'elif key == ""c"":', 'context': '            elif key == ""s"":\n                iinfo.display_type = ""str""\n            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1034, 'coloffset': 12, 'linematch': 'elif key == ""H"":', 'context': '            elif key == ""i"":\n                iinfo.display_type = ""id""\n            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1036, 'coloffset': 12, 'linematch': 'elif key == ""@"":', 'context': '            elif key == ""c"":\n                iinfo.display_type = CONFIG[""custom_stringifier""]\n            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1038, 'coloffset': 12, 'linematch': 'elif key == ""*"":', 'context': '            elif key == ""H"":\n                iinfo.highlighted = not iinfo.highlighted\n            elif key == ""@"":\n                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1041, 'coloffset': 12, 'linematch': 'elif key == ""w"":', 'context': '                iinfo.repeated_at_top = not iinfo.repeated_at_top\n            elif key == ""*"":\n                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1043, 'coloffset': 12, 'linematch': 'elif key == ""m"":', 'context': '                levels = [""public"", ""private"", ""all"", ""public""]\n                iinfo.access_level = levels[levels.index(iinfo.access_level)+1]\n            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1045, 'coloffset': 12, 'linematch': 'elif key == ""delete"":', 'context': '            elif key == ""w"":\n                iinfo.wrap = not iinfo.wrap\n            elif key == ""m"":\n                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1048, 'coloffset': 20, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                iinfo.show_methods = not iinfo.show_methods\n            elif key == ""delete"":\n                fvi = self.get_frame_var_info(read_only=False)\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1141, 'coloffset': 16, 'linematch': 'if rb_show_default.get_state():', 'context': '                iinfo.highlighted = highlighted_checkbox.get_state()\n                iinfo.repeated_at_top = repeated_at_top_checkbox.get_state()\n                iinfo.show_methods = show_methods_checkbox.get_state()\n\n                if rb_show_default.get_state():\n                    iinfo.display_type = ""default""\n                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1143, 'coloffset': 16, 'linematch': 'elif rb_show_type.get_state():', 'context': '                iinfo.show_methods = show_methods_checkbox.get_state()\n\n                if rb_show_default.get_state():\n                    iinfo.display_type = ""default""\n                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1145, 'coloffset': 16, 'linematch': 'elif rb_show_repr.get_state():', 'context': '                if rb_show_default.get_state():\n                    iinfo.display_type = ""default""\n                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1147, 'coloffset': 16, 'linematch': 'elif rb_show_str.get_state():', 'context': '                elif rb_show_type.get_state():\n                    iinfo.display_type = ""type""\n                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1149, 'coloffset': 16, 'linematch': 'elif rb_show_id.get_state():', 'context': '                elif rb_show_repr.get_state():\n                    iinfo.display_type = ""repr""\n                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1151, 'coloffset': 16, 'linematch': 'elif rb_show_custom.get_state():', 'context': '                elif rb_show_str.get_state():\n                    iinfo.display_type = ""str""\n                elif rb_show_id.get_state():\n                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1154, 'coloffset': 16, 'linematch': 'if rb_access_public.get_state():', 'context': '                    iinfo.display_type = ""id""\n                elif rb_show_custom.get_state():\n                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1156, 'coloffset': 16, 'linematch': 'elif rb_access_private.get_state():', 'context': '                    iinfo.display_type = CONFIG[""custom_stringifier""]\n\n                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1158, 'coloffset': 16, 'linematch': 'elif rb_access_all.get_state():', 'context': '                if rb_access_public.get_state():\n                    iinfo.access_level = ""public""\n                elif rb_access_private.get_state():\n                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1161, 'coloffset': 16, 'linematch': 'if var.watch_expr is not None:', 'context': '                    iinfo.access_level = ""private""\n                elif rb_access_all.get_state():\n                    iinfo.access_level = ""all""\n\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1164, 'coloffset': 12, 'linematch': 'elif result == ""del"":', 'context': '\n                if var.watch_expr is not None:\n                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1166, 'coloffset': 20, 'linematch': 'if watch_expr is var.watch_expr:', 'context': '                    var.watch_expr.expression = watch_edit.get_edit_text()\n\n            elif result == ""del"":\n                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view()\n\n        def insert_watch(w, size, key):', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1362, 'coloffset': 16, 'linematch': 'if cond:', 'context': '            if result is True:\n                bp.enabled = enabled_checkbox.get_state()\n                bp.ignore = int(ign_count_edit.value())\n                cond = cond_edit.get_edit_text()\n                if cond:\n                    bp.cond = cond\n                else:\n                    bp.cond = None\n            elif result == ""loc"":\n                self.show_line(bp.line,', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1366, 'coloffset': 12, 'linematch': 'elif result == ""loc"":', 'context': '                if cond:\n                    bp.cond = cond\n                else:\n                    bp.cond = None\n            elif result == ""loc"":\n                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n            elif result == ""del"":\n                delete_breakpoint(bp)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1370, 'coloffset': 12, 'linematch': 'elif result == ""del"":', 'context': '            elif result == ""loc"":\n                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n            elif result == ""del"":\n                delete_breakpoint(bp)\n\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1442, 'coloffset': 16, 'linematch': 'if bp_source_identifier is None:', 'context': '\n                bp_source_identifier = \\\n                        self.source_code_provider.get_source_identifier()\n\n                if bp_source_identifier is None:\n                    self.message(\n                        ""Cannot currently set a breakpoint here--""\n                        ""source code does not correspond to a file location. ""\n                        ""(perhaps this is generated code)"")\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1452, 'coloffset': 16, 'linematch': 'if invalid_reason is not None:', 'context': '                from pudb.lowlevel import get_breakpoint_invalid_reason\n                invalid_reason = get_breakpoint_invalid_reason(\n                        bp_source_identifier, lineno)\n\n                if invalid_reason is not None:\n                    self.message(\n                        ""Cannot run to the line you indicated, ""\n                        ""for the following reason:\\n\\n""\n                        + invalid_reason)\n                else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1460, 'coloffset': 20, 'linematch': 'if err:', 'context': '                        + invalid_reason)\n                else:\n                    err = self.debugger.set_break(\n                            bp_source_identifier, pos+1, temporary=True)\n                    if err:\n                        self.message(""Error dealing with breakpoint:\\n"" + err)\n\n                    self.debugger.set_continue()\n                    end()\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1476, 'coloffset': 16, 'linematch': 'if bp_source_identifier is None:', 'context': '\n                bp_source_identifier = \\\n                        self.source_code_provider.get_source_identifier()\n\n                if bp_source_identifier is None:\n                    self.message(\n                        ""Cannot jump here--""\n                        ""source code does not correspond to a file location. ""\n                        ""(perhaps this is generated code)"")\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1486, 'coloffset': 16, 'linematch': 'if invalid_reason is not None:', 'context': '                from pudb.lowlevel import get_breakpoint_invalid_reason\n                invalid_reason = get_breakpoint_invalid_reason(\n                        bp_source_identifier, lineno)\n\n                if invalid_reason is not None:\n                    self.message(\n                        ""Cannot jump to the line you indicated, ""\n                        ""for the following reason:\\n\\n""\n                        + invalid_reason)\n                else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1527, 'coloffset': 16, 'linematch': 'if value:', 'context': '                        (""Cancel"", False),\n                        ], title=""Go to Line Number""):\n\n                value = lineno_edit.value()\n                if value:\n                    lineno = min(max(0, int(value)-1), len(self.source)-1)\n                    self.source_list.focus_position = lineno\n\n        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1563, 'coloffset': 16, 'linematch': 'if existing_breaks:', 'context': '                lineno = pos+1\n\n                existing_breaks = self.debugger.get_breaks(\n                        bp_source_identifier, lineno)\n                if existing_breaks:\n                    err = None\n                    for bp in existing_breaks:\n                        if not bp.enabled:\n                            bp.enable()\n                            sline.set_breakpoint(True)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1566, 'coloffset': 24, 'linematch': 'if not bp.enabled:', 'context': '                        bp_source_identifier, lineno)\n                if existing_breaks:\n                    err = None\n                    for bp in existing_breaks:\n                        if not bp.enabled:\n                            bp.enable()\n                            sline.set_breakpoint(True)\n                            # Unsure about this. Are multiple breakpoints even\n                            # possible?\n                            break', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1577, 'coloffset': 20, 'linematch': 'if file_lineno in self.debugger.set_traces:', 'context': '                        err = self.debugger.clear_break(bp_source_identifier, lineno)\n                        sline.set_breakpoint(False)\n                else:\n                    file_lineno = (bp_source_identifier, lineno)\n                    if file_lineno in self.debugger.set_traces:\n                        self.debugger.set_traces[file_lineno] = \\\n                                not self.debugger.set_traces[file_lineno]\n                        sline.set_breakpoint(self.debugger.set_traces[file_lineno])\n                        return\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1587, 'coloffset': 20, 'linematch': 'if invalid_reason is not None:', 'context': '                    from pudb.lowlevel import get_breakpoint_invalid_reason\n                    invalid_reason = get_breakpoint_invalid_reason(\n                            bp_source_identifier, pos+1)\n\n                    if invalid_reason is not None:\n                        do_set = not self.dialog(\n                                urwid.ListBox(\n                                    urwid.SimpleListWalker([\n                                        urwid.Text(\n                                            ""The breakpoint you just set may be ""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1604, 'coloffset': 20, 'linematch': 'if do_set:', 'context': '                                focus_buttons=True)\n                    else:\n                        do_set = True\n\n                    if do_set:\n                        err = self.debugger.set_break(bp_source_identifier, pos+1)\n                        sline.set_breakpoint(True)\n                    else:\n                        err = None\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1610, 'coloffset': 16, 'linematch': 'if err:', 'context': '                        sline.set_breakpoint(True)\n                    else:\n                        err = None\n\n                if err:\n                    self.message(""Error dealing with breakpoint:\\n"" + err)\n\n                self.update_breakpoints()\n            else:\n                self.message(', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1705, 'coloffset': 20, 'linematch': 'if widget is new_mod_entry:', 'context': '\n                if result is True:\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is new_mod_entry:\n                        new_mod_name = filt_edit.get_edit_text()\n                        try:\n                            __import__(str(new_mod_name))\n                        except Exception:\n                            from traceback import format_exception', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1723, 'coloffset': 16, 'linematch': 'elif result is False:', 'context': '                            break\n                    else:\n                        show_mod(sys.modules[widget.base_widget.get_text()[0]])\n                        break\n                elif result is False:\n                    break\n                elif result == ""reload"":\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is not new_mod_entry:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1725, 'coloffset': 16, 'linematch': 'elif result == ""reload"":', 'context': '                        show_mod(sys.modules[widget.base_widget.get_text()[0]])\n                        break\n                elif result is False:\n                    break\n                elif result == ""reload"":\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is not new_mod_entry:\n                        mod_name = widget.base_widget.get_text()[0]\n                        mod = sys.modules[mod_name]', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1728, 'coloffset': 20, 'linematch': 'if widget is not new_mod_entry:', 'context': '                    break\n                elif result == ""reload"":\n                    pos = lb.focus_position\n                    widget = lb.focus\n                    if widget is not new_mod_entry:\n                        mod_name = widget.base_widget.get_text()[0]\n                        mod = sys.modules[mod_name]\n                        import importlib\n                        importlib.reload(mod)\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1736, 'coloffset': 24, 'linematch': 'if self.source_code_provider is not None:', 'context': '                        importlib.reload(mod)\n\n                        self.message(""\'%s\' was successfully reloaded."" % mod_name)\n\n                        if self.source_code_provider is not None:\n                            self.source_code_provider.clear_cache()\n\n                        self.set_source_code_provider(self.source_code_provider,\n                                force_update=True)\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1931, 'coloffset': 20, 'linematch': 'if text:', 'context': '            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1934, 'coloffset': 20, 'linematch': 'if direction > 0:', 'context': '                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1937, 'coloffset': 20, 'linematch': 'if direction < 0 and not text and self.cmdline_saved_edit_text:', 'context': '                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one\n                        return -1, """"\n                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text\n\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1961, 'coloffset': 16, 'linematch': 'if CONFIG[""hide_cmdline_win""]:', 'context': '\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(\n                        self.lhs_col,\n                        self.search_controller.search_AttrMap\n                        if self.search_controller.search_box else', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 1969, 'coloffset': 16, 'linematch': 'if CONFIG[""hide_cmdline_win""]:', 'context': '                        self.search_controller.search_AttrMap\n                        if self.search_controller.search_box else\n                        self.source_attr)\n            else:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(True)\n                focus_widget_in_container(self.cmdline_pile, self.cmdline_edit_bar)\n                focus_widget_in_container(self.lhs_col, self.cmdline_sigwrap)\n\n        self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2123, 'coloffset': 16, 'linematch': 'if result == ""location"":', 'context': '                        title=""Exception Viewer"",\n                        focus_buttons=True,\n                        bind_enter_esc=False)\n\n                if result == ""location"":\n                    self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n            else:\n                self.message(""No exception available."")\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2136, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():', 'context': '\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2138, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:', 'context': '                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell\n                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2140, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:', 'context': '                elif CONFIG[""shell""] == ""ipython_kernel"" and shell.have_ipython():\n                    runner = shell.run_ipython_kernel\n                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2142, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:', 'context': '                elif CONFIG[""shell""] == ""bpython"" and shell.HAVE_BPYTHON:\n                    runner = shell.run_bpython_shell\n                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2144, 'coloffset': 16, 'linematch': 'elif CONFIG[""shell""] == ""classic"":', 'context': '                elif CONFIG[""shell""] == ""ptpython"" and shell.HAVE_PTPYTHON:\n                    runner = shell.run_ptpython_shell\n                elif CONFIG[""shell""] == ""ptipython"" and shell.HAVE_PTIPYTHON:\n                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2154, 'coloffset': 24, 'linematch': 'if not shell.custom_shell_dict:  # Only execfile once', 'context': '                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n\n                    try:\n                        if not shell.custom_shell_dict:  # Only execfile once\n                            from os.path import expanduser, expandvars\n                            cshell_fname = expanduser(expandvars(CONFIG[""shell""]))\n                            with open(cshell_fname) as inf:\n                                exec(compile(inf.read(), cshell_fname, ""exec""),\n                                        shell.custom_shell_dict,', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 2169, 'coloffset': 24, 'linematch': 'if ""pudb_shell"" not in shell.custom_shell_dict:', 'context': '                        )\n                    except Exception:\n                        runner = fallback(""Error when importing custom shell."")\n                    else:\n                        if ""pudb_shell"" not in shell.custom_shell_dict:\n                            runner = fallback(\n                                ""%s does not contain a function named pudb_shell at ""\n                                ""the module level."" % CONFIG[""shell""]\n                            )\n                        else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 802, 'coloffset': 8, 'linematch': 'def move_up(w, size, key):', 'context': '        # {{{ build ui\n\n        # {{{ key bindings\n\n        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 805, 'coloffset': 8, 'linematch': 'def move_down(w, size, key):', 'context': '\n        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 808, 'coloffset': 8, 'linematch': 'def move_left(w, size, key):', 'context': '\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 811, 'coloffset': 8, 'linematch': 'def move_right(w, size, key):', 'context': '\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 814, 'coloffset': 8, 'linematch': 'def page_up(w, size, key):', 'context': '\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 817, 'coloffset': 8, 'linematch': 'def page_down(w, size, key):', 'context': '\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 820, 'coloffset': 8, 'linematch': 'def move_home(w, size, key):', 'context': '\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 823, 'coloffset': 8, 'linematch': 'def move_end(w, size, key):', 'context': '\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 826, 'coloffset': 8, 'linematch': 'def add_vi_nav_keys(widget):', 'context': '\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 838, 'coloffset': 8, 'linematch': 'def add_help_keys(widget, helpfunc):', 'context': '            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)\n            widget.listen(""?"", helpfunc)\n\n        # }}}\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 862, 'coloffset': 8, 'linematch': 'def clear_cmdline_history(btn):', 'context': '        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")\n        self.cmdline_edit_sigwrap = SignalWrap(\n                cmdline_edit_attr, is_preemptive=True)\n\n        def clear_cmdline_history(btn):\n            del self.cmdline_contents[:]\n            # clear the command input text too,\n            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 869, 'coloffset': 8, 'linematch': 'def initialize_cmdline_history(path):', 'context': '            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)\n\n        def initialize_cmdline_history(path):\n            dq = partial(deque, maxlen=5000)\n            try:\n                # Load global history if present\n                with open(path, ""r"") as histfile:\n                    return dq(histfile.read().splitlines())', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 942, 'coloffset': 8, 'linematch': 'def helpside(w, size, key):', 'context': '                ]), None, ""focused sidebar""),),\n            ])\n        self.rhs_col_sigwrap = SignalWrap(self.rhs_col)\n\n        def helpside(w, size, key):\n            help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)\n\n        add_vi_nav_keys(self.rhs_col_sigwrap)\n        add_help_keys(self.rhs_col_sigwrap, helpside)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 966, 'coloffset': 8, 'linematch': 'def change_rhs_box(name, index, direction, w, size, key):', 'context': '            header))\n\n        # }}}\n\n        def change_rhs_box(name, index, direction, w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 987, 'coloffset': 8, 'linematch': 'def get_inspect_info(id_path, read_only=False):', 'context': '            self.rhs_col._invalidate()\n\n        # {{{ variables listeners\n\n        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 991, 'coloffset': 8, 'linematch': 'def collapse_current(var, pos, iinfo):', 'context': '        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:\n                # collapse current variable\n                iinfo.show_detail = False\n            else:\n                # collapse parent/container variable', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1003, 'coloffset': 8, 'linematch': 'def change_var_state(w, size, key):', 'context': '                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1053, 'coloffset': 8, 'linematch': 'def edit_inspector_detail(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1171, 'coloffset': 8, 'linematch': 'def insert_watch(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view()\n\n        def insert_watch(w, size, key):\n            watch_edit = urwid.Edit([\n                (""label"", ""Watch expression: "")\n                ])\n\n            if self.dialog(', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1219, 'coloffset': 8, 'linematch': 'def examine_frame(w, size, key):', 'context': '        # }}}\n\n        # {{{ stack listeners\n\n        def examine_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1225, 'coloffset': 8, 'linematch': 'def open_file_editor(file_name, line_number):', 'context': '            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n\n        def open_file_editor(file_name, line_number):\n            file_changed = False\n\n            try:\n                original_modification_time = os.path.getmtime(file_name)\n                with StoppedScreen(self.screen):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1249, 'coloffset': 8, 'linematch': 'def open_editor_on_stack_frame(w, size, key):', 'context': '                             f""Changed file: {filename_edited}\\n\\n""\n                             ""Please quit and restart to see changes"",\n                             title=""File is changed"")\n\n        def open_editor_on_stack_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            index = self.translate_ui_stack_index(pos)\n\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1260, 'coloffset': 8, 'linematch': 'def move_stack_top(w, size, key):', 'context': '            open_file_editor(file_name, line_number)\n\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)\n\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1263, 'coloffset': 8, 'linematch': 'def move_stack_up(w, size, key):', 'context': '\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1266, 'coloffset': 8, 'linematch': 'def move_stack_down(w, size, key):', 'context': '\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1280, 'coloffset': 8, 'linematch': 'def set_breakpoint_source(bp):', 'context': '        # }}}\n\n        # {{{ breakpoint listeners\n\n        def set_breakpoint_source(bp):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n            if (bp.file\n                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1288, 'coloffset': 8, 'linematch': 'def save_breakpoints(w, size, key):', 'context': '                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):\n                self.source[bp.line-1].set_breakpoint(bp.enabled)\n\n        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1291, 'coloffset': 8, 'linematch': 'def handle_delete_breakpoint(w, size, key):', 'context': '\n        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:\n                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1298, 'coloffset': 8, 'linematch': 'def delete_breakpoint(bp):', 'context': '                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):\n            err = self.debugger.clear_break(bp.file, bp.line)\n            if err:\n                self.message(""Error clearing breakpoint:\\n"" + err)\n            else:\n                bp.enabled = False', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1307, 'coloffset': 8, 'linematch': 'def enable_disable_breakpoint(w, size, key):', 'context': '                bp.enabled = False\n                self.update_breakpoints()\n                set_breakpoint_source(bp)\n\n        def enable_disable_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1317, 'coloffset': 8, 'linematch': 'def examine_breakpoint(w, size, key):', 'context': '            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1376, 'coloffset': 8, 'linematch': 'def show_breakpoint(w, size, key):', 'context': '\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is not None:\n                bp = self._get_bp_list()[pos]', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1400, 'coloffset': 8, 'linematch': 'def end():', 'context': '        # }}}\n\n        # {{{ source listeners\n\n        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1404, 'coloffset': 8, 'linematch': 'def next_line(w, size, key):', 'context': '        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1411, 'coloffset': 8, 'linematch': 'def step(w, size, key):', 'context': '            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()\n\n        def step(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_step()\n                end()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1418, 'coloffset': 8, 'linematch': 'def finish(w, size, key):', 'context': '            else:\n                self.debugger.set_step()\n                end()\n\n        def finish(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1425, 'coloffset': 8, 'linematch': 'def cont(w, size, key):', 'context': '            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()\n\n        def cont(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_continue()\n                end()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1432, 'coloffset': 8, 'linematch': 'def run_to_cursor(w, size, key):', 'context': '            else:\n                self.debugger.set_continue()\n                end()\n\n        def run_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1466, 'coloffset': 8, 'linematch': 'def jump_to_cursor(w, size, key):', 'context': '\n                    self.debugger.set_continue()\n                    end()\n\n        def jump_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1507, 'coloffset': 8, 'linematch': 'def go_to_line(w, size, key):', 'context': '                    # Update UI. end() will run past the line\n                    self.set_current_line(lineno, self.source_code_provider)\n                    self.update_stack()\n\n        def go_to_line(w, size, key):\n            line = self.source.focus\n\n            lineno_edit = urwid.IntEdit([\n                (""label"", ""Go to Line   :"")\n                ], None)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1531, 'coloffset': 8, 'linematch': 'def scroll_left(w, size, key):', 'context': '                if value:\n                    lineno = min(max(0, int(value)-1), len(self.source)-1)\n                    self.source_list.focus_position = lineno\n\n        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(\n                    0,\n                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1538, 'coloffset': 8, 'linematch': 'def scroll_right(w, size, key):', 'context': '                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()\n\n        def scroll_right(w, size, key):\n            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1543, 'coloffset': 8, 'linematch': 'def search(w, size, key):', 'context': '            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1546, 'coloffset': 8, 'linematch': 'def search_next(w, size, key):', 'context': '\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1549, 'coloffset': 8, 'linematch': 'def search_previous(w, size, key):', 'context': '\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1552, 'coloffset': 8, 'linematch': 'def toggle_breakpoint(w, size, key):', 'context': '\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1746, 'coloffset': 8, 'linematch': 'def helpmain(w, size, key):', 'context': '                        pos = self.stack_list._w.focus_position\n                        self.debugger.set_frame_index(\n                                self.translate_ui_stack_index(pos))\n\n        def helpmain(w, size, key):\n            help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)\n\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1781, 'coloffset': 8, 'linematch': 'def cmdline_get_namespace():', 'context': '        # }}}\n\n        # {{{ command line listeners\n\n        def cmdline_get_namespace():\n            curframe = self.debugger.curframe\n\n            from pudb.shell import SetPropagatingDict\n            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1863, 'coloffset': 8, 'linematch': 'def cmdline_append_newline(w, size, key):', 'context': '            self.cmdline_edit.edit_pos = (\n                    len(chopped_text)\n                    + len(completed_chopped_text))\n\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1866, 'coloffset': 8, 'linematch': 'def cmdline_exec(w, size, key):', 'context': '\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1915, 'coloffset': 8, 'linematch': 'def cmdline_history_browse(direction):', 'context': '                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout\n                sys.stderr = prev_sys_stderr\n\n        def cmdline_history_browse(direction):\n            # Browsing the command line history can be illustrated by moving up/down\n            # in the following table (no wrap-around).\n            # The first column shows what is written in the command input text field,\n            # the second one the corresponding value of self.cmdline_history_position\n            # The actual index into the history list is given by the last column.', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1952, 'coloffset': 8, 'linematch': 'def cmdline_history_prev(w, size, key):', 'context': '            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)\n            self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)\n\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1955, 'coloffset': 8, 'linematch': 'def cmdline_history_next(w, size, key):', 'context': '\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1958, 'coloffset': 8, 'linematch': 'def toggle_cmdline_focus(w, size, key):', 'context': '\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1986, 'coloffset': 8, 'linematch': 'def set_cmdline_default_size(weight):', 'context': '\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n\n        # {{{ command line sizing\n        def set_cmdline_default_size(weight):\n            from pudb.settings import save_config\n\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1994, 'coloffset': 8, 'linematch': 'def max_cmdline(w, size, key):', 'context': '            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1997, 'coloffset': 8, 'linematch': 'def min_cmdline(w, size, key):', 'context': '\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2000, 'coloffset': 8, 'linematch': 'def grow_cmdline(w, size, key):', 'context': '\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2007, 'coloffset': 8, 'linematch': 'def shrink_cmdline(w, size, key):', 'context': '            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)\n\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2014, 'coloffset': 8, 'linematch': 'def cmdline_results_scroll(w, size, key):', 'context': '            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)\n\n        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)\n            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2031, 'coloffset': 8, 'linematch': 'def max_sidebar(w, size, key):', 'context': '        # }}}\n\n        # {{{ sidebar sizing\n\n        def max_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2043, 'coloffset': 8, 'linematch': 'def min_sidebar(w, size, key):', 'context': '                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def min_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2055, 'coloffset': 8, 'linematch': 'def grow_sidebar(w, size, key):', 'context': '                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def grow_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight < 5:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2067, 'coloffset': 8, 'linematch': 'def shrink_sidebar(w, size, key):', 'context': '                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()\n\n        def shrink_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight > 1/5:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2088, 'coloffset': 8, 'linematch': 'def show_output(w, size, key):', 'context': '        # }}}\n\n        # {{{ top-level listeners\n\n        def show_output(w, size, key):\n            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2092, 'coloffset': 8, 'linematch': 'def reload_breakpoints_and_redisplay():', 'context': '        def show_output(w, size, key):\n            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2101, 'coloffset': 8, 'linematch': 'def reload_breakpoints():', 'context': '            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)\n\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()\n            from pudb.settings import load_breakpoints\n            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2108, 'coloffset': 8, 'linematch': 'def show_traceback(w, size, key):', 'context': '            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):\n            if self.current_exc_tuple is not None:\n                from traceback import format_exception\n\n                result = self.dialog(\n                        urwid.ListBox(urwid.SimpleListWalker([urwid.Text(', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2129, 'coloffset': 8, 'linematch': 'def run_external_cmdline(w, size, key):', 'context': '\n            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2181, 'coloffset': 8, 'linematch': 'def run_cmdline(w, size, key):', 'context': '                runner(curframe.f_globals, curframe.f_locals)\n\n            self.update_var_view()\n\n        def run_cmdline(w, size, key):\n            if CONFIG[""shell""] == ""internal"":\n                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2187, 'coloffset': 8, 'linematch': 'def focus_code(w, size, key):', 'context': '                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n\n        def focus_code(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2199, 'coloffset': 8, 'linematch': 'def quit(w, size, key):', 'context': '            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2205, 'coloffset': 8, 'linematch': 'def do_edit_config(w, size, key):', 'context': '                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2208, 'coloffset': 8, 'linematch': 'def redraw_screen(w, size, key):', 'context': '\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2211, 'coloffset': 8, 'linematch': 'def help(pages):', 'context': '\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2214, 'coloffset': 8, 'linematch': 'def edit_current_frame(w, size, key):', 'context': '\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if source_identifier is None:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1624, 'coloffset': 12, 'linematch': 'def mod_exists(mod):', 'context': '        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1645, 'coloffset': 12, 'linematch': 'def build_filtered_mod_list(filt_string=""""):', 'context': '            new_mod_text = SelectableText(""-- update me --"")\n            new_mod_entry = urwid.AttrMap(new_mod_text,\n                    None, ""focused selectable"")\n\n            def build_filtered_mod_list(filt_string=""""):\n                modules = sorted(name\n                        # mod_exists may change the size of sys.modules,\n                        # causing this to crash. Copy to a list.\n                        for name, mod in list(sys.modules.items())\n                        if mod_exists(mod))', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1659, 'coloffset': 12, 'linematch': 'def show_mod(mod):', 'context': '                new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)\n                result.append(new_mod_entry)\n                return result\n\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)\n                if ext == "".pyc"":\n                    ext = "".py""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1672, 'coloffset': 16, 'linematch': 'def keypress(self, size, key):', 'context': '                        FileSourceCodeProvider(self.debugger, filename))\n                self.source_list.set_focus(0)\n\n            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n\n                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(\n                                self.get_edit_text())', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1829, 'coloffset': 12, 'linematch': 'def common_prefix(a, b):', 'context': '\n            full_completions = [i.name_with_symbols for i in completions]\n            chopped_completions = [i.complete for i in completions]\n\n            def common_prefix(a, b):\n                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:\n                        return a[:i]\n\n                return a[:max(len(a), len(b))]', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 1929, 'coloffset': 12, 'linematch': 'def pos_text(pos, text):', 'context': '            # medium_command              |    1     |     1\n            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2147, 'coloffset': 20, 'linematch': 'def fallback(error_message):', 'context': '                    runner = shell.run_ptipython_shell\n                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""\n                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2192, 'coloffset': 12, 'linematch': 'def __init__(self, idx):', 'context': '            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 2195, 'coloffset': 12, 'linematch': 'def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument', 'context': '        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 287, 'coloffset': 8, 'linematch': 'def __init__(self, debugger_ui, lineno_format, breakpoints, **options):', 'context': '                },\n            }\n\n    class UrwidFormatter(Formatter):\n        def __init__(self, debugger_ui, lineno_format, breakpoints, **options):\n            Formatter.__init__(self, **options)\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 762, 'coloffset': 4, 'linematch': 'def __init__(self):', 'context': '    return result\n\n\nclass FrameVarInfoKeeper:\n    def __init__(self):\n        self.frame_var_info = {}\n\n    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 9, 'coloffset': 8, 'linematch': 'self.a = a', 'context': '\n\nclass MyClass(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self._b = [b]\n\n\nmc = MyClass(15, MyClass(12, None))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 10, 'coloffset': 8, 'linematch': 'self.b = b', 'context': '\nclass MyClass(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self._b = [b]\n\n\nmc = MyClass(15, MyClass(12, None))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 11, 'coloffset': 8, 'linematch': 'self._b = [b]', 'context': 'class MyClass(object):\n    def __init__(self, a, b):\n        self.a = a\n        self.b = b\n        self._b = [b]\n\n\nmc = MyClass(15, MyClass(12, None))\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 71, 'coloffset': 8, 'linematch': 'self.x = 42', 'context': '\n\nclass Reasonable:\n    def __init__(self):\n        self.x = 42\n\n    def bar(self):\n        return True\n\n    @property', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 132, 'coloffset': 8, 'linematch': '""""""', 'context': '        out=sys.stdout,\n        term_size=None,\n        reverse=PUDB_RDB_REVERSE,\n    ):\n        """"""\n        :arg term_size: A two-tuple ``(columns, rows)``, or *None*. If *None*,\n            try to determine the terminal size automatically.\n\n            Currently, this uses a heuristic: It uses the terminal size of the\n            debuggee as that for the debugger. The idea is that you might be', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 141, 'coloffset': 8, 'linematch': 'self.out = out', 'context': '            debuggee as that for the debugger. The idea is that you might be\n            running both in two tabs of the same terminal window, hence using\n            terminals of the same size.\n        """"""\n        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 143, 'coloffset': 8, 'linematch': 'if term_size is None:', 'context': '            terminals of the same size.\n        """"""\n        self.out = out\n\n        if term_size is None:\n            term_size = os.environ.get(""PUDB_TERM_SIZE"")\n            if term_size is not None:\n                term_size = tuple(map(int, term_size.split(""x"")))\n                if len(term_size) != 2:\n                    raise ValueError(""PUDB_TERM_SIZE should have two dimensions"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 156, 'coloffset': 8, 'linematch': 'self._prev_handles = sys.stdin, sys.stdout', 'context': '                    term_size = (s.columns, s.lines)\n                except Exception:\n                    term_size = (80, 24)\n\n        self._prev_handles = sys.stdin, sys.stdout\n        self._client, (address, port) = self.get_client(\n            host=host, port=port, search_limit=port_search_limit, reverse=reverse\n        )\n        self.remote_addr = "":"".join(str(v) for v in address)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 157, 'coloffset': 8, 'linematch': 'self._client, (address, port) = self.get_client(', 'context': '                except Exception:\n                    term_size = (80, 24)\n\n        self._prev_handles = sys.stdin, sys.stdout\n        self._client, (address, port) = self.get_client(\n            host=host, port=port, search_limit=port_search_limit, reverse=reverse\n        )\n        self.remote_addr = "":"".join(str(v) for v in address)\n\n        self.say(SESSION_STARTED.format(self=self))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 160, 'coloffset': 8, 'linematch': 'self.remote_addr = "":"".join(str(v) for v in address)', 'context': '        self._prev_handles = sys.stdin, sys.stdout\n        self._client, (address, port) = self.get_client(\n            host=host, port=port, search_limit=port_search_limit, reverse=reverse\n        )\n        self.remote_addr = "":"".join(str(v) for v in address)\n\n        self.say(SESSION_STARTED.format(self=self))\n\n        # makefile ignores encoding if there\'s no buffering.\n        raw_sock_file = self._client.makefile(""rwb"", 0)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 162, 'coloffset': 8, 'linematch': 'self.say(SESSION_STARTED.format(self=self))', 'context': '            host=host, port=port, search_limit=port_search_limit, reverse=reverse\n        )\n        self.remote_addr = "":"".join(str(v) for v in address)\n\n        self.say(SESSION_STARTED.format(self=self))\n\n        # makefile ignores encoding if there\'s no buffering.\n        raw_sock_file = self._client.makefile(""rwb"", 0)\n        import codecs\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 165, 'coloffset': 8, 'linematch': 'raw_sock_file = self._client.makefile(""rwb"", 0)', 'context': '\n        self.say(SESSION_STARTED.format(self=self))\n\n        # makefile ignores encoding if there\'s no buffering.\n        raw_sock_file = self._client.makefile(""rwb"", 0)\n        import codecs\n\n        sock_file = codecs.StreamReaderWriter(\n            raw_sock_file, codecs.getreader(""utf-8""), codecs.getwriter(""utf-8""))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 166, 'coloffset': 8, 'linematch': 'import codecs', 'context': '        self.say(SESSION_STARTED.format(self=self))\n\n        # makefile ignores encoding if there\'s no buffering.\n        raw_sock_file = self._client.makefile(""rwb"", 0)\n        import codecs\n\n        sock_file = codecs.StreamReaderWriter(\n            raw_sock_file, codecs.getreader(""utf-8""), codecs.getwriter(""utf-8""))\n\n        self._handle = sys.stdin = sys.stdout = sock_file', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 168, 'coloffset': 8, 'linematch': 'sock_file = codecs.StreamReaderWriter(', 'context': '        # makefile ignores encoding if there\'s no buffering.\n        raw_sock_file = self._client.makefile(""rwb"", 0)\n        import codecs\n\n        sock_file = codecs.StreamReaderWriter(\n            raw_sock_file, codecs.getreader(""utf-8""), codecs.getwriter(""utf-8""))\n\n        self._handle = sys.stdin = sys.stdout = sock_file\n\n        # nc negotiation doesn\'t support telnet options', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 171, 'coloffset': 8, 'linematch': 'self._handle = sys.stdin = sys.stdout = sock_file', 'context': '\n        sock_file = codecs.StreamReaderWriter(\n            raw_sock_file, codecs.getreader(""utf-8""), codecs.getwriter(""utf-8""))\n\n        self._handle = sys.stdin = sys.stdout = sock_file\n\n        # nc negotiation doesn\'t support telnet options\n        if not reverse:\n            tn = TelnetCharacters\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 174, 'coloffset': 8, 'linematch': 'if not reverse:', 'context': ""\n        self._handle = sys.stdin = sys.stdout = sock_file\n\n        # nc negotiation doesn't support telnet options\n        if not reverse:\n            tn = TelnetCharacters\n\n            raw_sock_file.write(tn.IAC + tn.WILL + tn.SGA)\n            resp = raw_sock_file.read(3)\n            assert resp == tn.IAC + tn.DO + tn.SGA"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 185, 'coloffset': 8, 'linematch': 'Debugger.__init__(', 'context': '            raw_sock_file.write(tn.IAC + tn.WILL + tn.ECHO)\n            resp = raw_sock_file.read(3)\n            assert resp == tn.IAC + tn.DO + tn.ECHO\n\n        Debugger.__init__(\n            self, stdin=self._handle, stdout=self._handle, term_size=term_size\n        )\n\n    def get_client(self, host, port, search_limit=100, reverse=False):\n        if reverse:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 46, 'coloffset': 8, 'linematch': 'dict.__init__(self)', 'context': '    debugger is inside a function frame.\n\n    """"""\n    def __init__(self, source_dicts, target_dict):\n        dict.__init__(self)\n        for s in source_dicts[::-1]:\n            self.update(s)\n\n        self.target_dict = target_dict\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 47, 'coloffset': 8, 'linematch': 'for s in source_dicts[::-1]:', 'context': '\n    """"""\n    def __init__(self, source_dicts, target_dict):\n        dict.__init__(self)\n        for s in source_dicts[::-1]:\n            self.update(s)\n\n        self.target_dict = target_dict\n\n    def __setitem__(self, key, value):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 50, 'coloffset': 8, 'linematch': 'self.target_dict = target_dict', 'context': '        dict.__init__(self)\n        for s in source_dicts[::-1]:\n            self.update(s)\n\n        self.target_dict = target_dict\n\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        self.target_dict[key] = value\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 787, 'coloffset': 8, 'linematch': 'FrameVarInfoKeeper.__init__(self)', 'context': 'class DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 789, 'coloffset': 8, 'linematch': 'self.debugger = dbg', 'context': '\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap\n\n        from pudb.ui_tools import SearchController\n        self.search_controller = SearchController(self)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 791, 'coloffset': 8, 'linematch': 'from urwid import AttrMap', 'context': '        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap\n\n        from pudb.ui_tools import SearchController\n        self.search_controller = SearchController(self)\n\n        self.last_module_filter = """"', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 793, 'coloffset': 8, 'linematch': 'from pudb.ui_tools import SearchController', 'context': '        self.debugger = dbg\n\n        from urwid import AttrMap\n\n        from pudb.ui_tools import SearchController\n        self.search_controller = SearchController(self)\n\n        self.last_module_filter = """"\n\n        # {{{ build ui', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 794, 'coloffset': 8, 'linematch': 'self.search_controller = SearchController(self)', 'context': '\n        from urwid import AttrMap\n\n        from pudb.ui_tools import SearchController\n        self.search_controller = SearchController(self)\n\n        self.last_module_filter = """"\n\n        # {{{ build ui\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 796, 'coloffset': 8, 'linematch': 'self.last_module_filter = """"', 'context': '\n        from pudb.ui_tools import SearchController\n        self.search_controller = SearchController(self)\n\n        self.last_module_filter = """"\n\n        # {{{ build ui\n\n        # {{{ key bindings\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 802, 'coloffset': 8, 'linematch': 'def move_up(w, size, key):', 'context': '        # {{{ build ui\n\n        # {{{ key bindings\n\n        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 803, 'coloffset': 12, 'linematch': 'w.keypress(size, ""up"")', 'context': '\n        # {{{ key bindings\n\n        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 805, 'coloffset': 8, 'linematch': 'def move_down(w, size, key):', 'context': '\n        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 806, 'coloffset': 12, 'linematch': 'w.keypress(size, ""down"")', 'context': '        def move_up(w, size, key):\n            w.keypress(size, ""up"")\n\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 808, 'coloffset': 8, 'linematch': 'def move_left(w, size, key):', 'context': '\n        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 809, 'coloffset': 12, 'linematch': 'w.keypress(size, ""left"")', 'context': '        def move_down(w, size, key):\n            w.keypress(size, ""down"")\n\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 811, 'coloffset': 8, 'linematch': 'def move_right(w, size, key):', 'context': '\n        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 812, 'coloffset': 12, 'linematch': 'w.keypress(size, ""right"")', 'context': '        def move_left(w, size, key):\n            w.keypress(size, ""left"")\n\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 814, 'coloffset': 8, 'linematch': 'def page_up(w, size, key):', 'context': '\n        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 815, 'coloffset': 12, 'linematch': 'w.keypress(size, ""page up"")', 'context': '        def move_right(w, size, key):\n            w.keypress(size, ""right"")\n\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 817, 'coloffset': 8, 'linematch': 'def page_down(w, size, key):', 'context': '\n        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 818, 'coloffset': 12, 'linematch': 'w.keypress(size, ""page down"")', 'context': '        def page_up(w, size, key):\n            w.keypress(size, ""page up"")\n\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 820, 'coloffset': 8, 'linematch': 'def move_home(w, size, key):', 'context': '\n        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 821, 'coloffset': 12, 'linematch': 'w.keypress(size, ""home"")', 'context': '        def page_down(w, size, key):\n            w.keypress(size, ""page down"")\n\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 823, 'coloffset': 8, 'linematch': 'def move_end(w, size, key):', 'context': '\n        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 824, 'coloffset': 12, 'linematch': 'w.keypress(size, ""end"")', 'context': '        def move_home(w, size, key):\n            w.keypress(size, ""home"")\n\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 826, 'coloffset': 8, 'linematch': 'def add_vi_nav_keys(widget):', 'context': '\n        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 827, 'coloffset': 12, 'linematch': 'widget.listen(""k"", move_up)', 'context': '        def move_end(w, size, key):\n            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 828, 'coloffset': 12, 'linematch': 'widget.listen(""j"", move_down)', 'context': '            w.keypress(size, ""end"")\n\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 829, 'coloffset': 12, 'linematch': 'widget.listen(""h"", move_left)', 'context': '\n        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 830, 'coloffset': 12, 'linematch': 'widget.listen(""l"", move_right)', 'context': '        def add_vi_nav_keys(widget):\n            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 831, 'coloffset': 12, 'linematch': 'widget.listen(""ctrl b"", page_up)', 'context': '            widget.listen(""k"", move_up)\n            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 832, 'coloffset': 12, 'linematch': 'widget.listen(""ctrl f"", page_down)', 'context': '            widget.listen(""j"", move_down)\n            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 833, 'coloffset': 12, 'linematch': 'widget.listen(""ctrl u"", page_up)', 'context': '            widget.listen(""h"", move_left)\n            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 834, 'coloffset': 12, 'linematch': 'widget.listen(""ctrl d"", page_down)', 'context': '            widget.listen(""l"", move_right)\n            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 835, 'coloffset': 12, 'linematch': 'widget.listen(""g"", move_home)', 'context': '            widget.listen(""ctrl b"", page_up)\n            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)\n            widget.listen(""?"", helpfunc)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 836, 'coloffset': 12, 'linematch': 'widget.listen(""G"", move_end)', 'context': '            widget.listen(""ctrl f"", page_down)\n            widget.listen(""ctrl u"", page_up)\n            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)\n            widget.listen(""?"", helpfunc)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 838, 'coloffset': 8, 'linematch': 'def add_help_keys(widget, helpfunc):', 'context': '            widget.listen(""ctrl d"", page_down)\n            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)\n            widget.listen(""?"", helpfunc)\n\n        # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 839, 'coloffset': 12, 'linematch': 'widget.listen(""f1"", helpfunc)', 'context': '            widget.listen(""g"", move_home)\n            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)\n            widget.listen(""?"", helpfunc)\n\n        # }}}\n\n        # {{{ left/source column', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 840, 'coloffset': 12, 'linematch': 'widget.listen(""?"", helpfunc)', 'context': '            widget.listen(""G"", move_end)\n\n        def add_help_keys(widget, helpfunc):\n            widget.listen(""f1"", helpfunc)\n            widget.listen(""?"", helpfunc)\n\n        # }}}\n\n        # {{{ left/source column\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 846, 'coloffset': 8, 'linematch': 'self.source = urwid.SimpleListWalker([])', 'context': '        # }}}\n\n        # {{{ left/source column\n\n        self.source = urwid.SimpleListWalker([])\n        self.source_list = urwid.ListBox(self.source)\n        self.source_sigwrap = SignalWrap(self.source_list)\n        self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")\n        self.source_hscroll_start = 0\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 847, 'coloffset': 8, 'linematch': 'self.source_list = urwid.ListBox(self.source)', 'context': '\n        # {{{ left/source column\n\n        self.source = urwid.SimpleListWalker([])\n        self.source_list = urwid.ListBox(self.source)\n        self.source_sigwrap = SignalWrap(self.source_list)\n        self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")\n        self.source_hscroll_start = 0\n\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 848, 'coloffset': 8, 'linematch': 'self.source_sigwrap = SignalWrap(self.source_list)', 'context': '        # {{{ left/source column\n\n        self.source = urwid.SimpleListWalker([])\n        self.source_list = urwid.ListBox(self.source)\n        self.source_sigwrap = SignalWrap(self.source_list)\n        self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")\n        self.source_hscroll_start = 0\n\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])\n        self.cmdline_list = urwid.ListBox(self.cmdline_contents)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 849, 'coloffset': 8, 'linematch': 'self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")', 'context': '\n        self.source = urwid.SimpleListWalker([])\n        self.source_list = urwid.ListBox(self.source)\n        self.source_sigwrap = SignalWrap(self.source_list)\n        self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")\n        self.source_hscroll_start = 0\n\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])\n        self.cmdline_list = urwid.ListBox(self.cmdline_contents)\n        import urwid_readline', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 850, 'coloffset': 8, 'linematch': 'self.source_hscroll_start = 0', 'context': '        self.source = urwid.SimpleListWalker([])\n        self.source_list = urwid.ListBox(self.source)\n        self.source_sigwrap = SignalWrap(self.source_list)\n        self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")\n        self.source_hscroll_start = 0\n\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])\n        self.cmdline_list = urwid.ListBox(self.cmdline_contents)\n        import urwid_readline\n        self.cmdline_edit = urwid_readline.ReadlineEdit([', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 852, 'coloffset': 8, 'linematch': 'self.cmdline_contents = urwid.SimpleFocusListWalker([])', 'context': '        self.source_sigwrap = SignalWrap(self.source_list)\n        self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")\n        self.source_hscroll_start = 0\n\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])\n        self.cmdline_list = urwid.ListBox(self.cmdline_contents)\n        import urwid_readline\n        self.cmdline_edit = urwid_readline.ReadlineEdit([\n            (""command line prompt"", "">>> "")\n            ])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 853, 'coloffset': 8, 'linematch': 'self.cmdline_list = urwid.ListBox(self.cmdline_contents)', 'context': '        self.source_attr = urwid.AttrMap(self.source_sigwrap, ""source"")\n        self.source_hscroll_start = 0\n\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])\n        self.cmdline_list = urwid.ListBox(self.cmdline_contents)\n        import urwid_readline\n        self.cmdline_edit = urwid_readline.ReadlineEdit([\n            (""command line prompt"", "">>> "")\n            ])\n        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 854, 'coloffset': 8, 'linematch': 'import urwid_readline', 'context': '        self.source_hscroll_start = 0\n\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])\n        self.cmdline_list = urwid.ListBox(self.cmdline_contents)\n        import urwid_readline\n        self.cmdline_edit = urwid_readline.ReadlineEdit([\n            (""command line prompt"", "">>> "")\n            ])\n        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")\n        self.cmdline_edit_sigwrap = SignalWrap(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 855, 'coloffset': 8, 'linematch': 'self.cmdline_edit = urwid_readline.ReadlineEdit([', 'context': '\n        self.cmdline_contents = urwid.SimpleFocusListWalker([])\n        self.cmdline_list = urwid.ListBox(self.cmdline_contents)\n        import urwid_readline\n        self.cmdline_edit = urwid_readline.ReadlineEdit([\n            (""command line prompt"", "">>> "")\n            ])\n        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")\n        self.cmdline_edit_sigwrap = SignalWrap(\n                cmdline_edit_attr, is_preemptive=True)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 858, 'coloffset': 8, 'linematch': 'cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")', 'context': '        import urwid_readline\n        self.cmdline_edit = urwid_readline.ReadlineEdit([\n            (""command line prompt"", "">>> "")\n            ])\n        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")\n        self.cmdline_edit_sigwrap = SignalWrap(\n                cmdline_edit_attr, is_preemptive=True)\n\n        def clear_cmdline_history(btn):\n            del self.cmdline_contents[:]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 859, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap = SignalWrap(', 'context': '        self.cmdline_edit = urwid_readline.ReadlineEdit([\n            (""command line prompt"", "">>> "")\n            ])\n        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")\n        self.cmdline_edit_sigwrap = SignalWrap(\n                cmdline_edit_attr, is_preemptive=True)\n\n        def clear_cmdline_history(btn):\n            del self.cmdline_contents[:]\n            # clear the command input text too,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 862, 'coloffset': 8, 'linematch': 'def clear_cmdline_history(btn):', 'context': '        cmdline_edit_attr = urwid.AttrMap(self.cmdline_edit, ""command line edit"")\n        self.cmdline_edit_sigwrap = SignalWrap(\n                cmdline_edit_attr, is_preemptive=True)\n\n        def clear_cmdline_history(btn):\n            del self.cmdline_contents[:]\n            # clear the command input text too,\n            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 863, 'coloffset': 12, 'linematch': 'del self.cmdline_contents[:]', 'context': '        self.cmdline_edit_sigwrap = SignalWrap(\n                cmdline_edit_attr, is_preemptive=True)\n\n        def clear_cmdline_history(btn):\n            del self.cmdline_contents[:]\n            # clear the command input text too,\n            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 866, 'coloffset': 12, 'linematch': 'self.cmdline_history_position = -1', 'context': '        def clear_cmdline_history(btn):\n            del self.cmdline_contents[:]\n            # clear the command input text too,\n            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)\n\n        def initialize_cmdline_history(path):\n            dq = partial(deque, maxlen=5000)\n            try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 867, 'coloffset': 12, 'linematch': 'cmdline_history_browse(1)', 'context': '            del self.cmdline_contents[:]\n            # clear the command input text too,\n            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)\n\n        def initialize_cmdline_history(path):\n            dq = partial(deque, maxlen=5000)\n            try:\n                # Load global history if present', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 869, 'coloffset': 8, 'linematch': 'def initialize_cmdline_history(path):', 'context': '            # but save it to be retrieved on cmdline_history_prev()\n            self.cmdline_history_position = -1\n            cmdline_history_browse(1)\n\n        def initialize_cmdline_history(path):\n            dq = partial(deque, maxlen=5000)\n            try:\n                # Load global history if present\n                with open(path, ""r"") as histfile:\n                    return dq(histfile.read().splitlines())', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 870, 'coloffset': 12, 'linematch': 'dq = partial(deque, maxlen=5000)', 'context': '            self.cmdline_history_position = -1\n            cmdline_history_browse(1)\n\n        def initialize_cmdline_history(path):\n            dq = partial(deque, maxlen=5000)\n            try:\n                # Load global history if present\n                with open(path, ""r"") as histfile:\n                    return dq(histfile.read().splitlines())\n            except FileNotFoundError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 871, 'coloffset': 12, 'linematch': 'try:', 'context': '            cmdline_history_browse(1)\n\n        def initialize_cmdline_history(path):\n            dq = partial(deque, maxlen=5000)\n            try:\n                # Load global history if present\n                with open(path, ""r"") as histfile:\n                    return dq(histfile.read().splitlines())\n            except FileNotFoundError:\n                return dq()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 878, 'coloffset': 8, 'linematch': 'self.cmdline_history_path = os.path.join(get_save_config_path(),', 'context': '                    return dq(histfile.read().splitlines())\n            except FileNotFoundError:\n                return dq()\n\n        self.cmdline_history_path = os.path.join(get_save_config_path(),\n                                                 ""internal-cmdline-history.txt"")\n\n        self.cmdline_history = initialize_cmdline_history(self.cmdline_history_path)\n        self.cmdline_saved_edit_text = """"\n        self.cmdline_history_position = -1', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 881, 'coloffset': 8, 'linematch': 'self.cmdline_history = initialize_cmdline_history(self.cmdline_history_path)', 'context': '\n        self.cmdline_history_path = os.path.join(get_save_config_path(),\n                                                 ""internal-cmdline-history.txt"")\n\n        self.cmdline_history = initialize_cmdline_history(self.cmdline_history_path)\n        self.cmdline_saved_edit_text = """"\n        self.cmdline_history_position = -1\n\n        self.cmdline_edit_bar = urwid.Columns([\n                self.cmdline_edit_sigwrap,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 882, 'coloffset': 8, 'linematch': 'self.cmdline_saved_edit_text = """"', 'context': '        self.cmdline_history_path = os.path.join(get_save_config_path(),\n                                                 ""internal-cmdline-history.txt"")\n\n        self.cmdline_history = initialize_cmdline_history(self.cmdline_history_path)\n        self.cmdline_saved_edit_text = """"\n        self.cmdline_history_position = -1\n\n        self.cmdline_edit_bar = urwid.Columns([\n                self.cmdline_edit_sigwrap,\n                (urwid.FIXED, 10, AttrMap(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 883, 'coloffset': 8, 'linematch': 'self.cmdline_history_position = -1', 'context': '                                                 ""internal-cmdline-history.txt"")\n\n        self.cmdline_history = initialize_cmdline_history(self.cmdline_history_path)\n        self.cmdline_saved_edit_text = """"\n        self.cmdline_history_position = -1\n\n        self.cmdline_edit_bar = urwid.Columns([\n                self.cmdline_edit_sigwrap,\n                (urwid.FIXED, 10, AttrMap(\n                    urwid.Button(""Clear"", clear_cmdline_history),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 885, 'coloffset': 8, 'linematch': 'self.cmdline_edit_bar = urwid.Columns([', 'context': '        self.cmdline_history = initialize_cmdline_history(self.cmdline_history_path)\n        self.cmdline_saved_edit_text = """"\n        self.cmdline_history_position = -1\n\n        self.cmdline_edit_bar = urwid.Columns([\n                self.cmdline_edit_sigwrap,\n                (urwid.FIXED, 10, AttrMap(\n                    urwid.Button(""Clear"", clear_cmdline_history),\n                    ""command line clear button"", ""command line focused button""))\n                ])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 892, 'coloffset': 8, 'linematch': 'self.cmdline_pile = urwid.Pile([', 'context': '                    urwid.Button(""Clear"", clear_cmdline_history),\n                    ""command line clear button"", ""command line focused button""))\n                ])\n\n        self.cmdline_pile = urwid.Pile([\n            (urwid.FLOW, urwid.Text(\n                f""Command line: [{CONFIG[\'hotkeys_toggle_cmdline_focus\']}]"")),\n            (urwid.WEIGHT, 1, urwid.AttrMap(\n                self.cmdline_list, ""command line output"")),\n            (urwid.FLOW, self.cmdline_edit_bar),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 899, 'coloffset': 8, 'linematch': 'self.cmdline_sigwrap = SignalWrap(', 'context': '            (urwid.WEIGHT, 1, urwid.AttrMap(\n                self.cmdline_list, ""command line output"")),\n            (urwid.FLOW, self.cmdline_edit_bar),\n            ])\n        self.cmdline_sigwrap = SignalWrap(\n                urwid.AttrMap(self.cmdline_pile, None, ""focused sidebar"")\n                )\n        self.cmdline_on = not CONFIG[""hide_cmdline_win""]\n        self.cmdline_weight = float(CONFIG.get(""cmdline_height"", 1))\n        self.lhs_col = urwid.Pile([', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 902, 'coloffset': 8, 'linematch': 'self.cmdline_on = not CONFIG[""hide_cmdline_win""]', 'context': '            ])\n        self.cmdline_sigwrap = SignalWrap(\n                urwid.AttrMap(self.cmdline_pile, None, ""focused sidebar"")\n                )\n        self.cmdline_on = not CONFIG[""hide_cmdline_win""]\n        self.cmdline_weight = float(CONFIG.get(""cmdline_height"", 1))\n        self.lhs_col = urwid.Pile([\n            (urwid.WEIGHT, 5, self.source_attr),\n            (urwid.WEIGHT, self.cmdline_weight if self.cmdline_on else 0,\n                self.cmdline_sigwrap),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 903, 'coloffset': 8, 'linematch': 'self.cmdline_weight = float(CONFIG.get(""cmdline_height"", 1))', 'context': '        self.cmdline_sigwrap = SignalWrap(\n                urwid.AttrMap(self.cmdline_pile, None, ""focused sidebar"")\n                )\n        self.cmdline_on = not CONFIG[""hide_cmdline_win""]\n        self.cmdline_weight = float(CONFIG.get(""cmdline_height"", 1))\n        self.lhs_col = urwid.Pile([\n            (urwid.WEIGHT, 5, self.source_attr),\n            (urwid.WEIGHT, self.cmdline_weight if self.cmdline_on else 0,\n                self.cmdline_sigwrap),\n            ])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 904, 'coloffset': 8, 'linematch': 'self.lhs_col = urwid.Pile([', 'context': '                urwid.AttrMap(self.cmdline_pile, None, ""focused sidebar"")\n                )\n        self.cmdline_on = not CONFIG[""hide_cmdline_win""]\n        self.cmdline_weight = float(CONFIG.get(""cmdline_height"", 1))\n        self.lhs_col = urwid.Pile([\n            (urwid.WEIGHT, 5, self.source_attr),\n            (urwid.WEIGHT, self.cmdline_weight if self.cmdline_on else 0,\n                self.cmdline_sigwrap),\n            ])\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 914, 'coloffset': 8, 'linematch': 'self.locals = urwid.SimpleListWalker([])', 'context': '        # }}}\n\n        # {{{ right column\n\n        self.locals = urwid.SimpleListWalker([])\n        self.var_list = SignalWrap(\n                urwid.ListBox(self.locals))\n\n        self.stack_walker = urwid.SimpleListWalker([])\n        self.stack_list = SignalWrap(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 915, 'coloffset': 8, 'linematch': 'self.var_list = SignalWrap(', 'context': '\n        # {{{ right column\n\n        self.locals = urwid.SimpleListWalker([])\n        self.var_list = SignalWrap(\n                urwid.ListBox(self.locals))\n\n        self.stack_walker = urwid.SimpleListWalker([])\n        self.stack_list = SignalWrap(\n                urwid.ListBox(self.stack_walker))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 918, 'coloffset': 8, 'linematch': 'self.stack_walker = urwid.SimpleListWalker([])', 'context': '        self.locals = urwid.SimpleListWalker([])\n        self.var_list = SignalWrap(\n                urwid.ListBox(self.locals))\n\n        self.stack_walker = urwid.SimpleListWalker([])\n        self.stack_list = SignalWrap(\n                urwid.ListBox(self.stack_walker))\n\n        self.bp_walker = urwid.SimpleListWalker([])\n        self.bp_list = SignalWrap(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 919, 'coloffset': 8, 'linematch': 'self.stack_list = SignalWrap(', 'context': '        self.var_list = SignalWrap(\n                urwid.ListBox(self.locals))\n\n        self.stack_walker = urwid.SimpleListWalker([])\n        self.stack_list = SignalWrap(\n                urwid.ListBox(self.stack_walker))\n\n        self.bp_walker = urwid.SimpleListWalker([])\n        self.bp_list = SignalWrap(\n                urwid.ListBox(self.bp_walker))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 922, 'coloffset': 8, 'linematch': 'self.bp_walker = urwid.SimpleListWalker([])', 'context': '        self.stack_walker = urwid.SimpleListWalker([])\n        self.stack_list = SignalWrap(\n                urwid.ListBox(self.stack_walker))\n\n        self.bp_walker = urwid.SimpleListWalker([])\n        self.bp_list = SignalWrap(\n                urwid.ListBox(self.bp_walker))\n\n        self.rhs_col = urwid.Pile([\n            (urwid.WEIGHT, float(CONFIG[""variables_weight""]), AttrMap(urwid.Pile([', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 923, 'coloffset': 8, 'linematch': 'self.bp_list = SignalWrap(', 'context': '        self.stack_list = SignalWrap(\n                urwid.ListBox(self.stack_walker))\n\n        self.bp_walker = urwid.SimpleListWalker([])\n        self.bp_list = SignalWrap(\n                urwid.ListBox(self.bp_walker))\n\n        self.rhs_col = urwid.Pile([\n            (urwid.WEIGHT, float(CONFIG[""variables_weight""]), AttrMap(urwid.Pile([\n                (urwid.FLOW, urwid.Text(make_hotkey_markup(""_Variables:""))),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 926, 'coloffset': 8, 'linematch': 'self.rhs_col = urwid.Pile([', 'context': '        self.bp_walker = urwid.SimpleListWalker([])\n        self.bp_list = SignalWrap(\n                urwid.ListBox(self.bp_walker))\n\n        self.rhs_col = urwid.Pile([\n            (urwid.WEIGHT, float(CONFIG[""variables_weight""]), AttrMap(urwid.Pile([\n                (urwid.FLOW, urwid.Text(make_hotkey_markup(""_Variables:""))),\n                AttrMap(self.var_list, ""variables""),\n                ]), None, ""focused sidebar""),),\n            (urwid.WEIGHT, float(CONFIG[""stack_weight""]), AttrMap(urwid.Pile([', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 940, 'coloffset': 8, 'linematch': 'self.rhs_col_sigwrap = SignalWrap(self.rhs_col)', 'context': '                (urwid.FLOW, urwid.Text(make_hotkey_markup(""_Breakpoints:""))),\n                AttrMap(self.bp_list, ""breakpoint""),\n                ]), None, ""focused sidebar""),),\n            ])\n        self.rhs_col_sigwrap = SignalWrap(self.rhs_col)\n\n        def helpside(w, size, key):\n            help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)\n\n        add_vi_nav_keys(self.rhs_col_sigwrap)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 942, 'coloffset': 8, 'linematch': 'def helpside(w, size, key):', 'context': '                ]), None, ""focused sidebar""),),\n            ])\n        self.rhs_col_sigwrap = SignalWrap(self.rhs_col)\n\n        def helpside(w, size, key):\n            help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)\n\n        add_vi_nav_keys(self.rhs_col_sigwrap)\n        add_help_keys(self.rhs_col_sigwrap, helpside)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 943, 'coloffset': 12, 'linematch': 'help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)', 'context': '            ])\n        self.rhs_col_sigwrap = SignalWrap(self.rhs_col)\n\n        def helpside(w, size, key):\n            help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)\n\n        add_vi_nav_keys(self.rhs_col_sigwrap)\n        add_help_keys(self.rhs_col_sigwrap, helpside)\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 945, 'coloffset': 8, 'linematch': 'add_vi_nav_keys(self.rhs_col_sigwrap)', 'context': '\n        def helpside(w, size, key):\n            help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)\n\n        add_vi_nav_keys(self.rhs_col_sigwrap)\n        add_help_keys(self.rhs_col_sigwrap, helpside)\n\n        # }}}\n\n        self.columns = urwid.Columns(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 946, 'coloffset': 8, 'linematch': 'add_help_keys(self.rhs_col_sigwrap, helpside)', 'context': '        def helpside(w, size, key):\n            help(HELP_HEADER + HELP_SIDE + HELP_MAIN + HELP_LICENSE)\n\n        add_vi_nav_keys(self.rhs_col_sigwrap)\n        add_help_keys(self.rhs_col_sigwrap, helpside)\n\n        # }}}\n\n        self.columns = urwid.Columns(\n                    [', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 950, 'coloffset': 8, 'linematch': 'self.columns = urwid.Columns(', 'context': '        add_help_keys(self.rhs_col_sigwrap, helpside)\n\n        # }}}\n\n        self.columns = urwid.Columns(\n                    [\n                        (urwid.WEIGHT, 1, self.lhs_col),\n                        (urwid.WEIGHT, float(CONFIG[""sidebar_width""]),\n                            self.rhs_col_sigwrap),\n                        ],', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 958, 'coloffset': 8, 'linematch': 'self.caption = urwid.Text("""")', 'context': '                            self.rhs_col_sigwrap),\n                        ],\n                    dividechars=1)\n\n        self.caption = urwid.Text("""")\n        header = urwid.AttrMap(self.caption, ""header"")\n        self.top = SignalWrap(urwid.Frame(\n            urwid.AttrMap(self.columns, ""background""),\n            header))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 959, 'coloffset': 8, 'linematch': 'header = urwid.AttrMap(self.caption, ""header"")', 'context': '                        ],\n                    dividechars=1)\n\n        self.caption = urwid.Text("""")\n        header = urwid.AttrMap(self.caption, ""header"")\n        self.top = SignalWrap(urwid.Frame(\n            urwid.AttrMap(self.columns, ""background""),\n            header))\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 960, 'coloffset': 8, 'linematch': 'self.top = SignalWrap(urwid.Frame(', 'context': '                    dividechars=1)\n\n        self.caption = urwid.Text("""")\n        header = urwid.AttrMap(self.caption, ""header"")\n        self.top = SignalWrap(urwid.Frame(\n            urwid.AttrMap(self.columns, ""background""),\n            header))\n\n        # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 966, 'coloffset': 8, 'linematch': 'def change_rhs_box(name, index, direction, w, size, key):', 'context': '            header))\n\n        # }}}\n\n        def change_rhs_box(name, index, direction, w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 967, 'coloffset': 12, 'linematch': 'from pudb.settings import save_config', 'context': '\n        # }}}\n\n        def change_rhs_box(name, index, direction, w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:\n                if weight > 1/5:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 969, 'coloffset': 12, 'linematch': 'weight = self.rhs_col.contents[index][1][1]', 'context': '\n        def change_rhs_box(name, index, direction, w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 971, 'coloffset': 12, 'linematch': 'if direction < 0:', 'context': '            from pudb.settings import save_config\n\n            weight = self.rhs_col.contents[index][1][1]\n\n            if direction < 0:\n                if weight > 1/5:\n                    weight /= 1.25\n            else:\n                if weight < 5:\n                    weight *= 1.25', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 978, 'coloffset': 12, 'linematch': 'CONFIG[name+""_weight""] = weight', 'context': '            else:\n                if weight < 5:\n                    weight *= 1.25\n\n            CONFIG[name+""_weight""] = weight\n            save_config(CONFIG)\n            self.rhs_col.contents[index] = (\n                self.rhs_col.contents[index][0],\n                (urwid.WEIGHT, weight))\n            self.rhs_col._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 979, 'coloffset': 12, 'linematch': 'save_config(CONFIG)', 'context': '                if weight < 5:\n                    weight *= 1.25\n\n            CONFIG[name+""_weight""] = weight\n            save_config(CONFIG)\n            self.rhs_col.contents[index] = (\n                self.rhs_col.contents[index][0],\n                (urwid.WEIGHT, weight))\n            self.rhs_col._invalidate()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 980, 'coloffset': 12, 'linematch': 'self.rhs_col.contents[index] = (', 'context': '                    weight *= 1.25\n\n            CONFIG[name+""_weight""] = weight\n            save_config(CONFIG)\n            self.rhs_col.contents[index] = (\n                self.rhs_col.contents[index][0],\n                (urwid.WEIGHT, weight))\n            self.rhs_col._invalidate()\n\n        # {{{ variables listeners', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 983, 'coloffset': 12, 'linematch': 'self.rhs_col._invalidate()', 'context': '            save_config(CONFIG)\n            self.rhs_col.contents[index] = (\n                self.rhs_col.contents[index][0],\n                (urwid.WEIGHT, weight))\n            self.rhs_col._invalidate()\n\n        # {{{ variables listeners\n\n        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 987, 'coloffset': 8, 'linematch': 'def get_inspect_info(id_path, read_only=False):', 'context': '            self.rhs_col._invalidate()\n\n        # {{{ variables listeners\n\n        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 988, 'coloffset': 12, 'linematch': 'return (self.get_frame_var_info(read_only)', 'context': '\n        # {{{ variables listeners\n\n        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:\n                # collapse current variable', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 991, 'coloffset': 8, 'linematch': 'def collapse_current(var, pos, iinfo):', 'context': '        def get_inspect_info(id_path, read_only=False):\n            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:\n                # collapse current variable\n                iinfo.show_detail = False\n            else:\n                # collapse parent/container variable', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 992, 'coloffset': 12, 'linematch': 'if iinfo.show_detail:', 'context': '            return (self.get_frame_var_info(read_only)\n                    .get_inspect_info(id_path, read_only))\n\n        def collapse_current(var, pos, iinfo):\n            if iinfo.show_detail:\n                # collapse current variable\n                iinfo.show_detail = False\n            else:\n                # collapse parent/container variable\n                if var.parent is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1001, 'coloffset': 12, 'linematch': 'return None', 'context': '                if var.parent is not None:\n                    p_iinfo = get_inspect_info(var.parent.id_path)\n                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1003, 'coloffset': 8, 'linematch': 'def change_var_state(w, size, key):', 'context': '                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1004, 'coloffset': 12, 'linematch': 'try:', 'context': '                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n\n            var = self.var_list._w.focus', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1009, 'coloffset': 12, 'linematch': 'var = self.var_list._w.focus', 'context': '                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n\n            var = self.var_list._w.focus\n            if var is None:\n                return\n\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1010, 'coloffset': 12, 'linematch': 'if var is None:', 'context': '            except IndexError:\n                return\n\n            var = self.var_list._w.focus\n            if var is None:\n                return\n\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1013, 'coloffset': 12, 'linematch': 'iinfo = get_inspect_info(var.id_path)', 'context': '            var = self.var_list._w.focus\n            if var is None:\n                return\n\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None\n\n            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1014, 'coloffset': 12, 'linematch': 'focus_index = None', 'context': '            if var is None:\n                return\n\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None\n\n            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1016, 'coloffset': 12, 'linematch': 'if key == ""enter"" or key == ""\\\\"" or key == "" "":', 'context': '\n            iinfo = get_inspect_info(var.id_path)\n            focus_index = None\n\n            if key == ""enter"" or key == ""\\\\"" or key == "" "":\n                iinfo.show_detail = not iinfo.show_detail\n            elif key == ""h"":\n                focus_index = collapse_current(var, pos, iinfo)\n            elif key == ""l"":\n                iinfo.show_detail = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1051, 'coloffset': 12, 'linematch': 'self.update_var_view(focus_index=focus_index)', 'context': '                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1053, 'coloffset': 8, 'linematch': 'def edit_inspector_detail(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1054, 'coloffset': 12, 'linematch': 'var = self.var_list._w.focus', 'context': '\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n\n            fvi = self.get_frame_var_info(read_only=False)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1056, 'coloffset': 12, 'linematch': 'if var is None:', 'context': '\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n\n            fvi = self.get_frame_var_info(read_only=False)\n            iinfo = fvi.get_inspect_info(var.id_path, read_only=False)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1059, 'coloffset': 12, 'linematch': 'fvi = self.get_frame_var_info(read_only=False)', 'context': '\n            if var is None:\n                return\n\n            fvi = self.get_frame_var_info(read_only=False)\n            iinfo = fvi.get_inspect_info(var.id_path, read_only=False)\n\n            buttons = [\n                (""OK"", True),\n                (""Cancel"", False),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1060, 'coloffset': 12, 'linematch': 'iinfo = fvi.get_inspect_info(var.id_path, read_only=False)', 'context': '            if var is None:\n                return\n\n            fvi = self.get_frame_var_info(read_only=False)\n            iinfo = fvi.get_inspect_info(var.id_path, read_only=False)\n\n            buttons = [\n                (""OK"", True),\n                (""Cancel"", False),\n                ]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1062, 'coloffset': 12, 'linematch': 'buttons = [', 'context': '\n            fvi = self.get_frame_var_info(read_only=False)\n            iinfo = fvi.get_inspect_info(var.id_path, read_only=False)\n\n            buttons = [\n                (""OK"", True),\n                (""Cancel"", False),\n                ]\n\n            if var.watch_expr is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1067, 'coloffset': 12, 'linematch': 'if var.watch_expr is not None:', 'context': '                (""OK"", True),\n                (""Cancel"", False),\n                ]\n\n            if var.watch_expr is not None:\n                watch_edit = urwid.Edit([\n                    (""label"", ""Watch expression: "")\n                    ], var.watch_expr.expression)\n                id_segment = [\n                        urwid.AttrMap(watch_edit, ""input"", ""focused input""),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1087, 'coloffset': 12, 'linematch': 'rb_grp_show = []', 'context': '                        ]\n\n                title = ""Variable Inspection Options""\n\n            rb_grp_show = []\n            rb_show_default = urwid.RadioButton(rb_grp_show, ""Default"",\n                    iinfo.display_type == ""default"")\n            rb_show_type = urwid.RadioButton(rb_grp_show, ""Show type()"",\n                    iinfo.display_type == ""type"")\n            rb_show_repr = urwid.RadioButton(rb_grp_show, ""Show repr()"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1088, 'coloffset': 12, 'linematch': 'rb_show_default = urwid.RadioButton(rb_grp_show, ""Default"",', 'context': '\n                title = ""Variable Inspection Options""\n\n            rb_grp_show = []\n            rb_show_default = urwid.RadioButton(rb_grp_show, ""Default"",\n                    iinfo.display_type == ""default"")\n            rb_show_type = urwid.RadioButton(rb_grp_show, ""Show type()"",\n                    iinfo.display_type == ""type"")\n            rb_show_repr = urwid.RadioButton(rb_grp_show, ""Show repr()"",\n                    iinfo.display_type == ""repr"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1090, 'coloffset': 12, 'linematch': 'rb_show_type = urwid.RadioButton(rb_grp_show, ""Show type()"",', 'context': '\n            rb_grp_show = []\n            rb_show_default = urwid.RadioButton(rb_grp_show, ""Default"",\n                    iinfo.display_type == ""default"")\n            rb_show_type = urwid.RadioButton(rb_grp_show, ""Show type()"",\n                    iinfo.display_type == ""type"")\n            rb_show_repr = urwid.RadioButton(rb_grp_show, ""Show repr()"",\n                    iinfo.display_type == ""repr"")\n            rb_show_str = urwid.RadioButton(rb_grp_show, ""Show str()"",\n                    iinfo.display_type == ""str"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1092, 'coloffset': 12, 'linematch': 'rb_show_repr = urwid.RadioButton(rb_grp_show, ""Show repr()"",', 'context': '            rb_show_default = urwid.RadioButton(rb_grp_show, ""Default"",\n                    iinfo.display_type == ""default"")\n            rb_show_type = urwid.RadioButton(rb_grp_show, ""Show type()"",\n                    iinfo.display_type == ""type"")\n            rb_show_repr = urwid.RadioButton(rb_grp_show, ""Show repr()"",\n                    iinfo.display_type == ""repr"")\n            rb_show_str = urwid.RadioButton(rb_grp_show, ""Show str()"",\n                    iinfo.display_type == ""str"")\n            rb_show_id = urwid.RadioButton(rb_grp_show, ""Show id()"",\n                    iinfo.display_type == ""id"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1094, 'coloffset': 12, 'linematch': 'rb_show_str = urwid.RadioButton(rb_grp_show, ""Show str()"",', 'context': '            rb_show_type = urwid.RadioButton(rb_grp_show, ""Show type()"",\n                    iinfo.display_type == ""type"")\n            rb_show_repr = urwid.RadioButton(rb_grp_show, ""Show repr()"",\n                    iinfo.display_type == ""repr"")\n            rb_show_str = urwid.RadioButton(rb_grp_show, ""Show str()"",\n                    iinfo.display_type == ""str"")\n            rb_show_id = urwid.RadioButton(rb_grp_show, ""Show id()"",\n                    iinfo.display_type == ""id"")\n            rb_show_custom = urwid.RadioButton(\n                    rb_grp_show, ""Show custom (set in prefs)"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1096, 'coloffset': 12, 'linematch': 'rb_show_id = urwid.RadioButton(rb_grp_show, ""Show id()"",', 'context': '            rb_show_repr = urwid.RadioButton(rb_grp_show, ""Show repr()"",\n                    iinfo.display_type == ""repr"")\n            rb_show_str = urwid.RadioButton(rb_grp_show, ""Show str()"",\n                    iinfo.display_type == ""str"")\n            rb_show_id = urwid.RadioButton(rb_grp_show, ""Show id()"",\n                    iinfo.display_type == ""id"")\n            rb_show_custom = urwid.RadioButton(\n                    rb_grp_show, ""Show custom (set in prefs)"",\n                    iinfo.display_type == CONFIG[""custom_stringifier""])\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1098, 'coloffset': 12, 'linematch': 'rb_show_custom = urwid.RadioButton(', 'context': '            rb_show_str = urwid.RadioButton(rb_grp_show, ""Show str()"",\n                    iinfo.display_type == ""str"")\n            rb_show_id = urwid.RadioButton(rb_grp_show, ""Show id()"",\n                    iinfo.display_type == ""id"")\n            rb_show_custom = urwid.RadioButton(\n                    rb_grp_show, ""Show custom (set in prefs)"",\n                    iinfo.display_type == CONFIG[""custom_stringifier""])\n\n            rb_grp_access = []\n            rb_access_public = urwid.RadioButton(rb_grp_access, ""Public members"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1102, 'coloffset': 12, 'linematch': 'rb_grp_access = []', 'context': '            rb_show_custom = urwid.RadioButton(\n                    rb_grp_show, ""Show custom (set in prefs)"",\n                    iinfo.display_type == CONFIG[""custom_stringifier""])\n\n            rb_grp_access = []\n            rb_access_public = urwid.RadioButton(rb_grp_access, ""Public members"",\n                    iinfo.access_level == ""public"")\n            rb_access_private = urwid.RadioButton(\n                    rb_grp_access, ""Public and private members"",\n                    iinfo.access_level == ""private"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1103, 'coloffset': 12, 'linematch': 'rb_access_public = urwid.RadioButton(rb_grp_access, ""Public members"",', 'context': '                    rb_grp_show, ""Show custom (set in prefs)"",\n                    iinfo.display_type == CONFIG[""custom_stringifier""])\n\n            rb_grp_access = []\n            rb_access_public = urwid.RadioButton(rb_grp_access, ""Public members"",\n                    iinfo.access_level == ""public"")\n            rb_access_private = urwid.RadioButton(\n                    rb_grp_access, ""Public and private members"",\n                    iinfo.access_level == ""private"")\n            rb_access_all = urwid.RadioButton(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1105, 'coloffset': 12, 'linematch': 'rb_access_private = urwid.RadioButton(', 'context': '\n            rb_grp_access = []\n            rb_access_public = urwid.RadioButton(rb_grp_access, ""Public members"",\n                    iinfo.access_level == ""public"")\n            rb_access_private = urwid.RadioButton(\n                    rb_grp_access, ""Public and private members"",\n                    iinfo.access_level == ""private"")\n            rb_access_all = urwid.RadioButton(\n                    rb_grp_access, ""All members (including __dunder__)"",\n                    iinfo.access_level == ""all"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1108, 'coloffset': 12, 'linematch': 'rb_access_all = urwid.RadioButton(', 'context': '                    iinfo.access_level == ""public"")\n            rb_access_private = urwid.RadioButton(\n                    rb_grp_access, ""Public and private members"",\n                    iinfo.access_level == ""private"")\n            rb_access_all = urwid.RadioButton(\n                    rb_grp_access, ""All members (including __dunder__)"",\n                    iinfo.access_level == ""all"")\n\n            wrap_checkbox = urwid.CheckBox(""Line Wrap"", iinfo.wrap)\n            expanded_checkbox = urwid.CheckBox(""Expanded"", iinfo.show_detail)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1112, 'coloffset': 12, 'linematch': 'wrap_checkbox = urwid.CheckBox(""Line Wrap"", iinfo.wrap)', 'context': '            rb_access_all = urwid.RadioButton(\n                    rb_grp_access, ""All members (including __dunder__)"",\n                    iinfo.access_level == ""all"")\n\n            wrap_checkbox = urwid.CheckBox(""Line Wrap"", iinfo.wrap)\n            expanded_checkbox = urwid.CheckBox(""Expanded"", iinfo.show_detail)\n            highlighted_checkbox = urwid.CheckBox(""Highlighted"", iinfo.highlighted)\n            repeated_at_top_checkbox = urwid.CheckBox(\n                    ""Repeated at top"", iinfo.repeated_at_top)\n            show_methods_checkbox = urwid.CheckBox(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1113, 'coloffset': 12, 'linematch': 'expanded_checkbox = urwid.CheckBox(""Expanded"", iinfo.show_detail)', 'context': '                    rb_grp_access, ""All members (including __dunder__)"",\n                    iinfo.access_level == ""all"")\n\n            wrap_checkbox = urwid.CheckBox(""Line Wrap"", iinfo.wrap)\n            expanded_checkbox = urwid.CheckBox(""Expanded"", iinfo.show_detail)\n            highlighted_checkbox = urwid.CheckBox(""Highlighted"", iinfo.highlighted)\n            repeated_at_top_checkbox = urwid.CheckBox(\n                    ""Repeated at top"", iinfo.repeated_at_top)\n            show_methods_checkbox = urwid.CheckBox(\n                    ""Show methods"", iinfo.show_methods)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1114, 'coloffset': 12, 'linematch': 'highlighted_checkbox = urwid.CheckBox(""Highlighted"", iinfo.highlighted)', 'context': '                    iinfo.access_level == ""all"")\n\n            wrap_checkbox = urwid.CheckBox(""Line Wrap"", iinfo.wrap)\n            expanded_checkbox = urwid.CheckBox(""Expanded"", iinfo.show_detail)\n            highlighted_checkbox = urwid.CheckBox(""Highlighted"", iinfo.highlighted)\n            repeated_at_top_checkbox = urwid.CheckBox(\n                    ""Repeated at top"", iinfo.repeated_at_top)\n            show_methods_checkbox = urwid.CheckBox(\n                    ""Show methods"", iinfo.show_methods)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1115, 'coloffset': 12, 'linematch': 'repeated_at_top_checkbox = urwid.CheckBox(', 'context': '\n            wrap_checkbox = urwid.CheckBox(""Line Wrap"", iinfo.wrap)\n            expanded_checkbox = urwid.CheckBox(""Expanded"", iinfo.show_detail)\n            highlighted_checkbox = urwid.CheckBox(""Highlighted"", iinfo.highlighted)\n            repeated_at_top_checkbox = urwid.CheckBox(\n                    ""Repeated at top"", iinfo.repeated_at_top)\n            show_methods_checkbox = urwid.CheckBox(\n                    ""Show methods"", iinfo.show_methods)\n\n            lb = urwid.ListBox(urwid.SimpleListWalker(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1117, 'coloffset': 12, 'linematch': 'show_methods_checkbox = urwid.CheckBox(', 'context': '            expanded_checkbox = urwid.CheckBox(""Expanded"", iinfo.show_detail)\n            highlighted_checkbox = urwid.CheckBox(""Highlighted"", iinfo.highlighted)\n            repeated_at_top_checkbox = urwid.CheckBox(\n                    ""Repeated at top"", iinfo.repeated_at_top)\n            show_methods_checkbox = urwid.CheckBox(\n                    ""Show methods"", iinfo.show_methods)\n\n            lb = urwid.ListBox(urwid.SimpleListWalker(\n                id_segment\n                + rb_grp_show + [urwid.Text("""")]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1120, 'coloffset': 12, 'linematch': 'lb = urwid.ListBox(urwid.SimpleListWalker(', 'context': '                    ""Repeated at top"", iinfo.repeated_at_top)\n            show_methods_checkbox = urwid.CheckBox(\n                    ""Show methods"", iinfo.show_methods)\n\n            lb = urwid.ListBox(urwid.SimpleListWalker(\n                id_segment\n                + rb_grp_show + [urwid.Text("""")]\n                + rb_grp_access + [urwid.Text("""")]\n                + [\n                    wrap_checkbox,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1132, 'coloffset': 12, 'linematch': 'result = self.dialog(lb, buttons, title=title)', 'context': '                    repeated_at_top_checkbox,\n                    show_methods_checkbox,\n                ]))\n\n            result = self.dialog(lb, buttons, title=title)\n\n            if result is True:\n                iinfo.show_detail = expanded_checkbox.get_state()\n                iinfo.wrap = wrap_checkbox.get_state()\n                iinfo.highlighted = highlighted_checkbox.get_state()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1134, 'coloffset': 12, 'linematch': 'if result is True:', 'context': '                ]))\n\n            result = self.dialog(lb, buttons, title=title)\n\n            if result is True:\n                iinfo.show_detail = expanded_checkbox.get_state()\n                iinfo.wrap = wrap_checkbox.get_state()\n                iinfo.highlighted = highlighted_checkbox.get_state()\n                iinfo.repeated_at_top = repeated_at_top_checkbox.get_state()\n                iinfo.show_methods = show_methods_checkbox.get_state()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1169, 'coloffset': 12, 'linematch': 'self.update_var_view()', 'context': '                for i, watch_expr in enumerate(fvi.watches):\n                    if watch_expr is var.watch_expr:\n                        del fvi.watches[i]\n\n            self.update_var_view()\n\n        def insert_watch(w, size, key):\n            watch_edit = urwid.Edit([\n                (""label"", ""Watch expression: "")\n                ])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1171, 'coloffset': 8, 'linematch': 'def insert_watch(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view()\n\n        def insert_watch(w, size, key):\n            watch_edit = urwid.Edit([\n                (""label"", ""Watch expression: "")\n                ])\n\n            if self.dialog(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1172, 'coloffset': 12, 'linematch': 'watch_edit = urwid.Edit([', 'context': '\n            self.update_var_view()\n\n        def insert_watch(w, size, key):\n            watch_edit = urwid.Edit([\n                (""label"", ""Watch expression: "")\n                ])\n\n            if self.dialog(\n                    urwid.ListBox(urwid.SimpleListWalker([', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1176, 'coloffset': 12, 'linematch': 'if self.dialog(', 'context': '            watch_edit = urwid.Edit([\n                (""label"", ""Watch expression: "")\n                ])\n\n            if self.dialog(\n                    urwid.ListBox(urwid.SimpleListWalker([\n                        urwid.AttrMap(watch_edit, ""input"", ""focused input"")\n                        ])),\n                    [\n                        (""OK"", True),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1191, 'coloffset': 8, 'linematch': 'self.var_list.listen(""\\\\"", change_var_state)', 'context': '                fvi = self.get_frame_var_info(read_only=False)\n                fvi.watches.append(we)\n                self.update_var_view()\n\n        self.var_list.listen(""\\\\"", change_var_state)\n        self.var_list.listen("" "", change_var_state)\n        self.var_list.listen(""h"", change_var_state)\n        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1192, 'coloffset': 8, 'linematch': 'self.var_list.listen("" "", change_var_state)', 'context': '                fvi.watches.append(we)\n                self.update_var_view()\n\n        self.var_list.listen(""\\\\"", change_var_state)\n        self.var_list.listen("" "", change_var_state)\n        self.var_list.listen(""h"", change_var_state)\n        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1193, 'coloffset': 8, 'linematch': 'self.var_list.listen(""h"", change_var_state)', 'context': '                self.update_var_view()\n\n        self.var_list.listen(""\\\\"", change_var_state)\n        self.var_list.listen("" "", change_var_state)\n        self.var_list.listen(""h"", change_var_state)\n        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1194, 'coloffset': 8, 'linematch': 'self.var_list.listen(""l"", change_var_state)', 'context': '\n        self.var_list.listen(""\\\\"", change_var_state)\n        self.var_list.listen("" "", change_var_state)\n        self.var_list.listen(""h"", change_var_state)\n        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1195, 'coloffset': 8, 'linematch': 'self.var_list.listen(""d"", change_var_state)', 'context': '        self.var_list.listen(""\\\\"", change_var_state)\n        self.var_list.listen("" "", change_var_state)\n        self.var_list.listen(""h"", change_var_state)\n        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1196, 'coloffset': 8, 'linematch': 'self.var_list.listen(""t"", change_var_state)', 'context': '        self.var_list.listen("" "", change_var_state)\n        self.var_list.listen(""h"", change_var_state)\n        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1197, 'coloffset': 8, 'linematch': 'self.var_list.listen(""r"", change_var_state)', 'context': '        self.var_list.listen(""h"", change_var_state)\n        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1198, 'coloffset': 8, 'linematch': 'self.var_list.listen(""s"", change_var_state)', 'context': '        self.var_list.listen(""l"", change_var_state)\n        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1199, 'coloffset': 8, 'linematch': 'self.var_list.listen(""i"", change_var_state)', 'context': '        self.var_list.listen(""d"", change_var_state)\n        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1200, 'coloffset': 8, 'linematch': 'self.var_list.listen(""c"", change_var_state)', 'context': '        self.var_list.listen(""t"", change_var_state)\n        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1201, 'coloffset': 8, 'linematch': 'self.var_list.listen(""H"", change_var_state)', 'context': '        self.var_list.listen(""r"", change_var_state)\n        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1202, 'coloffset': 8, 'linematch': 'self.var_list.listen(""@"", change_var_state)', 'context': '        self.var_list.listen(""s"", change_var_state)\n        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1203, 'coloffset': 8, 'linematch': 'self.var_list.listen(""*"", change_var_state)', 'context': '        self.var_list.listen(""i"", change_var_state)\n        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1204, 'coloffset': 8, 'linematch': 'self.var_list.listen(""w"", change_var_state)', 'context': '        self.var_list.listen(""c"", change_var_state)\n        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1205, 'coloffset': 8, 'linematch': 'self.var_list.listen(""m"", change_var_state)', 'context': '        self.var_list.listen(""H"", change_var_state)\n        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1206, 'coloffset': 8, 'linematch': 'self.var_list.listen(""enter"", change_var_state)', 'context': '        self.var_list.listen(""@"", change_var_state)\n        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1207, 'coloffset': 8, 'linematch': 'self.var_list.listen(""e"", edit_inspector_detail)', 'context': '        self.var_list.listen(""*"", change_var_state)\n        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)\n\n        self.var_list.listen(""["", partial(change_rhs_box, ""variables"", 0, -1))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1208, 'coloffset': 8, 'linematch': 'self.var_list.listen(""n"", insert_watch)', 'context': '        self.var_list.listen(""w"", change_var_state)\n        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)\n\n        self.var_list.listen(""["", partial(change_rhs_box, ""variables"", 0, -1))\n        self.var_list.listen(""]"", partial(change_rhs_box, ""variables"", 0, 1))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1209, 'coloffset': 8, 'linematch': 'self.var_list.listen(""insert"", insert_watch)', 'context': '        self.var_list.listen(""m"", change_var_state)\n        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)\n\n        self.var_list.listen(""["", partial(change_rhs_box, ""variables"", 0, -1))\n        self.var_list.listen(""]"", partial(change_rhs_box, ""variables"", 0, 1))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1210, 'coloffset': 8, 'linematch': 'self.var_list.listen(""delete"", change_var_state)', 'context': '        self.var_list.listen(""enter"", change_var_state)\n        self.var_list.listen(""e"", edit_inspector_detail)\n        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)\n\n        self.var_list.listen(""["", partial(change_rhs_box, ""variables"", 0, -1))\n        self.var_list.listen(""]"", partial(change_rhs_box, ""variables"", 0, 1))\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1212, 'coloffset': 8, 'linematch': 'self.var_list.listen(""["", partial(change_rhs_box, ""variables"", 0, -1))', 'context': '        self.var_list.listen(""n"", insert_watch)\n        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)\n\n        self.var_list.listen(""["", partial(change_rhs_box, ""variables"", 0, -1))\n        self.var_list.listen(""]"", partial(change_rhs_box, ""variables"", 0, 1))\n\n        # }}}\n\n        # {{{ stack listeners', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1213, 'coloffset': 8, 'linematch': 'self.var_list.listen(""]"", partial(change_rhs_box, ""variables"", 0, 1))', 'context': '        self.var_list.listen(""insert"", insert_watch)\n        self.var_list.listen(""delete"", change_var_state)\n\n        self.var_list.listen(""["", partial(change_rhs_box, ""variables"", 0, -1))\n        self.var_list.listen(""]"", partial(change_rhs_box, ""variables"", 0, 1))\n\n        # }}}\n\n        # {{{ stack listeners\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1219, 'coloffset': 8, 'linematch': 'def examine_frame(w, size, key):', 'context': '        # }}}\n\n        # {{{ stack listeners\n\n        def examine_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1220, 'coloffset': 12, 'linematch': 'pos = self.stack_list._w.focus_position', 'context': '\n        # {{{ stack listeners\n\n        def examine_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n\n        def open_file_editor(file_name, line_number):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1221, 'coloffset': 12, 'linematch': 'self.debugger.set_frame_index(self.translate_ui_stack_index(pos))', 'context': '        # {{{ stack listeners\n\n        def examine_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n\n        def open_file_editor(file_name, line_number):\n            file_changed = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1223, 'coloffset': 8, 'linematch': 'self.stack_list.listen(""enter"", examine_frame)', 'context': '        def examine_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n\n        def open_file_editor(file_name, line_number):\n            file_changed = False\n\n            try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1225, 'coloffset': 8, 'linematch': 'def open_file_editor(file_name, line_number):', 'context': '            self.debugger.set_frame_index(self.translate_ui_stack_index(pos))\n\n        self.stack_list.listen(""enter"", examine_frame)\n\n        def open_file_editor(file_name, line_number):\n            file_changed = False\n\n            try:\n                original_modification_time = os.path.getmtime(file_name)\n                with StoppedScreen(self.screen):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1226, 'coloffset': 12, 'linematch': 'file_changed = False', 'context': '\n        self.stack_list.listen(""enter"", examine_frame)\n\n        def open_file_editor(file_name, line_number):\n            file_changed = False\n\n            try:\n                original_modification_time = os.path.getmtime(file_name)\n                with StoppedScreen(self.screen):\n                    filename_edited = self.debugger.open_file_to_edit(file_name,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1228, 'coloffset': 12, 'linematch': 'try:', 'context': '\n        def open_file_editor(file_name, line_number):\n            file_changed = False\n\n            try:\n                original_modification_time = os.path.getmtime(file_name)\n                with StoppedScreen(self.screen):\n                    filename_edited = self.debugger.open_file_to_edit(file_name,\n                                                                      line_number)\n                new_modification_time = os.path.getmtime(file_name)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1242, 'coloffset': 12, 'linematch': 'if file_changed:', 'context': '                             ""\\n\\n%s"" % ("""".join(format_exception(*sys.exc_info()))),\n                    title=""File Edit Error"")\n                return\n\n            if file_changed:\n                self.message(""File is changed, but the execution is continued with""\n                             "" the \'old\' codebase.\\n""\n                             f""Changed file: {filename_edited}\\n\\n""\n                             ""Please quit and restart to see changes"",\n                             title=""File is changed"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1249, 'coloffset': 8, 'linematch': 'def open_editor_on_stack_frame(w, size, key):', 'context': '                             f""Changed file: {filename_edited}\\n\\n""\n                             ""Please quit and restart to see changes"",\n                             title=""File is changed"")\n\n        def open_editor_on_stack_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            index = self.translate_ui_stack_index(pos)\n\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1250, 'coloffset': 12, 'linematch': 'pos = self.stack_list._w.focus_position', 'context': '                             ""Please quit and restart to see changes"",\n                             title=""File is changed"")\n\n        def open_editor_on_stack_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            index = self.translate_ui_stack_index(pos)\n\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1251, 'coloffset': 12, 'linematch': 'index = self.translate_ui_stack_index(pos)', 'context': '                             title=""File is changed"")\n\n        def open_editor_on_stack_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            index = self.translate_ui_stack_index(pos)\n\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename\n\n            open_file_editor(file_name, line_number)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1253, 'coloffset': 12, 'linematch': 'curframe, line_number = self.debugger.stack[index]', 'context': '        def open_editor_on_stack_frame(w, size, key):\n            pos = self.stack_list._w.focus_position\n            index = self.translate_ui_stack_index(pos)\n\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename\n\n            open_file_editor(file_name, line_number)\n\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1254, 'coloffset': 12, 'linematch': 'file_name = curframe.f_code.co_filename', 'context': '            pos = self.stack_list._w.focus_position\n            index = self.translate_ui_stack_index(pos)\n\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename\n\n            open_file_editor(file_name, line_number)\n\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1256, 'coloffset': 12, 'linematch': 'open_file_editor(file_name, line_number)', 'context': '\n            curframe, line_number = self.debugger.stack[index]\n            file_name = curframe.f_code.co_filename\n\n            open_file_editor(file_name, line_number)\n\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)\n\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1258, 'coloffset': 8, 'linematch': 'self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)', 'context': '            file_name = curframe.f_code.co_filename\n\n            open_file_editor(file_name, line_number)\n\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)\n\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1260, 'coloffset': 8, 'linematch': 'def move_stack_top(w, size, key):', 'context': '            open_file_editor(file_name, line_number)\n\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)\n\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1261, 'coloffset': 12, 'linematch': 'self.debugger.set_frame_index(len(self.debugger.stack)-1)', 'context': '\n        self.stack_list.listen(""ctrl e"", open_editor_on_stack_frame)\n\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1263, 'coloffset': 8, 'linematch': 'def move_stack_up(w, size, key):', 'context': '\n        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1264, 'coloffset': 12, 'linematch': 'self.debugger.move_up_frame()', 'context': '        def move_stack_top(w, size, key):\n            self.debugger.set_frame_index(len(self.debugger.stack)-1)\n\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1266, 'coloffset': 8, 'linematch': 'def move_stack_down(w, size, key):', 'context': '\n        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1267, 'coloffset': 12, 'linematch': 'self.debugger.move_down_frame()', 'context': '        def move_stack_up(w, size, key):\n            self.debugger.move_up_frame()\n\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1269, 'coloffset': 8, 'linematch': 'self.stack_list.listen(""H"", move_stack_top)', 'context': '\n        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)\n\n        self.stack_list.listen(""["", partial(change_rhs_box, ""stack"", 1, -1))\n        self.stack_list.listen(""]"", partial(change_rhs_box, ""stack"", 1, 1))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1270, 'coloffset': 8, 'linematch': 'self.stack_list.listen(""u"", move_stack_up)', 'context': '        def move_stack_down(w, size, key):\n            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)\n\n        self.stack_list.listen(""["", partial(change_rhs_box, ""stack"", 1, -1))\n        self.stack_list.listen(""]"", partial(change_rhs_box, ""stack"", 1, 1))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1271, 'coloffset': 8, 'linematch': 'self.stack_list.listen(""d"", move_stack_down)', 'context': '            self.debugger.move_down_frame()\n\n        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)\n\n        self.stack_list.listen(""["", partial(change_rhs_box, ""stack"", 1, -1))\n        self.stack_list.listen(""]"", partial(change_rhs_box, ""stack"", 1, 1))\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1273, 'coloffset': 8, 'linematch': 'self.stack_list.listen(""["", partial(change_rhs_box, ""stack"", 1, -1))', 'context': '        self.stack_list.listen(""H"", move_stack_top)\n        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)\n\n        self.stack_list.listen(""["", partial(change_rhs_box, ""stack"", 1, -1))\n        self.stack_list.listen(""]"", partial(change_rhs_box, ""stack"", 1, 1))\n\n        # }}}\n\n        # {{{ breakpoint listeners', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1274, 'coloffset': 8, 'linematch': 'self.stack_list.listen(""]"", partial(change_rhs_box, ""stack"", 1, 1))', 'context': '        self.stack_list.listen(""u"", move_stack_up)\n        self.stack_list.listen(""d"", move_stack_down)\n\n        self.stack_list.listen(""["", partial(change_rhs_box, ""stack"", 1, -1))\n        self.stack_list.listen(""]"", partial(change_rhs_box, ""stack"", 1, 1))\n\n        # }}}\n\n        # {{{ breakpoint listeners\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1280, 'coloffset': 8, 'linematch': 'def set_breakpoint_source(bp):', 'context': '        # }}}\n\n        # {{{ breakpoint listeners\n\n        def set_breakpoint_source(bp):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n            if (bp.file\n                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1281, 'coloffset': 12, 'linematch': 'bp_source_identifier = \\', 'context': '\n        # {{{ breakpoint listeners\n\n        def set_breakpoint_source(bp):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n            if (bp.file\n                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):\n                self.source[bp.line-1].set_breakpoint(bp.enabled)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1283, 'coloffset': 12, 'linematch': 'if (bp.file', 'context': '\n        def set_breakpoint_source(bp):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n            if (bp.file\n                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):\n                self.source[bp.line-1].set_breakpoint(bp.enabled)\n\n        def save_breakpoints(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1288, 'coloffset': 8, 'linematch': 'def save_breakpoints(w, size, key):', 'context': '                    and bp_source_identifier == bp.file\n                    and bp.line-1 < len(self.source)):\n                self.source[bp.line-1].set_breakpoint(bp.enabled)\n\n        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1289, 'coloffset': 12, 'linematch': 'self.debugger.save_breakpoints()', 'context': '                    and bp.line-1 < len(self.source)):\n                self.source[bp.line-1].set_breakpoint(bp.enabled)\n\n        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:\n                pos = self.bp_list._w.focus_position', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1291, 'coloffset': 8, 'linematch': 'def handle_delete_breakpoint(w, size, key):', 'context': '\n        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:\n                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1292, 'coloffset': 12, 'linematch': 'bp_list = self._get_bp_list()', 'context': '        def save_breakpoints(w, size, key):\n            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:\n                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1293, 'coloffset': 12, 'linematch': 'if bp_list:', 'context': '            self.debugger.save_breakpoints()\n\n        def handle_delete_breakpoint(w, size, key):\n            bp_list = self._get_bp_list()\n            if bp_list:\n                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1298, 'coloffset': 8, 'linematch': 'def delete_breakpoint(bp):', 'context': '                pos = self.bp_list._w.focus_position\n                bp = bp_list[pos]\n                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):\n            err = self.debugger.clear_break(bp.file, bp.line)\n            if err:\n                self.message(""Error clearing breakpoint:\\n"" + err)\n            else:\n                bp.enabled = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1299, 'coloffset': 12, 'linematch': 'err = self.debugger.clear_break(bp.file, bp.line)', 'context': '                bp = bp_list[pos]\n                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):\n            err = self.debugger.clear_break(bp.file, bp.line)\n            if err:\n                self.message(""Error clearing breakpoint:\\n"" + err)\n            else:\n                bp.enabled = False\n                self.update_breakpoints()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1300, 'coloffset': 12, 'linematch': 'if err:', 'context': '                delete_breakpoint(bp)\n\n        def delete_breakpoint(bp):\n            err = self.debugger.clear_break(bp.file, bp.line)\n            if err:\n                self.message(""Error clearing breakpoint:\\n"" + err)\n            else:\n                bp.enabled = False\n                self.update_breakpoints()\n                set_breakpoint_source(bp)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1307, 'coloffset': 8, 'linematch': 'def enable_disable_breakpoint(w, size, key):', 'context': '                bp.enabled = False\n                self.update_breakpoints()\n                set_breakpoint_source(bp)\n\n        def enable_disable_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1308, 'coloffset': 12, 'linematch': 'pos = self.bp_list._w.focus_position', 'context': '                self.update_breakpoints()\n                set_breakpoint_source(bp)\n\n        def enable_disable_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1309, 'coloffset': 12, 'linematch': 'bp_entry = self.bp_list._w.focus', 'context': '                set_breakpoint_source(bp)\n\n        def enable_disable_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled\n            self.update_breakpoints()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1310, 'coloffset': 12, 'linematch': 'if bp_entry is None:', 'context': '\n        def enable_disable_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1312, 'coloffset': 12, 'linematch': 'bp = self._get_bp_list()[pos]', 'context': '            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1313, 'coloffset': 12, 'linematch': 'bp.enabled = not bp.enabled', 'context': '            bp_entry = self.bp_list._w.focus\n            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1314, 'coloffset': 12, 'linematch': 'self.update_breakpoints()', 'context': '            if bp_entry is None:\n                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1315, 'coloffset': 12, 'linematch': 'set_breakpoint_source(bp)', 'context': '                return\n            bp = self._get_bp_list()[pos]\n            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1317, 'coloffset': 8, 'linematch': 'def examine_breakpoint(w, size, key):', 'context': '            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1318, 'coloffset': 12, 'linematch': 'pos = self.bp_list._w.focus_position', 'context': '            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1319, 'coloffset': 12, 'linematch': 'bp_entry = self.bp_list._w.focus', 'context': '            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return\n\n            bp = self._get_bp_list()[pos]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1321, 'coloffset': 12, 'linematch': 'if bp_entry is None:', 'context': '        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return\n\n            bp = self._get_bp_list()[pos]\n\n            if bp.cond is None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1324, 'coloffset': 12, 'linematch': 'bp = self._get_bp_list()[pos]', 'context': '\n            if bp_entry is None:\n                return\n\n            bp = self._get_bp_list()[pos]\n\n            if bp.cond is None:\n                cond = """"\n            else:\n                cond = str(bp.cond)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1326, 'coloffset': 12, 'linematch': 'if bp.cond is None:', 'context': '                return\n\n            bp = self._get_bp_list()[pos]\n\n            if bp.cond is None:\n                cond = """"\n            else:\n                cond = str(bp.cond)\n\n            enabled_checkbox = urwid.CheckBox(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1331, 'coloffset': 12, 'linematch': 'enabled_checkbox = urwid.CheckBox(', 'context': '                cond = """"\n            else:\n                cond = str(bp.cond)\n\n            enabled_checkbox = urwid.CheckBox(\n                    ""Enabled"", bp.enabled)\n            cond_edit = urwid.Edit([\n                (""label"", ""Condition:               "")\n                ], cond)\n            ign_count_edit = urwid.IntEdit([', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1333, 'coloffset': 12, 'linematch': 'cond_edit = urwid.Edit([', 'context': '                cond = str(bp.cond)\n\n            enabled_checkbox = urwid.CheckBox(\n                    ""Enabled"", bp.enabled)\n            cond_edit = urwid.Edit([\n                (""label"", ""Condition:               "")\n                ], cond)\n            ign_count_edit = urwid.IntEdit([\n                (""label"", ""Ignore the next N times: "")\n                ], bp.ignore)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1336, 'coloffset': 12, 'linematch': 'ign_count_edit = urwid.IntEdit([', 'context': '                    ""Enabled"", bp.enabled)\n            cond_edit = urwid.Edit([\n                (""label"", ""Condition:               "")\n                ], cond)\n            ign_count_edit = urwid.IntEdit([\n                (""label"", ""Ignore the next N times: "")\n                ], bp.ignore)\n\n            lb = urwid.ListBox(urwid.SimpleListWalker([\n                labelled_value(""File: "", bp.file),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1340, 'coloffset': 12, 'linematch': 'lb = urwid.ListBox(urwid.SimpleListWalker([', 'context': '            ign_count_edit = urwid.IntEdit([\n                (""label"", ""Ignore the next N times: "")\n                ], bp.ignore)\n\n            lb = urwid.ListBox(urwid.SimpleListWalker([\n                labelled_value(""File: "", bp.file),\n                labelled_value(""Line: "", bp.line),\n                labelled_value(""Hits: "", bp.hits),\n                urwid.Text(""""),\n                enabled_checkbox,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1350, 'coloffset': 12, 'linematch': 'result = self.dialog(lb, [', 'context': '                urwid.AttrMap(cond_edit, ""input"", ""focused input""),\n                urwid.AttrMap(ign_count_edit, ""input"", ""focused input""),\n                ]))\n\n            result = self.dialog(lb, [\n                (""OK"", True),\n                (""Cancel"", False),\n                None,\n                (""Delete"", ""del""),\n                (""Location"", ""loc""),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1358, 'coloffset': 12, 'linematch': 'if result is True:', 'context': '                (""Delete"", ""del""),\n                (""Location"", ""loc""),\n                ], title=""Edit Breakpoint"")\n\n            if result is True:\n                bp.enabled = enabled_checkbox.get_state()\n                bp.ignore = int(ign_count_edit.value())\n                cond = cond_edit.get_edit_text()\n                if cond:\n                    bp.cond = cond', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1373, 'coloffset': 12, 'linematch': 'self.update_breakpoints()', 'context': '                self.columns.focus_position = 0\n            elif result == ""del"":\n                delete_breakpoint(bp)\n\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1374, 'coloffset': 12, 'linematch': 'set_breakpoint_source(bp)', 'context': '            elif result == ""del"":\n                delete_breakpoint(bp)\n\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1376, 'coloffset': 8, 'linematch': 'def show_breakpoint(w, size, key):', 'context': '\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is not None:\n                bp = self._get_bp_list()[pos]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1377, 'coloffset': 12, 'linematch': 'pos = self.bp_list._w.focus_position', 'context': '            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is not None:\n                bp = self._get_bp_list()[pos]\n                self.show_line(bp.line,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1378, 'coloffset': 12, 'linematch': 'bp_entry = self.bp_list._w.focus', 'context': '            set_breakpoint_source(bp)\n\n        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is not None:\n                bp = self._get_bp_list()[pos]\n                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1380, 'coloffset': 12, 'linematch': 'if bp_entry is not None:', 'context': '        def show_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is not None:\n                bp = self._get_bp_list()[pos]\n                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1386, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""enter"", show_breakpoint)', 'context': '                self.show_line(bp.line,\n                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n\n        self.bp_list.listen(""enter"", show_breakpoint)\n        self.bp_list.listen(""d"", handle_delete_breakpoint)\n        self.bp_list.listen(""s"", save_breakpoints)\n        self.bp_list.listen(""e"", examine_breakpoint)\n        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1387, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""d"", handle_delete_breakpoint)', 'context': '                        FileSourceCodeProvider(self.debugger, bp.file))\n                self.columns.focus_position = 0\n\n        self.bp_list.listen(""enter"", show_breakpoint)\n        self.bp_list.listen(""d"", handle_delete_breakpoint)\n        self.bp_list.listen(""s"", save_breakpoints)\n        self.bp_list.listen(""e"", examine_breakpoint)\n        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1388, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""s"", save_breakpoints)', 'context': '                self.columns.focus_position = 0\n\n        self.bp_list.listen(""enter"", show_breakpoint)\n        self.bp_list.listen(""d"", handle_delete_breakpoint)\n        self.bp_list.listen(""s"", save_breakpoints)\n        self.bp_list.listen(""e"", examine_breakpoint)\n        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)\n\n        self.bp_list.listen(""["", partial(change_rhs_box, ""breakpoints"", 2, -1))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1389, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""e"", examine_breakpoint)', 'context': '\n        self.bp_list.listen(""enter"", show_breakpoint)\n        self.bp_list.listen(""d"", handle_delete_breakpoint)\n        self.bp_list.listen(""s"", save_breakpoints)\n        self.bp_list.listen(""e"", examine_breakpoint)\n        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)\n\n        self.bp_list.listen(""["", partial(change_rhs_box, ""breakpoints"", 2, -1))\n        self.bp_list.listen(""]"", partial(change_rhs_box, ""breakpoints"", 2, 1))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1390, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""b"", enable_disable_breakpoint)', 'context': '        self.bp_list.listen(""enter"", show_breakpoint)\n        self.bp_list.listen(""d"", handle_delete_breakpoint)\n        self.bp_list.listen(""s"", save_breakpoints)\n        self.bp_list.listen(""e"", examine_breakpoint)\n        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)\n\n        self.bp_list.listen(""["", partial(change_rhs_box, ""breakpoints"", 2, -1))\n        self.bp_list.listen(""]"", partial(change_rhs_box, ""breakpoints"", 2, 1))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1391, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""H"", move_stack_top)', 'context': '        self.bp_list.listen(""d"", handle_delete_breakpoint)\n        self.bp_list.listen(""s"", save_breakpoints)\n        self.bp_list.listen(""e"", examine_breakpoint)\n        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)\n\n        self.bp_list.listen(""["", partial(change_rhs_box, ""breakpoints"", 2, -1))\n        self.bp_list.listen(""]"", partial(change_rhs_box, ""breakpoints"", 2, 1))\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1393, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""["", partial(change_rhs_box, ""breakpoints"", 2, -1))', 'context': '        self.bp_list.listen(""e"", examine_breakpoint)\n        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)\n\n        self.bp_list.listen(""["", partial(change_rhs_box, ""breakpoints"", 2, -1))\n        self.bp_list.listen(""]"", partial(change_rhs_box, ""breakpoints"", 2, 1))\n\n        # }}}\n\n        # {{{ source listeners', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1394, 'coloffset': 8, 'linematch': 'self.bp_list.listen(""]"", partial(change_rhs_box, ""breakpoints"", 2, 1))', 'context': '        self.bp_list.listen(""b"", enable_disable_breakpoint)\n        self.bp_list.listen(""H"", move_stack_top)\n\n        self.bp_list.listen(""["", partial(change_rhs_box, ""breakpoints"", 2, -1))\n        self.bp_list.listen(""]"", partial(change_rhs_box, ""breakpoints"", 2, 1))\n\n        # }}}\n\n        # {{{ source listeners\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1400, 'coloffset': 8, 'linematch': 'def end():', 'context': '        # }}}\n\n        # {{{ source listeners\n\n        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1401, 'coloffset': 12, 'linematch': 'self.debugger.save_breakpoints()', 'context': '\n        # {{{ source listeners\n\n        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1402, 'coloffset': 12, 'linematch': 'self.quit_event_loop = True', 'context': '        # {{{ source listeners\n\n        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1404, 'coloffset': 8, 'linematch': 'def next_line(w, size, key):', 'context': '        def end():\n            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1405, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '            self.debugger.save_breakpoints()\n            self.quit_event_loop = True\n\n        def next_line(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1411, 'coloffset': 8, 'linematch': 'def step(w, size, key):', 'context': '            else:\n                self.debugger.set_next(self.debugger.curframe)\n                end()\n\n        def step(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_step()\n                end()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1412, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_next(self.debugger.curframe)\n                end()\n\n        def step(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_step()\n                end()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1418, 'coloffset': 8, 'linematch': 'def finish(w, size, key):', 'context': '            else:\n                self.debugger.set_step()\n                end()\n\n        def finish(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1419, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_step()\n                end()\n\n        def finish(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1425, 'coloffset': 8, 'linematch': 'def cont(w, size, key):', 'context': '            else:\n                self.debugger.set_return(self.debugger.curframe)\n                end()\n\n        def cont(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_continue()\n                end()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1426, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_return(self.debugger.curframe)\n                end()\n\n        def cont(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                self.debugger.set_continue()\n                end()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1432, 'coloffset': 8, 'linematch': 'def run_to_cursor(w, size, key):', 'context': '            else:\n                self.debugger.set_continue()\n                end()\n\n        def run_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1433, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                self.debugger.set_continue()\n                end()\n\n        def run_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1466, 'coloffset': 8, 'linematch': 'def jump_to_cursor(w, size, key):', 'context': '\n                    self.debugger.set_continue()\n                    end()\n\n        def jump_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1467, 'coloffset': 12, 'linematch': 'if self.debugger.post_mortem:', 'context': '                    self.debugger.set_continue()\n                    end()\n\n        def jump_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1507, 'coloffset': 8, 'linematch': 'def go_to_line(w, size, key):', 'context': '                    # Update UI. end() will run past the line\n                    self.set_current_line(lineno, self.source_code_provider)\n                    self.update_stack()\n\n        def go_to_line(w, size, key):\n            line = self.source.focus\n\n            lineno_edit = urwid.IntEdit([\n                (""label"", ""Go to Line   :"")\n                ], None)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1508, 'coloffset': 12, 'linematch': 'line = self.source.focus', 'context': '                    self.set_current_line(lineno, self.source_code_provider)\n                    self.update_stack()\n\n        def go_to_line(w, size, key):\n            line = self.source.focus\n\n            lineno_edit = urwid.IntEdit([\n                (""label"", ""Go to Line   :"")\n                ], None)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1510, 'coloffset': 12, 'linematch': 'lineno_edit = urwid.IntEdit([', 'context': '\n        def go_to_line(w, size, key):\n            line = self.source.focus\n\n            lineno_edit = urwid.IntEdit([\n                (""label"", ""Go to Line   :"")\n                ], None)\n\n            if self.dialog(\n                    urwid.ListBox(urwid.SimpleListWalker([', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1514, 'coloffset': 12, 'linematch': 'if self.dialog(', 'context': '            lineno_edit = urwid.IntEdit([\n                (""label"", ""Go to Line   :"")\n                ], None)\n\n            if self.dialog(\n                    urwid.ListBox(urwid.SimpleListWalker([\n                        labelled_value(""File :"",\n                            self.source_code_provider.identifier()),\n                        labelled_value(""Current Line :"", line+1),\n                        urwid.AttrMap(lineno_edit, ""input"", ""focused input"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1531, 'coloffset': 8, 'linematch': 'def scroll_left(w, size, key):', 'context': '                if value:\n                    lineno = min(max(0, int(value)-1), len(self.source)-1)\n                    self.source_list.focus_position = lineno\n\n        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(\n                    0,\n                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1532, 'coloffset': 12, 'linematch': 'self.source_hscroll_start = max(', 'context': '                    lineno = min(max(0, int(value)-1), len(self.source)-1)\n                    self.source_list.focus_position = lineno\n\n        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(\n                    0,\n                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1535, 'coloffset': 12, 'linematch': 'for sl in self.source:', 'context': '        def scroll_left(w, size, key):\n            self.source_hscroll_start = max(\n                    0,\n                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()\n\n        def scroll_right(w, size, key):\n            self.source_hscroll_start += 4\n            for sl in self.source:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1538, 'coloffset': 8, 'linematch': 'def scroll_right(w, size, key):', 'context': '                    self.source_hscroll_start - 4)\n            for sl in self.source:\n                sl._invalidate()\n\n        def scroll_right(w, size, key):\n            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1539, 'coloffset': 12, 'linematch': 'self.source_hscroll_start += 4', 'context': '            for sl in self.source:\n                sl._invalidate()\n\n        def scroll_right(w, size, key):\n            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):\n            self.search_controller.open_search_ui()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1540, 'coloffset': 12, 'linematch': 'for sl in self.source:', 'context': '                sl._invalidate()\n\n        def scroll_right(w, size, key):\n            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1543, 'coloffset': 8, 'linematch': 'def search(w, size, key):', 'context': '            self.source_hscroll_start += 4\n            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1544, 'coloffset': 12, 'linematch': 'self.search_controller.open_search_ui()', 'context': '            for sl in self.source:\n                sl._invalidate()\n\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1546, 'coloffset': 8, 'linematch': 'def search_next(w, size, key):', 'context': '\n        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1547, 'coloffset': 12, 'linematch': 'self.search_controller.perform_search(dir=1, update_search_start=True)', 'context': '        def search(w, size, key):\n            self.search_controller.open_search_ui()\n\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1549, 'coloffset': 8, 'linematch': 'def search_previous(w, size, key):', 'context': '\n        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1550, 'coloffset': 12, 'linematch': 'self.search_controller.perform_search(dir=-1, update_search_start=True)', 'context': '        def search_next(w, size, key):\n            self.search_controller.perform_search(dir=1, update_search_start=True)\n\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1552, 'coloffset': 8, 'linematch': 'def toggle_breakpoint(w, size, key):', 'context': '\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1553, 'coloffset': 12, 'linematch': 'bp_source_identifier = \\', 'context': '        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position\n                sline = self.source[pos]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1556, 'coloffset': 12, 'linematch': 'if bp_source_identifier:', 'context': '        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position\n                sline = self.source[pos]\n                lineno = pos+1\n\n                existing_breaks = self.debugger.get_breaks(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1621, 'coloffset': 12, 'linematch': 'import sys', 'context': '                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1622, 'coloffset': 12, 'linematch': 'from os.path import splitext', 'context': '                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1624, 'coloffset': 12, 'linematch': 'def mod_exists(mod):', 'context': '        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1625, 'coloffset': 16, 'linematch': 'if not hasattr(mod, ""__file__""):', 'context': '            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1627, 'coloffset': 16, 'linematch': 'if mod.__file__ is None:', 'context': '\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__\n\n                base, ext = splitext(filename)\n                ext = ext.lower()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1629, 'coloffset': 16, 'linematch': 'filename = mod.__file__', 'context': '                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__\n\n                base, ext = splitext(filename)\n                ext = ext.lower()\n\n                from os.path import exists', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1631, 'coloffset': 16, 'linematch': 'base, ext = splitext(filename)', 'context': '                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__\n\n                base, ext = splitext(filename)\n                ext = ext.lower()\n\n                from os.path import exists\n\n                if ext == "".pyc"":', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1632, 'coloffset': 16, 'linematch': 'ext = ext.lower()', 'context': '                    return False\n                filename = mod.__file__\n\n                base, ext = splitext(filename)\n                ext = ext.lower()\n\n                from os.path import exists\n\n                if ext == "".pyc"":\n                    return exists(base+"".py"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1634, 'coloffset': 16, 'linematch': 'from os.path import exists', 'context': '\n                base, ext = splitext(filename)\n                ext = ext.lower()\n\n                from os.path import exists\n\n                if ext == "".pyc"":\n                    return exists(base+"".py"")\n                else:\n                    return ext == "".py""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1636, 'coloffset': 16, 'linematch': 'if ext == "".pyc"":', 'context': '                ext = ext.lower()\n\n                from os.path import exists\n\n                if ext == "".pyc"":\n                    return exists(base+"".py"")\n                else:\n                    return ext == "".py""\n\n            new_mod_text = SelectableText(""-- update me --"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1641, 'coloffset': 12, 'linematch': 'new_mod_text = SelectableText(""-- update me --"")', 'context': '                    return exists(base+"".py"")\n                else:\n                    return ext == "".py""\n\n            new_mod_text = SelectableText(""-- update me --"")\n            new_mod_entry = urwid.AttrMap(new_mod_text,\n                    None, ""focused selectable"")\n\n            def build_filtered_mod_list(filt_string=""""):\n                modules = sorted(name', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1642, 'coloffset': 12, 'linematch': 'new_mod_entry = urwid.AttrMap(new_mod_text,', 'context': '                else:\n                    return ext == "".py""\n\n            new_mod_text = SelectableText(""-- update me --"")\n            new_mod_entry = urwid.AttrMap(new_mod_text,\n                    None, ""focused selectable"")\n\n            def build_filtered_mod_list(filt_string=""""):\n                modules = sorted(name\n                        # mod_exists may change the size of sys.modules,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1645, 'coloffset': 12, 'linematch': 'def build_filtered_mod_list(filt_string=""""):', 'context': '            new_mod_text = SelectableText(""-- update me --"")\n            new_mod_entry = urwid.AttrMap(new_mod_text,\n                    None, ""focused selectable"")\n\n            def build_filtered_mod_list(filt_string=""""):\n                modules = sorted(name\n                        # mod_exists may change the size of sys.modules,\n                        # causing this to crash. Copy to a list.\n                        for name, mod in list(sys.modules.items())\n                        if mod_exists(mod))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1646, 'coloffset': 16, 'linematch': 'modules = sorted(name', 'context': '            new_mod_entry = urwid.AttrMap(new_mod_text,\n                    None, ""focused selectable"")\n\n            def build_filtered_mod_list(filt_string=""""):\n                modules = sorted(name\n                        # mod_exists may change the size of sys.modules,\n                        # causing this to crash. Copy to a list.\n                        for name, mod in list(sys.modules.items())\n                        if mod_exists(mod))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1652, 'coloffset': 16, 'linematch': 'result = [urwid.AttrMap(SelectableText(mod),', 'context': '                        # causing this to crash. Copy to a list.\n                        for name, mod in list(sys.modules.items())\n                        if mod_exists(mod))\n\n                result = [urwid.AttrMap(SelectableText(mod),\n                        None, ""focused selectable"")\n                        for mod in modules if filt_string in mod]\n                new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)\n                result.append(new_mod_entry)\n                return result', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1655, 'coloffset': 16, 'linematch': 'new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)', 'context': '\n                result = [urwid.AttrMap(SelectableText(mod),\n                        None, ""focused selectable"")\n                        for mod in modules if filt_string in mod]\n                new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)\n                result.append(new_mod_entry)\n                return result\n\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1656, 'coloffset': 16, 'linematch': 'result.append(new_mod_entry)', 'context': '                result = [urwid.AttrMap(SelectableText(mod),\n                        None, ""focused selectable"")\n                        for mod in modules if filt_string in mod]\n                new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)\n                result.append(new_mod_entry)\n                return result\n\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1657, 'coloffset': 16, 'linematch': 'return result', 'context': '                        None, ""focused selectable"")\n                        for mod in modules if filt_string in mod]\n                new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)\n                result.append(new_mod_entry)\n                return result\n\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1659, 'coloffset': 12, 'linematch': 'def show_mod(mod):', 'context': '                new_mod_text.set_text(""<<< IMPORT MODULE \'%s\' >>>"" % filt_string)\n                result.append(new_mod_entry)\n                return result\n\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)\n                if ext == "".pyc"":\n                    ext = "".py""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1660, 'coloffset': 16, 'linematch': 'filename = self.debugger.canonic(mod.__file__)', 'context': '                result.append(new_mod_entry)\n                return result\n\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)\n                if ext == "".pyc"":\n                    ext = "".py""\n                    filename = base+"".py""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1662, 'coloffset': 16, 'linematch': 'base, ext = splitext(filename)', 'context': '\n            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)\n                if ext == "".pyc"":\n                    ext = "".py""\n                    filename = base+"".py""\n\n                self.set_source_code_provider(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1663, 'coloffset': 16, 'linematch': 'if ext == "".pyc"":', 'context': '            def show_mod(mod):\n                filename = self.debugger.canonic(mod.__file__)\n\n                base, ext = splitext(filename)\n                if ext == "".pyc"":\n                    ext = "".py""\n                    filename = base+"".py""\n\n                self.set_source_code_provider(\n                        FileSourceCodeProvider(self.debugger, filename))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1667, 'coloffset': 16, 'linematch': 'self.set_source_code_provider(', 'context': '                if ext == "".pyc"":\n                    ext = "".py""\n                    filename = base+"".py""\n\n                self.set_source_code_provider(\n                        FileSourceCodeProvider(self.debugger, filename))\n                self.source_list.set_focus(0)\n\n            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1669, 'coloffset': 16, 'linematch': 'self.source_list.set_focus(0)', 'context': '                    filename = base+"".py""\n\n                self.set_source_code_provider(\n                        FileSourceCodeProvider(self.debugger, filename))\n                self.source_list.set_focus(0)\n\n            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1671, 'coloffset': 12, 'linematch': 'class FilterEdit(urwid.Edit):', 'context': '                self.set_source_code_provider(\n                        FileSourceCodeProvider(self.debugger, filename))\n                self.source_list.set_focus(0)\n\n            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n\n                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1673, 'coloffset': 20, 'linematch': 'result = urwid.Edit.keypress(self, size, key)', 'context': '                self.source_list.set_focus(0)\n\n            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n\n                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(\n                                self.get_edit_text())\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1675, 'coloffset': 20, 'linematch': 'if result is None:', 'context': '            class FilterEdit(urwid.Edit):\n                def keypress(self, size, key):\n                    result = urwid.Edit.keypress(self, size, key)\n\n                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(\n                                self.get_edit_text())\n\n                    return result\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1679, 'coloffset': 20, 'linematch': 'return result', 'context': '                    if result is None:\n                        mod_list[:] = build_filtered_mod_list(\n                                self.get_edit_text())\n\n                    return result\n\n            filt_edit = FilterEdit([(""label"", ""Filter: "")],\n                    self.last_module_filter)\n\n            mod_list = urwid.SimpleListWalker(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1681, 'coloffset': 12, 'linematch': 'filt_edit = FilterEdit([(""label"", ""Filter: "")],', 'context': '                                self.get_edit_text())\n\n                    return result\n\n            filt_edit = FilterEdit([(""label"", ""Filter: "")],\n                    self.last_module_filter)\n\n            mod_list = urwid.SimpleListWalker(\n                    build_filtered_mod_list(filt_edit.get_edit_text()))\n            lb = urwid.ListBox(mod_list)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1684, 'coloffset': 12, 'linematch': 'mod_list = urwid.SimpleListWalker(', 'context': '\n            filt_edit = FilterEdit([(""label"", ""Filter: "")],\n                    self.last_module_filter)\n\n            mod_list = urwid.SimpleListWalker(\n                    build_filtered_mod_list(filt_edit.get_edit_text()))\n            lb = urwid.ListBox(mod_list)\n\n            w = urwid.Pile([\n                (urwid.FLOW, urwid.AttrMap(filt_edit, ""input"", ""focused input"")),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1686, 'coloffset': 12, 'linematch': 'lb = urwid.ListBox(mod_list)', 'context': '                    self.last_module_filter)\n\n            mod_list = urwid.SimpleListWalker(\n                    build_filtered_mod_list(filt_edit.get_edit_text()))\n            lb = urwid.ListBox(mod_list)\n\n            w = urwid.Pile([\n                (urwid.FLOW, urwid.AttrMap(filt_edit, ""input"", ""focused input"")),\n                (urwid.FIXED, 1, urwid.SolidFill()),\n                urwid.AttrMap(lb, ""selectable"")])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1688, 'coloffset': 12, 'linematch': 'w = urwid.Pile([', 'context': '            mod_list = urwid.SimpleListWalker(\n                    build_filtered_mod_list(filt_edit.get_edit_text()))\n            lb = urwid.ListBox(mod_list)\n\n            w = urwid.Pile([\n                (urwid.FLOW, urwid.AttrMap(filt_edit, ""input"", ""focused input"")),\n                (urwid.FIXED, 1, urwid.SolidFill()),\n                urwid.AttrMap(lb, ""selectable"")])\n\n            while True:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1693, 'coloffset': 12, 'linematch': 'while True:', 'context': '                (urwid.FLOW, urwid.AttrMap(filt_edit, ""input"", ""focused input"")),\n                (urwid.FIXED, 1, urwid.SolidFill()),\n                urwid.AttrMap(lb, ""selectable"")])\n\n            while True:\n                result = self.dialog(w, [\n                    (""OK"", True),\n                    (""Cancel"", False),\n                    (""Reload"", ""reload""),\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1746, 'coloffset': 8, 'linematch': 'def helpmain(w, size, key):', 'context': '                        pos = self.stack_list._w.focus_position\n                        self.debugger.set_frame_index(\n                                self.translate_ui_stack_index(pos))\n\n        def helpmain(w, size, key):\n            help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)\n\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1747, 'coloffset': 12, 'linematch': 'help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)', 'context': '                        self.debugger.set_frame_index(\n                                self.translate_ui_stack_index(pos))\n\n        def helpmain(w, size, key):\n            help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)\n\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1749, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""n"", next_line)', 'context': '\n        def helpmain(w, size, key):\n            help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)\n\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)\n        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1750, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""s"", step)', 'context': '        def helpmain(w, size, key):\n            help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)\n\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)\n        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1751, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""f"", finish)', 'context': '            help(HELP_HEADER + HELP_MAIN + HELP_SIDE + HELP_LICENSE)\n\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)\n        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1752, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""r"", finish)', 'context': '\n        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)\n        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)\n\n        self.source_sigwrap.listen(""L"", go_to_line)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1753, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""c"", cont)', 'context': '        self.source_sigwrap.listen(""n"", next_line)\n        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)\n        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)\n\n        self.source_sigwrap.listen(""L"", go_to_line)\n        self.source_sigwrap.listen(""/"", search)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1754, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""t"", run_to_cursor)', 'context': '        self.source_sigwrap.listen(""s"", step)\n        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)\n        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)\n\n        self.source_sigwrap.listen(""L"", go_to_line)\n        self.source_sigwrap.listen(""/"", search)\n        self.source_sigwrap.listen("","", search_previous)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1755, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""J"", jump_to_cursor)', 'context': '        self.source_sigwrap.listen(""f"", finish)\n        self.source_sigwrap.listen(""r"", finish)\n        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)\n\n        self.source_sigwrap.listen(""L"", go_to_line)\n        self.source_sigwrap.listen(""/"", search)\n        self.source_sigwrap.listen("","", search_previous)\n        self.source_sigwrap.listen(""."", search_next)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1757, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""L"", go_to_line)', 'context': '        self.source_sigwrap.listen(""c"", cont)\n        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)\n\n        self.source_sigwrap.listen(""L"", go_to_line)\n        self.source_sigwrap.listen(""/"", search)\n        self.source_sigwrap.listen("","", search_previous)\n        self.source_sigwrap.listen(""."", search_next)\n\n        self.source_sigwrap.listen(""b"", toggle_breakpoint)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1758, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""/"", search)', 'context': '        self.source_sigwrap.listen(""t"", run_to_cursor)\n        self.source_sigwrap.listen(""J"", jump_to_cursor)\n\n        self.source_sigwrap.listen(""L"", go_to_line)\n        self.source_sigwrap.listen(""/"", search)\n        self.source_sigwrap.listen("","", search_previous)\n        self.source_sigwrap.listen(""."", search_next)\n\n        self.source_sigwrap.listen(""b"", toggle_breakpoint)\n        self.source_sigwrap.listen(""m"", pick_module)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1759, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen("","", search_previous)', 'context': '        self.source_sigwrap.listen(""J"", jump_to_cursor)\n\n        self.source_sigwrap.listen(""L"", go_to_line)\n        self.source_sigwrap.listen(""/"", search)\n        self.source_sigwrap.listen("","", search_previous)\n        self.source_sigwrap.listen(""."", search_next)\n\n        self.source_sigwrap.listen(""b"", toggle_breakpoint)\n        self.source_sigwrap.listen(""m"", pick_module)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1760, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""."", search_next)', 'context': '\n        self.source_sigwrap.listen(""L"", go_to_line)\n        self.source_sigwrap.listen(""/"", search)\n        self.source_sigwrap.listen("","", search_previous)\n        self.source_sigwrap.listen(""."", search_next)\n\n        self.source_sigwrap.listen(""b"", toggle_breakpoint)\n        self.source_sigwrap.listen(""m"", pick_module)\n\n        self.source_sigwrap.listen(""H"", move_stack_top)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1762, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""b"", toggle_breakpoint)', 'context': '        self.source_sigwrap.listen(""/"", search)\n        self.source_sigwrap.listen("","", search_previous)\n        self.source_sigwrap.listen(""."", search_next)\n\n        self.source_sigwrap.listen(""b"", toggle_breakpoint)\n        self.source_sigwrap.listen(""m"", pick_module)\n\n        self.source_sigwrap.listen(""H"", move_stack_top)\n        self.source_sigwrap.listen(""u"", move_stack_up)\n        self.source_sigwrap.listen(""d"", move_stack_down)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1763, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""m"", pick_module)', 'context': '        self.source_sigwrap.listen("","", search_previous)\n        self.source_sigwrap.listen(""."", search_next)\n\n        self.source_sigwrap.listen(""b"", toggle_breakpoint)\n        self.source_sigwrap.listen(""m"", pick_module)\n\n        self.source_sigwrap.listen(""H"", move_stack_top)\n        self.source_sigwrap.listen(""u"", move_stack_up)\n        self.source_sigwrap.listen(""d"", move_stack_down)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1765, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""H"", move_stack_top)', 'context': '\n        self.source_sigwrap.listen(""b"", toggle_breakpoint)\n        self.source_sigwrap.listen(""m"", pick_module)\n\n        self.source_sigwrap.listen(""H"", move_stack_top)\n        self.source_sigwrap.listen(""u"", move_stack_up)\n        self.source_sigwrap.listen(""d"", move_stack_down)\n\n        # left/right scrolling have to be handled specially, normal vi keys\n        # don\'t cut it', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1766, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""u"", move_stack_up)', 'context': '        self.source_sigwrap.listen(""b"", toggle_breakpoint)\n        self.source_sigwrap.listen(""m"", pick_module)\n\n        self.source_sigwrap.listen(""H"", move_stack_top)\n        self.source_sigwrap.listen(""u"", move_stack_up)\n        self.source_sigwrap.listen(""d"", move_stack_down)\n\n        # left/right scrolling have to be handled specially, normal vi keys\n        # don\'t cut it\n        self.source_sigwrap.listen(""h"", scroll_left)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1767, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""d"", move_stack_down)', 'context': '        self.source_sigwrap.listen(""m"", pick_module)\n\n        self.source_sigwrap.listen(""H"", move_stack_top)\n        self.source_sigwrap.listen(""u"", move_stack_up)\n        self.source_sigwrap.listen(""d"", move_stack_down)\n\n        # left/right scrolling have to be handled specially, normal vi keys\n        # don\'t cut it\n        self.source_sigwrap.listen(""h"", scroll_left)\n        self.source_sigwrap.listen(""l"", scroll_right)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1771, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""h"", scroll_left)', 'context': '        self.source_sigwrap.listen(""d"", move_stack_down)\n\n        # left/right scrolling have to be handled specially, normal vi keys\n        # don\'t cut it\n        self.source_sigwrap.listen(""h"", scroll_left)\n        self.source_sigwrap.listen(""l"", scroll_right)\n\n        add_vi_nav_keys(self.source_sigwrap)\n        add_help_keys(self.source_sigwrap, helpmain)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1772, 'coloffset': 8, 'linematch': 'self.source_sigwrap.listen(""l"", scroll_right)', 'context': '\n        # left/right scrolling have to be handled specially, normal vi keys\n        # don\'t cut it\n        self.source_sigwrap.listen(""h"", scroll_left)\n        self.source_sigwrap.listen(""l"", scroll_right)\n\n        add_vi_nav_keys(self.source_sigwrap)\n        add_help_keys(self.source_sigwrap, helpmain)\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1774, 'coloffset': 8, 'linematch': 'add_vi_nav_keys(self.source_sigwrap)', 'context': '        # don\'t cut it\n        self.source_sigwrap.listen(""h"", scroll_left)\n        self.source_sigwrap.listen(""l"", scroll_right)\n\n        add_vi_nav_keys(self.source_sigwrap)\n        add_help_keys(self.source_sigwrap, helpmain)\n\n        # }}}\n\n        # {{{ command line listeners', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1775, 'coloffset': 8, 'linematch': 'add_help_keys(self.source_sigwrap, helpmain)', 'context': '        self.source_sigwrap.listen(""h"", scroll_left)\n        self.source_sigwrap.listen(""l"", scroll_right)\n\n        add_vi_nav_keys(self.source_sigwrap)\n        add_help_keys(self.source_sigwrap, helpmain)\n\n        # }}}\n\n        # {{{ command line listeners\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1781, 'coloffset': 8, 'linematch': 'def cmdline_get_namespace():', 'context': '        # }}}\n\n        # {{{ command line listeners\n\n        def cmdline_get_namespace():\n            curframe = self.debugger.curframe\n\n            from pudb.shell import SetPropagatingDict\n            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1782, 'coloffset': 12, 'linematch': 'curframe = self.debugger.curframe', 'context': '\n        # {{{ command line listeners\n\n        def cmdline_get_namespace():\n            curframe = self.debugger.curframe\n\n            from pudb.shell import SetPropagatingDict\n            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1784, 'coloffset': 12, 'linematch': 'from pudb.shell import SetPropagatingDict', 'context': '\n        def cmdline_get_namespace():\n            curframe = self.debugger.curframe\n\n            from pudb.shell import SetPropagatingDict\n            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1785, 'coloffset': 12, 'linematch': 'return SetPropagatingDict(', 'context': '        def cmdline_get_namespace():\n            curframe = self.debugger.curframe\n\n            from pudb.shell import SetPropagatingDict\n            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1790, 'coloffset': 12, 'linematch': 'try:', 'context': '                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",\n                        ""command line error"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1798, 'coloffset': 12, 'linematch': 'try:', 'context': '                        ""Tab completion requires jedi to be installed. "",\n                        ""command line error"")\n                return\n\n            try:\n                from packaging.version import parse as LooseVersion  # noqa: N812\n            except ImportError:\n                from distutils.version import LooseVersion\n\n            import jedi', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1803, 'coloffset': 12, 'linematch': 'import jedi', 'context': '                from packaging.version import parse as LooseVersion  # noqa: N812\n            except ImportError:\n                from distutils.version import LooseVersion\n\n            import jedi\n            if LooseVersion(jedi.__version__) < LooseVersion(""0.16.0""):\n                self.add_cmdline_content(\n                        ""jedi 0.16.0 is required for Tab completion"",\n                        ""command line error"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1804, 'coloffset': 12, 'linematch': 'if LooseVersion(jedi.__version__) < LooseVersion(""0.16.0""):', 'context': '            except ImportError:\n                from distutils.version import LooseVersion\n\n            import jedi\n            if LooseVersion(jedi.__version__) < LooseVersion(""0.16.0""):\n                self.add_cmdline_content(\n                        ""jedi 0.16.0 is required for Tab completion"",\n                        ""command line error"")\n\n            text = self.cmdline_edit.edit_text', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1809, 'coloffset': 12, 'linematch': 'text = self.cmdline_edit.edit_text', 'context': '                self.add_cmdline_content(\n                        ""jedi 0.16.0 is required for Tab completion"",\n                        ""command line error"")\n\n            text = self.cmdline_edit.edit_text\n            pos = self.cmdline_edit.edit_pos\n\n            chopped_text = text[:pos]\n            suffix = text[pos:]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1810, 'coloffset': 12, 'linematch': 'pos = self.cmdline_edit.edit_pos', 'context': '                        ""jedi 0.16.0 is required for Tab completion"",\n                        ""command line error"")\n\n            text = self.cmdline_edit.edit_text\n            pos = self.cmdline_edit.edit_pos\n\n            chopped_text = text[:pos]\n            suffix = text[pos:]\n\n            try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1812, 'coloffset': 12, 'linematch': 'chopped_text = text[:pos]', 'context': '\n            text = self.cmdline_edit.edit_text\n            pos = self.cmdline_edit.edit_pos\n\n            chopped_text = text[:pos]\n            suffix = text[pos:]\n\n            try:\n                completions = Interpreter(\n                        chopped_text,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1813, 'coloffset': 12, 'linematch': 'suffix = text[pos:]', 'context': '            text = self.cmdline_edit.edit_text\n            pos = self.cmdline_edit.edit_pos\n\n            chopped_text = text[:pos]\n            suffix = text[pos:]\n\n            try:\n                completions = Interpreter(\n                        chopped_text,\n                        [cmdline_get_namespace()]).complete()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1815, 'coloffset': 12, 'linematch': 'try:', 'context': '\n            chopped_text = text[:pos]\n            suffix = text[pos:]\n\n            try:\n                completions = Interpreter(\n                        chopped_text,\n                        [cmdline_get_namespace()]).complete()\n            except Exception as e:\n                # Jedi sometimes produces errors. Ignore them.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1826, 'coloffset': 12, 'linematch': 'full_completions = [i.name_with_symbols for i in completions]', 'context': '                        ""Could not tab complete (Jedi error: \'%s\')"" % e,\n                        ""command line error"")\n                return\n\n            full_completions = [i.name_with_symbols for i in completions]\n            chopped_completions = [i.complete for i in completions]\n\n            def common_prefix(a, b):\n                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1827, 'coloffset': 12, 'linematch': 'chopped_completions = [i.complete for i in completions]', 'context': '                        ""command line error"")\n                return\n\n            full_completions = [i.name_with_symbols for i in completions]\n            chopped_completions = [i.complete for i in completions]\n\n            def common_prefix(a, b):\n                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:\n                        return a[:i]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1829, 'coloffset': 12, 'linematch': 'def common_prefix(a, b):', 'context': '\n            full_completions = [i.name_with_symbols for i in completions]\n            chopped_completions = [i.complete for i in completions]\n\n            def common_prefix(a, b):\n                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:\n                        return a[:i]\n\n                return a[:max(len(a), len(b))]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1830, 'coloffset': 16, 'linematch': 'for i, (a_i, b_i) in enumerate(zip(a, b)):', 'context': '            full_completions = [i.name_with_symbols for i in completions]\n            chopped_completions = [i.complete for i in completions]\n\n            def common_prefix(a, b):\n                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:\n                        return a[:i]\n\n                return a[:max(len(a), len(b))]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1834, 'coloffset': 16, 'linematch': 'return a[:max(len(a), len(b))]', 'context': '                for i, (a_i, b_i) in enumerate(zip(a, b)):\n                    if a_i != b_i:\n                        return a[:i]\n\n                return a[:max(len(a), len(b))]\n\n            common_compl_prefix = None\n            for completion in chopped_completions:\n                if common_compl_prefix is None:\n                    common_compl_prefix = completion', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1836, 'coloffset': 12, 'linematch': 'common_compl_prefix = None', 'context': '                        return a[:i]\n\n                return a[:max(len(a), len(b))]\n\n            common_compl_prefix = None\n            for completion in chopped_completions:\n                if common_compl_prefix is None:\n                    common_compl_prefix = completion\n                else:\n                    common_compl_prefix = common_prefix(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1837, 'coloffset': 12, 'linematch': 'for completion in chopped_completions:', 'context': '\n                return a[:max(len(a), len(b))]\n\n            common_compl_prefix = None\n            for completion in chopped_completions:\n                if common_compl_prefix is None:\n                    common_compl_prefix = completion\n                else:\n                    common_compl_prefix = common_prefix(\n                            common_compl_prefix, completion)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1844, 'coloffset': 12, 'linematch': 'completed_chopped_text = common_compl_prefix', 'context': '                else:\n                    common_compl_prefix = common_prefix(\n                            common_compl_prefix, completion)\n\n            completed_chopped_text = common_compl_prefix\n\n            if completed_chopped_text is None:\n                return\n\n            if (', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1846, 'coloffset': 12, 'linematch': 'if completed_chopped_text is None:', 'context': '                            common_compl_prefix, completion)\n\n            completed_chopped_text = common_compl_prefix\n\n            if completed_chopped_text is None:\n                return\n\n            if (\n                    len(completed_chopped_text) == 0\n                    and len(completions) > 1):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1849, 'coloffset': 12, 'linematch': 'if (', 'context': '\n            if completed_chopped_text is None:\n                return\n\n            if (\n                    len(completed_chopped_text) == 0\n                    and len(completions) > 1):\n                self.add_cmdline_content(\n                        ""   "".join(full_completions),\n                        ""command line output"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1857, 'coloffset': 12, 'linematch': 'self.cmdline_edit.edit_text = \\', 'context': '                        ""   "".join(full_completions),\n                        ""command line output"")\n                return\n\n            self.cmdline_edit.edit_text = \\\n                    chopped_text+completed_chopped_text+suffix\n            self.cmdline_edit.edit_pos = (\n                    len(chopped_text)\n                    + len(completed_chopped_text))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1859, 'coloffset': 12, 'linematch': 'self.cmdline_edit.edit_pos = (', 'context': '                return\n\n            self.cmdline_edit.edit_text = \\\n                    chopped_text+completed_chopped_text+suffix\n            self.cmdline_edit.edit_pos = (\n                    len(chopped_text)\n                    + len(completed_chopped_text))\n\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1863, 'coloffset': 8, 'linematch': 'def cmdline_append_newline(w, size, key):', 'context': '            self.cmdline_edit.edit_pos = (\n                    len(chopped_text)\n                    + len(completed_chopped_text))\n\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1864, 'coloffset': 12, 'linematch': 'self.cmdline_edit.insert_text(""\\n"")', 'context': '                    len(chopped_text)\n                    + len(completed_chopped_text))\n\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1866, 'coloffset': 8, 'linematch': 'def cmdline_exec(w, size, key):', 'context': '\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1867, 'coloffset': 12, 'linematch': 'cmd = self.cmdline_edit.get_edit_text()', 'context': '        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n\n            self.add_cmdline_content("">>> "" + cmd, ""command line input"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1868, 'coloffset': 12, 'linematch': 'if not cmd:', 'context': '            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n\n            self.add_cmdline_content("">>> "" + cmd, ""command line input"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1872, 'coloffset': 12, 'linematch': 'self.add_cmdline_content("">>> "" + cmd, ""command line input"")', 'context': '            if not cmd:\n                # blank command -> refuse service\n                return\n\n            self.add_cmdline_content("">>> "" + cmd, ""command line input"")\n\n            if not self.cmdline_history or cmd != self.cmdline_history[-1]:\n                self.cmdline_history.append(cmd)\n\n            self.cmdline_history_position = -1', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1874, 'coloffset': 12, 'linematch': 'if not self.cmdline_history or cmd != self.cmdline_history[-1]:', 'context': '                return\n\n            self.add_cmdline_content("">>> "" + cmd, ""command line input"")\n\n            if not self.cmdline_history or cmd != self.cmdline_history[-1]:\n                self.cmdline_history.append(cmd)\n\n            self.cmdline_history_position = -1\n            self.cmdline_saved_edit_text = """"\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1877, 'coloffset': 12, 'linematch': 'self.cmdline_history_position = -1', 'context': '\n            if not self.cmdline_history or cmd != self.cmdline_history[-1]:\n                self.cmdline_history.append(cmd)\n\n            self.cmdline_history_position = -1\n            self.cmdline_saved_edit_text = """"\n\n            prev_sys_stdin = sys.stdin\n            prev_sys_stdout = sys.stdout\n            prev_sys_stderr = sys.stderr', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1878, 'coloffset': 12, 'linematch': 'self.cmdline_saved_edit_text = """"', 'context': '            if not self.cmdline_history or cmd != self.cmdline_history[-1]:\n                self.cmdline_history.append(cmd)\n\n            self.cmdline_history_position = -1\n            self.cmdline_saved_edit_text = """"\n\n            prev_sys_stdin = sys.stdin\n            prev_sys_stdout = sys.stdout\n            prev_sys_stderr = sys.stderr\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1880, 'coloffset': 12, 'linematch': 'prev_sys_stdin = sys.stdin', 'context': '\n            self.cmdline_history_position = -1\n            self.cmdline_saved_edit_text = """"\n\n            prev_sys_stdin = sys.stdin\n            prev_sys_stdout = sys.stdout\n            prev_sys_stderr = sys.stderr\n\n            from io import StringIO\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1881, 'coloffset': 12, 'linematch': 'prev_sys_stdout = sys.stdout', 'context': '            self.cmdline_history_position = -1\n            self.cmdline_saved_edit_text = """"\n\n            prev_sys_stdin = sys.stdin\n            prev_sys_stdout = sys.stdout\n            prev_sys_stderr = sys.stderr\n\n            from io import StringIO\n\n            sys.stdin = None', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1882, 'coloffset': 12, 'linematch': 'prev_sys_stderr = sys.stderr', 'context': '            self.cmdline_saved_edit_text = """"\n\n            prev_sys_stdin = sys.stdin\n            prev_sys_stdout = sys.stdout\n            prev_sys_stderr = sys.stderr\n\n            from io import StringIO\n\n            sys.stdin = None\n            sys.stderr = sys.stdout = StringIO()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1884, 'coloffset': 12, 'linematch': 'from io import StringIO', 'context': '            prev_sys_stdin = sys.stdin\n            prev_sys_stdout = sys.stdout\n            prev_sys_stderr = sys.stderr\n\n            from io import StringIO\n\n            sys.stdin = None\n            sys.stderr = sys.stdout = StringIO()\n            try:\n                eval(compile(cmd, ""<pudb command line>"", ""single""),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1886, 'coloffset': 12, 'linematch': 'sys.stdin = None', 'context': '            prev_sys_stderr = sys.stderr\n\n            from io import StringIO\n\n            sys.stdin = None\n            sys.stderr = sys.stdout = StringIO()\n            try:\n                eval(compile(cmd, ""<pudb command line>"", ""single""),\n                     cmdline_get_namespace())\n            except Exception:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1887, 'coloffset': 12, 'linematch': 'sys.stderr = sys.stdout = StringIO()', 'context': '\n            from io import StringIO\n\n            sys.stdin = None\n            sys.stderr = sys.stdout = StringIO()\n            try:\n                eval(compile(cmd, ""<pudb command line>"", ""single""),\n                     cmdline_get_namespace())\n            except Exception:\n                tp, val, tb = sys.exc_info()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1888, 'coloffset': 12, 'linematch': 'try:', 'context': '            from io import StringIO\n\n            sys.stdin = None\n            sys.stderr = sys.stdout = StringIO()\n            try:\n                eval(compile(cmd, ""<pudb command line>"", ""single""),\n                     cmdline_get_namespace())\n            except Exception:\n                tp, val, tb = sys.exc_info()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1915, 'coloffset': 8, 'linematch': 'def cmdline_history_browse(direction):', 'context': '                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout\n                sys.stderr = prev_sys_stderr\n\n        def cmdline_history_browse(direction):\n            # Browsing the command line history can be illustrated by moving up/down\n            # in the following table (no wrap-around).\n            # The first column shows what is written in the command input text field,\n            # the second one the corresponding value of self.cmdline_history_position\n            # The actual index into the history list is given by the last column.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1929, 'coloffset': 12, 'linematch': 'def pos_text(pos, text):', 'context': '            # medium_command              |    1     |     1\n            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1930, 'coloffset': 16, 'linematch': 'if pos == -1:', 'context': '            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:\n                        # clear command to be able to write a different one', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1941, 'coloffset': 16, 'linematch': 'max_hist_index = len(self.cmdline_history) - 1', 'context': '                    if direction < 0 and not text and self.cmdline_saved_edit_text:\n                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text\n\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))\n\n                if pos == -1:\n                    return -1, self.cmdline_saved_edit_text\n                return pos, self.cmdline_history[max_hist_index - pos]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1942, 'coloffset': 16, 'linematch': 'pos = max(-1, min(pos - direction, max_hist_index))', 'context': '                        # return to last saved command\n                        return -1, self.cmdline_saved_edit_text\n\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))\n\n                if pos == -1:\n                    return -1, self.cmdline_saved_edit_text\n                return pos, self.cmdline_history[max_hist_index - pos]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1944, 'coloffset': 16, 'linematch': 'if pos == -1:', 'context': '\n                max_hist_index = len(self.cmdline_history) - 1\n                pos = max(-1, min(pos - direction, max_hist_index))\n\n                if pos == -1:\n                    return -1, self.cmdline_saved_edit_text\n                return pos, self.cmdline_history[max_hist_index - pos]\n\n            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1946, 'coloffset': 16, 'linematch': 'return pos, self.cmdline_history[max_hist_index - pos]', 'context': '                pos = max(-1, min(pos - direction, max_hist_index))\n\n                if pos == -1:\n                    return -1, self.cmdline_saved_edit_text\n                return pos, self.cmdline_history[max_hist_index - pos]\n\n            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)\n            self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1948, 'coloffset': 12, 'linematch': 'self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(', 'context': '                if pos == -1:\n                    return -1, self.cmdline_saved_edit_text\n                return pos, self.cmdline_history[max_hist_index - pos]\n\n            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)\n            self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)\n\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1950, 'coloffset': 12, 'linematch': 'self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)', 'context': '                return pos, self.cmdline_history[max_hist_index - pos]\n\n            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)\n            self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)\n\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1952, 'coloffset': 8, 'linematch': 'def cmdline_history_prev(w, size, key):', 'context': '            self.cmdline_history_position, self.cmdline_edit.edit_text = pos_text(\n                self.cmdline_history_position, self.cmdline_edit.edit_text)\n            self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)\n\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1953, 'coloffset': 12, 'linematch': 'cmdline_history_browse(-1)', 'context': '                self.cmdline_history_position, self.cmdline_edit.edit_text)\n            self.cmdline_edit.edit_pos = len(self.cmdline_edit.edit_text)\n\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1955, 'coloffset': 8, 'linematch': 'def cmdline_history_next(w, size, key):', 'context': '\n        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1956, 'coloffset': 12, 'linematch': 'cmdline_history_browse(1)', 'context': '        def cmdline_history_prev(w, size, key):\n            cmdline_history_browse(-1)\n\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1958, 'coloffset': 8, 'linematch': 'def toggle_cmdline_focus(w, size, key):', 'context': '\n        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1959, 'coloffset': 12, 'linematch': 'focus_widget_in_container(self.columns, self.lhs_col)', 'context': '        def cmdline_history_next(w, size, key):\n            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(\n                        self.lhs_col,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1960, 'coloffset': 12, 'linematch': 'if self.lhs_col.focus is self.cmdline_sigwrap:', 'context': '            cmdline_history_browse(1)\n\n        def toggle_cmdline_focus(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            if self.lhs_col.focus is self.cmdline_sigwrap:\n                if CONFIG[""hide_cmdline_win""]:\n                    self.set_cmdline_state(False)\n                focus_widget_in_container(\n                        self.lhs_col,\n                        self.search_controller.search_AttrMap', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1974, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)', 'context': '                    self.set_cmdline_state(True)\n                focus_widget_in_container(self.cmdline_pile, self.cmdline_edit_bar)\n                focus_widget_in_container(self.lhs_col, self.cmdline_sigwrap)\n\n        self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)\n        self.cmdline_edit_sigwrap.listen(""ctrl v"", cmdline_append_newline)\n        self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)\n        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1975, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""ctrl v"", cmdline_append_newline)', 'context': '                focus_widget_in_container(self.cmdline_pile, self.cmdline_edit_bar)\n                focus_widget_in_container(self.lhs_col, self.cmdline_sigwrap)\n\n        self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)\n        self.cmdline_edit_sigwrap.listen(""ctrl v"", cmdline_append_newline)\n        self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)\n        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1976, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)', 'context': '                focus_widget_in_container(self.lhs_col, self.cmdline_sigwrap)\n\n        self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)\n        self.cmdline_edit_sigwrap.listen(""ctrl v"", cmdline_append_newline)\n        self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)\n        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1977, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)', 'context': '\n        self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)\n        self.cmdline_edit_sigwrap.listen(""ctrl v"", cmdline_append_newline)\n        self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)\n        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1978, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)', 'context': '        self.cmdline_edit_sigwrap.listen(""tab"", cmdline_tab_complete)\n        self.cmdline_edit_sigwrap.listen(""ctrl v"", cmdline_append_newline)\n        self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)\n        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)\n\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1979, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)', 'context': '        self.cmdline_edit_sigwrap.listen(""ctrl v"", cmdline_append_newline)\n        self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)\n        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)\n\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1980, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)', 'context': '        self.cmdline_edit_sigwrap.listen(""enter"", cmdline_exec)\n        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)\n\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n\n        # {{{ command line sizing', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1981, 'coloffset': 8, 'linematch': 'self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)', 'context': '        self.cmdline_edit_sigwrap.listen(""down"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""up"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)\n\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n\n        # {{{ command line sizing\n        def set_cmdline_default_size(weight):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1983, 'coloffset': 8, 'linematch': 'self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)', 'context': '        self.cmdline_edit_sigwrap.listen(""ctrl n"", cmdline_history_next)\n        self.cmdline_edit_sigwrap.listen(""ctrl p"", cmdline_history_prev)\n        self.cmdline_edit_sigwrap.listen(""esc"", toggle_cmdline_focus)\n\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n\n        # {{{ command line sizing\n        def set_cmdline_default_size(weight):\n            from pudb.settings import save_config\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1986, 'coloffset': 8, 'linematch': 'def set_cmdline_default_size(weight):', 'context': '\n        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n\n        # {{{ command line sizing\n        def set_cmdline_default_size(weight):\n            from pudb.settings import save_config\n\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1987, 'coloffset': 12, 'linematch': 'from pudb.settings import save_config', 'context': '        self.top.listen(CONFIG[""hotkeys_toggle_cmdline_focus""], toggle_cmdline_focus)\n\n        # {{{ command line sizing\n        def set_cmdline_default_size(weight):\n            from pudb.settings import save_config\n\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1989, 'coloffset': 12, 'linematch': 'self.cmdline_weight = weight', 'context': '        # {{{ command line sizing\n        def set_cmdline_default_size(weight):\n            from pudb.settings import save_config\n\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1990, 'coloffset': 12, 'linematch': 'CONFIG[""cmdline_height""] = weight', 'context': '        def set_cmdline_default_size(weight):\n            from pudb.settings import save_config\n\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1991, 'coloffset': 12, 'linematch': 'save_config(CONFIG)', 'context': '            from pudb.settings import save_config\n\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1992, 'coloffset': 12, 'linematch': 'self.set_cmdline_size()', 'context': '\n            self.cmdline_weight = weight\n            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1994, 'coloffset': 8, 'linematch': 'def max_cmdline(w, size, key):', 'context': '            CONFIG[""cmdline_height""] = weight\n            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1995, 'coloffset': 12, 'linematch': 'set_cmdline_default_size(5)', 'context': '            save_config(CONFIG)\n            self.set_cmdline_size()\n\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1997, 'coloffset': 8, 'linematch': 'def min_cmdline(w, size, key):', 'context': '\n        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 1998, 'coloffset': 12, 'linematch': 'set_cmdline_default_size(1/2)', 'context': '        def max_cmdline(w, size, key):\n            set_cmdline_default_size(5)\n\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight < 5:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2000, 'coloffset': 8, 'linematch': 'def grow_cmdline(w, size, key):', 'context': '\n        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2001, 'coloffset': 12, 'linematch': 'weight = self.cmdline_weight', 'context': '        def min_cmdline(w, size, key):\n            set_cmdline_default_size(1/2)\n\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2003, 'coloffset': 12, 'linematch': 'if weight < 5:', 'context': '\n        def grow_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)\n\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2007, 'coloffset': 8, 'linematch': 'def shrink_cmdline(w, size, key):', 'context': '            if weight < 5:\n                weight *= 1.25\n                set_cmdline_default_size(weight)\n\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2008, 'coloffset': 12, 'linematch': 'weight = self.cmdline_weight', 'context': '                weight *= 1.25\n                set_cmdline_default_size(weight)\n\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2010, 'coloffset': 12, 'linematch': 'if weight > 1/2:', 'context': '\n        def shrink_cmdline(w, size, key):\n            weight = self.cmdline_weight\n\n            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)\n\n        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2014, 'coloffset': 8, 'linematch': 'def cmdline_results_scroll(w, size, key):', 'context': '            if weight > 1/2:\n                weight /= 1.25\n                set_cmdline_default_size(weight)\n\n        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)\n            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2015, 'coloffset': 12, 'linematch': 'size = self.cmdline_pile.get_item_size(size, 1, True)', 'context': '                weight /= 1.25\n                set_cmdline_default_size(weight)\n\n        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)\n            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)\n        self.cmdline_sigwrap.listen(""_"", min_cmdline)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2016, 'coloffset': 12, 'linematch': 'self.cmdline_list.keypress(size, key.lstrip(""shift ""))', 'context': '                set_cmdline_default_size(weight)\n\n        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)\n            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)\n        self.cmdline_sigwrap.listen(""_"", min_cmdline)\n        self.cmdline_sigwrap.listen(""-"", shrink_cmdline)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2018, 'coloffset': 8, 'linematch': 'self.cmdline_sigwrap.listen(""="", max_cmdline)', 'context': '        def cmdline_results_scroll(w, size, key):\n            size = self.cmdline_pile.get_item_size(size, 1, True)\n            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)\n        self.cmdline_sigwrap.listen(""_"", min_cmdline)\n        self.cmdline_sigwrap.listen(""-"", shrink_cmdline)\n        for key in (""page up"", ""page down""):\n            self.cmdline_sigwrap.listen(""shift "" + key, cmdline_results_scroll)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2019, 'coloffset': 8, 'linematch': 'self.cmdline_sigwrap.listen(""+"", grow_cmdline)', 'context': '            size = self.cmdline_pile.get_item_size(size, 1, True)\n            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)\n        self.cmdline_sigwrap.listen(""_"", min_cmdline)\n        self.cmdline_sigwrap.listen(""-"", shrink_cmdline)\n        for key in (""page up"", ""page down""):\n            self.cmdline_sigwrap.listen(""shift "" + key, cmdline_results_scroll)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2020, 'coloffset': 8, 'linematch': 'self.cmdline_sigwrap.listen(""_"", min_cmdline)', 'context': '            self.cmdline_list.keypress(size, key.lstrip(""shift ""))\n\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)\n        self.cmdline_sigwrap.listen(""_"", min_cmdline)\n        self.cmdline_sigwrap.listen(""-"", shrink_cmdline)\n        for key in (""page up"", ""page down""):\n            self.cmdline_sigwrap.listen(""shift "" + key, cmdline_results_scroll)\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2021, 'coloffset': 8, 'linematch': 'self.cmdline_sigwrap.listen(""-"", shrink_cmdline)', 'context': '\n        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)\n        self.cmdline_sigwrap.listen(""_"", min_cmdline)\n        self.cmdline_sigwrap.listen(""-"", shrink_cmdline)\n        for key in (""page up"", ""page down""):\n            self.cmdline_sigwrap.listen(""shift "" + key, cmdline_results_scroll)\n\n        # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2022, 'coloffset': 8, 'linematch': 'for key in (""page up"", ""page down""):', 'context': '        self.cmdline_sigwrap.listen(""="", max_cmdline)\n        self.cmdline_sigwrap.listen(""+"", grow_cmdline)\n        self.cmdline_sigwrap.listen(""_"", min_cmdline)\n        self.cmdline_sigwrap.listen(""-"", shrink_cmdline)\n        for key in (""page up"", ""page down""):\n            self.cmdline_sigwrap.listen(""shift "" + key, cmdline_results_scroll)\n\n        # }}}\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2031, 'coloffset': 8, 'linematch': 'def max_sidebar(w, size, key):', 'context': '        # }}}\n\n        # {{{ sidebar sizing\n\n        def max_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2032, 'coloffset': 12, 'linematch': 'from pudb.settings import save_config', 'context': '\n        # {{{ sidebar sizing\n\n        def max_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2034, 'coloffset': 12, 'linematch': 'weight = 5', 'context': '\n        def max_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2035, 'coloffset': 12, 'linematch': 'CONFIG[""sidebar_width""] = weight', 'context': '        def max_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2036, 'coloffset': 12, 'linematch': 'save_config(CONFIG)', 'context': '            from pudb.settings import save_config\n\n            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2038, 'coloffset': 12, 'linematch': 'self.columns.contents[1] = (', 'context': '            weight = 5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def min_sidebar(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2041, 'coloffset': 12, 'linematch': 'self.columns._invalidate()', 'context': '\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def min_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 1/5', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2043, 'coloffset': 8, 'linematch': 'def min_sidebar(w, size, key):', 'context': '                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def min_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2044, 'coloffset': 12, 'linematch': 'from pudb.settings import save_config', 'context': '                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def min_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2046, 'coloffset': 12, 'linematch': 'weight = 1/5', 'context': '\n        def min_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2047, 'coloffset': 12, 'linematch': 'CONFIG[""sidebar_width""] = weight', 'context': '        def min_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2048, 'coloffset': 12, 'linematch': 'save_config(CONFIG)', 'context': '            from pudb.settings import save_config\n\n            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2050, 'coloffset': 12, 'linematch': 'self.columns.contents[1] = (', 'context': '            weight = 1/5\n            CONFIG[""sidebar_width""] = weight\n            save_config(CONFIG)\n\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def grow_sidebar(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2053, 'coloffset': 12, 'linematch': 'self.columns._invalidate()', 'context': '\n            self.columns.contents[1] = (\n                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def grow_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2055, 'coloffset': 8, 'linematch': 'def grow_sidebar(w, size, key):', 'context': '                    self.columns.contents[1][0],\n                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def grow_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight < 5:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2056, 'coloffset': 12, 'linematch': 'from pudb.settings import save_config', 'context': '                    (urwid.WEIGHT, weight))\n            self.columns._invalidate()\n\n        def grow_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight < 5:\n                weight *= 1.25', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2058, 'coloffset': 12, 'linematch': 'weight = self.columns.column_types[1][1]', 'context': '\n        def grow_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight < 5:\n                weight *= 1.25\n                CONFIG[""sidebar_width""] = weight\n                save_config(CONFIG)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2060, 'coloffset': 12, 'linematch': 'if weight < 5:', 'context': '            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight < 5:\n                weight *= 1.25\n                CONFIG[""sidebar_width""] = weight\n                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2067, 'coloffset': 8, 'linematch': 'def shrink_sidebar(w, size, key):', 'context': '                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()\n\n        def shrink_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight > 1/5:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2068, 'coloffset': 12, 'linematch': 'from pudb.settings import save_config', 'context': '                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()\n\n        def shrink_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight > 1/5:\n                weight /= 1.25', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2070, 'coloffset': 12, 'linematch': 'weight = self.columns.column_types[1][1]', 'context': '\n        def shrink_sidebar(w, size, key):\n            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight > 1/5:\n                weight /= 1.25\n                CONFIG[""sidebar_width""] = weight\n                save_config(CONFIG)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2072, 'coloffset': 12, 'linematch': 'if weight > 1/5:', 'context': '            from pudb.settings import save_config\n\n            weight = self.columns.column_types[1][1]\n\n            if weight > 1/5:\n                weight /= 1.25\n                CONFIG[""sidebar_width""] = weight\n                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2079, 'coloffset': 8, 'linematch': 'self.rhs_col_sigwrap.listen(""="", max_sidebar)', 'context': '                save_config(CONFIG)\n                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()\n\n        self.rhs_col_sigwrap.listen(""="", max_sidebar)\n        self.rhs_col_sigwrap.listen(""+"", grow_sidebar)\n        self.rhs_col_sigwrap.listen(""_"", min_sidebar)\n        self.rhs_col_sigwrap.listen(""-"", shrink_sidebar)\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2080, 'coloffset': 8, 'linematch': 'self.rhs_col_sigwrap.listen(""+"", grow_sidebar)', 'context': '                self.columns.column_types[1] = urwid.WEIGHT, weight\n                self.columns._invalidate()\n\n        self.rhs_col_sigwrap.listen(""="", max_sidebar)\n        self.rhs_col_sigwrap.listen(""+"", grow_sidebar)\n        self.rhs_col_sigwrap.listen(""_"", min_sidebar)\n        self.rhs_col_sigwrap.listen(""-"", shrink_sidebar)\n\n        # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2081, 'coloffset': 8, 'linematch': 'self.rhs_col_sigwrap.listen(""_"", min_sidebar)', 'context': '                self.columns._invalidate()\n\n        self.rhs_col_sigwrap.listen(""="", max_sidebar)\n        self.rhs_col_sigwrap.listen(""+"", grow_sidebar)\n        self.rhs_col_sigwrap.listen(""_"", min_sidebar)\n        self.rhs_col_sigwrap.listen(""-"", shrink_sidebar)\n\n        # }}}\n\n        # {{{ top-level listeners', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2082, 'coloffset': 8, 'linematch': 'self.rhs_col_sigwrap.listen(""-"", shrink_sidebar)', 'context': '\n        self.rhs_col_sigwrap.listen(""="", max_sidebar)\n        self.rhs_col_sigwrap.listen(""+"", grow_sidebar)\n        self.rhs_col_sigwrap.listen(""_"", min_sidebar)\n        self.rhs_col_sigwrap.listen(""-"", shrink_sidebar)\n\n        # }}}\n\n        # {{{ top-level listeners\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2088, 'coloffset': 8, 'linematch': 'def show_output(w, size, key):', 'context': '        # }}}\n\n        # {{{ top-level listeners\n\n        def show_output(w, size, key):\n            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2089, 'coloffset': 12, 'linematch': 'with StoppedScreen(self.screen):', 'context': '\n        # {{{ top-level listeners\n\n        def show_output(w, size, key):\n            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()\n            curr_line = self.current_line', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2092, 'coloffset': 8, 'linematch': 'def reload_breakpoints_and_redisplay():', 'context': '        def show_output(w, size, key):\n            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2093, 'coloffset': 12, 'linematch': 'reload_breakpoints()', 'context': '            with StoppedScreen(self.screen):\n                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2094, 'coloffset': 12, 'linematch': 'curr_line = self.current_line', 'context': '                input(""Hit Enter to return:"")\n\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2095, 'coloffset': 12, 'linematch': 'self.set_source_code_provider(self.source_code_provider,', 'context': '\n        def reload_breakpoints_and_redisplay():\n            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2097, 'coloffset': 12, 'linematch': 'if curr_line is not None:', 'context': '            reload_breakpoints()\n            curr_line = self.current_line\n            self.set_source_code_provider(self.source_code_provider,\n                                          force_update=True)\n            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)\n\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2101, 'coloffset': 8, 'linematch': 'def reload_breakpoints():', 'context': '            if curr_line is not None:\n                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)\n\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()\n            from pudb.settings import load_breakpoints\n            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2102, 'coloffset': 12, 'linematch': 'self.debugger.clear_all_breaks()', 'context': '                self.current_line = self.source[int(curr_line.line_nr)-1]\n                self.current_line.set_current(True)\n\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()\n            from pudb.settings import load_breakpoints\n            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2103, 'coloffset': 12, 'linematch': 'from pudb.settings import load_breakpoints', 'context': '                self.current_line.set_current(True)\n\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()\n            from pudb.settings import load_breakpoints\n            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2104, 'coloffset': 12, 'linematch': 'for bpoint_descr in load_breakpoints():', 'context': '\n        def reload_breakpoints():\n            self.debugger.clear_all_breaks()\n            from pudb.settings import load_breakpoints\n            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):\n            if self.current_exc_tuple is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2106, 'coloffset': 12, 'linematch': 'self.update_breakpoints()', 'context': '            self.debugger.clear_all_breaks()\n            from pudb.settings import load_breakpoints\n            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):\n            if self.current_exc_tuple is not None:\n                from traceback import format_exception\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2108, 'coloffset': 8, 'linematch': 'def show_traceback(w, size, key):', 'context': '            for bpoint_descr in load_breakpoints():\n                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):\n            if self.current_exc_tuple is not None:\n                from traceback import format_exception\n\n                result = self.dialog(\n                        urwid.ListBox(urwid.SimpleListWalker([urwid.Text(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2109, 'coloffset': 12, 'linematch': 'if self.current_exc_tuple is not None:', 'context': '                dbg.set_break(*bpoint_descr)\n            self.update_breakpoints()\n\n        def show_traceback(w, size, key):\n            if self.current_exc_tuple is not None:\n                from traceback import format_exception\n\n                result = self.dialog(\n                        urwid.ListBox(urwid.SimpleListWalker([urwid.Text(\n                            """".join(format_exception(*self.current_exc_tuple)))])),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2129, 'coloffset': 8, 'linematch': 'def run_external_cmdline(w, size, key):', 'context': '\n            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2130, 'coloffset': 12, 'linematch': 'with StoppedScreen(self.screen):', 'context': '            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():\n                    runner = shell.run_ipython_shell', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2148, 'coloffset': 24, 'linematch': 'fallback_message = ""Falling back to classic shell.""', 'context': '                elif CONFIG[""shell""] == ""classic"":\n                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""\n                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n\n                    try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2149, 'coloffset': 24, 'linematch': 'message = f""{error_message} {fallback_message}""', 'context': '                    runner = shell.run_classic_shell\n                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""\n                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n\n                    try:\n                        if not shell.custom_shell_dict:  # Only execfile once', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2150, 'coloffset': 24, 'linematch': 'ui_log.error(message)', 'context': '                else:\n                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""\n                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n\n                    try:\n                        if not shell.custom_shell_dict:  # Only execfile once\n                            from os.path import expanduser, expandvars', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2151, 'coloffset': 24, 'linematch': 'return partial(shell.run_classic_shell, message=message)', 'context': '                    def fallback(error_message):\n                        fallback_message = ""Falling back to classic shell.""\n                        message = f""{error_message} {fallback_message}""\n                        ui_log.error(message)\n                        return partial(shell.run_classic_shell, message=message)\n\n                    try:\n                        if not shell.custom_shell_dict:  # Only execfile once\n                            from os.path import expanduser, expandvars\n                            cshell_fname = expanduser(expandvars(CONFIG[""shell""]))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2179, 'coloffset': 12, 'linematch': 'self.update_var_view()', 'context': '                            runner = shell.custom_shell_dict[""pudb_shell""]\n\n                runner(curframe.f_globals, curframe.f_locals)\n\n            self.update_var_view()\n\n        def run_cmdline(w, size, key):\n            if CONFIG[""shell""] == ""internal"":\n                return toggle_cmdline_focus(w, size, key)\n            else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2181, 'coloffset': 8, 'linematch': 'def run_cmdline(w, size, key):', 'context': '                runner(curframe.f_globals, curframe.f_locals)\n\n            self.update_var_view()\n\n        def run_cmdline(w, size, key):\n            if CONFIG[""shell""] == ""internal"":\n                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2182, 'coloffset': 12, 'linematch': 'if CONFIG[""shell""] == ""internal"":', 'context': '\n            self.update_var_view()\n\n        def run_cmdline(w, size, key):\n            if CONFIG[""shell""] == ""internal"":\n                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n\n        def focus_code(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2187, 'coloffset': 8, 'linematch': 'def focus_code(w, size, key):', 'context': '                return toggle_cmdline_focus(w, size, key)\n            else:\n                return run_external_cmdline(w, size, key)\n\n        def focus_code(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2188, 'coloffset': 12, 'linematch': 'focus_widget_in_container(self.columns, self.lhs_col)', 'context': '            else:\n                return run_external_cmdline(w, size, key)\n\n        def focus_code(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2189, 'coloffset': 12, 'linematch': 'focus_widget_in_container(self.lhs_col, self.source_attr)', 'context': '                return run_external_cmdline(w, size, key)\n\n        def focus_code(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2191, 'coloffset': 8, 'linematch': 'class RHColumnFocuser:', 'context': '        def focus_code(w, size, key):\n            focus_widget_in_container(self.columns, self.lhs_col)\n            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2193, 'coloffset': 16, 'linematch': 'self.idx = idx', 'context': '            focus_widget_in_container(self.lhs_col, self.source_attr)\n\n        class RHColumnFocuser:\n            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2196, 'coloffset': 16, 'linematch': 'focus_widget_in_container(self.columns, self.rhs_col_sigwrap)', 'context': '            def __init__(self, idx):\n                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2197, 'coloffset': 16, 'linematch': 'self.rhs_col.focus_position = subself.idx', 'context': '                self.idx = idx\n\n            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2199, 'coloffset': 8, 'linematch': 'def quit(w, size, key):', 'context': '            def __call__(subself, w, size, key):  # noqa # pylint: disable=no-self-argument\n                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2200, 'coloffset': 12, 'linematch': 'with open(self.cmdline_history_path, ""w"") as history:', 'context': '                focus_widget_in_container(self.columns, self.rhs_col_sigwrap)\n                self.rhs_col.focus_position = subself.idx\n\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n\n        def do_edit_config(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2202, 'coloffset': 12, 'linematch': 'self.debugger.set_quit()', 'context': '\n        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2203, 'coloffset': 12, 'linematch': 'end()', 'context': '        def quit(w, size, key):\n            with open(self.cmdline_history_path, ""w"") as history:\n                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2205, 'coloffset': 8, 'linematch': 'def do_edit_config(w, size, key):', 'context': '                history.write(""\\n"".join((self.cmdline_history)))\n            self.debugger.set_quit()\n            end()\n\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2206, 'coloffset': 12, 'linematch': 'self.run_edit_config()', 'context': '            self.debugger.set_quit()\n            end()\n\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2208, 'coloffset': 8, 'linematch': 'def redraw_screen(w, size, key):', 'context': '\n        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2209, 'coloffset': 12, 'linematch': 'self.screen.clear()', 'context': '        def do_edit_config(w, size, key):\n            self.run_edit_config()\n\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2211, 'coloffset': 8, 'linematch': 'def help(pages):', 'context': '\n        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2212, 'coloffset': 12, 'linematch': 'self.message(pages, title=""PuDB - The Python Urwid Debugger"")', 'context': '        def redraw_screen(w, size, key):\n            self.screen.clear()\n\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2214, 'coloffset': 8, 'linematch': 'def edit_current_frame(w, size, key):', 'context': '\n        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if source_identifier is None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2215, 'coloffset': 12, 'linematch': 'pos = self.source.focus', 'context': '        def help(pages):\n            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if source_identifier is None:\n                self.message(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2216, 'coloffset': 12, 'linematch': 'source_identifier = \\', 'context': '            self.message(pages, title=""PuDB - The Python Urwid Debugger"")\n\n        def edit_current_frame(w, size, key):\n            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if source_identifier is None:\n                self.message(\n                    ""Cannot edit the current file--""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2219, 'coloffset': 12, 'linematch': 'if source_identifier is None:', 'context': '            pos = self.source.focus\n            source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if source_identifier is None:\n                self.message(\n                    ""Cannot edit the current file--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n            open_file_editor(source_identifier, pos+1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2224, 'coloffset': 12, 'linematch': 'open_file_editor(source_identifier, pos+1)', 'context': '                self.message(\n                    ""Cannot edit the current file--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n            open_file_editor(source_identifier, pos+1)\n\n        self.top.listen(""o"", show_output)\n        self.top.listen(""ctrl r"",\n                        lambda w, size, key: reload_breakpoints_and_redisplay())\n        self.top.listen(""!"", run_cmdline)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2226, 'coloffset': 8, 'linematch': 'self.top.listen(""o"", show_output)', 'context': '                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n            open_file_editor(source_identifier, pos+1)\n\n        self.top.listen(""o"", show_output)\n        self.top.listen(""ctrl r"",\n                        lambda w, size, key: reload_breakpoints_and_redisplay())\n        self.top.listen(""!"", run_cmdline)\n        self.top.listen(""e"", show_traceback)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2227, 'coloffset': 8, 'linematch': 'self.top.listen(""ctrl r"",', 'context': '                    ""(perhaps this is generated code)"")\n            open_file_editor(source_identifier, pos+1)\n\n        self.top.listen(""o"", show_output)\n        self.top.listen(""ctrl r"",\n                        lambda w, size, key: reload_breakpoints_and_redisplay())\n        self.top.listen(""!"", run_cmdline)\n        self.top.listen(""e"", show_traceback)\n\n        self.top.listen(CONFIG[""hotkeys_code""], focus_code)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2229, 'coloffset': 8, 'linematch': 'self.top.listen(""!"", run_cmdline)', 'context': '\n        self.top.listen(""o"", show_output)\n        self.top.listen(""ctrl r"",\n                        lambda w, size, key: reload_breakpoints_and_redisplay())\n        self.top.listen(""!"", run_cmdline)\n        self.top.listen(""e"", show_traceback)\n\n        self.top.listen(CONFIG[""hotkeys_code""], focus_code)\n        self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))\n        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2230, 'coloffset': 8, 'linematch': 'self.top.listen(""e"", show_traceback)', 'context': '        self.top.listen(""o"", show_output)\n        self.top.listen(""ctrl r"",\n                        lambda w, size, key: reload_breakpoints_and_redisplay())\n        self.top.listen(""!"", run_cmdline)\n        self.top.listen(""e"", show_traceback)\n\n        self.top.listen(CONFIG[""hotkeys_code""], focus_code)\n        self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))\n        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))\n        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2232, 'coloffset': 8, 'linematch': 'self.top.listen(CONFIG[""hotkeys_code""], focus_code)', 'context': '                        lambda w, size, key: reload_breakpoints_and_redisplay())\n        self.top.listen(""!"", run_cmdline)\n        self.top.listen(""e"", show_traceback)\n\n        self.top.listen(CONFIG[""hotkeys_code""], focus_code)\n        self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))\n        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))\n        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))\n\n        self.top.listen(""q"", quit)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2233, 'coloffset': 8, 'linematch': 'self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))', 'context': '        self.top.listen(""!"", run_cmdline)\n        self.top.listen(""e"", show_traceback)\n\n        self.top.listen(CONFIG[""hotkeys_code""], focus_code)\n        self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))\n        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))\n        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))\n\n        self.top.listen(""q"", quit)\n        self.top.listen(""ctrl p"", do_edit_config)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2234, 'coloffset': 8, 'linematch': 'self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))', 'context': '        self.top.listen(""e"", show_traceback)\n\n        self.top.listen(CONFIG[""hotkeys_code""], focus_code)\n        self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))\n        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))\n        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))\n\n        self.top.listen(""q"", quit)\n        self.top.listen(""ctrl p"", do_edit_config)\n        self.top.listen(""ctrl l"", redraw_screen)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2235, 'coloffset': 8, 'linematch': 'self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))', 'context': '\n        self.top.listen(CONFIG[""hotkeys_code""], focus_code)\n        self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))\n        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))\n        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))\n\n        self.top.listen(""q"", quit)\n        self.top.listen(""ctrl p"", do_edit_config)\n        self.top.listen(""ctrl l"", redraw_screen)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2237, 'coloffset': 8, 'linematch': 'self.top.listen(""q"", quit)', 'context': '        self.top.listen(CONFIG[""hotkeys_variables""], RHColumnFocuser(0))\n        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))\n        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))\n\n        self.top.listen(""q"", quit)\n        self.top.listen(""ctrl p"", do_edit_config)\n        self.top.listen(""ctrl l"", redraw_screen)\n\n        self.top.listen(""ctrl e"", edit_current_frame)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2238, 'coloffset': 8, 'linematch': 'self.top.listen(""ctrl p"", do_edit_config)', 'context': '        self.top.listen(CONFIG[""hotkeys_stack""], RHColumnFocuser(1))\n        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))\n\n        self.top.listen(""q"", quit)\n        self.top.listen(""ctrl p"", do_edit_config)\n        self.top.listen(""ctrl l"", redraw_screen)\n\n        self.top.listen(""ctrl e"", edit_current_frame)\n\n        # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2239, 'coloffset': 8, 'linematch': 'self.top.listen(""ctrl l"", redraw_screen)', 'context': '        self.top.listen(CONFIG[""hotkeys_breakpoints""], RHColumnFocuser(2))\n\n        self.top.listen(""q"", quit)\n        self.top.listen(""ctrl p"", do_edit_config)\n        self.top.listen(""ctrl l"", redraw_screen)\n\n        self.top.listen(""ctrl e"", edit_current_frame)\n\n        # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2241, 'coloffset': 8, 'linematch': 'self.top.listen(""ctrl e"", edit_current_frame)', 'context': '        self.top.listen(""q"", quit)\n        self.top.listen(""ctrl p"", do_edit_config)\n        self.top.listen(""ctrl l"", redraw_screen)\n\n        self.top.listen(""ctrl e"", edit_current_frame)\n\n        # }}}\n\n        # {{{ setup\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2247, 'coloffset': 8, 'linematch': 'want_curses_display = (', 'context': '        # }}}\n\n        # {{{ setup\n\n        want_curses_display = (\n                CONFIG[""display""] == ""curses""\n                or (\n                    CONFIG[""display""] == ""auto""\n                    and not (\n                        os.environ.get(""TERM"", """").startswith(""xterm"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2256, 'coloffset': 8, 'linematch': 'if (want_curses_display', 'context': '                        os.environ.get(""TERM"", """").startswith(""xterm"")\n                        or os.environ.get(""TERM"", """").startswith(""rxvt"")\n                    )))\n\n        if (want_curses_display\n                and not (stdin is not None or stdout is not None)\n                and CursesScreen is not None):\n            self.screen = ThreadsafeCursesScreen()\n        else:\n            screen_kwargs = {}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2274, 'coloffset': 8, 'linematch': 'del want_curses_display', 'context': '                self.screen = ThreadsafeFixedSizeRawScreen(**screen_kwargs)\n            else:\n                self.screen = ThreadsafeRawScreen()\n\n        del want_curses_display\n\n        if curses:\n            try:\n                curses.setupterm()\n            except Exception:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2276, 'coloffset': 8, 'linematch': 'if curses:', 'context': '                self.screen = ThreadsafeRawScreen()\n\n        del want_curses_display\n\n        if curses:\n            try:\n                curses.setupterm()\n            except Exception:\n                # Something went wrong--oh well. Nobody will die if their\n                # 256 color support breaks. Just carry on without it.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2290, 'coloffset': 8, 'linematch': 'self.setup_palette(self.screen)', 'context': '\n                if color_support == 256 and isinstance(self.screen, RawScreen):\n                    self.screen.set_terminal_properties(256)\n\n        self.setup_palette(self.screen)\n\n        self.show_count = 0\n        self.source_code_provider = None\n\n        self.current_line = None', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2292, 'coloffset': 8, 'linematch': 'self.show_count = 0', 'context': '                    self.screen.set_terminal_properties(256)\n\n        self.setup_palette(self.screen)\n\n        self.show_count = 0\n        self.source_code_provider = None\n\n        self.current_line = None\n\n        self.quit_event_loop = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2293, 'coloffset': 8, 'linematch': 'self.source_code_provider = None', 'context': '\n        self.setup_palette(self.screen)\n\n        self.show_count = 0\n        self.source_code_provider = None\n\n        self.current_line = None\n\n        self.quit_event_loop = False\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2295, 'coloffset': 8, 'linematch': 'self.current_line = None', 'context': '\n        self.show_count = 0\n        self.source_code_provider = None\n\n        self.current_line = None\n\n        self.quit_event_loop = False\n\n        # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 2297, 'coloffset': 8, 'linematch': 'self.quit_event_loop = False', 'context': '        self.source_code_provider = None\n\n        self.current_line = None\n\n        self.quit_event_loop = False\n\n        # }}}\n\n    # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 288, 'coloffset': 12, 'linematch': 'Formatter.__init__(self, **options)', 'context': '            }\n\n    class UrwidFormatter(Formatter):\n        def __init__(self, debugger_ui, lineno_format, breakpoints, **options):\n            Formatter.__init__(self, **options)\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 289, 'coloffset': 12, 'linematch': 'self.current_line = """"', 'context': '\n    class UrwidFormatter(Formatter):\n        def __init__(self, debugger_ui, lineno_format, breakpoints, **options):\n            Formatter.__init__(self, **options)\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 290, 'coloffset': 12, 'linematch': 'self.current_attr = []', 'context': '    class UrwidFormatter(Formatter):\n        def __init__(self, debugger_ui, lineno_format, breakpoints, **options):\n            Formatter.__init__(self, **options)\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 291, 'coloffset': 12, 'linematch': 'self.lineno = None', 'context': '        def __init__(self, debugger_ui, lineno_format, breakpoints, **options):\n            Formatter.__init__(self, **options)\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 292, 'coloffset': 12, 'linematch': 'self.result = []', 'context': '            Formatter.__init__(self, **options)\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 293, 'coloffset': 12, 'linematch': 'self.debugger_ui = debugger_ui', 'context': '            self.current_line = """"\n            self.current_attr = []\n            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 294, 'coloffset': 12, 'linematch': 'self.lineno_format = lineno_format', 'context': '            self.current_attr = []\n            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 295, 'coloffset': 12, 'linematch': 'self.breakpoints = breakpoints', 'context': '            self.lineno = None\n            self.result = []\n            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 319, 'coloffset': 8, 'linematch': 'urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")', 'context': '\n\nclass SearchBox(urwid.Edit):\n    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 320, 'coloffset': 8, 'linematch': 'self.controller = controller', 'context': '\nclass SearchBox(urwid.Edit):\n    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 763, 'coloffset': 8, 'linematch': 'self.frame_var_info = {}', 'context': '\n\nclass FrameVarInfoKeeper:\n    def __init__(self):\n        self.frame_var_info = {}\n\n    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 1915, 'coloffset': 8, 'linematch': 'def cmdline_history_browse(direction):', 'context': '                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout\n                sys.stderr = prev_sys_stderr\n\n        def cmdline_history_browse(direction):\n            # Browsing the command line history can be illustrated by moving up/down\n            # in the following table (no wrap-around).\n            # The first column shows what is written in the command input text field,\n            # the second one the corresponding value of self.cmdline_history_position\n            # The actual index into the history list is given by the last column.', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 1624, 'coloffset': 12, 'linematch': 'def mod_exists(mod):', 'context': '        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):\n                    return False\n                if mod.__file__ is None:\n                    return False\n                filename = mod.__file__', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 1929, 'coloffset': 12, 'linematch': 'def pos_text(pos, text):', 'context': '            # medium_command              |    1     |     1\n            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 1121, 'coloffset': 16, 'linematch': 'id_segment', 'context': '            show_methods_checkbox = urwid.CheckBox(\n                    ""Show methods"", iinfo.show_methods)\n\n            lb = urwid.ListBox(urwid.SimpleListWalker(\n                id_segment\n                + rb_grp_show + [urwid.Text("""")]\n                + rb_grp_access + [urwid.Text("""")]\n                + [\n                    wrap_checkbox,\n                    expanded_checkbox,', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 1121, 'coloffset': 16, 'linematch': 'id_segment', 'context': '            show_methods_checkbox = urwid.CheckBox(\n                    ""Show methods"", iinfo.show_methods)\n\n            lb = urwid.ListBox(urwid.SimpleListWalker(\n                id_segment\n                + rb_grp_show + [urwid.Text("""")]\n                + rb_grp_access + [urwid.Text("""")]\n                + [\n                    wrap_checkbox,\n                    expanded_checkbox,', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[count(./body/*) > 50]', 'check_id': 'F026', 'check_name': 'method-too-long'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 1003, 'coloffset': 8, 'linematch': 'def change_var_state(w, size, key):', 'context': '                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 1053, 'coloffset': 8, 'linematch': 'def edit_inspector_detail(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 2129, 'coloffset': 8, 'linematch': 'def run_external_cmdline(w, size, key):', 'context': '\n            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '    me = ""pudb""\n    _prev_outs = None\n    _sock = None\n\n    def __init__(\n        self,\n        host=PUDB_RDB_HOST,\n        port=PUDB_RDB_PORT,\n        port_search_limit=100,\n        out=sys.stdout,', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1003, 'coloffset': 8, 'linematch': 'def change_var_state(w, size, key):', 'context': '                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1053, 'coloffset': 8, 'linematch': 'def edit_inspector_detail(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1317, 'coloffset': 8, 'linematch': 'def examine_breakpoint(w, size, key):', 'context': '            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1432, 'coloffset': 8, 'linematch': 'def run_to_cursor(w, size, key):', 'context': '            else:\n                self.debugger.set_continue()\n                end()\n\n        def run_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1466, 'coloffset': 8, 'linematch': 'def jump_to_cursor(w, size, key):', 'context': '\n                    self.debugger.set_continue()\n                    end()\n\n        def jump_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1552, 'coloffset': 8, 'linematch': 'def toggle_breakpoint(w, size, key):', 'context': '\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1866, 'coloffset': 8, 'linematch': 'def cmdline_exec(w, size, key):', 'context': '\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1915, 'coloffset': 8, 'linematch': 'def cmdline_history_browse(direction):', 'context': '                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout\n                sys.stderr = prev_sys_stderr\n\n        def cmdline_history_browse(direction):\n            # Browsing the command line history can be illustrated by moving up/down\n            # in the following table (no wrap-around).\n            # The first column shows what is written in the command input text field,\n            # the second one the corresponding value of self.cmdline_history_position\n            # The actual index into the history list is given by the last column.', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 2129, 'coloffset': 8, 'linematch': 'def run_external_cmdline(w, size, key):', 'context': '\n            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 1929, 'coloffset': 12, 'linematch': 'def pos_text(pos, text):', 'context': '            # medium_command              |    1     |     1\n            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[count(./body/*) > 100]', 'check_id': 'F031', 'check_name': 'god-function'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[count(./body/*) > 50]', 'check_id': 'P003', 'check_name': 'long-method'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'def __init__(', 'context': '    me = ""pudb""\n    _prev_outs = None\n    _sock = None\n\n    def __init__(\n        self,\n        host=PUDB_RDB_HOST,\n        port=PUDB_RDB_PORT,\n        port_search_limit=100,\n        out=sys.stdout,', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 786, 'coloffset': 4, 'linematch': 'def __init__(self, dbg, stdin, stdout, term_size):', 'context': '\nclass DebuggerUI(FrameVarInfoKeeper):\n    # {{{ constructor\n\n    def __init__(self, dbg, stdin, stdout, term_size):\n        FrameVarInfoKeeper.__init__(self)\n\n        self.debugger = dbg\n\n        from urwid import AttrMap', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1003, 'coloffset': 8, 'linematch': 'def change_var_state(w, size, key):', 'context': '                    p_iinfo.show_detail = False\n                    return self.locals.index(var.parent)\n            return None\n\n        def change_var_state(w, size, key):\n            try:\n                pos = self.var_list._w.focus_position\n            except IndexError:\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1053, 'coloffset': 8, 'linematch': 'def edit_inspector_detail(w, size, key):', 'context': '                        del fvi.watches[i]\n\n            self.update_var_view(focus_index=focus_index)\n\n        def edit_inspector_detail(w, size, key):\n            var = self.var_list._w.focus\n\n            if var is None:\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1317, 'coloffset': 8, 'linematch': 'def examine_breakpoint(w, size, key):', 'context': '            bp.enabled = not bp.enabled\n            self.update_breakpoints()\n            set_breakpoint_source(bp)\n\n        def examine_breakpoint(w, size, key):\n            pos = self.bp_list._w.focus_position\n            bp_entry = self.bp_list._w.focus\n\n            if bp_entry is None:\n                return', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1432, 'coloffset': 8, 'linematch': 'def run_to_cursor(w, size, key):', 'context': '            else:\n                self.debugger.set_continue()\n                end()\n\n        def run_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1466, 'coloffset': 8, 'linematch': 'def jump_to_cursor(w, size, key):', 'context': '\n                    self.debugger.set_continue()\n                    end()\n\n        def jump_to_cursor(w, size, key):\n            if self.debugger.post_mortem:\n                self.message(""Post-mortem mode: Can\'t modify state."")\n            else:\n                pos = self.source.focus\n                lineno = pos+1', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1552, 'coloffset': 8, 'linematch': 'def toggle_breakpoint(w, size, key):', 'context': '\n        def search_previous(w, size, key):\n            self.search_controller.perform_search(dir=-1, update_search_start=True)\n\n        def toggle_breakpoint(w, size, key):\n            bp_source_identifier = \\\n                    self.source_code_provider.get_source_identifier()\n\n            if bp_source_identifier:\n                pos = self.source_list.focus_position', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1620, 'coloffset': 8, 'linematch': 'def pick_module(w, size, key):', 'context': '                    ""Cannot currently set a breakpoint here--""\n                    ""source code does not correspond to a file location. ""\n                    ""(perhaps this is generated code)"")\n\n        def pick_module(w, size, key):\n            import sys\n            from os.path import splitext\n\n            def mod_exists(mod):\n                if not hasattr(mod, ""__file__""):', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1789, 'coloffset': 8, 'linematch': 'def cmdline_tab_complete(w, size, key):', 'context': '            return SetPropagatingDict(\n                    [curframe.f_locals, curframe.f_globals],\n                    curframe.f_locals)\n\n        def cmdline_tab_complete(w, size, key):\n            try:\n                from jedi import Interpreter\n            except ImportError:\n                self.add_cmdline_content(\n                        ""Tab completion requires jedi to be installed. "",', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1866, 'coloffset': 8, 'linematch': 'def cmdline_exec(w, size, key):', 'context': '\n        def cmdline_append_newline(w, size, key):\n            self.cmdline_edit.insert_text(""\\n"")\n\n        def cmdline_exec(w, size, key):\n            cmd = self.cmdline_edit.get_edit_text()\n            if not cmd:\n                # blank command -> refuse service\n                return\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1915, 'coloffset': 8, 'linematch': 'def cmdline_history_browse(direction):', 'context': '                sys.stdin = prev_sys_stdin\n                sys.stdout = prev_sys_stdout\n                sys.stderr = prev_sys_stderr\n\n        def cmdline_history_browse(direction):\n            # Browsing the command line history can be illustrated by moving up/down\n            # in the following table (no wrap-around).\n            # The first column shows what is written in the command input text field,\n            # the second one the corresponding value of self.cmdline_history_position\n            # The actual index into the history list is given by the last column.', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 2129, 'coloffset': 8, 'linematch': 'def run_external_cmdline(w, size, key):', 'context': '\n            else:\n                self.message(""No exception available."")\n\n        def run_external_cmdline(w, size, key):\n            with StoppedScreen(self.screen):\n                curframe = self.debugger.curframe\n\n                import pudb.shell as shell\n                if CONFIG[""shell""] == ""ipython"" and shell.have_ipython():', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 1929, 'coloffset': 12, 'linematch': 'def pos_text(pos, text):', 'context': '            # medium_command              |    1     |     1\n            # recent_command              |    0     |     2\n            # <current / saved edit text> |   -1     |\n            #     <edit text cleared>     |   -1     |\n            def pos_text(pos, text):\n                if pos == -1:\n                    if text:\n                        # currently editing a command, save it to return to it later\n                        self.cmdline_saved_edit_text = text\n                    if direction > 0:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3572', 'line': 132, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3574', 'line': 139, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3575', 'line': 148, 'description': ['                key_repr = cls._safe_key_repr(key)'], 'failure': []}, {'name': 'Mutant #3576', 'line': 149, 'description': ['                yield (key_repr, mapping[key], f""[{key_repr}]"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -146,7 +146,7 @@\n         try:\n             for key in mapping.keys():\n                 key_repr = cls._safe_key_repr(key)\n-                yield (key_repr, mapping[key], f""[{key_repr}]"")\n+                yield (key_repr, mapping[key], f""XX[{key_repr}]XX"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3577', 'line': 151, 'description': ['            ui_log.error(""Object {l!r} appears to be a mapping, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -148,7 +148,7 @@\n                 key_repr = cls._safe_key_repr(key)\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a mapping, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3578', 'line': 152, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -149,7 +149,7 @@\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3579', 'line': 155, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -152,7 +152,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, mapping):\n         return len(mapping.keys())\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3580', 'line': 166, 'description': [')'], 'failure': []}, {'name': 'Mutant #3581', 'line': 175, 'description': ['        self.id_path_to_iinfo = {}'], 'failure': []}, {'name': 'Mutant #3582', 'line': 176, 'description': ['        self.watches = []'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -173,7 +173,7 @@\n class FrameVarInfo:\n     def __init__(self):\n         self.id_path_to_iinfo = {}\n-        self.watches = []\n+        self.watches = None\n \n     def get_inspect_info(self, id_path, read_only):\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5215', 'line': 132, 'description': ['                    self.__internal_dict__ = dict(iterable)'], 'failure': []}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5219', 'line': 140, 'description': ['                func = method_factory(method)'], 'failure': []}, {'name': 'Mutant #5220', 'line': 151, 'description': ['    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)'], 'failure': []}, {'name': 'Mutant #5221', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5222', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5223', 'line': 155, 'description': ['        self.values_to_expand = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -152,7 +152,7 @@\n     MOD_STR = "" [all+()]""\n \n     def setUp(self):\n-        self.values_to_expand = []\n+        self.values_to_expand = None\n         self.class_counts = {\n             ""mappings"": 0,\n             ""sequences"": 0,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5224', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5225', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5226', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5227', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5228', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5229', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5230', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5231', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5232', 'line': 161, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5233', 'line': 163, 'description': ['    def value_string(self, obj, expand=True):'], 'failure': []}, {'name': 'Mutant #5234', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5235', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5236', 'line': 165, 'description': ['            return repr(obj) + self.MOD_STR'], 'failure': []}, {'name': 'Mutant #5237', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5238', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5239', 'line': 179, 'description': ['                 self.value_string(getattr(obj, label), expand=False))'], 'failure': []}, {'name': 'Mutant #5240', 'line': 182, 'description': ['    @contextlib.contextmanager'], 'failure': []}]",78.72340425531915,"['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'FLV001' 'F001' 'F002' 'C002'
 'CML001' 'MRET001' 'COMPLEX001' 'F026' 'F027' 'F030' 'F031' 'P003' 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef//BinOp[count(descendant::BinOp) > 2]'
 './/FunctionDef[count(./body/*) > 50]'
 './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]'
 './/FunctionDef[count(./body/*) > 100]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 1, 'unused-variables': 0, 'method-too-long': 1, 'high-cyclomatic-complexity': 1, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 1, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,get_client,189-203,"[{'lineno': 190, 'coloffset': 8, 'linematch': 'if reverse:', 'context': '            self, stdin=self._handle, stdout=self._handle, term_size=term_size\n        )\n\n    def get_client(self, host, port, search_limit=100, reverse=False):\n        if reverse:\n            self.host, self.port = host, port\n            client, address = self.get_reverse_socket_client(host, port)\n            self.ident = f""{self.me}:{self.port}""\n        else:\n            self._sock, conn_info = self.get_socket_client(', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 189, 'coloffset': 4, 'linematch': 'def get_client(self, host, port, search_limit=100, reverse=False):', 'context': '        Debugger.__init__(\n            self, stdin=self._handle, stdout=self._handle, term_size=term_size\n        )\n\n    def get_client(self, host, port, search_limit=100, reverse=False):\n        if reverse:\n            self.host, self.port = host, port\n            client, address = self.get_reverse_socket_client(host, port)\n            self.ident = f""{self.me}:{self.port}""\n        else:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 190, 'coloffset': 8, 'linematch': 'if reverse:', 'context': '            self, stdin=self._handle, stdout=self._handle, term_size=term_size\n        )\n\n    def get_client(self, host, port, search_limit=100, reverse=False):\n        if reverse:\n            self.host, self.port = host, port\n            client, address = self.get_reverse_socket_client(host, port)\n            self.ident = f""{self.me}:{self.port}""\n        else:\n            self._sock, conn_info = self.get_socket_client(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 202, 'coloffset': 8, 'linematch': 'client.setblocking(1)', 'context': '            self.host, self.port = conn_info\n            self.ident = f""{self.me}:{self.port}""\n            self.say(BANNER.format(self=self))\n            client, address = self._sock.accept()\n        client.setblocking(1)\n        return client, (address, self.port)\n\n    def get_reverse_socket_client(self, host, port):\n        _sock = socket.socket()\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 203, 'coloffset': 8, 'linematch': 'return client, (address, self.port)', 'context': '            self.ident = f""{self.me}:{self.port}""\n            self.say(BANNER.format(self=self))\n            client, address = self._sock.accept()\n        client.setblocking(1)\n        return client, (address, self.port)\n\n    def get_reverse_socket_client(self, host, port):\n        _sock = socket.socket()\n        try:\n            _sock.connect((host, port))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3583', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': []}, {'name': 'Mutant #3584', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -189,7 +189,7 @@\n         # Do not globalize: cyclic import\n         from pudb.debugger import CONFIG\n \n-        self.show_detail = False\n+        self.show_detail = None\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3585', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': []}, {'name': 'Mutant #3586', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -190,7 +190,7 @@\n         from pudb.debugger import CONFIG\n \n         self.show_detail = False\n-        self.display_type = CONFIG[""stringifier""]\n+        self.display_type = None\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3587', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = True\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3588', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = None\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3589', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = True\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3590', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = None\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3591', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': []}, {'name': 'Mutant #3592', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -193,7 +193,7 @@\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n-        self.access_level = CONFIG[""default_variables_access_level""]\n+        self.access_level = None\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3593', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = True\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3594', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = None\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3595', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': []}, {'name': 'Mutant #3596', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -195,7 +195,7 @@\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n-        self.wrap = CONFIG[""wrap_variables""]\n+        self.wrap = None\n \n \n class WatchExpression:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3597', 'line': 203, 'description': ['        self.expression = expression'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -200,7 +200,7 @@\n \n class WatchExpression:\n     def __init__(self, expression):\n-        self.expression = expression\n+        self.expression = None\n \n \n class WatchEvalError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5241', 'line': 189, 'description': ['            self.fail(""ui_log.exception was unexpectedly called"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -186,7 +186,7 @@\n         fail if it is called.\n         """"""\n         def fake_exception_log(*args, **kwargs):\n-            self.fail(""ui_log.exception was unexpectedly called"")\n+            self.fail(""XXui_log.exception was unexpectedly calledXX"")\n \n         old_logger = ui_log.exception\n         ui_log.exception = fake_exception_log\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5242', 'line': 191, 'description': ['        old_logger = ui_log.exception'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -188,7 +188,7 @@\n         def fake_exception_log(*args, **kwargs):\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n-        old_logger = ui_log.exception\n+        old_logger = None\n         ui_log.exception = fake_exception_log\n         try:\n             yield\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5243', 'line': 192, 'description': ['        ui_log.exception = fake_exception_log'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -189,7 +189,7 @@\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n         old_logger = ui_log.exception\n-        ui_log.exception = fake_exception_log\n+        ui_log.exception = None\n         try:\n             yield\n         finally:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5244', 'line': 196, 'description': ['            ui_log.exception = old_logger'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -193,7 +193,7 @@\n         try:\n             yield\n         finally:\n-            ui_log.exception = old_logger\n+            ui_log.exception = None\n \n     def assert_walks_contents(self, container, label=""xs""):\n         expand_paths = {label}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5245', 'line': 198, 'description': ['    def assert_walks_contents(self, container, label=""xs""):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -195,7 +195,7 @@\n         finally:\n             ui_log.exception = old_logger\n \n-    def assert_walks_contents(self, container, label=""xs""):\n+    def assert_walks_contents(self, container, label=""XXxsXX""):\n         expand_paths = {label}\n         self.values_to_expand = [container]\n         self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5246', 'line': 199, 'description': ['        expand_paths = {label}'], 'failure': []}, {'name': 'Mutant #5247', 'line': 200, 'description': ['        self.values_to_expand = [container]'], 'failure': []}, {'name': 'Mutant #5248', 'line': 201, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))'], 'failure': []}]",30.434782608695656,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_reverse_socket_client,205-214,"[{'lineno': 211, 'coloffset': 12, 'linematch': 'if exc.errno == errno.ECONNREFUSED:', 'context': '        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:\n                raise ValueError(CONN_REFUSED.format(self=self)) from exc\n            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 211, 'coloffset': 15, 'linematch': 'if exc.errno == errno.ECONNREFUSED:', 'context': '        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:\n                raise ValueError(CONN_REFUSED.format(self=self)) from exc\n            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 211, 'coloffset': 15, 'linematch': 'if exc.errno == errno.ECONNREFUSED:', 'context': '        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:\n                raise ValueError(CONN_REFUSED.format(self=self)) from exc\n            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 211, 'coloffset': 15, 'linematch': 'if exc.errno == errno.ECONNREFUSED:', 'context': '        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:\n                raise ValueError(CONN_REFUSED.format(self=self)) from exc\n            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 211, 'coloffset': 15, 'linematch': 'if exc.errno == errno.ECONNREFUSED:', 'context': '        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:\n                raise ValueError(CONN_REFUSED.format(self=self)) from exc\n            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 205, 'coloffset': 4, 'linematch': 'def get_reverse_socket_client(self, host, port):', 'context': '            client, address = self._sock.accept()\n        client.setblocking(1)\n        return client, (address, self.port)\n\n    def get_reverse_socket_client(self, host, port):\n        _sock = socket.socket()\n        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 206, 'coloffset': 8, 'linematch': '_sock = socket.socket()', 'context': '        client.setblocking(1)\n        return client, (address, self.port)\n\n    def get_reverse_socket_client(self, host, port):\n        _sock = socket.socket()\n        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 207, 'coloffset': 8, 'linematch': 'try:', 'context': '        return client, (address, self.port)\n\n    def get_reverse_socket_client(self, host, port):\n        _sock = socket.socket()\n        try:\n            _sock.connect((host, port))\n            _sock.setblocking(1)\n        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:\n                raise ValueError(CONN_REFUSED.format(self=self)) from exc', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 214, 'coloffset': 8, 'linematch': 'return _sock, _sock.getpeername()', 'context': '        except OSError as exc:\n            if exc.errno == errno.ECONNREFUSED:\n                raise ValueError(CONN_REFUSED.format(self=self)) from exc\n            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):\n        _sock, this_port = self.get_avail_port(host, port, search_limit)\n        _sock.setblocking(1)\n        _sock.listen(1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3598', 'line': 208, 'description': ['        return ""<error>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -205,7 +205,7 @@\n \n class WatchEvalError:\n     def __str__(self):\n-        return ""<error>""\n+        return ""XX<error>XX""\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5250', 'line': 206, 'description': ['            expected.extend([(f""[{repr(key)}]"", repr(container[key]))'], 'failure': []}, {'name': 'Mutant #5251', 'line': 208, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5252', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5253', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5254', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5255', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5256', 'line': 211, 'description': ['            expected.extend([(f""[{repr(index)}]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5257', 'line': 213, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5258', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5259', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5260', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5261', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}]",92.3076923076923,['CL001' 'BOOL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,get_avail_port,222-237,"[{'lineno': 231, 'coloffset': 16, 'linematch': 'if exc.errno in [errno.EADDRINUSE, errno.EINVAL]:', 'context': '            this_port = port + i\n            try:\n                _sock.bind((host, this_port))\n            except OSError as exc:\n                if exc.errno in [errno.EADDRINUSE, errno.EINVAL]:\n                    continue\n                raise\n            else:\n                return _sock, this_port\n        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 222, 'coloffset': 4, 'linematch': 'def get_avail_port(self, host, port, search_limit=100, skew=+0):', 'context': '        _sock.setblocking(1)\n        _sock.listen(1)\n        return _sock, (host, this_port)\n\n    def get_avail_port(self, host, port, search_limit=100, skew=+0):\n        this_port = None\n        for i in range(search_limit):\n            _sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            _sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            this_port = port + i', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 223, 'coloffset': 8, 'linematch': 'this_port = None', 'context': '        _sock.listen(1)\n        return _sock, (host, this_port)\n\n    def get_avail_port(self, host, port, search_limit=100, skew=+0):\n        this_port = None\n        for i in range(search_limit):\n            _sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            _sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            this_port = port + i\n            try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 224, 'coloffset': 8, 'linematch': 'for i in range(search_limit):', 'context': '        return _sock, (host, this_port)\n\n    def get_avail_port(self, host, port, search_limit=100, skew=+0):\n        this_port = None\n        for i in range(search_limit):\n            _sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\n            _sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)\n            this_port = port + i\n            try:\n                _sock.bind((host, this_port))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3602', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 1 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3603', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3604', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level - 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3605', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level + 2\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3606', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3607', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': []}, {'name': 'Mutant #3608', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -220,7 +220,7 @@\n         assert isinstance(id_path, str)\n         self.parent = parent\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n-        self.prefix = self.PREFIX * self.nesting_level\n+        self.prefix = None\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3609', 'line': 224, 'description': ['        self.var_label = var_label'], 'failure': []}, {'name': 'Mutant #3610', 'line': 225, 'description': ['        self.value_str = value_str'], 'failure': []}, {'name': 'Mutant #3611', 'line': 226, 'description': ['        self.id_path = id_path'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -223,7 +223,7 @@\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n-        self.id_path = id_path\n+        self.id_path = None\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3612', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix or ""XXvarXX""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3613', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix and ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3614', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = None\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3615', 'line': 228, 'description': ['        self.watch_expr = watch_expr'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -225,7 +225,7 @@\n         self.value_str = value_str\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n-        self.watch_expr = watch_expr\n+        self.watch_expr = None\n         if iinfo is None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3616', 'line': 229, 'description': ['        if iinfo is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -226,7 +226,7 @@\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n-        if iinfo is None:\n+        if iinfo is not None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3617', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = CONFIG[""XXwrap_variablesXX""]\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3618', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = None\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3619', 'line': 235, 'description': ['            self.wrap = iinfo.wrap'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -232,7 +232,7 @@\n \n             self.wrap = CONFIG[""wrap_variables""]\n         else:\n-            self.wrap = iinfo.wrap\n+            self.wrap = None\n \n     def __str__(self):\n         return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5272', 'line': 227, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}]",38.095238095238095,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,close_remote_session,242-248,"[{'lineno': 246, 'coloffset': 8, 'linematch': 'if self._sock:', 'context': '    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()\n        self._client.close()\n        if self._sock:\n            self._sock.close()\n        self.say(SESSION_ENDED.format(self=self))\n\n\ndef debugger(', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 242, 'coloffset': 4, 'linematch': 'def close_remote_session(self):', 'context': '\n    def say(self, m):\n        print(m, file=self.out)\n\n    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()\n        self._client.close()\n        if self._sock:\n            self._sock.close()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 243, 'coloffset': 8, 'linematch': 'self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles', 'context': '    def say(self, m):\n        print(m, file=self.out)\n\n    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()\n        self._client.close()\n        if self._sock:\n            self._sock.close()\n        self.say(SESSION_ENDED.format(self=self))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 244, 'coloffset': 8, 'linematch': 'self._handle.close()', 'context': '        print(m, file=self.out)\n\n    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()\n        self._client.close()\n        if self._sock:\n            self._sock.close()\n        self.say(SESSION_ENDED.format(self=self))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 245, 'coloffset': 8, 'linematch': 'self._client.close()', 'context': '\n    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()\n        self._client.close()\n        if self._sock:\n            self._sock.close()\n        self.say(SESSION_ENDED.format(self=self))\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 246, 'coloffset': 8, 'linematch': 'if self._sock:', 'context': '    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()\n        self._client.close()\n        if self._sock:\n            self._sock.close()\n        self.say(SESSION_ENDED.format(self=self))\n\n\ndef debugger(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 248, 'coloffset': 8, 'linematch': 'self.say(SESSION_ENDED.format(self=self))', 'context': '        self._handle.close()\n        self._client.close()\n        if self._sock:\n            self._sock.close()\n        self.say(SESSION_ENDED.format(self=self))\n\n\ndef debugger(\n    term_size=None,\n    host=PUDB_RDB_HOST,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3621', 'line': 246, 'description': ['        return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -243,7 +243,7 @@\n                 ))\n \n     def selectable(self):\n-        return True\n+        return False\n \n     def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}]",50.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,run_classic_shell,69-111,"[{'lineno': 70, 'coloffset': 4, 'linematch': 'if SHELL_FIRST_TIME:', 'context': 'SHELL_FIRST_TIME = [True]\n\n\ndef run_classic_shell(globals, locals, message=""""):\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 76, 'coloffset': 4, 'linematch': 'if message:', 'context': '        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n\n    if message:\n        banner = f""{message}\\n{banner}""\n\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    from os.path import join', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 95, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '        have_readline = True\n    except ImportError:\n        have_readline = False\n\n    if have_readline:\n        readline.set_completer(\n                rlcompleter.Completer(ns).complete)\n        readline.parse_and_bind(""tab: complete"")\n        readline.clear_history()\n        try:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 110, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '    cons = InteractiveConsole(ns)\n\n    cons.interact(banner)\n\n    if have_readline:\n        readline.write_history_file(hist_file)\n\n\ndef run_bpython_shell(globals, locals):\n    ns = SetPropagatingDict([locals, globals], locals)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 69, 'coloffset': 0, 'linematch': 'def run_classic_shell(globals, locals, message=""""):', 'context': '\nSHELL_FIRST_TIME = [True]\n\n\ndef run_classic_shell(globals, locals, message=""""):\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 76, 'coloffset': 4, 'linematch': 'if message:', 'context': '        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n\n    if message:\n        banner = f""{message}\\n{banner}""\n\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    from os.path import join', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 95, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '        have_readline = True\n    except ImportError:\n        have_readline = False\n\n    if have_readline:\n        readline.set_completer(\n                rlcompleter.Completer(ns).complete)\n        readline.parse_and_bind(""tab: complete"")\n        readline.clear_history()\n        try:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 110, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '    cons = InteractiveConsole(ns)\n\n    cons.interact(banner)\n\n    if have_readline:\n        readline.write_history_file(hist_file)\n\n\ndef run_bpython_shell(globals, locals):\n    ns = SetPropagatingDict([locals, globals], locals)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 70, 'coloffset': 4, 'linematch': 'if SHELL_FIRST_TIME:', 'context': 'SHELL_FIRST_TIME = [True]\n\n\ndef run_classic_shell(globals, locals, message=""""):\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 76, 'coloffset': 4, 'linematch': 'if message:', 'context': '        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n\n    if message:\n        banner = f""{message}\\n{banner}""\n\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    from os.path import join', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 79, 'coloffset': 4, 'linematch': 'ns = SetPropagatingDict([locals, globals], locals)', 'context': '\n    if message:\n        banner = f""{message}\\n{banner}""\n\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    from os.path import join\n\n    from pudb.settings import get_save_config_path\n    hist_file = join(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 81, 'coloffset': 4, 'linematch': 'from os.path import join', 'context': '        banner = f""{message}\\n{banner}""\n\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    from os.path import join\n\n    from pudb.settings import get_save_config_path\n    hist_file = join(\n            get_save_config_path(),\n            ""shell-history"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 83, 'coloffset': 4, 'linematch': 'from pudb.settings import get_save_config_path', 'context': '    ns = SetPropagatingDict([locals, globals], locals)\n\n    from os.path import join\n\n    from pudb.settings import get_save_config_path\n    hist_file = join(\n            get_save_config_path(),\n            ""shell-history"")\n\n    try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 84, 'coloffset': 4, 'linematch': 'hist_file = join(', 'context': '\n    from os.path import join\n\n    from pudb.settings import get_save_config_path\n    hist_file = join(\n            get_save_config_path(),\n            ""shell-history"")\n\n    try:\n        import readline', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 88, 'coloffset': 4, 'linematch': 'try:', 'context': '    hist_file = join(\n            get_save_config_path(),\n            ""shell-history"")\n\n    try:\n        import readline\n        import rlcompleter\n        have_readline = True\n    except ImportError:\n        have_readline = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 95, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '        have_readline = True\n    except ImportError:\n        have_readline = False\n\n    if have_readline:\n        readline.set_completer(\n                rlcompleter.Completer(ns).complete)\n        readline.parse_and_bind(""tab: complete"")\n        readline.clear_history()\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 105, 'coloffset': 4, 'linematch': 'from code import InteractiveConsole', 'context': '            readline.read_history_file(hist_file)\n        except OSError:\n            pass\n\n    from code import InteractiveConsole\n    cons = InteractiveConsole(ns)\n\n    cons.interact(banner)\n\n    if have_readline:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 106, 'coloffset': 4, 'linematch': 'cons = InteractiveConsole(ns)', 'context': '        except OSError:\n            pass\n\n    from code import InteractiveConsole\n    cons = InteractiveConsole(ns)\n\n    cons.interact(banner)\n\n    if have_readline:\n        readline.write_history_file(hist_file)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 108, 'coloffset': 4, 'linematch': 'cons.interact(banner)', 'context': '\n    from code import InteractiveConsole\n    cons = InteractiveConsole(ns)\n\n    cons.interact(banner)\n\n    if have_readline:\n        readline.write_history_file(hist_file)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 110, 'coloffset': 4, 'linematch': 'if have_readline:', 'context': '    cons = InteractiveConsole(ns)\n\n    cons.interact(banner)\n\n    if have_readline:\n        readline.write_history_file(hist_file)\n\n\ndef run_bpython_shell(globals, locals):\n    ns = SetPropagatingDict([locals, globals], locals)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 69, 'coloffset': 0, 'linematch': 'def run_classic_shell(globals, locals, message=""""):', 'context': '\nSHELL_FIRST_TIME = [True]\n\n\ndef run_classic_shell(globals, locals, message=""""):\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 69, 'coloffset': 0, 'linematch': 'def run_classic_shell(globals, locals, message=""""):', 'context': '\nSHELL_FIRST_TIME = [True]\n\n\ndef run_classic_shell(globals, locals, message=""""):\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3550', 'line': 76, 'description': ['            ui_log.error(""Object {l!r} appears to be a collection, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -73,7 +73,7 @@\n             for count, entry in enumerate(collection):\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a collection, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a collection, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3552', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -77,7 +77,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, collection):\n         return len(collection)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #3555', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3556', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3557', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3558', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3559', 'line': 98, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3560', 'line': 107, 'description': ['                yield str(count), entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -104,7 +104,7 @@\n         assert isinstance(sequence, cls)\n         try:\n             for count, entry in enumerate(sequence):\n-                yield str(count), entry, f""[{count:d}]""\n+                yield str(count), entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3561', 'line': 109, 'description': ['            ui_log.error(""Object {l!r} appears to be a sequence, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -106,7 +106,7 @@\n             for count, entry in enumerate(sequence):\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a sequence, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3562', 'line': 110, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -107,7 +107,7 @@\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5184', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = 43\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5185', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = None\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5187', 'line': 76, 'description': ['    @property'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -73,7 +73,6 @@\n     def bar(self):\n         return True\n \n-    @property\n     def red(self):\n         return ""red""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5189', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -77,7 +77,6 @@\n     def red(self):\n         return ""red""\n \n-    @classmethod\n     def blue(cls):\n         return ""blue""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5191', 'line': 84, 'description': ['    @staticmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -81,7 +81,6 @@\n     def blue(cls):\n         return ""blue""\n \n-    @staticmethod\n     def green():\n         return ""green""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5194', 'line': 92, 'description': ['        return ""amazing""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -89,7 +89,7 @@\n         return ""shh""\n \n     def __magicsomething__(self):\n-        return ""amazing""\n+        return ""XXamazingXX""\n \n \n def method_factory(method_name):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5195', 'line': 97, 'description': ['        func = getattr(self.__internal_dict__, method_name)'], 'failure': []}, {'name': 'Mutant #5196', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name != ""__getitem__""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5197', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name == ""XX__getitem__XX""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5198', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -101,7 +101,7 @@\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n             if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+                    and args and isinstance(args[1], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5199', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,8 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+            if (method_name == ""__getitem__"" or args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}]",26.666666666666668,['CL001' 'ANNOT001' 'F002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,ipython_version,144-149,"[{'lineno': 145, 'coloffset': 4, 'linematch': 'if have_ipython():', 'context': '        return True\n\n\ndef ipython_version():\n    if have_ipython():\n        from IPython import version_info\n        return version_info\n    else:\n        return None\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 144, 'coloffset': 0, 'linematch': 'def ipython_version():', 'context': '    else:\n        return True\n\n\ndef ipython_version():\n    if have_ipython():\n        from IPython import version_info\n        return version_info\n    else:\n        return None', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 145, 'coloffset': 4, 'linematch': 'if have_ipython():', 'context': '        return True\n\n\ndef ipython_version():\n    if have_ipython():\n        from IPython import version_info\n        return version_info\n    else:\n        return None\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3575', 'line': 148, 'description': ['                key_repr = cls._safe_key_repr(key)'], 'failure': []}, {'name': 'Mutant #3576', 'line': 149, 'description': ['                yield (key_repr, mapping[key], f""[{key_repr}]"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -146,7 +146,7 @@\n         try:\n             for key in mapping.keys():\n                 key_repr = cls._safe_key_repr(key)\n-                yield (key_repr, mapping[key], f""[{key_repr}]"")\n+                yield (key_repr, mapping[key], f""XX[{key_repr}]XX"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,run_ipython_shell_v10,152-165,"[{'lineno': 154, 'coloffset': 4, 'linematch': 'if SHELL_FIRST_TIME:', 'context': '\n\ndef run_ipython_shell_v10(globals, locals):\n    """"""IPython shell from IPython version 0.10""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 152, 'coloffset': 0, 'linematch': 'def run_ipython_shell_v10(globals, locals):', 'context': '    else:\n        return None\n\n\ndef run_ipython_shell_v10(globals, locals):\n    """"""IPython shell from IPython version 0.10""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 153, 'coloffset': 4, 'linematch': '""""""IPython shell from IPython version 0.10""""""', 'context': '        return None\n\n\ndef run_ipython_shell_v10(globals, locals):\n    """"""IPython shell from IPython version 0.10""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 154, 'coloffset': 4, 'linematch': 'if SHELL_FIRST_TIME:', 'context': '\n\ndef run_ipython_shell_v10(globals, locals):\n    """"""IPython shell from IPython version 0.10""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 161, 'coloffset': 4, 'linematch': 'ns = locals.copy()', 'context': '    else:\n        banner = """"\n\n    # avoid IPython\'s namespace litter\n    ns = locals.copy()\n\n    from IPython.Shell import IPShell\n    IPShell(argv=[], user_ns=ns, user_global_ns=globals) \\\n            .mainloop(banner=banner)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 163, 'coloffset': 4, 'linematch': 'from IPython.Shell import IPShell', 'context': ""\n    # avoid IPython's namespace litter\n    ns = locals.copy()\n\n    from IPython.Shell import IPShell\n    IPShell(argv=[], user_ns=ns, user_global_ns=globals) \\\n            .mainloop(banner=banner)\n\n\ndef _update_ipython_ns(shell, globals, locals):"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 164, 'coloffset': 4, 'linematch': 'IPShell(argv=[], user_ns=ns, user_global_ns=globals) \\', 'context': '    # avoid IPython\'s namespace litter\n    ns = locals.copy()\n\n    from IPython.Shell import IPShell\n    IPShell(argv=[], user_ns=ns, user_global_ns=globals) \\\n            .mainloop(banner=banner)\n\n\ndef _update_ipython_ns(shell, globals, locals):\n    """"""Update the IPython 0.11 namespace at every visit""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3578', 'line': 152, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -149,7 +149,7 @@\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3579', 'line': 155, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -152,7 +152,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, mapping):\n         return len(mapping.keys())\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5221', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5222', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5223', 'line': 155, 'description': ['        self.values_to_expand = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -152,7 +152,7 @@\n     MOD_STR = "" [all+()]""\n \n     def setUp(self):\n-        self.values_to_expand = []\n+        self.values_to_expand = None\n         self.class_counts = {\n             ""mappings"": 0,\n             ""sequences"": 0,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5224', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5225', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5226', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5227', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5228', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5229', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5230', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5231', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5232', 'line': 161, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5233', 'line': 163, 'description': ['    def value_string(self, obj, expand=True):'], 'failure': []}, {'name': 'Mutant #5234', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5235', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5236', 'line': 165, 'description': ['            return repr(obj) + self.MOD_STR'], 'failure': []}]",83.33333333333334,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,run_ipython_shell_v11,189-239,"[{'lineno': 191, 'coloffset': 4, 'linematch': 'if SHELL_FIRST_TIME:', 'context': '\n\ndef run_ipython_shell_v11(globals, locals):\n    """"""IPython shell from IPython version 0.11""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 222, 'coloffset': 4, 'linematch': 'if ipython_version() < (5, 0, 0):', 'context': '    # Update shell with current namespace\n    _update_ipython_ns(shell, globals, locals)\n\n    args = []\n    if ipython_version() < (5, 0, 0):\n        args.append(banner)\n    else:\n        print(banner)\n\n    # XXX Quick and dirty way to fix issues with IPython 8.0.0+, introduced', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 189, 'coloffset': 0, 'linematch': 'def run_ipython_shell_v11(globals, locals):', 'context': '    shell.init_user_ns()\n    shell.init_completer()\n\n\ndef run_ipython_shell_v11(globals, locals):\n    """"""IPython shell from IPython version 0.11""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 222, 'coloffset': 4, 'linematch': 'if ipython_version() < (5, 0, 0):', 'context': '    # Update shell with current namespace\n    _update_ipython_ns(shell, globals, locals)\n\n    args = []\n    if ipython_version() < (5, 0, 0):\n        args.append(banner)\n    else:\n        print(banner)\n\n    # XXX Quick and dirty way to fix issues with IPython 8.0.0+, introduced', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 190, 'coloffset': 4, 'linematch': '""""""IPython shell from IPython version 0.11""""""', 'context': '    shell.init_completer()\n\n\ndef run_ipython_shell_v11(globals, locals):\n    """"""IPython shell from IPython version 0.11""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 191, 'coloffset': 4, 'linematch': 'if SHELL_FIRST_TIME:', 'context': '\n\ndef run_ipython_shell_v11(globals, locals):\n    """"""IPython shell from IPython version 0.11""""""\n    if SHELL_FIRST_TIME:\n        banner = ""Hit Ctrl-D to return to PuDB.""\n        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 197, 'coloffset': 4, 'linematch': 'try:', 'context': '        SHELL_FIRST_TIME.pop()\n    else:\n        banner = """"\n\n    try:\n        # IPython 1.0 got rid of the frontend intermediary, and complains with\n        # a deprecated warning when you use it.\n        from IPython.terminal.interactiveshell import TerminalInteractiveShell\n        from IPython.terminal.ipapp import load_default_config\n    except ImportError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 208, 'coloffset': 4, 'linematch': 'config = load_default_config()', 'context': ""        from IPython.frontend.terminal.ipapp import load_default_config\n    # XXX: in the future it could be useful to load a 'pudb' config for the\n    # user (if it exists) that could contain the user's macros and other\n    # niceities.\n    config = load_default_config()\n    shell = TerminalInteractiveShell.instance(config=config,\n            banner2=banner)\n    # XXX This avoids a warning about not having unique session/line numbers.\n    # See the HistoryManager.writeout_cache method in IPython.core.history.\n    shell.history_manager.new_session()"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 209, 'coloffset': 4, 'linematch': 'shell = TerminalInteractiveShell.instance(config=config,', 'context': ""    # XXX: in the future it could be useful to load a 'pudb' config for the\n    # user (if it exists) that could contain the user's macros and other\n    # niceities.\n    config = load_default_config()\n    shell = TerminalInteractiveShell.instance(config=config,\n            banner2=banner)\n    # XXX This avoids a warning about not having unique session/line numbers.\n    # See the HistoryManager.writeout_cache method in IPython.core.history.\n    shell.history_manager.new_session()\n    # Save the originating namespace"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 213, 'coloffset': 4, 'linematch': 'shell.history_manager.new_session()', 'context': '    shell = TerminalInteractiveShell.instance(config=config,\n            banner2=banner)\n    # XXX This avoids a warning about not having unique session/line numbers.\n    # See the HistoryManager.writeout_cache method in IPython.core.history.\n    shell.history_manager.new_session()\n    # Save the originating namespace\n    old_locals = shell.user_ns\n    old_globals = shell.user_global_ns\n\n    # Update shell with current namespace', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 215, 'coloffset': 4, 'linematch': 'old_locals = shell.user_ns', 'context': '    # XXX This avoids a warning about not having unique session/line numbers.\n    # See the HistoryManager.writeout_cache method in IPython.core.history.\n    shell.history_manager.new_session()\n    # Save the originating namespace\n    old_locals = shell.user_ns\n    old_globals = shell.user_global_ns\n\n    # Update shell with current namespace\n    _update_ipython_ns(shell, globals, locals)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 216, 'coloffset': 4, 'linematch': 'old_globals = shell.user_global_ns', 'context': '    # See the HistoryManager.writeout_cache method in IPython.core.history.\n    shell.history_manager.new_session()\n    # Save the originating namespace\n    old_locals = shell.user_ns\n    old_globals = shell.user_global_ns\n\n    # Update shell with current namespace\n    _update_ipython_ns(shell, globals, locals)\n\n    args = []', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 219, 'coloffset': 4, 'linematch': '_update_ipython_ns(shell, globals, locals)', 'context': '    old_locals = shell.user_ns\n    old_globals = shell.user_global_ns\n\n    # Update shell with current namespace\n    _update_ipython_ns(shell, globals, locals)\n\n    args = []\n    if ipython_version() < (5, 0, 0):\n        args.append(banner)\n    else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 221, 'coloffset': 4, 'linematch': 'args = []', 'context': '\n    # Update shell with current namespace\n    _update_ipython_ns(shell, globals, locals)\n\n    args = []\n    if ipython_version() < (5, 0, 0):\n        args.append(banner)\n    else:\n        print(banner)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 222, 'coloffset': 4, 'linematch': 'if ipython_version() < (5, 0, 0):', 'context': '    # Update shell with current namespace\n    _update_ipython_ns(shell, globals, locals)\n\n    args = []\n    if ipython_version() < (5, 0, 0):\n        args.append(banner)\n    else:\n        print(banner)\n\n    # XXX Quick and dirty way to fix issues with IPython 8.0.0+, introduced', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 234, 'coloffset': 4, 'linematch': 'shell._atexit_once_called = True', 'context': '    # IPython.core.interactiveshell.InteractiveShell._atexit_once() from inside\n    # IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop()\n    # This allows us to repeatedly re-call mainloop() and the whole\n    # run_ipython_shell_v11() function\n    shell._atexit_once_called = True\n    shell.mainloop(*args)\n    del shell._atexit_once_called\n\n    # Restore originating namespace\n    _update_ipython_ns(shell, old_globals, old_locals)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 235, 'coloffset': 4, 'linematch': 'shell.mainloop(*args)', 'context': '    # IPython.terminal.interactiveshell.TerminalInteractiveShell.mainloop()\n    # This allows us to repeatedly re-call mainloop() and the whole\n    # run_ipython_shell_v11() function\n    shell._atexit_once_called = True\n    shell.mainloop(*args)\n    del shell._atexit_once_called\n\n    # Restore originating namespace\n    _update_ipython_ns(shell, old_globals, old_locals)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 236, 'coloffset': 4, 'linematch': 'del shell._atexit_once_called', 'context': '    # This allows us to repeatedly re-call mainloop() and the whole\n    # run_ipython_shell_v11() function\n    shell._atexit_once_called = True\n    shell.mainloop(*args)\n    del shell._atexit_once_called\n\n    # Restore originating namespace\n    _update_ipython_ns(shell, old_globals, old_locals)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 239, 'coloffset': 4, 'linematch': '_update_ipython_ns(shell, old_globals, old_locals)', 'context': '    shell.mainloop(*args)\n    del shell._atexit_once_called\n\n    # Restore originating namespace\n    _update_ipython_ns(shell, old_globals, old_locals)\n\n\ndef run_ipython_shell(globals, locals):\n    import IPython\n    if have_ipython() and hasattr(IPython, ""Shell""):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3583', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': []}, {'name': 'Mutant #3584', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -189,7 +189,7 @@\n         # Do not globalize: cyclic import\n         from pudb.debugger import CONFIG\n \n-        self.show_detail = False\n+        self.show_detail = None\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3585', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': []}, {'name': 'Mutant #3586', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -190,7 +190,7 @@\n         from pudb.debugger import CONFIG\n \n         self.show_detail = False\n-        self.display_type = CONFIG[""stringifier""]\n+        self.display_type = None\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3587', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = True\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3588', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = None\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3589', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = True\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3590', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = None\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3591', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': []}, {'name': 'Mutant #3592', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -193,7 +193,7 @@\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n-        self.access_level = CONFIG[""default_variables_access_level""]\n+        self.access_level = None\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3593', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = True\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3594', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = None\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3595', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': []}, {'name': 'Mutant #3596', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -195,7 +195,7 @@\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n-        self.wrap = CONFIG[""wrap_variables""]\n+        self.wrap = None\n \n \n class WatchExpression:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3597', 'line': 203, 'description': ['        self.expression = expression'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -200,7 +200,7 @@\n \n class WatchExpression:\n     def __init__(self, expression):\n-        self.expression = expression\n+        self.expression = None\n \n \n class WatchEvalError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3598', 'line': 208, 'description': ['        return ""<error>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -205,7 +205,7 @@\n \n class WatchEvalError:\n     def __str__(self):\n-        return ""<error>""\n+        return ""XX<error>XX""\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3599', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -213,7 +213,7 @@\n # {{{ widget\n \n class VariableWidget(urwid.FlowWidget):\n-    PREFIX = ""| ""\n+    PREFIX = ""XX| XX""\n \n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3600', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': []}, {'name': 'Mutant #3601', 'line': 221, 'description': ['        self.parent = parent'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -218,7 +218,7 @@\n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n-        self.parent = parent\n+        self.parent = None\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3602', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 1 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3603', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3604', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level - 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3605', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level + 2\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3606', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3607', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': []}, {'name': 'Mutant #3608', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -220,7 +220,7 @@\n         assert isinstance(id_path, str)\n         self.parent = parent\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n-        self.prefix = self.PREFIX * self.nesting_level\n+        self.prefix = None\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3609', 'line': 224, 'description': ['        self.var_label = var_label'], 'failure': []}, {'name': 'Mutant #3610', 'line': 225, 'description': ['        self.value_str = value_str'], 'failure': []}, {'name': 'Mutant #3611', 'line': 226, 'description': ['        self.id_path = id_path'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -223,7 +223,7 @@\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n-        self.id_path = id_path\n+        self.id_path = None\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3612', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix or ""XXvarXX""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3613', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix and ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3614', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = None\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3615', 'line': 228, 'description': ['        self.watch_expr = watch_expr'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -225,7 +225,7 @@\n         self.value_str = value_str\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n-        self.watch_expr = watch_expr\n+        self.watch_expr = None\n         if iinfo is None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3616', 'line': 229, 'description': ['        if iinfo is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -226,7 +226,7 @@\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n-        if iinfo is None:\n+        if iinfo is not None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3617', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = CONFIG[""XXwrap_variablesXX""]\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3618', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = None\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3619', 'line': 235, 'description': ['            self.wrap = iinfo.wrap'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -232,7 +232,7 @@\n \n             self.wrap = CONFIG[""wrap_variables""]\n         else:\n-            self.wrap = iinfo.wrap\n+            self.wrap = None\n \n     def __str__(self):\n         return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3620', 'line': 238, 'description': ['        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -235,7 +235,7 @@\n             self.wrap = iinfo.wrap\n \n     def __str__(self):\n-        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n+        return (""XXVariableWidget: {value_str}, level {nesting_level}, at {id_path}XX""\n                 .format(\n                     value_str=self.value_str,\n                     nesting_level=self.nesting_level,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5241', 'line': 189, 'description': ['            self.fail(""ui_log.exception was unexpectedly called"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -186,7 +186,7 @@\n         fail if it is called.\n         """"""\n         def fake_exception_log(*args, **kwargs):\n-            self.fail(""ui_log.exception was unexpectedly called"")\n+            self.fail(""XXui_log.exception was unexpectedly calledXX"")\n \n         old_logger = ui_log.exception\n         ui_log.exception = fake_exception_log\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5242', 'line': 191, 'description': ['        old_logger = ui_log.exception'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -188,7 +188,7 @@\n         def fake_exception_log(*args, **kwargs):\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n-        old_logger = ui_log.exception\n+        old_logger = None\n         ui_log.exception = fake_exception_log\n         try:\n             yield\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5243', 'line': 192, 'description': ['        ui_log.exception = fake_exception_log'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -189,7 +189,7 @@\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n         old_logger = ui_log.exception\n-        ui_log.exception = fake_exception_log\n+        ui_log.exception = None\n         try:\n             yield\n         finally:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5244', 'line': 196, 'description': ['            ui_log.exception = old_logger'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -193,7 +193,7 @@\n         try:\n             yield\n         finally:\n-            ui_log.exception = old_logger\n+            ui_log.exception = None\n \n     def assert_walks_contents(self, container, label=""xs""):\n         expand_paths = {label}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5245', 'line': 198, 'description': ['    def assert_walks_contents(self, container, label=""xs""):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -195,7 +195,7 @@\n         finally:\n             ui_log.exception = old_logger\n \n-    def assert_walks_contents(self, container, label=""xs""):\n+    def assert_walks_contents(self, container, label=""XXxsXX""):\n         expand_paths = {label}\n         self.values_to_expand = [container]\n         self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5246', 'line': 199, 'description': ['        expand_paths = {label}'], 'failure': []}, {'name': 'Mutant #5247', 'line': 200, 'description': ['        self.values_to_expand = [container]'], 'failure': []}, {'name': 'Mutant #5248', 'line': 201, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))'], 'failure': []}, {'name': 'Mutant #5249', 'line': 204, 'description': ['        expected = [(label, self.value_string(container))]'], 'failure': []}, {'name': 'Mutant #5250', 'line': 206, 'description': ['            expected.extend([(f""[{repr(key)}]"", repr(container[key]))'], 'failure': []}, {'name': 'Mutant #5251', 'line': 208, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5252', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5253', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5254', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5255', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5256', 'line': 211, 'description': ['            expected.extend([(f""[{repr(index)}]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5257', 'line': 213, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5258', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5259', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5260', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5261', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5262', 'line': 216, 'description': ['            expected.extend([(""[]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5263', 'line': 218, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5264', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5265', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5266', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5267', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5268', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5269', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5270', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5271', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5272', 'line': 227, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5275', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5276', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}]",56.57894736842105,['CL001' 'ANNOT001' 'F002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,run_ipython_shell,242-247,"[{'lineno': 244, 'coloffset': 4, 'linematch': 'if have_ipython() and hasattr(IPython, ""Shell""):', 'context': '\n\ndef run_ipython_shell(globals, locals):\n    import IPython\n    if have_ipython() and hasattr(IPython, ""Shell""):\n        return run_ipython_shell_v10(globals, locals)\n    else:\n        return run_ipython_shell_v11(globals, locals)\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 242, 'coloffset': 0, 'linematch': 'def run_ipython_shell(globals, locals):', 'context': '    # Restore originating namespace\n    _update_ipython_ns(shell, old_globals, old_locals)\n\n\ndef run_ipython_shell(globals, locals):\n    import IPython\n    if have_ipython() and hasattr(IPython, ""Shell""):\n        return run_ipython_shell_v10(globals, locals)\n    else:\n        return run_ipython_shell_v11(globals, locals)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 243, 'coloffset': 4, 'linematch': 'import IPython', 'context': '    _update_ipython_ns(shell, old_globals, old_locals)\n\n\ndef run_ipython_shell(globals, locals):\n    import IPython\n    if have_ipython() and hasattr(IPython, ""Shell""):\n        return run_ipython_shell_v10(globals, locals)\n    else:\n        return run_ipython_shell_v11(globals, locals)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 244, 'coloffset': 4, 'linematch': 'if have_ipython() and hasattr(IPython, ""Shell""):', 'context': '\n\ndef run_ipython_shell(globals, locals):\n    import IPython\n    if have_ipython() and hasattr(IPython, ""Shell""):\n        return run_ipython_shell_v10(globals, locals)\n    else:\n        return run_ipython_shell_v11(globals, locals)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3621', 'line': 246, 'description': ['        return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -243,7 +243,7 @@\n                 ))\n \n     def selectable(self):\n-        return True\n+        return False\n \n     def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}]",50.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_get_debugger,77-93,"[{'lineno': 79, 'coloffset': 4, 'linematch': 'if not Debugger._current_debugger:', 'context': '\n\ndef _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:\n        tty_path = _tty_override()\n        if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):\n            tty_file, term_size = _open_tty(tty_path)\n            kwargs.setdefault(""stdin"", tty_file)\n            kwargs.setdefault(""stdout"", tty_file)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 81, 'coloffset': 8, 'linematch': 'if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):', 'context': 'def _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:\n        tty_path = _tty_override()\n        if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):\n            tty_file, term_size = _open_tty(tty_path)\n            kwargs.setdefault(""stdin"", tty_file)\n            kwargs.setdefault(""stdout"", tty_file)\n            kwargs.setdefault(""term_size"", term_size)\n            tty_file.close()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 81, 'coloffset': 8, 'linematch': 'if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):', 'context': 'def _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:\n        tty_path = _tty_override()\n        if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):\n            tty_file, term_size = _open_tty(tty_path)\n            kwargs.setdefault(""stdin"", tty_file)\n            kwargs.setdefault(""stdout"", tty_file)\n            kwargs.setdefault(""term_size"", term_size)\n            tty_file.close()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 77, 'coloffset': 0, 'linematch': 'def _get_debugger(**kwargs):', 'context': '\n    return tty_file, term_size\n\n\ndef _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:\n        tty_path = _tty_override()\n        if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):\n            tty_file, term_size = _open_tty(tty_path)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 81, 'coloffset': 8, 'linematch': 'if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):', 'context': 'def _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:\n        tty_path = _tty_override()\n        if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):\n            tty_file, term_size = _open_tty(tty_path)\n            kwargs.setdefault(""stdin"", tty_file)\n            kwargs.setdefault(""stdout"", tty_file)\n            kwargs.setdefault(""term_size"", term_size)\n            tty_file.close()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 78, 'coloffset': 4, 'linematch': 'from pudb.debugger import Debugger', 'context': '    return tty_file, term_size\n\n\ndef _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:\n        tty_path = _tty_override()\n        if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):\n            tty_file, term_size = _open_tty(tty_path)\n            kwargs.setdefault(""stdin"", tty_file)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 79, 'coloffset': 4, 'linematch': 'if not Debugger._current_debugger:', 'context': '\n\ndef _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:\n        tty_path = _tty_override()\n        if tty_path and (""stdin"" not in kwargs or ""stdout"" not in kwargs):\n            tty_file, term_size = _open_tty(tty_path)\n            kwargs.setdefault(""stdin"", tty_file)\n            kwargs.setdefault(""stdout"", tty_file)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3552', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -77,7 +77,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, collection):\n         return len(collection)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #3555', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3556', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3557', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3558', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5189', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -77,7 +77,6 @@\n     def red(self):\n         return ""red""\n \n-    @classmethod\n     def blue(cls):\n         return ""blue""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5191', 'line': 84, 'description': ['    @staticmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -81,7 +81,6 @@\n     def blue(cls):\n         return ""blue""\n \n-    @staticmethod\n     def green():\n         return ""green""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5194', 'line': 92, 'description': ['        return ""amazing""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -89,7 +89,7 @@\n         return ""shh""\n \n     def __magicsomething__(self):\n-        return ""amazing""\n+        return ""XXamazingXX""\n \n \n def method_factory(method_name):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",40.0,['CL001' 'CL002' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,runscript,115-221,"[{'lineno': 128, 'coloffset': 4, 'linematch': 'if args is not None:', 'context': '    # changed by the user from the command line. The best approach would be to\n    # have a ""restart"" command which would allow explicit specification of\n    # command line arguments.\n\n    if args is not None:\n        prev_sys_argv = sys.argv[:]\n        if run_as_module:\n            sys.argv = args\n        else:\n            sys.argv = [mainpyfile] + args', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 218, 'coloffset': 4, 'linematch': 'if args is not None:', 'context': '        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()\n\n    if args is not None:\n        sys.argv = prev_sys_argv\n\n    sys.path = prev_sys_path\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 130, 'coloffset': 8, 'linematch': 'if run_as_module:', 'context': ""    # command line arguments.\n\n    if args is not None:\n        prev_sys_argv = sys.argv[:]\n        if run_as_module:\n            sys.argv = args\n        else:\n            sys.argv = [mainpyfile] + args\n\n    # replace pudb's dir with script's dir in front of module search path."", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 147, 'coloffset': 8, 'linematch': 'if pre_run:', 'context': '    while True:\n        # Script may have changed directory. Restore cwd before restart.\n        os.chdir(cwd)\n\n        if pre_run:\n            from subprocess import call\n            retcode = call(pre_run, close_fds=True, shell=True)\n            if retcode:\n                print(""*** WARNING: pre-run process exited with code %d."" % retcode)\n                input(""[Hit Enter]"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 150, 'coloffset': 12, 'linematch': 'if retcode:', 'context': '\n        if pre_run:\n            from subprocess import call\n            retcode = call(pre_run, close_fds=True, shell=True)\n            if retcode:\n                print(""*** WARNING: pre-run process exited with code %d."" % retcode)\n                input(""[Hit Enter]"")\n\n        status_msg = """"\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 157, 'coloffset': 12, 'linematch': 'if run_as_module:', 'context': '\n        status_msg = """"\n\n        try:\n            if run_as_module:\n                try:\n                    dbg._runmodule(mainpyfile)\n                except ImportError as e:\n                    print(e, file=sys.stderr)\n                    sys.exit(1)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 178, 'coloffset': 12, 'linematch': 'if not load_config()[""prompt_on_quit""]:', 'context': '        while True:\n            import urwid\n            pre_run_edit = urwid.Edit("""", pre_run)\n\n            if not load_config()[""prompt_on_quit""]:\n                return\n\n            result = dbg.ui.call_with_ui(dbg.ui.dialog,\n                urwid.ListBox(urwid.SimpleListWalker([urwid.Text(\n                    ""Your PuDB session has ended.\\n\\n%s""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 204, 'coloffset': 12, 'linematch': 'if result == ""quit"":', 'context': '                    (""q"", ""quit""),\n                    (""esc"", ""examine""),\n                    ])\n\n            if result == ""quit"":\n                return\n\n            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 207, 'coloffset': 12, 'linematch': 'if result == ""examine"":', 'context': '\n            if result == ""quit"":\n                return\n\n            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)\n\n            if result == ""restart"":\n                break', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 211, 'coloffset': 12, 'linematch': 'if result == ""restart"":', 'context': '            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)\n\n            if result == ""restart"":\n                break\n\n        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 130, 'coloffset': 8, 'linematch': 'if run_as_module:', 'context': ""    # command line arguments.\n\n    if args is not None:\n        prev_sys_argv = sys.argv[:]\n        if run_as_module:\n            sys.argv = args\n        else:\n            sys.argv = [mainpyfile] + args\n\n    # replace pudb's dir with script's dir in front of module search path."", 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 150, 'coloffset': 12, 'linematch': 'if retcode:', 'context': '\n        if pre_run:\n            from subprocess import call\n            retcode = call(pre_run, close_fds=True, shell=True)\n            if retcode:\n                print(""*** WARNING: pre-run process exited with code %d."" % retcode)\n                input(""[Hit Enter]"")\n\n        status_msg = """"\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 211, 'coloffset': 15, 'linematch': 'if result == ""restart"":', 'context': '            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)\n\n            if result == ""restart"":\n                break\n\n        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 211, 'coloffset': 15, 'linematch': 'if result == ""restart"":', 'context': '            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)\n\n            if result == ""restart"":\n                break\n\n        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 211, 'coloffset': 15, 'linematch': 'if result == ""restart"":', 'context': '            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)\n\n            if result == ""restart"":\n                break\n\n        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 115, 'coloffset': 0, 'linematch': 'def runscript(mainpyfile, args=None, pre_run="""", steal_output=False,', 'context': '    kwargs[""run_as_module""] = True\n    runscript(*args, **kwargs)\n\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,\n              _continue_at_start=False, run_as_module=False):\n    dbg = _get_debugger(\n        steal_output=steal_output,\n        _continue_at_start=_continue_at_start,\n    )', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 204, 'coloffset': 12, 'linematch': 'if result == ""quit"":', 'context': '                    (""q"", ""quit""),\n                    (""esc"", ""examine""),\n                    ])\n\n            if result == ""quit"":\n                return\n\n            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 207, 'coloffset': 12, 'linematch': 'if result == ""examine"":', 'context': '\n            if result == ""quit"":\n                return\n\n            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)\n\n            if result == ""restart"":\n                break', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 211, 'coloffset': 12, 'linematch': 'if result == ""restart"":', 'context': '            if result == ""examine"":\n                dbg.post_mortem = True\n                dbg.interaction(None, sys.exc_info(), show_exc_dialog=False)\n\n            if result == ""restart"":\n                break\n\n        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 218, 'coloffset': 4, 'linematch': 'if args is not None:', 'context': '        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()\n\n    if args is not None:\n        sys.argv = prev_sys_argv\n\n    sys.path = prev_sys_path\n\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 130, 'coloffset': 8, 'linematch': 'if run_as_module:', 'context': ""    # command line arguments.\n\n    if args is not None:\n        prev_sys_argv = sys.argv[:]\n        if run_as_module:\n            sys.argv = args\n        else:\n            sys.argv = [mainpyfile] + args\n\n    # replace pudb's dir with script's dir in front of module search path."", 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 150, 'coloffset': 12, 'linematch': 'if retcode:', 'context': '\n        if pre_run:\n            from subprocess import call\n            retcode = call(pre_run, close_fds=True, shell=True)\n            if retcode:\n                print(""*** WARNING: pre-run process exited with code %d."" % retcode)\n                input(""[Hit Enter]"")\n\n        status_msg = """"\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 117, 'coloffset': 4, 'linematch': 'dbg = _get_debugger(', 'context': '\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,\n              _continue_at_start=False, run_as_module=False):\n    dbg = _get_debugger(\n        steal_output=steal_output,\n        _continue_at_start=_continue_at_start,\n    )\n\n    # Note on saving/restoring sys.argv: it\'s a good idea when sys.argv was', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 128, 'coloffset': 4, 'linematch': 'if args is not None:', 'context': '    # changed by the user from the command line. The best approach would be to\n    # have a ""restart"" command which would allow explicit specification of\n    # command line arguments.\n\n    if args is not None:\n        prev_sys_argv = sys.argv[:]\n        if run_as_module:\n            sys.argv = args\n        else:\n            sys.argv = [mainpyfile] + args', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 136, 'coloffset': 4, 'linematch': 'from pathlib import Path', 'context': ""        else:\n            sys.argv = [mainpyfile] + args\n\n    # replace pudb's dir with script's dir in front of module search path.\n    from pathlib import Path\n    prev_sys_path = sys.path[:]\n    sys.path[0] = str(Path(mainpyfile).resolve().parent)\n\n    import os\n    cwd = os.getcwd()"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 137, 'coloffset': 4, 'linematch': 'prev_sys_path = sys.path[:]', 'context': ""            sys.argv = [mainpyfile] + args\n\n    # replace pudb's dir with script's dir in front of module search path.\n    from pathlib import Path\n    prev_sys_path = sys.path[:]\n    sys.path[0] = str(Path(mainpyfile).resolve().parent)\n\n    import os\n    cwd = os.getcwd()\n"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 138, 'coloffset': 4, 'linematch': 'sys.path[0] = str(Path(mainpyfile).resolve().parent)', 'context': ""\n    # replace pudb's dir with script's dir in front of module search path.\n    from pathlib import Path\n    prev_sys_path = sys.path[:]\n    sys.path[0] = str(Path(mainpyfile).resolve().parent)\n\n    import os\n    cwd = os.getcwd()\n\n    while True:"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 140, 'coloffset': 4, 'linematch': 'import os', 'context': '    from pathlib import Path\n    prev_sys_path = sys.path[:]\n    sys.path[0] = str(Path(mainpyfile).resolve().parent)\n\n    import os\n    cwd = os.getcwd()\n\n    while True:\n        # Script may have changed directory. Restore cwd before restart.\n        os.chdir(cwd)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 141, 'coloffset': 4, 'linematch': 'cwd = os.getcwd()', 'context': '    prev_sys_path = sys.path[:]\n    sys.path[0] = str(Path(mainpyfile).resolve().parent)\n\n    import os\n    cwd = os.getcwd()\n\n    while True:\n        # Script may have changed directory. Restore cwd before restart.\n        os.chdir(cwd)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 143, 'coloffset': 4, 'linematch': 'while True:', 'context': '\n    import os\n    cwd = os.getcwd()\n\n    while True:\n        # Script may have changed directory. Restore cwd before restart.\n        os.chdir(cwd)\n\n        if pre_run:\n            from subprocess import call', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 218, 'coloffset': 4, 'linematch': 'if args is not None:', 'context': '        pre_run = pre_run_edit.get_edit_text()\n\n        dbg.restart()\n\n    if args is not None:\n        sys.argv = prev_sys_argv\n\n    sys.path = prev_sys_path\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 221, 'coloffset': 4, 'linematch': 'sys.path = prev_sys_path', 'context': '\n    if args is not None:\n        sys.argv = prev_sys_argv\n\n    sys.path = prev_sys_path\n\n\ndef runstatement(statement, globals=None, locals=None):\n    return _get_debugger().run(statement, globals, locals)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 115, 'coloffset': 0, 'linematch': 'def runscript(mainpyfile, args=None, pre_run="""", steal_output=False,', 'context': '    kwargs[""run_as_module""] = True\n    runscript(*args, **kwargs)\n\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,\n              _continue_at_start=False, run_as_module=False):\n    dbg = _get_debugger(\n        steal_output=steal_output,\n        _continue_at_start=_continue_at_start,\n    )', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 115, 'coloffset': 0, 'linematch': 'def runscript(mainpyfile, args=None, pre_run="""", steal_output=False,', 'context': '    kwargs[""run_as_module""] = True\n    runscript(*args, **kwargs)\n\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,\n              _continue_at_start=False, run_as_module=False):\n    dbg = _get_debugger(\n        steal_output=steal_output,\n        _continue_at_start=_continue_at_start,\n    )', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 115, 'coloffset': 0, 'linematch': 'def runscript(mainpyfile, args=None, pre_run="""", steal_output=False,', 'context': '    kwargs[""run_as_module""] = True\n    runscript(*args, **kwargs)\n\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,\n              _continue_at_start=False, run_as_module=False):\n    dbg = _get_debugger(\n        steal_output=steal_output,\n        _continue_at_start=_continue_at_start,\n    )', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3564', 'line': 119, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3565', 'line': 121, 'description': ['        if cls is PudbMapping:'], 'failure': []}, {'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3572', 'line': 132, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3574', 'line': 139, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3575', 'line': 148, 'description': ['                key_repr = cls._safe_key_repr(key)'], 'failure': []}, {'name': 'Mutant #3576', 'line': 149, 'description': ['                yield (key_repr, mapping[key], f""[{key_repr}]"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -146,7 +146,7 @@\n         try:\n             for key in mapping.keys():\n                 key_repr = cls._safe_key_repr(key)\n-                yield (key_repr, mapping[key], f""[{key_repr}]"")\n+                yield (key_repr, mapping[key], f""XX[{key_repr}]XX"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3577', 'line': 151, 'description': ['            ui_log.error(""Object {l!r} appears to be a mapping, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -148,7 +148,7 @@\n                 key_repr = cls._safe_key_repr(key)\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a mapping, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3578', 'line': 152, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -149,7 +149,7 @@\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3579', 'line': 155, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -152,7 +152,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, mapping):\n         return len(mapping.keys())\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3580', 'line': 166, 'description': [')'], 'failure': []}, {'name': 'Mutant #3581', 'line': 175, 'description': ['        self.id_path_to_iinfo = {}'], 'failure': []}, {'name': 'Mutant #3582', 'line': 176, 'description': ['        self.watches = []'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -173,7 +173,7 @@\n class FrameVarInfo:\n     def __init__(self):\n         self.id_path_to_iinfo = {}\n-        self.watches = []\n+        self.watches = None\n \n     def get_inspect_info(self, id_path, read_only):\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3583', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': []}, {'name': 'Mutant #3584', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -189,7 +189,7 @@\n         # Do not globalize: cyclic import\n         from pudb.debugger import CONFIG\n \n-        self.show_detail = False\n+        self.show_detail = None\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3585', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': []}, {'name': 'Mutant #3586', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -190,7 +190,7 @@\n         from pudb.debugger import CONFIG\n \n         self.show_detail = False\n-        self.display_type = CONFIG[""stringifier""]\n+        self.display_type = None\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3587', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = True\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3588', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = None\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3589', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = True\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3590', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = None\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3591', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': []}, {'name': 'Mutant #3592', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -193,7 +193,7 @@\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n-        self.access_level = CONFIG[""default_variables_access_level""]\n+        self.access_level = None\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3593', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = True\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3594', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = None\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3595', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': []}, {'name': 'Mutant #3596', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -195,7 +195,7 @@\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n-        self.wrap = CONFIG[""wrap_variables""]\n+        self.wrap = None\n \n \n class WatchExpression:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3597', 'line': 203, 'description': ['        self.expression = expression'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -200,7 +200,7 @@\n \n class WatchExpression:\n     def __init__(self, expression):\n-        self.expression = expression\n+        self.expression = None\n \n \n class WatchEvalError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3598', 'line': 208, 'description': ['        return ""<error>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -205,7 +205,7 @@\n \n class WatchEvalError:\n     def __str__(self):\n-        return ""<error>""\n+        return ""XX<error>XX""\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3599', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -213,7 +213,7 @@\n # {{{ widget\n \n class VariableWidget(urwid.FlowWidget):\n-    PREFIX = ""| ""\n+    PREFIX = ""XX| XX""\n \n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3600', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': []}, {'name': 'Mutant #3601', 'line': 221, 'description': ['        self.parent = parent'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -218,7 +218,7 @@\n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n-        self.parent = parent\n+        self.parent = None\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5203', 'line': 115, 'description': ['        ""__len__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -112,7 +112,7 @@\n         ""__contains__"",\n         ""__getitem__"",\n         ""__iter__"",\n-        ""__len__"",\n+        ""XX__len__XX"",\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5204', 'line': 116, 'description': ['        ""__reversed__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -113,7 +113,7 @@\n         ""__getitem__"",\n         ""__iter__"",\n         ""__len__"",\n-        ""__reversed__"",\n+        ""XX__reversed__XX"",\n         ""count"",\n         ""get"",\n         ""index"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5205', 'line': 117, 'description': ['        ""count"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -114,7 +114,7 @@\n         ""__iter__"",\n         ""__len__"",\n         ""__reversed__"",\n-        ""count"",\n+        ""XXcountXX"",\n         ""get"",\n         ""index"",\n         ""items"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5206', 'line': 118, 'description': ['        ""get"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -115,7 +115,7 @@\n         ""__len__"",\n         ""__reversed__"",\n         ""count"",\n-        ""get"",\n+        ""XXgetXX"",\n         ""index"",\n         ""items"",\n         ""keys"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5207', 'line': 119, 'description': ['        ""index"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -116,7 +116,7 @@\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n-        ""index"",\n+        ""XXindexXX"",\n         ""items"",\n         ""keys"",\n         ""values"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5208', 'line': 120, 'description': ['        ""items"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -117,7 +117,7 @@\n         ""count"",\n         ""get"",\n         ""index"",\n-        ""items"",\n+        ""XXitemsXX"",\n         ""keys"",\n         ""values"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5209', 'line': 121, 'description': ['        ""keys"",'], 'failure': []}, {'name': 'Mutant #5210', 'line': 122, 'description': ['        ""values"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -119,7 +119,7 @@\n         ""index"",\n         ""items"",\n         ""keys"",\n-        ""values"",\n+        ""XXvaluesXX"",\n     }\n \n     # Deliberately starting from 0\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5215', 'line': 132, 'description': ['                    self.__internal_dict__ = dict(iterable)'], 'failure': []}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5219', 'line': 140, 'description': ['                func = method_factory(method)'], 'failure': []}, {'name': 'Mutant #5220', 'line': 151, 'description': ['    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)'], 'failure': []}, {'name': 'Mutant #5221', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5222', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5223', 'line': 155, 'description': ['        self.values_to_expand = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -152,7 +152,7 @@\n     MOD_STR = "" [all+()]""\n \n     def setUp(self):\n-        self.values_to_expand = []\n+        self.values_to_expand = None\n         self.class_counts = {\n             ""mappings"": 0,\n             ""sequences"": 0,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5224', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5225', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5226', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5227', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5228', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5229', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5230', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5231', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5232', 'line': 161, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5233', 'line': 163, 'description': ['    def value_string(self, obj, expand=True):'], 'failure': []}, {'name': 'Mutant #5234', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5235', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5236', 'line': 165, 'description': ['            return repr(obj) + self.MOD_STR'], 'failure': []}, {'name': 'Mutant #5237', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5238', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5239', 'line': 179, 'description': ['                 self.value_string(getattr(obj, label), expand=False))'], 'failure': []}, {'name': 'Mutant #5240', 'line': 182, 'description': ['    @contextlib.contextmanager'], 'failure': []}, {'name': 'Mutant #5241', 'line': 189, 'description': ['            self.fail(""ui_log.exception was unexpectedly called"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -186,7 +186,7 @@\n         fail if it is called.\n         """"""\n         def fake_exception_log(*args, **kwargs):\n-            self.fail(""ui_log.exception was unexpectedly called"")\n+            self.fail(""XXui_log.exception was unexpectedly calledXX"")\n \n         old_logger = ui_log.exception\n         ui_log.exception = fake_exception_log\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5242', 'line': 191, 'description': ['        old_logger = ui_log.exception'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -188,7 +188,7 @@\n         def fake_exception_log(*args, **kwargs):\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n-        old_logger = ui_log.exception\n+        old_logger = None\n         ui_log.exception = fake_exception_log\n         try:\n             yield\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5243', 'line': 192, 'description': ['        ui_log.exception = fake_exception_log'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -189,7 +189,7 @@\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n         old_logger = ui_log.exception\n-        ui_log.exception = fake_exception_log\n+        ui_log.exception = None\n         try:\n             yield\n         finally:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5244', 'line': 196, 'description': ['            ui_log.exception = old_logger'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -193,7 +193,7 @@\n         try:\n             yield\n         finally:\n-            ui_log.exception = old_logger\n+            ui_log.exception = None\n \n     def assert_walks_contents(self, container, label=""xs""):\n         expand_paths = {label}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5245', 'line': 198, 'description': ['    def assert_walks_contents(self, container, label=""xs""):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -195,7 +195,7 @@\n         finally:\n             ui_log.exception = old_logger\n \n-    def assert_walks_contents(self, container, label=""xs""):\n+    def assert_walks_contents(self, container, label=""XXxsXX""):\n         expand_paths = {label}\n         self.values_to_expand = [container]\n         self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5246', 'line': 199, 'description': ['        expand_paths = {label}'], 'failure': []}, {'name': 'Mutant #5247', 'line': 200, 'description': ['        self.values_to_expand = [container]'], 'failure': []}, {'name': 'Mutant #5248', 'line': 201, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))'], 'failure': []}, {'name': 'Mutant #5249', 'line': 204, 'description': ['        expected = [(label, self.value_string(container))]'], 'failure': []}, {'name': 'Mutant #5250', 'line': 206, 'description': ['            expected.extend([(f""[{repr(key)}]"", repr(container[key]))'], 'failure': []}, {'name': 'Mutant #5251', 'line': 208, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5252', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5253', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5254', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5255', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5256', 'line': 211, 'description': ['            expected.extend([(f""[{repr(index)}]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5257', 'line': 213, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5258', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5259', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5260', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5261', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5262', 'line': 216, 'description': ['            expected.extend([(""[]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5263', 'line': 218, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5264', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5265', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5266', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5267', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5268', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5269', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5270', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5271', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}]",66.35514018691589,['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'F002' 'CML001' 'F027' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 1, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,set_interrupt_handler,261-317,"[{'lineno': 282, 'coloffset': 4, 'linematch': 'if interrupt_signal is None:', 'context': '\n    Note, this only works when called from the main thread.\n    """"""\n\n    if interrupt_signal is None:\n        interrupt_signal = DEFAULT_SIGNAL\n\n    import signal\n    old_handler = signal.getsignal(interrupt_signal)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 288, 'coloffset': 4, 'linematch': 'if old_handler is not signal.default_int_handler \\', 'context': ""\n    import signal\n    old_handler = signal.getsignal(interrupt_signal)\n\n    if old_handler is not signal.default_int_handler \\\n            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don't currently have support for a non-default signal handlers,\n        # let's avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 302, 'coloffset': 4, 'linematch': 'if not isinstance(threading.current_thread(), threading._MainThread):', 'context': '                % (interrupt_signal, old_handler),\n                stacklevel=2)\n\n    import threading\n    if not isinstance(threading.current_thread(), threading._MainThread):\n        from warnings import warn\n        # Setting signals from a non-main thread will not work\n        return warn(""Setting the interrupt handler can only be done on the main ""\n                ""thread. The interrupt handler was NOT installed."",\n                stacklevel=2)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 293, 'coloffset': 8, 'linematch': 'if old_handler is None:', 'context': '            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don\'t currently have support for a non-default signal handlers,\n        # let\'s avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:\n            # This is the documented meaning of getsignal()->None.\n            old_handler = ""not installed from python""\n        return warn(""A non-default handler for signal %d is already installed (%s). ""\n                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 293, 'coloffset': 8, 'linematch': 'if old_handler is None:', 'context': '            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don\'t currently have support for a non-default signal handlers,\n        # let\'s avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:\n            # This is the documented meaning of getsignal()->None.\n            old_handler = ""not installed from python""\n        return warn(""A non-default handler for signal %d is already installed (%s). ""\n                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 293, 'coloffset': 11, 'linematch': 'if old_handler is None:', 'context': '            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don\'t currently have support for a non-default signal handlers,\n        # let\'s avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:\n            # This is the documented meaning of getsignal()->None.\n            old_handler = ""not installed from python""\n        return warn(""A non-default handler for signal %d is already installed (%s). ""\n                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 293, 'coloffset': 11, 'linematch': 'if old_handler is None:', 'context': '            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don\'t currently have support for a non-default signal handlers,\n        # let\'s avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:\n            # This is the documented meaning of getsignal()->None.\n            old_handler = ""not installed from python""\n        return warn(""A non-default handler for signal %d is already installed (%s). ""\n                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 293, 'coloffset': 11, 'linematch': 'if old_handler is None:', 'context': '            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don\'t currently have support for a non-default signal handlers,\n        # let\'s avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:\n            # This is the documented meaning of getsignal()->None.\n            old_handler = ""not installed from python""\n        return warn(""A non-default handler for signal %d is already installed (%s). ""\n                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 293, 'coloffset': 11, 'linematch': 'if old_handler is None:', 'context': '            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don\'t currently have support for a non-default signal handlers,\n        # let\'s avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:\n            # This is the documented meaning of getsignal()->None.\n            old_handler = ""not installed from python""\n        return warn(""A non-default handler for signal %d is already installed (%s). ""\n                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 261, 'coloffset': 0, 'linematch': 'def set_interrupt_handler(interrupt_signal=None):', 'context': '    from pudb import _get_debugger\n    _get_debugger().set_trace(frame, as_breakpoint=False)\n\n\ndef set_interrupt_handler(interrupt_signal=None):\n    """"""\n    Set up an interrupt handler, to activate PuDB when Python receives the\n    signal `interrupt_signal`.  By default it is SIGINT (i.e., Ctrl-c).\n\n    To use a different signal, pass it as the argument to this function, like', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 288, 'coloffset': 4, 'linematch': 'if old_handler is not signal.default_int_handler \\', 'context': ""\n    import signal\n    old_handler = signal.getsignal(interrupt_signal)\n\n    if old_handler is not signal.default_int_handler \\\n            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don't currently have support for a non-default signal handlers,\n        # let's avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:"", 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 302, 'coloffset': 4, 'linematch': 'if not isinstance(threading.current_thread(), threading._MainThread):', 'context': '                % (interrupt_signal, old_handler),\n                stacklevel=2)\n\n    import threading\n    if not isinstance(threading.current_thread(), threading._MainThread):\n        from warnings import warn\n        # Setting signals from a non-main thread will not work\n        return warn(""Setting the interrupt handler can only be done on the main ""\n                ""thread. The interrupt handler was NOT installed."",\n                stacklevel=2)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 293, 'coloffset': 8, 'linematch': 'if old_handler is None:', 'context': '            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don\'t currently have support for a non-default signal handlers,\n        # let\'s avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:\n            # This is the documented meaning of getsignal()->None.\n            old_handler = ""not installed from python""\n        return warn(""A non-default handler for signal %d is already installed (%s). ""\n                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 262, 'coloffset': 4, 'linematch': '""""""', 'context': '    _get_debugger().set_trace(frame, as_breakpoint=False)\n\n\ndef set_interrupt_handler(interrupt_signal=None):\n    """"""\n    Set up an interrupt handler, to activate PuDB when Python receives the\n    signal `interrupt_signal`.  By default it is SIGINT (i.e., Ctrl-c).\n\n    To use a different signal, pass it as the argument to this function, like\n    `set_interrupt_handler(signal.SIGALRM)`.  You can then break your code', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 282, 'coloffset': 4, 'linematch': 'if interrupt_signal is None:', 'context': '\n    Note, this only works when called from the main thread.\n    """"""\n\n    if interrupt_signal is None:\n        interrupt_signal = DEFAULT_SIGNAL\n\n    import signal\n    old_handler = signal.getsignal(interrupt_signal)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 285, 'coloffset': 4, 'linematch': 'import signal', 'context': ""\n    if interrupt_signal is None:\n        interrupt_signal = DEFAULT_SIGNAL\n\n    import signal\n    old_handler = signal.getsignal(interrupt_signal)\n\n    if old_handler is not signal.default_int_handler \\\n            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don't currently have support for a non-default signal handlers,"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 286, 'coloffset': 4, 'linematch': 'old_handler = signal.getsignal(interrupt_signal)', 'context': ""    if interrupt_signal is None:\n        interrupt_signal = DEFAULT_SIGNAL\n\n    import signal\n    old_handler = signal.getsignal(interrupt_signal)\n\n    if old_handler is not signal.default_int_handler \\\n            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don't currently have support for a non-default signal handlers,\n        # let's avoid undefined-behavior territory and just show a warning."", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 288, 'coloffset': 4, 'linematch': 'if old_handler is not signal.default_int_handler \\', 'context': ""\n    import signal\n    old_handler = signal.getsignal(interrupt_signal)\n\n    if old_handler is not signal.default_int_handler \\\n            and old_handler != signal.SIG_DFL and old_handler != _interrupt_handler:\n        # Since we don't currently have support for a non-default signal handlers,\n        # let's avoid undefined-behavior territory and just show a warning.\n        from warnings import warn\n        if old_handler is None:"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 301, 'coloffset': 4, 'linematch': 'import threading', 'context': '                ""Skipping pudb interrupt support.""\n                % (interrupt_signal, old_handler),\n                stacklevel=2)\n\n    import threading\n    if not isinstance(threading.current_thread(), threading._MainThread):\n        from warnings import warn\n        # Setting signals from a non-main thread will not work\n        return warn(""Setting the interrupt handler can only be done on the main ""\n                ""thread. The interrupt handler was NOT installed."",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 302, 'coloffset': 4, 'linematch': 'if not isinstance(threading.current_thread(), threading._MainThread):', 'context': '                % (interrupt_signal, old_handler),\n                stacklevel=2)\n\n    import threading\n    if not isinstance(threading.current_thread(), threading._MainThread):\n        from warnings import warn\n        # Setting signals from a non-main thread will not work\n        return warn(""Setting the interrupt handler can only be done on the main ""\n                ""thread. The interrupt handler was NOT installed."",\n                stacklevel=2)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 309, 'coloffset': 4, 'linematch': 'try:', 'context': '        return warn(""Setting the interrupt handler can only be done on the main ""\n                ""thread. The interrupt handler was NOT installed."",\n                stacklevel=2)\n\n    try:\n        signal.signal(interrupt_signal, _interrupt_handler)\n    except ValueError:\n        import sys\n        from traceback import format_exception\n        from warnings import warn', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 261, 'coloffset': 0, 'linematch': 'def set_interrupt_handler(interrupt_signal=None):', 'context': '    from pudb import _get_debugger\n    _get_debugger().set_trace(frame, as_breakpoint=False)\n\n\ndef set_interrupt_handler(interrupt_signal=None):\n    """"""\n    Set up an interrupt handler, to activate PuDB when Python receives the\n    signal `interrupt_signal`.  By default it is SIGINT (i.e., Ctrl-c).\n\n    To use a different signal, pass it as the argument to this function, like', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 261, 'coloffset': 0, 'linematch': 'def set_interrupt_handler(interrupt_signal=None):', 'context': '    from pudb import _get_debugger\n    _get_debugger().set_trace(frame, as_breakpoint=False)\n\n\ndef set_interrupt_handler(interrupt_signal=None):\n    """"""\n    Set up an interrupt handler, to activate PuDB when Python receives the\n    signal `interrupt_signal`.  By default it is SIGINT (i.e., Ctrl-c).\n\n    To use a different signal, pass it as the argument to this function, like', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3637', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) + maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3638', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol + 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3639', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 3)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3640', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = None\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3659', 'line': 267, 'description': ['    def rows(self, size: Tuple[int], focus: bool = False) -> int:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -264,7 +264,7 @@\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n-    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n+    def rows(self, size: Tuple[int], focus: bool = True) -> int:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3660', 'line': 274, 'description': ['            return len(self._get_wrapped_lines(size[0]))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -271,7 +271,7 @@\n         :return: The number of rows required for this widget\n         """"""\n         if self.wrap:\n-            return len(self._get_wrapped_lines(size[0]))\n+            return len(self._get_wrapped_lines(size[1]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3666', 'line': 281, 'description': ['    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -278,7 +278,7 @@\n         else:\n             return 1\n \n-    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n+    def render(self, size: Tuple[int], focus: bool = True) -> urwid.Canvas:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3667', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = size[1]\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3668', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = None\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3669', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""XXfocused XX""+self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3670', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""-self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3671', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix-"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3672', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix+""XX XX""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3673', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = None\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3674', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix-"" ""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3675', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix+""XX XX""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3676', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = None\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3677', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3678', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3679', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = None\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3680', 'line': 299, 'description': ['            text = self._get_wrapped_lines(maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -296,7 +296,7 @@\n         var_label = self.var_label or """"\n \n         if self.wrap:\n-            text = self._get_wrapped_lines(maxcol)\n+            text = None\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3681', 'line': 302, 'description': ['                    text_width(var_label[maxcol:]), maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -298,8 +298,7 @@\n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n \n-            extralabel_full, extralabel_rem = divmod(\n-                    text_width(var_label[maxcol:]), maxcol)\n+            extralabel_full, extralabel_rem = None\n             totallen = sum(text_width(i) for i in text)\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3682', 'line': 303, 'description': ['            totallen = sum(text_width(i) for i in text)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -300,7 +300,7 @@\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n-            totallen = sum(text_width(i) for i in text)\n+            totallen = None\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3683', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    - (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3684', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) - 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3685', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) + 3)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3686', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    / (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3687', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    * (extralabel_full - bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3688', 'line': 310, 'description': ['                    + text_width(var_label)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -307,7 +307,7 @@\n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n-                    + text_width(var_label)\n+                    - text_width(var_label)\n \n                     + 1  # for "":""\n                     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3689', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    - 1  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3690', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    + 2  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3691', 'line': 313, 'description': ['                    )'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -301,16 +301,7 @@\n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n             totallen = sum(text_width(i) for i in text)\n-            labellen = (\n-                    len(self.prefix)  # Padding of first line\n-\n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n-\n-                    + text_width(var_label)\n-\n-                    + 1  # for "":""\n-                    )\n+            labellen = None\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3692', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx-""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3693', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""XXlabelXX"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3694', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx-""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3695', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""XXvalueXX"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3696', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen + labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3697', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = None\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5294', 'line': 261, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -258,7 +258,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5295', 'line': 262, 'description': ['            ""foo bar"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -259,7 +259,7 @@\n             # strings\n             """",\n             ""a"",\n-            ""foo bar"",\n+            ""XXfoo barXX"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5298', 'line': 267, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -264,7 +264,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5299', 'line': 268, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -265,7 +265,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for label, value in enumerate(values):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5300', 'line': 270, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5303', 'line': 289, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -286,7 +286,7 @@\n         """"""\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5304', 'line': 290, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -287,7 +287,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5305', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5306', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5307', 'line': 292, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -289,7 +289,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5308', 'line': 293, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5309', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5310', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5311', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5312', 'line': 297, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -294,7 +294,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5313', 'line': 298, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -295,7 +295,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5314', 'line': 299, 'description': ['            ""foo bar"",'], 'failure': []}, {'name': 'Mutant #5315', 'line': 301, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -298,7 +298,7 @@\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5316', 'line': 304, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -301,7 +301,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5317', 'line': 305, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -302,7 +302,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for value in values:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5318', 'line': 307, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5319', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5320', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5321', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5322', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5323', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5324', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5325', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}]",8.60215053763441,['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'F002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,post_mortem,320-329,"[{'lineno': 321, 'coloffset': 4, 'linematch': 'if tb is None:', 'context': '                stacklevel=2)\n\n\ndef post_mortem(tb=None, e_type=None, e_value=None):\n    if tb is None:\n        import sys\n        exc_info = sys.exc_info()\n    else:\n        exc_info = (e_type, e_value, tb)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 320, 'coloffset': 0, 'linematch': 'def post_mortem(tb=None, e_type=None, e_value=None):', 'context': '                % (interrupt_signal, """".join(format_exception(*sys.exc_info()))),\n                stacklevel=2)\n\n\ndef post_mortem(tb=None, e_type=None, e_value=None):\n    if tb is None:\n        import sys\n        exc_info = sys.exc_info()\n    else:\n        exc_info = (e_type, e_value, tb)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 321, 'coloffset': 4, 'linematch': 'if tb is None:', 'context': '                stacklevel=2)\n\n\ndef post_mortem(tb=None, e_type=None, e_value=None):\n    if tb is None:\n        import sys\n        exc_info = sys.exc_info()\n    else:\n        exc_info = (e_type, e_value, tb)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 327, 'coloffset': 4, 'linematch': 'dbg = _get_debugger()', 'context': '        exc_info = sys.exc_info()\n    else:\n        exc_info = (e_type, e_value, tb)\n\n    dbg = _get_debugger()\n    dbg.reset()\n    dbg.interaction(None, exc_info)\n\n\ndef pm():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 328, 'coloffset': 4, 'linematch': 'dbg.reset()', 'context': '    else:\n        exc_info = (e_type, e_value, tb)\n\n    dbg = _get_debugger()\n    dbg.reset()\n    dbg.interaction(None, exc_info)\n\n\ndef pm():\n    import sys', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 329, 'coloffset': 4, 'linematch': 'dbg.interaction(None, exc_info)', 'context': '        exc_info = (e_type, e_value, tb)\n\n    dbg = _get_debugger()\n    dbg.reset()\n    dbg.interaction(None, exc_info)\n\n\ndef pm():\n    import sys\n    exc_type, _exc_val, _tb = sys.exc_info()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3699', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i/maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3700', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i - 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3701', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 2)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3702', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 1)/maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3703', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -318,7 +318,7 @@\n             fullcols, rem = divmod(totallen, maxcol)\n \n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+                for i in range(fullcols - bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3704', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,8 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+            attr = None\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3705', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx-""value"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3706', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx+""XXvalueXX"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3707', 'line': 325, 'description': ['        lprefix = len(self.prefix)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -322,7 +322,7 @@\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n-        lprefix = len(self.prefix)\n+        lprefix = None\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3708', 'line': 327, 'description': ['        if self.value_str is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -324,7 +324,7 @@\n \n         lprefix = len(self.prefix)\n \n-        if self.value_str is not None:\n+        if self.value_str is  None:\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3709', 'line': 328, 'description': ['            if self.var_label is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -325,7 +325,7 @@\n         lprefix = len(self.prefix)\n \n         if self.value_str is not None:\n-            if self.var_label is not None:\n+            if self.var_label is  None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3710', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) >= 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3711', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) > 2:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5331', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5332', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5333', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            1:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5334', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            0:                   43,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5335', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""XXaXX"":                 ""foo"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5336', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""a"":                 ""XXfooXX"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5337', 'line': 327, 'description': ['            """": None,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -324,7 +324,7 @@\n         self.assert_walks_contents({\n             0:                   42,\n             ""a"":                 ""foo"",\n-            """": None,\n+            ""XXXX"": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5338', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            False: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5339', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            True: True,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5340', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(4)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5341', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(3)): ""XXabcXX"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}]",8.333333333333332,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,pm,332-339,"[{'lineno': 336, 'coloffset': 4, 'linematch': 'if exc_type is None:', 'context': 'def pm():\n    import sys\n    exc_type, _exc_val, _tb = sys.exc_info()\n\n    if exc_type is None:\n        # No exception on record. Do nothing.\n        return\n    post_mortem()\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 332, 'coloffset': 0, 'linematch': 'def pm():', 'context': '    dbg.reset()\n    dbg.interaction(None, exc_info)\n\n\ndef pm():\n    import sys\n    exc_type, _exc_val, _tb = sys.exc_info()\n\n    if exc_type is None:\n        # No exception on record. Do nothing.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 333, 'coloffset': 4, 'linematch': 'import sys', 'context': '    dbg.interaction(None, exc_info)\n\n\ndef pm():\n    import sys\n    exc_type, _exc_val, _tb = sys.exc_info()\n\n    if exc_type is None:\n        # No exception on record. Do nothing.\n        return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'exc_type, _exc_val, _tb = sys.exc_info()', 'context': '\n\ndef pm():\n    import sys\n    exc_type, _exc_val, _tb = sys.exc_info()\n\n    if exc_type is None:\n        # No exception on record. Do nothing.\n        return\n    post_mortem()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 336, 'coloffset': 4, 'linematch': 'if exc_type is None:', 'context': 'def pm():\n    import sys\n    exc_type, _exc_val, _tb = sys.exc_info()\n\n    if exc_type is None:\n        # No exception on record. Do nothing.\n        return\n    post_mortem()\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 339, 'coloffset': 4, 'linematch': 'post_mortem()', 'context': '\n    if exc_type is None:\n        # No exception on record. Do nothing.\n        return\n    post_mortem()\n\n\nif __name__ == ""__main__"":\n    print(""You now need to type \'python -m pudb.run\'. Sorry."")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3715', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix-""  "" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3716', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""XX  XX"" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3717', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""  "" - self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3718', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,8 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                    text = None\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3719', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx-""label"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3720', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""XXlabelXX"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3721', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""label"", lprefix-text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3722', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx-""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3723', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""XXvalueXX"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3724', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix-3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3725', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+4+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3726', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+3-text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3727', 'line': 337, 'description': ['                        ]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -331,10 +331,7 @@\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n-                    attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n-                        ]\n+                    attr = None\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3728', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix - self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3729', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label - "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3730', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + ""XX: XX"" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3731', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + "": "" - self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3732', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = None\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5347', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5348', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5349', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5350', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5351', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5352', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5353', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5354', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5355', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}]",14.814814814814813,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,db,39-45,"[{'lineno': 43, 'coloffset': 8, 'linematch': 'if isinstance(threading.current_thread(), threading._MainThread):', 'context': '    def db(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back)\n\n    @property\n    def go(self):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 39, 'coloffset': 4, 'linematch': 'def db(self):', 'context': '\n\nclass PudbShortcuts:\n    @property\n    def db(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 40, 'coloffset': 8, 'linematch': 'dbg = _get_debugger()', 'context': '\nclass PudbShortcuts:\n    @property\n    def db(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 42, 'coloffset': 8, 'linematch': 'import threading', 'context': '    @property\n    def db(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back)\n\n    @property', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 43, 'coloffset': 8, 'linematch': 'if isinstance(threading.current_thread(), threading._MainThread):', 'context': '    def db(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back)\n\n    @property\n    def go(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 45, 'coloffset': 8, 'linematch': 'dbg.set_trace(sys._getframe().f_back)', 'context': '\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back)\n\n    @property\n    def go(self):\n        dbg = _get_debugger()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3540', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = 1\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3541', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = None\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5166', 'line': 39, 'description': ['            ] + numpy_values:'], 'failure': []}, {'name': 'Mutant #5167', 'line': 41, 'description': ['            iinfo = InspectInfo()'], 'failure': []}, {'name': 'Mutant #5168', 'line': 42, 'description': ['            iinfo.display_type = display_type'], 'failure': []}, {'name': 'Mutant #5169', 'line': 44, 'description': ['            strifier = get_stringifier(iinfo)'], 'failure': []}]",50.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,go,48-54,"[{'lineno': 52, 'coloffset': 8, 'linematch': 'if isinstance(threading.current_thread(), threading._MainThread):', 'context': '    def go(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back, paused=False)\n\n\nimport builtins', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 48, 'coloffset': 4, 'linematch': 'def go(self):', 'context': '            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back)\n\n    @property\n    def go(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 49, 'coloffset': 8, 'linematch': 'dbg = _get_debugger()', 'context': '        dbg.set_trace(sys._getframe().f_back)\n\n    @property\n    def go(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back, paused=False)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 51, 'coloffset': 8, 'linematch': 'import threading', 'context': '    @property\n    def go(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back, paused=False)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 52, 'coloffset': 8, 'linematch': 'if isinstance(threading.current_thread(), threading._MainThread):', 'context': '    def go(self):\n        dbg = _get_debugger()\n\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back, paused=False)\n\n\nimport builtins', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 54, 'coloffset': 8, 'linematch': 'dbg.set_trace(sys._getframe().f_back, paused=False)', 'context': '\n        import threading\n        if isinstance(threading.current_thread(), threading._MainThread):\n            set_interrupt_handler()\n        dbg.set_trace(sys._getframe().f_back, paused=False)\n\n\nimport builtins\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,dispatch_line,223-232,"[{'lineno': 224, 'coloffset': 8, 'linematch': 'if self.stop_here(frame) or self.break_here(frame):', 'context': '    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See\n    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):\n        if self.stop_here(frame) or self.break_here(frame):\n            self.user_line(frame)\n            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 226, 'coloffset': 12, 'linematch': 'if self.quitting:', 'context': '    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):\n        if self.stop_here(frame) or self.break_here(frame):\n            self.user_line(frame)\n            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 230, 'coloffset': 12, 'linematch': 'if not sys.gettrace():', 'context': ""            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None\n        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 226, 'coloffset': 12, 'linematch': 'if self.quitting:', 'context': '    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):\n        if self.stop_here(frame) or self.break_here(frame):\n            self.user_line(frame)\n            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 230, 'coloffset': 12, 'linematch': 'if not sys.gettrace():', 'context': ""            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None\n        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished"", 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 223, 'coloffset': 4, 'linematch': 'def dispatch_line(self, frame):', 'context': '\n    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See\n    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):\n        if self.stop_here(frame) or self.break_here(frame):\n            self.user_line(frame)\n            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 230, 'coloffset': 12, 'linematch': 'if not sys.gettrace():', 'context': ""            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None\n        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished"", 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 226, 'coloffset': 12, 'linematch': 'if self.quitting:', 'context': '    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):\n        if self.stop_here(frame) or self.break_here(frame):\n            self.user_line(frame)\n            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 230, 'coloffset': 12, 'linematch': 'if not sys.gettrace():', 'context': ""            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None\n        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished"", 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 223, 'coloffset': 4, 'linematch': 'def dispatch_line(self, frame):', 'context': '\n    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See\n    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):\n        if self.stop_here(frame) or self.break_here(frame):\n            self.user_line(frame)\n            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 224, 'coloffset': 8, 'linematch': 'if self.stop_here(frame) or self.break_here(frame):', 'context': '    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See\n    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):\n        if self.stop_here(frame) or self.break_here(frame):\n            self.user_line(frame)\n            if self.quitting:\n                raise bdb.BdbQuit\n            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 232, 'coloffset': 8, 'linematch': 'return self.trace_dispatch', 'context': ""            # Do not re-install the local trace when we are finished debugging,\n            # see issues 16482 and 7238.\n            if not sys.gettrace():\n                return None\n        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished\n        self._set_stopinfo(self.botframe, None, -1)\n        if not self.breaks:"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3607', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': []}, {'name': 'Mutant #3608', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -220,7 +220,7 @@\n         assert isinstance(id_path, str)\n         self.parent = parent\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n-        self.prefix = self.PREFIX * self.nesting_level\n+        self.prefix = None\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3609', 'line': 224, 'description': ['        self.var_label = var_label'], 'failure': []}, {'name': 'Mutant #3610', 'line': 225, 'description': ['        self.value_str = value_str'], 'failure': []}, {'name': 'Mutant #3611', 'line': 226, 'description': ['        self.id_path = id_path'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -223,7 +223,7 @@\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n-        self.id_path = id_path\n+        self.id_path = None\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3612', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix or ""XXvarXX""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3613', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix and ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3614', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = None\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3615', 'line': 228, 'description': ['        self.watch_expr = watch_expr'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -225,7 +225,7 @@\n         self.value_str = value_str\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n-        self.watch_expr = watch_expr\n+        self.watch_expr = None\n         if iinfo is None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3616', 'line': 229, 'description': ['        if iinfo is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -226,7 +226,7 @@\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n-        if iinfo is None:\n+        if iinfo is not None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5272', 'line': 227, 'description': ['        received = self.walked_values()'], 'failure': []}]",36.36363636363637,['CL001' 'CL002' 'ANNOT001' 'F002' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,set_continue,234-245,"[{'lineno': 237, 'coloffset': 8, 'linematch': 'if not self.breaks:', 'context': ""\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished\n        self._set_stopinfo(self.botframe, None, -1)\n        if not self.breaks:\n            # no breakpoints; run without debugger overhead\n            sys.settrace(None)\n            frame = sys._getframe().f_back\n            while frame:\n                del frame.f_trace"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 243, 'coloffset': 16, 'linematch': 'if frame is self.botframe:', 'context': '            sys.settrace(None)\n            frame = sys._getframe().f_back\n            while frame:\n                del frame.f_trace\n                if frame is self.botframe:\n                    break\n                frame = frame.f_back\n\n    def set_jump(self, frame, line):\n        frame.f_lineno = line', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 243, 'coloffset': 16, 'linematch': 'if frame is self.botframe:', 'context': '            sys.settrace(None)\n            frame = sys._getframe().f_back\n            while frame:\n                del frame.f_trace\n                if frame is self.botframe:\n                    break\n                frame = frame.f_back\n\n    def set_jump(self, frame, line):\n        frame.f_lineno = line', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 234, 'coloffset': 4, 'linematch': 'def set_continue(self):', 'context': ""            if not sys.gettrace():\n                return None\n        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished\n        self._set_stopinfo(self.botframe, None, -1)\n        if not self.breaks:\n            # no breakpoints; run without debugger overhead\n            sys.settrace(None)"", 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 243, 'coloffset': 16, 'linematch': 'if frame is self.botframe:', 'context': '            sys.settrace(None)\n            frame = sys._getframe().f_back\n            while frame:\n                del frame.f_trace\n                if frame is self.botframe:\n                    break\n                frame = frame.f_back\n\n    def set_jump(self, frame, line):\n        frame.f_lineno = line', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 234, 'coloffset': 4, 'linematch': 'def set_continue(self):', 'context': ""            if not sys.gettrace():\n                return None\n        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished\n        self._set_stopinfo(self.botframe, None, -1)\n        if not self.breaks:\n            # no breakpoints; run without debugger overhead\n            sys.settrace(None)"", 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 236, 'coloffset': 8, 'linematch': 'self._set_stopinfo(self.botframe, None, -1)', 'context': ""        return self.trace_dispatch\n\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished\n        self._set_stopinfo(self.botframe, None, -1)\n        if not self.breaks:\n            # no breakpoints; run without debugger overhead\n            sys.settrace(None)\n            frame = sys._getframe().f_back\n            while frame:"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 237, 'coloffset': 8, 'linematch': 'if not self.breaks:', 'context': ""\n    def set_continue(self):\n        # Don't stop except at breakpoints or when finished\n        self._set_stopinfo(self.botframe, None, -1)\n        if not self.breaks:\n            # no breakpoints; run without debugger overhead\n            sys.settrace(None)\n            frame = sys._getframe().f_back\n            while frame:\n                del frame.f_trace"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3619', 'line': 235, 'description': ['            self.wrap = iinfo.wrap'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -232,7 +232,7 @@\n \n             self.wrap = CONFIG[""wrap_variables""]\n         else:\n-            self.wrap = iinfo.wrap\n+            self.wrap = None\n \n     def __str__(self):\n         return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3620', 'line': 238, 'description': ['        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -235,7 +235,7 @@\n             self.wrap = iinfo.wrap\n \n     def __str__(self):\n-        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n+        return (""XXVariableWidget: {value_str}, level {nesting_level}, at {id_path}XX""\n                 .format(\n                     value_str=self.value_str,\n                     nesting_level=self.nesting_level,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5275', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5276', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5279', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5280', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5281', 'line': 241, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}]",83.33333333333334,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,set_frame_index,333-360,"[{'lineno': 335, 'coloffset': 8, 'linematch': 'if index < 0 or index >= len(self.stack):', 'context': '        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):\n            return\n\n        self.curframe, lineno = self.stack[index]\n\n        filename = self.curframe.f_code.co_filename', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 343, 'coloffset': 8, 'linematch': 'if not linecache.getlines(filename):', 'context': '\n        filename = self.curframe.f_code.co_filename\n\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:\n                self.ui.set_current_line(lineno,\n                        DirectSourceCodeProvider(\n                            self.curframe.f_code.co_name, code))', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 345, 'coloffset': 12, 'linematch': 'if code is not None:', 'context': '\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:\n                self.ui.set_current_line(lineno,\n                        DirectSourceCodeProvider(\n                            self.curframe.f_code.co_name, code))\n            else:\n                self.ui.set_current_line(lineno,', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 345, 'coloffset': 12, 'linematch': 'if code is not None:', 'context': '\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:\n                self.ui.set_current_line(lineno,\n                        DirectSourceCodeProvider(\n                            self.curframe.f_code.co_name, code))\n            else:\n                self.ui.set_current_line(lineno,', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 333, 'coloffset': 4, 'linematch': 'def set_frame_index(self, index):', 'context': '\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):\n            return\n\n        self.curframe, lineno = self.stack[index]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 343, 'coloffset': 8, 'linematch': 'if not linecache.getlines(filename):', 'context': '\n        filename = self.curframe.f_code.co_filename\n\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:\n                self.ui.set_current_line(lineno,\n                        DirectSourceCodeProvider(\n                            self.curframe.f_code.co_name, code))', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 345, 'coloffset': 12, 'linematch': 'if code is not None:', 'context': '\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:\n                self.ui.set_current_line(lineno,\n                        DirectSourceCodeProvider(\n                            self.curframe.f_code.co_name, code))\n            else:\n                self.ui.set_current_line(lineno,', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 333, 'coloffset': 4, 'linematch': 'def set_frame_index(self, index):', 'context': '\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):\n            return\n\n        self.curframe, lineno = self.stack[index]', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 334, 'coloffset': 8, 'linematch': 'self.curindex = index', 'context': '    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):\n            return\n\n        self.curframe, lineno = self.stack[index]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 335, 'coloffset': 8, 'linematch': 'if index < 0 or index >= len(self.stack):', 'context': '        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):\n            return\n\n        self.curframe, lineno = self.stack[index]\n\n        filename = self.curframe.f_code.co_filename', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 338, 'coloffset': 8, 'linematch': 'self.curframe, lineno = self.stack[index]', 'context': '        self.curindex = index\n        if index < 0 or index >= len(self.stack):\n            return\n\n        self.curframe, lineno = self.stack[index]\n\n        filename = self.curframe.f_code.co_filename\n\n        import linecache\n        if not linecache.getlines(filename):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 340, 'coloffset': 8, 'linematch': 'filename = self.curframe.f_code.co_filename', 'context': '            return\n\n        self.curframe, lineno = self.stack[index]\n\n        filename = self.curframe.f_code.co_filename\n\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 342, 'coloffset': 8, 'linematch': 'import linecache', 'context': '        self.curframe, lineno = self.stack[index]\n\n        filename = self.curframe.f_code.co_filename\n\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:\n                self.ui.set_current_line(lineno,\n                        DirectSourceCodeProvider(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 343, 'coloffset': 8, 'linematch': 'if not linecache.getlines(filename):', 'context': '\n        filename = self.curframe.f_code.co_filename\n\n        import linecache\n        if not linecache.getlines(filename):\n            code = self.curframe.f_globals.get(""_MODULE_SOURCE_CODE"")\n            if code is not None:\n                self.ui.set_current_line(lineno,\n                        DirectSourceCodeProvider(\n                            self.curframe.f_code.co_name, code))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 357, 'coloffset': 8, 'linematch': 'self.ui.update_var_view()', 'context': '        else:\n            self.ui.set_current_line(lineno,\n                FileSourceCodeProvider(self, filename))\n\n        self.ui.update_var_view()\n        self.ui.update_stack()\n\n        self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))\n\n    @staticmethod', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 358, 'coloffset': 8, 'linematch': 'self.ui.update_stack()', 'context': '            self.ui.set_current_line(lineno,\n                FileSourceCodeProvider(self, filename))\n\n        self.ui.update_var_view()\n        self.ui.update_stack()\n\n        self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))\n\n    @staticmethod\n    def open_file_to_edit(filename, line_number):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 360, 'coloffset': 8, 'linematch': 'self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))', 'context': '\n        self.ui.update_var_view()\n        self.ui.update_stack()\n\n        self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))\n\n    @staticmethod\n    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3719', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx-""label"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3720', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""XXlabelXX"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3721', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""label"", lprefix-text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3722', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx-""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3723', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""XXvalueXX"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3724', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix-3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3725', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+4+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3726', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+3-text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3727', 'line': 337, 'description': ['                        ]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -331,10 +331,7 @@\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n-                    attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n-                        ]\n+                    attr = None\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3728', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix - self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3729', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label - "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3730', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + ""XX: XX"" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3731', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + "": "" - self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3732', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = None\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3733', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx-""label"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3734', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""XXlabelXX"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3735', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix-text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3736', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)-1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3737', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)+2),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3738', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx-""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3739', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""XXvalueXX"", text_width(self.value_str)+1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3740', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""value"", text_width(self.value_str)-1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3741', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""value"", text_width(self.value_str)+2),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3742', 'line': 344, 'description': ['                            ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -338,10 +338,7 @@\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n-                    attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n-                            ]]\n+                    attr = None\n             else:\n                 text = [self.prefix + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3743', 'line': 346, 'description': ['                text = [self.prefix + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -343,7 +343,7 @@\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n-                text = [self.prefix + self.value_str]\n+                text = [self.prefix - self.value_str]\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3744', 'line': 346, 'description': ['                text = [self.prefix + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -343,7 +343,7 @@\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n-                text = [self.prefix + self.value_str]\n+                text = None\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3745', 'line': 349, 'description': ['                        (apfx+""label"", len(self.prefix)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -346,7 +346,7 @@\n                 text = [self.prefix + self.value_str]\n \n                 attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n+                        (apfx-""label"", len(self.prefix)),\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3746', 'line': 349, 'description': ['                        (apfx+""label"", len(self.prefix)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -346,7 +346,7 @@\n                 text = [self.prefix + self.value_str]\n \n                 attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n+                        (apfx+""XXlabelXX"", len(self.prefix)),\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3747', 'line': 350, 'description': ['                        (apfx+""value"", text_width(self.value_str)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -347,7 +347,7 @@\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n+                        (apfx-""value"", text_width(self.value_str)),\n                         ]]\n         else:\n             text = [self.prefix + self.var_label]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3748', 'line': 350, 'description': ['                        (apfx+""value"", text_width(self.value_str)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -347,7 +347,7 @@\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n+                        (apfx+""XXvalueXX"", text_width(self.value_str)),\n                         ]]\n         else:\n             text = [self.prefix + self.var_label]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3749', 'line': 351, 'description': ['                        ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -345,10 +345,7 @@\n             else:\n                 text = [self.prefix + self.value_str]\n \n-                attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n-                        ]]\n+                attr = None\n         else:\n             text = [self.prefix + self.var_label]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3750', 'line': 353, 'description': ['            text = [self.prefix + self.var_label]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -350,7 +350,7 @@\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n-            text = [self.prefix + self.var_label]\n+            text = [self.prefix - self.var_label]\n \n             attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3751', 'line': 353, 'description': ['            text = [self.prefix + self.var_label]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -350,7 +350,7 @@\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n-            text = [self.prefix + self.var_label]\n+            text = None\n \n             attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3752', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx-""label"", lprefix + text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3753', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx+""XXlabelXX"", lprefix + text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3754', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx+""label"", lprefix - text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3755', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = None\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5347', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5348', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5349', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5350', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5351', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5352', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5353', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5354', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5355', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5356', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5357', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5358', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5359', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5360', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5361', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5362', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5363', 'line': 348, 'description': ['        class_count = 0'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -345,7 +345,7 @@\n         self.assert_class_counts_equal({""sequences"": 1})\n \n     def test_containerlike_classes(self):\n-        class_count = 0\n+        class_count = 1\n         for cls_idx, containerlike_class in enumerate(\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5364', 'line': 348, 'description': ['        class_count = 0'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -345,7 +345,7 @@\n         self.assert_class_counts_equal({""sequences"": 1})\n \n     def test_containerlike_classes(self):\n-        class_count = 0\n+        class_count = None\n         for cls_idx, containerlike_class in enumerate(\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5365', 'line': 351, 'description': ['            label = containerlike_class.name()'], 'failure': []}, {'name': 'Mutant #5366', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -350,7 +350,7 @@\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n             value = containerlike_class(zip(string.ascii_lowercase,\n-                                            range(3, 10)))\n+                                            range(4, 10)))\n             self.assert_walks_contents(container=value, label=label)\n             class_count = cls_idx + 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5367', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -350,7 +350,7 @@\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n             value = containerlike_class(zip(string.ascii_lowercase,\n-                                            range(3, 10)))\n+                                            range(3, 11)))\n             self.assert_walks_contents(container=value, label=label)\n             class_count = cls_idx + 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5368', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': []}, {'name': 'Mutant #5369', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5370', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5371', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5372', 'line': 358, 'description': ['            ""mappings"": 256,'], 'failure': []}, {'name': 'Mutant #5373', 'line': 358, 'description': ['            ""mappings"": 256,'], 'failure': []}, {'name': 'Mutant #5374', 'line': 359, 'description': ['            ""sequences"": 256,'], 'failure': []}, {'name': 'Mutant #5375', 'line': 359, 'description': ['            ""sequences"": 256,'], 'failure': []}, {'name': 'Mutant #5376', 'line': 360, 'description': ['            ""collections"": 256,'], 'failure': []}, {'name': 'Mutant #5377', 'line': 360, 'description': ['            ""collections"": 256,'], 'failure': []}]",25.0,['CL001' 'CL002' 'ANNOT001' 'F002' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,open_file_to_edit,363-375,"[{'lineno': 364, 'coloffset': 8, 'linematch': 'if not os.path.isfile(filename):', 'context': '        self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))\n\n    @staticmethod\n    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")\n\n        if not line_number:\n            line_number = 1\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 367, 'coloffset': 8, 'linematch': 'if not line_number:', 'context': '    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")\n\n        if not line_number:\n            line_number = 1\n\n        editor = os.environ.get(""EDITOR"", ""nano"")\n\n        import subprocess', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 363, 'coloffset': 4, 'linematch': 'def open_file_to_edit(filename, line_number):', 'context': '\n        self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))\n\n    @staticmethod\n    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")\n\n        if not line_number:\n            line_number = 1', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 367, 'coloffset': 8, 'linematch': 'if not line_number:', 'context': '    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")\n\n        if not line_number:\n            line_number = 1\n\n        editor = os.environ.get(""EDITOR"", ""nano"")\n\n        import subprocess', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 363, 'coloffset': 4, 'linematch': 'def open_file_to_edit(filename, line_number):', 'context': '\n        self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))\n\n    @staticmethod\n    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")\n\n        if not line_number:\n            line_number = 1', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 364, 'coloffset': 8, 'linematch': 'if not os.path.isfile(filename):', 'context': '        self.ui.stack_list._w.set_focus(self.ui.translate_ui_stack_index(index))\n\n    @staticmethod\n    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")\n\n        if not line_number:\n            line_number = 1\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 367, 'coloffset': 8, 'linematch': 'if not line_number:', 'context': '    def open_file_to_edit(filename, line_number):\n        if not os.path.isfile(filename):\n            raise FileNotFoundError(f""\'{filename}\' not found or is not a file."")\n\n        if not line_number:\n            line_number = 1\n\n        editor = os.environ.get(""EDITOR"", ""nano"")\n\n        import subprocess', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 370, 'coloffset': 8, 'linematch': 'editor = os.environ.get(""EDITOR"", ""nano"")', 'context': '\n        if not line_number:\n            line_number = 1\n\n        editor = os.environ.get(""EDITOR"", ""nano"")\n\n        import subprocess\n        subprocess.call([editor, f""+{line_number}"", filename], shell=False)\n\n        return filename', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 372, 'coloffset': 8, 'linematch': 'import subprocess', 'context': '            line_number = 1\n\n        editor = os.environ.get(""EDITOR"", ""nano"")\n\n        import subprocess\n        subprocess.call([editor, f""+{line_number}"", filename], shell=False)\n\n        return filename\n\n    def move_up_frame(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 373, 'coloffset': 8, 'linematch': 'subprocess.call([editor, f""+{line_number}"", filename], shell=False)', 'context': '\n        editor = os.environ.get(""EDITOR"", ""nano"")\n\n        import subprocess\n        subprocess.call([editor, f""+{line_number}"", filename], shell=False)\n\n        return filename\n\n    def move_up_frame(self):\n        if self.curindex > 0:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 375, 'coloffset': 8, 'linematch': 'return filename', 'context': '\n        import subprocess\n        subprocess.call([editor, f""+{line_number}"", filename], shell=False)\n\n        return filename\n\n    def move_up_frame(self):\n        if self.curindex > 0:\n            self.set_frame_index(self.curindex-1)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3762', 'line': 364, 'description': ['        return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -361,7 +361,7 @@\n             if text_width(text[i]) > maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n-        return make_canvas(text, attr, maxcol, apfx+""value"")\n+        return make_canvas(text, attr, maxcol, apfx-""value"")\n \n     def keypress(self, size, key):\n         return key\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3763', 'line': 364, 'description': ['        return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -361,7 +361,7 @@\n             if text_width(text[i]) > maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n-        return make_canvas(text, attr, maxcol, apfx+""value"")\n+        return make_canvas(text, attr, maxcol, apfx+""XXvalueXX"")\n \n     def keypress(self, size, key):\n         return key\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5380', 'line': 364, 'description': ['        walked_total = (self.class_counts[""mappings""]'], 'failure': []}, {'name': 'Mutant #5381', 'line': 365, 'description': ['                        + self.class_counts[""sequences""]'], 'failure': []}, {'name': 'Mutant #5382', 'line': 365, 'description': ['                        + self.class_counts[""sequences""]'], 'failure': []}, {'name': 'Mutant #5383', 'line': 366, 'description': ['                        + self.class_counts[""collections""]'], 'failure': []}, {'name': 'Mutant #5384', 'line': 366, 'description': ['                        + self.class_counts[""collections""]'], 'failure': []}, {'name': 'Mutant #5385', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}, {'name': 'Mutant #5386', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}, {'name': 'Mutant #5387', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}]",80.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,get_shortened_stack,385-395,"[{'lineno': 386, 'coloffset': 8, 'linematch': 'if tb is not None:', 'context': '        if self.curindex < len(self.stack)-1:\n            self.set_frame_index(self.curindex+1)\n\n    def get_shortened_stack(self, frame, tb):\n        if tb is not None:\n            frame = None\n        stack, index = self.get_stack(frame, tb)\n\n        for i, (s_frame, _lineno) in enumerate(stack):\n            if s_frame is self.bottom_frame and index >= i:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 391, 'coloffset': 12, 'linematch': 'if s_frame is self.bottom_frame and index >= i:', 'context': '            frame = None\n        stack, index = self.get_stack(frame, tb)\n\n        for i, (s_frame, _lineno) in enumerate(stack):\n            if s_frame is self.bottom_frame and index >= i:\n                stack = stack[i:]\n                index -= i\n\n        return stack, index\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 385, 'coloffset': 4, 'linematch': 'def get_shortened_stack(self, frame, tb):', 'context': '    def move_down_frame(self):\n        if self.curindex < len(self.stack)-1:\n            self.set_frame_index(self.curindex+1)\n\n    def get_shortened_stack(self, frame, tb):\n        if tb is not None:\n            frame = None\n        stack, index = self.get_stack(frame, tb)\n\n        for i, (s_frame, _lineno) in enumerate(stack):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 385, 'coloffset': 4, 'linematch': 'def get_shortened_stack(self, frame, tb):', 'context': '    def move_down_frame(self):\n        if self.curindex < len(self.stack)-1:\n            self.set_frame_index(self.curindex+1)\n\n    def get_shortened_stack(self, frame, tb):\n        if tb is not None:\n            frame = None\n        stack, index = self.get_stack(frame, tb)\n\n        for i, (s_frame, _lineno) in enumerate(stack):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 386, 'coloffset': 8, 'linematch': 'if tb is not None:', 'context': '        if self.curindex < len(self.stack)-1:\n            self.set_frame_index(self.curindex+1)\n\n    def get_shortened_stack(self, frame, tb):\n        if tb is not None:\n            frame = None\n        stack, index = self.get_stack(frame, tb)\n\n        for i, (s_frame, _lineno) in enumerate(stack):\n            if s_frame is self.bottom_frame and index >= i:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 388, 'coloffset': 8, 'linematch': 'stack, index = self.get_stack(frame, tb)', 'context': '\n    def get_shortened_stack(self, frame, tb):\n        if tb is not None:\n            frame = None\n        stack, index = self.get_stack(frame, tb)\n\n        for i, (s_frame, _lineno) in enumerate(stack):\n            if s_frame is self.bottom_frame and index >= i:\n                stack = stack[i:]\n                index -= i', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 390, 'coloffset': 8, 'linematch': 'for i, (s_frame, _lineno) in enumerate(stack):', 'context': '        if tb is not None:\n            frame = None\n        stack, index = self.get_stack(frame, tb)\n\n        for i, (s_frame, _lineno) in enumerate(stack):\n            if s_frame is self.bottom_frame and index >= i:\n                stack = stack[i:]\n                index -= i\n\n        return stack, index', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 395, 'coloffset': 8, 'linematch': 'return stack, index', 'context': '            if s_frame is self.bottom_frame and index >= i:\n                stack = stack[i:]\n                index -= i\n\n        return stack, index\n\n    def interaction(self, frame, exc_tuple=None, show_exc_dialog=True):\n        if exc_tuple is None:\n            tb = None\n        elif isinstance(exc_tuple, TracebackType):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3765', 'line': 389, 'description': ['        ""BuiltinFunctionType BuiltinMethodType  ClassType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -386,7 +386,7 @@\n     import types\n \n     return tuple(getattr(types, s) for s in\n-        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n+        ""XXBuiltinFunctionType BuiltinMethodType  ClassType XX""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3766', 'line': 390, 'description': ['        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -387,7 +387,7 @@\n \n     return tuple(getattr(types, s) for s in\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n-        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n+        ""XXCodeType FileType FrameType FunctionType GetSetDescriptorType XX""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3767', 'line': 391, 'description': ['        ""LambdaType MemberDescriptorType MethodType ModuleType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -388,7 +388,7 @@\n     return tuple(getattr(types, s) for s in\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n-        ""LambdaType MemberDescriptorType MethodType ModuleType ""\n+        ""XXLambdaType MemberDescriptorType MethodType ModuleType XX""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3768', 'line': 392, 'description': ['        ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -389,7 +389,7 @@\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n-        ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n+        ""XXSliceType TypeType TracebackType UnboundMethodType XRangeTypeXX"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3769', 'line': 393, 'description': ['        if hasattr(types, s)) + (WatchEvalError,)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -390,7 +390,7 @@\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n-        if hasattr(types, s)) + (WatchEvalError,)\n+        if hasattr(types, s)) - (WatchEvalError,)\n \n \n STR_SAFE_TYPES = get_str_safe_types()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5388', 'line': 388, 'description': ['        self.assert_walks_contents(Reasonable, label=""Reasonable"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -385,7 +385,7 @@\n         """"""\n         Are the class objects themselves expandable?\n         """"""\n-        self.assert_walks_contents(Reasonable, label=""Reasonable"")\n+        self.assert_walks_contents(Reasonable, label=""XXReasonableXX"")\n         self.assert_class_counts_equal({""other"": 1})\n \n     def test_maybe_unreasonable_classes(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5389', 'line': 389, 'description': ['        self.assert_class_counts_equal({""other"": 1})'], 'failure': []}, {'name': 'Mutant #5390', 'line': 389, 'description': ['        self.assert_class_counts_equal({""other"": 1})'], 'failure': []}]",25.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,user_line,451-469,"[{'lineno': 453, 'coloffset': 8, 'linematch': 'if ""__exc_tuple__"" in frame.f_locals:', 'context': '            self.interaction(frame)\n\n    def user_line(self, frame):\n        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 456, 'coloffset': 8, 'linematch': 'if self._waiting_for_mainpyfile(frame):', 'context': '        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):\n            self.current_bp = (\n                    self.canonic(frame.f_code.co_filename), frame.f_lineno)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 459, 'coloffset': 8, 'linematch': 'if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):', 'context': '\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):\n            self.current_bp = (\n                    self.canonic(frame.f_code.co_filename), frame.f_lineno)\n        else:\n            self.current_bp = None\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 451, 'coloffset': 4, 'linematch': 'def user_line(self, frame):', 'context': '            return\n        if self.stop_here(frame):\n            self.interaction(frame)\n\n    def user_line(self, frame):\n        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 456, 'coloffset': 8, 'linematch': 'if self._waiting_for_mainpyfile(frame):', 'context': '        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):\n            self.current_bp = (\n                    self.canonic(frame.f_code.co_filename), frame.f_lineno)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 459, 'coloffset': 8, 'linematch': 'if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):', 'context': '\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):\n            self.current_bp = (\n                    self.canonic(frame.f_code.co_filename), frame.f_lineno)\n        else:\n            self.current_bp = None\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 451, 'coloffset': 4, 'linematch': 'def user_line(self, frame):', 'context': '            return\n        if self.stop_here(frame):\n            self.interaction(frame)\n\n    def user_line(self, frame):\n        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 452, 'coloffset': 8, 'linematch': '""""""This function is called when we stop or break at this line.""""""', 'context': '        if self.stop_here(frame):\n            self.interaction(frame)\n\n    def user_line(self, frame):\n        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):\n            return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 453, 'coloffset': 8, 'linematch': 'if ""__exc_tuple__"" in frame.f_locals:', 'context': '            self.interaction(frame)\n\n    def user_line(self, frame):\n        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 456, 'coloffset': 8, 'linematch': 'if self._waiting_for_mainpyfile(frame):', 'context': '        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):\n            self.current_bp = (\n                    self.canonic(frame.f_code.co_filename), frame.f_lineno)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 459, 'coloffset': 8, 'linematch': 'if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):', 'context': '\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if self.get_break(self.canonic(frame.f_code.co_filename), frame.f_lineno):\n            self.current_bp = (\n                    self.canonic(frame.f_code.co_filename), frame.f_lineno)\n        else:\n            self.current_bp = None\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 465, 'coloffset': 8, 'linematch': 'try:', 'context': '                    self.canonic(frame.f_code.co_filename), frame.f_lineno)\n        else:\n            self.current_bp = None\n\n        try:\n            self.ui.update_breakpoints()\n            self.interaction(frame)\n        except Exception:\n            self.ui.show_internal_exc_dlg(sys.exc_info())\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 451, 'coloffset': 4, 'linematch': 'def user_line(self, frame):', 'context': '            return\n        if self.stop_here(frame):\n            self.interaction(frame)\n\n    def user_line(self, frame):\n        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 451, 'coloffset': 4, 'linematch': 'def user_line(self, frame):', 'context': '            return\n        if self.stop_here(frame):\n            self.interaction(frame)\n\n    def user_line(self, frame):\n        """"""This function is called when we stop or break at this line.""""""\n        if ""__exc_tuple__"" in frame.f_locals:\n            del frame.f_locals[""__exc_tuple__""]\n\n        if self._waiting_for_mainpyfile(frame):', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3790', 'line': 454, 'description': ['    return ""ERROR: Invalid custom stringifier file.""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -451,7 +451,7 @@\n \n \n def error_stringifier(_):\n-    return ""ERROR: Invalid custom stringifier file.""\n+    return ""XXERROR: Invalid custom stringifier file.XX""\n \n \n custom_stringifier_dict = {}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3791', 'line': 457, 'description': ['custom_stringifier_dict = {}'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -454,7 +454,7 @@\n     return ""ERROR: Invalid custom stringifier file.""\n \n \n-custom_stringifier_dict = {}\n+custom_stringifier_dict = None\n \n STRINGIFIERS = {\n     ""default"": default_stringifier,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3792', 'line': 460, 'description': ['    ""default"": default_stringifier,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -457,7 +457,7 @@\n custom_stringifier_dict = {}\n \n STRINGIFIERS = {\n-    ""default"": default_stringifier,\n+    ""XXdefaultXX"": default_stringifier,\n     ""type"": type_stringifier,\n     ""repr"": repr,\n     ""str"": str,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3793', 'line': 461, 'description': ['    ""type"": type_stringifier,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -458,7 +458,7 @@\n \n STRINGIFIERS = {\n     ""default"": default_stringifier,\n-    ""type"": type_stringifier,\n+    ""XXtypeXX"": type_stringifier,\n     ""repr"": repr,\n     ""str"": str,\n     ""id"": id_stringifier,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3794', 'line': 462, 'description': ['    ""repr"": repr,'], 'failure': []}, {'name': 'Mutant #3795', 'line': 463, 'description': ['    ""str"": str,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -460,7 +460,7 @@\n     ""default"": default_stringifier,\n     ""type"": type_stringifier,\n     ""repr"": repr,\n-    ""str"": str,\n+    ""XXstrXX"": str,\n     ""id"": id_stringifier,\n }\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3796', 'line': 464, 'description': ['    ""id"": id_stringifier,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -461,7 +461,7 @@\n     ""type"": type_stringifier,\n     ""repr"": repr,\n     ""str"": str,\n-    ""id"": id_stringifier,\n+    ""XXidXX"": id_stringifier,\n }\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3797', 'line': 465, 'description': ['}'], 'failure': []}]",25.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,user_return,471-480,"[{'lineno': 473, 'coloffset': 8, 'linematch': 'if frame.f_code.co_name != ""<module>"":', 'context': '            self.ui.show_internal_exc_dlg(sys.exc_info())\n\n    def user_return(self, frame, return_value):\n        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 476, 'coloffset': 8, 'linematch': 'if self._waiting_for_mainpyfile(frame):', 'context': '        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 479, 'coloffset': 8, 'linematch': 'if ""__exc_tuple__"" not in frame.f_locals:', 'context': '\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 471, 'coloffset': 4, 'linematch': 'def user_return(self, frame, return_value):', 'context': '            self.interaction(frame)\n        except Exception:\n            self.ui.show_internal_exc_dlg(sys.exc_info())\n\n    def user_return(self, frame, return_value):\n        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 476, 'coloffset': 8, 'linematch': 'if self._waiting_for_mainpyfile(frame):', 'context': '        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 479, 'coloffset': 8, 'linematch': 'if ""__exc_tuple__"" not in frame.f_locals:', 'context': '\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 471, 'coloffset': 4, 'linematch': 'def user_return(self, frame, return_value):', 'context': '            self.interaction(frame)\n        except Exception:\n            self.ui.show_internal_exc_dlg(sys.exc_info())\n\n    def user_return(self, frame, return_value):\n        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 472, 'coloffset': 8, 'linematch': '""""""This function is called when a return trap is set here.""""""', 'context': '        except Exception:\n            self.ui.show_internal_exc_dlg(sys.exc_info())\n\n    def user_return(self, frame, return_value):\n        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):\n            return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 473, 'coloffset': 8, 'linematch': 'if frame.f_code.co_name != ""<module>"":', 'context': '            self.ui.show_internal_exc_dlg(sys.exc_info())\n\n    def user_return(self, frame, return_value):\n        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 476, 'coloffset': 8, 'linematch': 'if self._waiting_for_mainpyfile(frame):', 'context': '        """"""This function is called when a return trap is set here.""""""\n        if frame.f_code.co_name != ""<module>"":\n            frame.f_locals[""__return__""] = return_value\n\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 479, 'coloffset': 8, 'linematch': 'if ""__exc_tuple__"" not in frame.f_locals:', 'context': '\n        if self._waiting_for_mainpyfile(frame):\n            return\n\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3798', 'line': 475, 'description': ['        if """" == iinfo.display_type.strip():'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -472,7 +472,7 @@\n     try:\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n-        if """" == iinfo.display_type.strip():\n+        if ""XXXX"" == iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3799', 'line': 475, 'description': ['        if """" == iinfo.display_type.strip():'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -472,7 +472,7 @@\n     try:\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n-        if """" == iinfo.display_type.strip():\n+        if """" != iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3800', 'line': 476, 'description': ['            return lambda _: ""ERROR: custom stringifier is not set""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -473,7 +473,7 @@\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n         if """" == iinfo.display_type.strip():\n-            return lambda _: ""ERROR: custom stringifier is not set""\n+            return lambda _: ""XXERROR: custom stringifier is not setXX""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3801', 'line': 476, 'description': ['            return lambda _: ""ERROR: custom stringifier is not set""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -473,7 +473,7 @@\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n         if """" == iinfo.display_type.strip():\n-            return lambda _: ""ERROR: custom stringifier is not set""\n+            return lambda _: None\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3802', 'line': 478, 'description': ['            if not custom_stringifier_dict:  # Only execfile once'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -475,7 +475,7 @@\n         if """" == iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n-            if not custom_stringifier_dict:  # Only execfile once\n+            if  custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n                 custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n                 with open(custom_stringifier_fname) as inf:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3803', 'line': 480, 'description': ['                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -477,7 +477,7 @@\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n-                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n+                custom_stringifier_fname = None\n                 with open(custom_stringifier_fname) as inf:\n                     exec(compile(inf.read(), custom_stringifier_fname, ""exec""),\n                             custom_stringifier_dict,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,_waiting_for_mainpyfile,482-493,"[{'lineno': 483, 'coloffset': 8, 'linematch': 'if self._wait_for_mainpyfile:', 'context': '        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 484, 'coloffset': 12, 'linematch': 'if (self.mainpyfile != self.canonic(frame.f_code.co_filename)', 'context': '            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame\n            if self._continue_at_start:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 489, 'coloffset': 12, 'linematch': 'if self._continue_at_start:', 'context': '                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame\n            if self._continue_at_start:\n                self._continue_at_start = False\n                self.set_continue()\n                return True\n        return False\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 484, 'coloffset': 12, 'linematch': 'if (self.mainpyfile != self.canonic(frame.f_code.co_filename)', 'context': '            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame\n            if self._continue_at_start:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 489, 'coloffset': 12, 'linematch': 'if self._continue_at_start:', 'context': '                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame\n            if self._continue_at_start:\n                self._continue_at_start = False\n                self.set_continue()\n                return True\n        return False\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 482, 'coloffset': 4, 'linematch': 'def _waiting_for_mainpyfile(self, frame):', 'context': '\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 489, 'coloffset': 12, 'linematch': 'if self._continue_at_start:', 'context': '                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame\n            if self._continue_at_start:\n                self._continue_at_start = False\n                self.set_continue()\n                return True\n        return False\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 484, 'coloffset': 12, 'linematch': 'if (self.mainpyfile != self.canonic(frame.f_code.co_filename)', 'context': '            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame\n            if self._continue_at_start:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 489, 'coloffset': 12, 'linematch': 'if self._continue_at_start:', 'context': '                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame\n            if self._continue_at_start:\n                self._continue_at_start = False\n                self.set_continue()\n                return True\n        return False\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 482, 'coloffset': 4, 'linematch': 'def _waiting_for_mainpyfile(self, frame):', 'context': '\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 483, 'coloffset': 8, 'linematch': 'if self._wait_for_mainpyfile:', 'context': '        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False\n            self.bottom_frame = frame', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 493, 'coloffset': 8, 'linematch': 'return False', 'context': '            if self._continue_at_start:\n                self._continue_at_start = False\n                self.set_continue()\n                return True\n        return False\n\n    def user_exception(self, frame, exc_tuple):\n        """"""This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.""""""\n        frame.f_locals[""__exc_tuple__""] = exc_tuple', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 482, 'coloffset': 4, 'linematch': 'def _waiting_for_mainpyfile(self, frame):', 'context': '\n        if ""__exc_tuple__"" not in frame.f_locals:\n            self.interaction(frame)\n\n    def _waiting_for_mainpyfile(self, frame):\n        if self._wait_for_mainpyfile:\n            if (self.mainpyfile != self.canonic(frame.f_code.co_filename)\n                    or frame.f_lineno <= 0):\n                return True\n            self._wait_for_mainpyfile = False', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #3804', 'line': 482, 'description': ['                    exec(compile(inf.read(), custom_stringifier_fname, ""exec""),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -479,7 +479,7 @@\n                 from os.path import expanduser, expandvars\n                 custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n                 with open(custom_stringifier_fname) as inf:\n-                    exec(compile(inf.read(), custom_stringifier_fname, ""exec""),\n+                    exec(compile(inf.read(), custom_stringifier_fname, ""XXexecXX""),\n                             custom_stringifier_dict,\n                             custom_stringifier_dict)\n         except FileNotFoundError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3805', 'line': 486, 'description': ['            ui_log.error(""Unable to locate custom stringifier file {!r}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -483,7 +483,7 @@\n                             custom_stringifier_dict,\n                             custom_stringifier_dict)\n         except FileNotFoundError:\n-            ui_log.error(""Unable to locate custom stringifier file {!r}""\n+            ui_log.error(""XXUnable to locate custom stringifier file {!r}XX""\n                          .format(iinfo.display_type))\n             return error_stringifier\n         except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3806', 'line': 490, 'description': ['            ui_log.exception(""Error when importing custom stringifier"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -487,7 +487,7 @@\n                          .format(iinfo.display_type))\n             return error_stringifier\n         except Exception:\n-            ui_log.exception(""Error when importing custom stringifier"")\n+            ui_log.exception(""XXError when importing custom stringifierXX"")\n             return error_stringifier\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3807', 'line': 493, 'description': ['            if ""pudb_stringifier"" not in custom_stringifier_dict:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -490,7 +490,7 @@\n             ui_log.exception(""Error when importing custom stringifier"")\n             return error_stringifier\n         else:\n-            if ""pudb_stringifier"" not in custom_stringifier_dict:\n+            if ""XXpudb_stringifierXX"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3808', 'line': 493, 'description': ['            if ""pudb_stringifier"" not in custom_stringifier_dict:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -490,7 +490,7 @@\n             ui_log.exception(""Error when importing custom stringifier"")\n             return error_stringifier\n         else:\n-            if ""pudb_stringifier"" not in custom_stringifier_dict:\n+            if ""pudb_stringifier""  in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'CL002' 'ANNOT001' 'F002' 'C002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,user_exception,495-501,"[{'lineno': 500, 'coloffset': 8, 'linematch': 'if not self._wait_for_mainpyfile:', 'context': '        """"""This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.""""""\n        frame.f_locals[""__exc_tuple__""] = exc_tuple\n\n        if not self._wait_for_mainpyfile:\n            self.interaction(frame, exc_tuple)\n\n    # {{{ entrypoints\n\n    def _runscript(self, filename):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 495, 'coloffset': 4, 'linematch': 'def user_exception(self, frame, exc_tuple):', 'context': '                self.set_continue()\n                return True\n        return False\n\n    def user_exception(self, frame, exc_tuple):\n        """"""This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.""""""\n        frame.f_locals[""__exc_tuple__""] = exc_tuple\n\n        if not self._wait_for_mainpyfile:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 495, 'coloffset': 4, 'linematch': 'def user_exception(self, frame, exc_tuple):', 'context': '                self.set_continue()\n                return True\n        return False\n\n    def user_exception(self, frame, exc_tuple):\n        """"""This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.""""""\n        frame.f_locals[""__exc_tuple__""] = exc_tuple\n\n        if not self._wait_for_mainpyfile:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 496, 'coloffset': 8, 'linematch': '""""""This function is called if an exception occurs,', 'context': '                return True\n        return False\n\n    def user_exception(self, frame, exc_tuple):\n        """"""This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.""""""\n        frame.f_locals[""__exc_tuple__""] = exc_tuple\n\n        if not self._wait_for_mainpyfile:\n            self.interaction(frame, exc_tuple)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 498, 'coloffset': 8, 'linematch': 'frame.f_locals[""__exc_tuple__""] = exc_tuple', 'context': '\n    def user_exception(self, frame, exc_tuple):\n        """"""This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.""""""\n        frame.f_locals[""__exc_tuple__""] = exc_tuple\n\n        if not self._wait_for_mainpyfile:\n            self.interaction(frame, exc_tuple)\n\n    # {{{ entrypoints', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 500, 'coloffset': 8, 'linematch': 'if not self._wait_for_mainpyfile:', 'context': '        """"""This function is called if an exception occurs,\n        but only if we are to stop at or just below this level.""""""\n        frame.f_locals[""__exc_tuple__""] = exc_tuple\n\n        if not self._wait_for_mainpyfile:\n            self.interaction(frame, exc_tuple)\n\n    # {{{ entrypoints\n\n    def _runscript(self, filename):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3810', 'line': 495, 'description': ['                             ""named pudb_stringifier at the module level."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -492,7 +492,7 @@\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n-                             ""named pudb_stringifier at the module level."")\n+                             ""XXnamed pudb_stringifier at the module level.XX"")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n                         ""pudb_stringifier not defined."")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3811', 'line': 497, 'description': ['                        ""ERROR: Invalid custom stringifier file: ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -494,7 +494,7 @@\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n-                        ""ERROR: Invalid custom stringifier file: ""\n+                        ""XXERROR: Invalid custom stringifier file: XX""\n                         ""pudb_stringifier not defined."")\n             else:\n                 return (lambda value:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3812', 'line': 498, 'description': ['                        ""pudb_stringifier not defined."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -495,7 +495,7 @@\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n-                        ""pudb_stringifier not defined."")\n+                        ""XXpudb_stringifier not defined.XX"")\n             else:\n                 return (lambda value:\n                     str(custom_stringifier_dict[""pudb_stringifier""](value)))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3813', 'line': 498, 'description': ['                        ""pudb_stringifier not defined."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -493,9 +493,7 @@\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n-                return lambda value: str(\n-                        ""ERROR: Invalid custom stringifier file: ""\n-                        ""pudb_stringifier not defined."")\n+                return lambda value: None\n             else:\n                 return (lambda value:\n                     str(custom_stringifier_dict[""pudb_stringifier""](value)))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3814', 'line': 501, 'description': ['                    str(custom_stringifier_dict[""pudb_stringifier""](value)))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -498,7 +498,7 @@\n                         ""pudb_stringifier not defined."")\n             else:\n                 return (lambda value:\n-                    str(custom_stringifier_dict[""pudb_stringifier""](value)))\n+                    str(custom_stringifier_dict[""XXpudb_stringifierXX""](value)))\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3815', 'line': 501, 'description': ['                    str(custom_stringifier_dict[""pudb_stringifier""](value)))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -497,8 +497,7 @@\n                         ""ERROR: Invalid custom stringifier file: ""\n                         ""pudb_stringifier not defined."")\n             else:\n-                return (lambda value:\n-                    str(custom_stringifier_dict[""pudb_stringifier""](value)))\n+                return (lambda value: None)\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,render,61-156,"[{'lineno': 71, 'coloffset': 8, 'linematch': 'if self.is_current:', 'context': '\n        # attrs is a list of words like ""focused"" and ""breakpoint""\n        attrs = []\n\n        if self.is_current:\n            crnt = "">""\n            attrs.append(""current"")\n        else:\n            crnt = "" ""\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 77, 'coloffset': 8, 'linematch': 'if self.has_breakpoint:', 'context': '            attrs.append(""current"")\n        else:\n            crnt = "" ""\n\n        if self.has_breakpoint:\n            bp = ""*""\n            attrs.append(""breakpoint"")\n        else:\n            bp = "" ""\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 83, 'coloffset': 8, 'linematch': 'if focus:', 'context': '            attrs.append(""breakpoint"")\n        else:\n            bp = "" ""\n\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 90, 'coloffset': 8, 'linematch': 'if not attrs and self.attr is not None:', 'context': '            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:\n            attr = self.attr + [(""source"", None)]\n        else:\n            attr = [("" "".join(attrs+[""source""]), None)]\n\n        from urwid.util import apply_target_encoding, trim_text_attr_cs', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 101, 'coloffset': 8, 'linematch': 'if render_line_nr and self.line_nr:', 'context': '        # build line prefix ---------------------------------------------------\n        line_prefix = """"\n        line_prefix_attr = []\n\n        if render_line_nr and self.line_nr:\n            line_prefix_attr = [(""line number"", len(self.line_nr))]\n            line_prefix = self.line_nr\n\n        line_prefix = crnt+bp+line_prefix\n        line_prefix_attr = [(""current line marker"", 1),', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 85, 'coloffset': 8, 'linematch': 'elif self.highlight:', 'context': '            bp = "" ""\n\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 86, 'coloffset': 12, 'linematch': 'if not self.has_breakpoint:', 'context': '\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:\n            attr = self.attr + [(""source"", None)]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 125, 'coloffset': 12, 'linematch': 'if seg_len is None:', 'context': '        encoded_attr = []\n\n        i = 0\n        for seg_attr, seg_len in attr:\n            if seg_len is None:\n                # means: gobble up remainder of text and rest of line\n                # and fill with attribute\n\n                rowlen = hscroll+maxcol\n                remaining_text = text[i:]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 204, 'coloffset': 8, 'linematch': 'if focus:', 'context': '        return 1\n\n    def render(self, size, focus=False):\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""\n        else:\n            apfx = """"\n\n        bp_pfx = """"', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'if not self.enabled:', 'context': '        else:\n            apfx = """"\n\n        bp_pfx = """"\n        if not self.enabled:\n            apfx += ""disabled ""\n            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""\n            bp_pfx += "">>""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 213, 'coloffset': 8, 'linematch': 'if self.is_current:', 'context': '        bp_pfx = """"\n        if not self.enabled:\n            apfx += ""disabled ""\n            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""\n            bp_pfx += "">>""\n        bp_pfx = bp_pfx.ljust(3)\n\n        hits_label = ""hits"" if self.hits != 1 else ""hit""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 291, 'coloffset': 8, 'linematch': 'if focus:', 'context': '        """"""\n        from pudb.ui_tools import make_canvas\n\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""+self.attr_prefix+"" ""\n        else:\n            apfx = self.attr_prefix+"" ""\n\n        var_label = self.var_label or """"', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 298, 'coloffset': 8, 'linematch': 'if self.wrap:', 'context': '            apfx = self.attr_prefix+"" ""\n\n        var_label = self.var_label or """"\n\n        if self.wrap:\n            text = self._get_wrapped_lines(maxcol)\n\n            extralabel_full, extralabel_rem = divmod(\n                    text_width(var_label[maxcol:]), maxcol)\n            totallen = sum(text_width(i) for i in text)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 327, 'coloffset': 8, 'linematch': 'if self.value_str is not None:', 'context': '            return make_canvas(text, attr, maxcol, apfx+""value"")\n\n        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 328, 'coloffset': 12, 'linematch': 'if self.var_label is not None:', 'context': '\n        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 329, 'coloffset': 16, 'linematch': 'if len(self._get_wrapped_lines(maxcol)) > 1:', 'context': '        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]\n\n                    attr = [', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 361, 'coloffset': 12, 'linematch': 'if text_width(text[i]) > maxcol:', 'context': '        # Ellipses to show text was cut off\n        # encoding = urwid.util.detected_encoding\n\n        for i in range(len(text)):\n            if text_width(text[i]) > maxcol:\n                text[i] = text[i][:maxcol-3] + ""...""\n\n        return make_canvas(text, attr, maxcol, apfx+""value"")\n\n    def keypress(self, size, key):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 86, 'coloffset': 12, 'linematch': 'if not self.has_breakpoint:', 'context': '\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:\n            attr = self.attr + [(""source"", None)]', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 328, 'coloffset': 12, 'linematch': 'if self.var_label is not None:', 'context': '\n        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 329, 'coloffset': 16, 'linematch': 'if len(self._get_wrapped_lines(maxcol)) > 1:', 'context': '        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]\n\n                    attr = [', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'def render(self, size, focus=False):', 'context': '\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 202, 'coloffset': 4, 'linematch': 'def render(self, size, focus=False):', 'context': '\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""\n        else:\n            apfx = """"', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 281, 'coloffset': 4, 'linematch': 'def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'context': '            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: A Canvas subclass instance containing the rendered content of\n            this widget', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 281, 'coloffset': 4, 'linematch': 'def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'context': '            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: A Canvas subclass instance containing the rendered content of\n            this widget', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 77, 'coloffset': 8, 'linematch': 'if self.has_breakpoint:', 'context': '            attrs.append(""current"")\n        else:\n            crnt = "" ""\n\n        if self.has_breakpoint:\n            bp = ""*""\n            attrs.append(""breakpoint"")\n        else:\n            bp = "" ""\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 83, 'coloffset': 8, 'linematch': 'if focus:', 'context': '            attrs.append(""breakpoint"")\n        else:\n            bp = "" ""\n\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 90, 'coloffset': 8, 'linematch': 'if not attrs and self.attr is not None:', 'context': '            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:\n            attr = self.attr + [(""source"", None)]\n        else:\n            attr = [("" "".join(attrs+[""source""]), None)]\n\n        from urwid.util import apply_target_encoding, trim_text_attr_cs', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 101, 'coloffset': 8, 'linematch': 'if render_line_nr and self.line_nr:', 'context': '        # build line prefix ---------------------------------------------------\n        line_prefix = """"\n        line_prefix_attr = []\n\n        if render_line_nr and self.line_nr:\n            line_prefix_attr = [(""line number"", len(self.line_nr))]\n            line_prefix = self.line_nr\n\n        line_prefix = crnt+bp+line_prefix\n        line_prefix_attr = [(""current line marker"", 1),', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'if not self.enabled:', 'context': '        else:\n            apfx = """"\n\n        bp_pfx = """"\n        if not self.enabled:\n            apfx += ""disabled ""\n            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""\n            bp_pfx += "">>""', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 213, 'coloffset': 8, 'linematch': 'if self.is_current:', 'context': '        bp_pfx = """"\n        if not self.enabled:\n            apfx += ""disabled ""\n            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""\n            bp_pfx += "">>""\n        bp_pfx = bp_pfx.ljust(3)\n\n        hits_label = ""hits"" if self.hits != 1 else ""hit""', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 298, 'coloffset': 8, 'linematch': 'if self.wrap:', 'context': '            apfx = self.attr_prefix+"" ""\n\n        var_label = self.var_label or """"\n\n        if self.wrap:\n            text = self._get_wrapped_lines(maxcol)\n\n            extralabel_full, extralabel_rem = divmod(\n                    text_width(var_label[maxcol:]), maxcol)\n            totallen = sum(text_width(i) for i in text)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 327, 'coloffset': 8, 'linematch': 'if self.value_str is not None:', 'context': '            return make_canvas(text, attr, maxcol, apfx+""value"")\n\n        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 85, 'coloffset': 8, 'linematch': 'elif self.highlight:', 'context': '            bp = "" ""\n\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 86, 'coloffset': 12, 'linematch': 'if not self.has_breakpoint:', 'context': '\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:\n            attr = self.attr + [(""source"", None)]', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 328, 'coloffset': 12, 'linematch': 'if self.var_label is not None:', 'context': '\n        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 329, 'coloffset': 16, 'linematch': 'if len(self._get_wrapped_lines(maxcol)) > 1:', 'context': '        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]\n\n                    attr = [', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'def render(self, size, focus=False):', 'context': '\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 281, 'coloffset': 4, 'linematch': 'def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'context': '            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: A Canvas subclass instance containing the rendered content of\n            this widget', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 115, 'coloffset': 8, 'linematch': 'assert len(encoded_line_prefix) == len(line_prefix)', 'context': ""        line_prefix_len = len(line_prefix)\n\n        encoded_line_prefix, line_prefix_cs = apply_target_encoding(line_prefix)\n\n        assert len(encoded_line_prefix) == len(line_prefix)\n        # otherwise we'd have to adjust line_prefix_attr... :/\n\n        # shipout, encoding ---------------------------------------------------\n        cs = []\n        encoded_text_segs = []"", 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 62, 'coloffset': 8, 'linematch': 'from pudb.debugger import CONFIG', 'context': '    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 63, 'coloffset': 8, 'linematch': 'render_line_nr = CONFIG[""line_numbers""]', 'context': '        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start\n\n        # attrs is a list of words like ""focused"" and ""breakpoint""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 65, 'coloffset': 8, 'linematch': 'maxcol = size[0]', 'context': '    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start\n\n        # attrs is a list of words like ""focused"" and ""breakpoint""\n        attrs = []\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 66, 'coloffset': 8, 'linematch': 'hscroll = self.dbg_ui.source_hscroll_start', 'context': '        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start\n\n        # attrs is a list of words like ""focused"" and ""breakpoint""\n        attrs = []\n\n        if self.is_current:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 69, 'coloffset': 8, 'linematch': 'attrs = []', 'context': '        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start\n\n        # attrs is a list of words like ""focused"" and ""breakpoint""\n        attrs = []\n\n        if self.is_current:\n            crnt = "">""\n            attrs.append(""current"")\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 71, 'coloffset': 8, 'linematch': 'if self.is_current:', 'context': '\n        # attrs is a list of words like ""focused"" and ""breakpoint""\n        attrs = []\n\n        if self.is_current:\n            crnt = "">""\n            attrs.append(""current"")\n        else:\n            crnt = "" ""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 77, 'coloffset': 8, 'linematch': 'if self.has_breakpoint:', 'context': '            attrs.append(""current"")\n        else:\n            crnt = "" ""\n\n        if self.has_breakpoint:\n            bp = ""*""\n            attrs.append(""breakpoint"")\n        else:\n            bp = "" ""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 83, 'coloffset': 8, 'linematch': 'if focus:', 'context': '            attrs.append(""breakpoint"")\n        else:\n            bp = "" ""\n\n        if focus:\n            attrs.append(""focused"")\n        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 89, 'coloffset': 8, 'linematch': 'text = self.text', 'context': '        elif self.highlight:\n            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:\n            attr = self.attr + [(""source"", None)]\n        else:\n            attr = [("" "".join(attrs+[""source""]), None)]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 90, 'coloffset': 8, 'linematch': 'if not attrs and self.attr is not None:', 'context': '            if not self.has_breakpoint:\n                attrs.append(""highlighted"")\n\n        text = self.text\n        if not attrs and self.attr is not None:\n            attr = self.attr + [(""source"", None)]\n        else:\n            attr = [("" "".join(attrs+[""source""]), None)]\n\n        from urwid.util import apply_target_encoding, trim_text_attr_cs', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 95, 'coloffset': 8, 'linematch': 'from urwid.util import apply_target_encoding, trim_text_attr_cs', 'context': '            attr = self.attr + [(""source"", None)]\n        else:\n            attr = [("" "".join(attrs+[""source""]), None)]\n\n        from urwid.util import apply_target_encoding, trim_text_attr_cs\n\n        # build line prefix ---------------------------------------------------\n        line_prefix = """"\n        line_prefix_attr = []\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 98, 'coloffset': 8, 'linematch': 'line_prefix = """"', 'context': '\n        from urwid.util import apply_target_encoding, trim_text_attr_cs\n\n        # build line prefix ---------------------------------------------------\n        line_prefix = """"\n        line_prefix_attr = []\n\n        if render_line_nr and self.line_nr:\n            line_prefix_attr = [(""line number"", len(self.line_nr))]\n            line_prefix = self.line_nr', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 99, 'coloffset': 8, 'linematch': 'line_prefix_attr = []', 'context': '        from urwid.util import apply_target_encoding, trim_text_attr_cs\n\n        # build line prefix ---------------------------------------------------\n        line_prefix = """"\n        line_prefix_attr = []\n\n        if render_line_nr and self.line_nr:\n            line_prefix_attr = [(""line number"", len(self.line_nr))]\n            line_prefix = self.line_nr\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 101, 'coloffset': 8, 'linematch': 'if render_line_nr and self.line_nr:', 'context': '        # build line prefix ---------------------------------------------------\n        line_prefix = """"\n        line_prefix_attr = []\n\n        if render_line_nr and self.line_nr:\n            line_prefix_attr = [(""line number"", len(self.line_nr))]\n            line_prefix = self.line_nr\n\n        line_prefix = crnt+bp+line_prefix\n        line_prefix_attr = [(""current line marker"", 1),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 105, 'coloffset': 8, 'linematch': 'line_prefix = crnt+bp+line_prefix', 'context': '        if render_line_nr and self.line_nr:\n            line_prefix_attr = [(""line number"", len(self.line_nr))]\n            line_prefix = self.line_nr\n\n        line_prefix = crnt+bp+line_prefix\n        line_prefix_attr = [(""current line marker"", 1),\n                            (""breakpoint marker"", 1)] \\\n                + line_prefix_attr\n\n        # assume rendered width is same as len', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 106, 'coloffset': 8, 'linematch': 'line_prefix_attr = [(""current line marker"", 1),', 'context': '            line_prefix_attr = [(""line number"", len(self.line_nr))]\n            line_prefix = self.line_nr\n\n        line_prefix = crnt+bp+line_prefix\n        line_prefix_attr = [(""current line marker"", 1),\n                            (""breakpoint marker"", 1)] \\\n                + line_prefix_attr\n\n        # assume rendered width is same as len\n        line_prefix_len = len(line_prefix)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 111, 'coloffset': 8, 'linematch': 'line_prefix_len = len(line_prefix)', 'context': '                            (""breakpoint marker"", 1)] \\\n                + line_prefix_attr\n\n        # assume rendered width is same as len\n        line_prefix_len = len(line_prefix)\n\n        encoded_line_prefix, line_prefix_cs = apply_target_encoding(line_prefix)\n\n        assert len(encoded_line_prefix) == len(line_prefix)\n        # otherwise we\'d have to adjust line_prefix_attr... :/', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 113, 'coloffset': 8, 'linematch': 'encoded_line_prefix, line_prefix_cs = apply_target_encoding(line_prefix)', 'context': ""\n        # assume rendered width is same as len\n        line_prefix_len = len(line_prefix)\n\n        encoded_line_prefix, line_prefix_cs = apply_target_encoding(line_prefix)\n\n        assert len(encoded_line_prefix) == len(line_prefix)\n        # otherwise we'd have to adjust line_prefix_attr... :/\n\n        # shipout, encoding ---------------------------------------------------"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 115, 'coloffset': 8, 'linematch': 'assert len(encoded_line_prefix) == len(line_prefix)', 'context': ""        line_prefix_len = len(line_prefix)\n\n        encoded_line_prefix, line_prefix_cs = apply_target_encoding(line_prefix)\n\n        assert len(encoded_line_prefix) == len(line_prefix)\n        # otherwise we'd have to adjust line_prefix_attr... :/\n\n        # shipout, encoding ---------------------------------------------------\n        cs = []\n        encoded_text_segs = []"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 119, 'coloffset': 8, 'linematch': 'cs = []', 'context': ""        assert len(encoded_line_prefix) == len(line_prefix)\n        # otherwise we'd have to adjust line_prefix_attr... :/\n\n        # shipout, encoding ---------------------------------------------------\n        cs = []\n        encoded_text_segs = []\n        encoded_attr = []\n\n        i = 0\n        for seg_attr, seg_len in attr:"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 120, 'coloffset': 8, 'linematch': 'encoded_text_segs = []', 'context': ""        # otherwise we'd have to adjust line_prefix_attr... :/\n\n        # shipout, encoding ---------------------------------------------------\n        cs = []\n        encoded_text_segs = []\n        encoded_attr = []\n\n        i = 0\n        for seg_attr, seg_len in attr:\n            if seg_len is None:"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 121, 'coloffset': 8, 'linematch': 'encoded_attr = []', 'context': '\n        # shipout, encoding ---------------------------------------------------\n        cs = []\n        encoded_text_segs = []\n        encoded_attr = []\n\n        i = 0\n        for seg_attr, seg_len in attr:\n            if seg_len is None:\n                # means: gobble up remainder of text and rest of line', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 123, 'coloffset': 8, 'linematch': 'i = 0', 'context': '        cs = []\n        encoded_text_segs = []\n        encoded_attr = []\n\n        i = 0\n        for seg_attr, seg_len in attr:\n            if seg_len is None:\n                # means: gobble up remainder of text and rest of line\n                # and fill with attribute\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 124, 'coloffset': 8, 'linematch': 'for seg_attr, seg_len in attr:', 'context': '        encoded_text_segs = []\n        encoded_attr = []\n\n        i = 0\n        for seg_attr, seg_len in attr:\n            if seg_len is None:\n                # means: gobble up remainder of text and rest of line\n                # and fill with attribute\n\n                rowlen = hscroll+maxcol', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 147, 'coloffset': 8, 'linematch': 'encoded_text = b"""".join(encoded_text_segs)', 'context': '\n            encoded_text_segs.append(encoded_seg_text)\n            cs.extend(seg_cs)\n\n        encoded_text = b"""".join(encoded_text_segs)\n        encoded_text, encoded_attr, cs = trim_text_attr_cs(\n                encoded_text, encoded_attr, cs,\n                hscroll, hscroll+maxcol-line_prefix_len)\n\n        encoded_text = encoded_line_prefix + encoded_text', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 148, 'coloffset': 8, 'linematch': 'encoded_text, encoded_attr, cs = trim_text_attr_cs(', 'context': '            encoded_text_segs.append(encoded_seg_text)\n            cs.extend(seg_cs)\n\n        encoded_text = b"""".join(encoded_text_segs)\n        encoded_text, encoded_attr, cs = trim_text_attr_cs(\n                encoded_text, encoded_attr, cs,\n                hscroll, hscroll+maxcol-line_prefix_len)\n\n        encoded_text = encoded_line_prefix + encoded_text\n        encoded_attr = line_prefix_attr + encoded_attr', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 152, 'coloffset': 8, 'linematch': 'encoded_text = encoded_line_prefix + encoded_text', 'context': '        encoded_text, encoded_attr, cs = trim_text_attr_cs(\n                encoded_text, encoded_attr, cs,\n                hscroll, hscroll+maxcol-line_prefix_len)\n\n        encoded_text = encoded_line_prefix + encoded_text\n        encoded_attr = line_prefix_attr + encoded_attr\n        cs = line_prefix_cs + cs\n\n        return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 153, 'coloffset': 8, 'linematch': 'encoded_attr = line_prefix_attr + encoded_attr', 'context': '                encoded_text, encoded_attr, cs,\n                hscroll, hscroll+maxcol-line_prefix_len)\n\n        encoded_text = encoded_line_prefix + encoded_text\n        encoded_attr = line_prefix_attr + encoded_attr\n        cs = line_prefix_cs + cs\n\n        return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)\n\n    def keypress(self, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 154, 'coloffset': 8, 'linematch': 'cs = line_prefix_cs + cs', 'context': '                hscroll, hscroll+maxcol-line_prefix_len)\n\n        encoded_text = encoded_line_prefix + encoded_text\n        encoded_attr = line_prefix_attr + encoded_attr\n        cs = line_prefix_cs + cs\n\n        return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)\n\n    def keypress(self, size, key):\n        return key', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 156, 'coloffset': 8, 'linematch': 'return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)', 'context': '        encoded_text = encoded_line_prefix + encoded_text\n        encoded_attr = line_prefix_attr + encoded_attr\n        cs = line_prefix_cs + cs\n\n        return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)\n\n    def keypress(self, size, key):\n        return key\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 203, 'coloffset': 8, 'linematch': 'maxcol = size[0]', 'context': '    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""\n        else:\n            apfx = """"\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 204, 'coloffset': 8, 'linematch': 'if focus:', 'context': '        return 1\n\n    def render(self, size, focus=False):\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""\n        else:\n            apfx = """"\n\n        bp_pfx = """"', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 209, 'coloffset': 8, 'linematch': 'bp_pfx = """"', 'context': '            apfx = ""focused ""\n        else:\n            apfx = """"\n\n        bp_pfx = """"\n        if not self.enabled:\n            apfx += ""disabled ""\n            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'if not self.enabled:', 'context': '        else:\n            apfx = """"\n\n        bp_pfx = """"\n        if not self.enabled:\n            apfx += ""disabled ""\n            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""\n            bp_pfx += "">>""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 213, 'coloffset': 8, 'linematch': 'if self.is_current:', 'context': '        bp_pfx = """"\n        if not self.enabled:\n            apfx += ""disabled ""\n            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""\n            bp_pfx += "">>""\n        bp_pfx = bp_pfx.ljust(3)\n\n        hits_label = ""hits"" if self.hits != 1 else ""hit""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 216, 'coloffset': 8, 'linematch': 'bp_pfx = bp_pfx.ljust(3)', 'context': '            bp_pfx += ""X""\n        if self.is_current:\n            apfx += ""current ""\n            bp_pfx += "">>""\n        bp_pfx = bp_pfx.ljust(3)\n\n        hits_label = ""hits"" if self.hits != 1 else ""hit""\n        loc = f"" {self.filename}:{self.line} ({self.hits} {hits_label})""\n        text = bp_pfx+loc\n        attr = [(apfx+""breakpoint"", len(text))]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 218, 'coloffset': 8, 'linematch': 'hits_label = ""hits"" if self.hits != 1 else ""hit""', 'context': '            apfx += ""current ""\n            bp_pfx += "">>""\n        bp_pfx = bp_pfx.ljust(3)\n\n        hits_label = ""hits"" if self.hits != 1 else ""hit""\n        loc = f"" {self.filename}:{self.line} ({self.hits} {hits_label})""\n        text = bp_pfx+loc\n        attr = [(apfx+""breakpoint"", len(text))]\n\n        return make_canvas([text], [attr], maxcol, apfx+""breakpoint"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 219, 'coloffset': 8, 'linematch': 'loc = f"" {self.filename}:{self.line} ({self.hits} {hits_label})""', 'context': '            bp_pfx += "">>""\n        bp_pfx = bp_pfx.ljust(3)\n\n        hits_label = ""hits"" if self.hits != 1 else ""hit""\n        loc = f"" {self.filename}:{self.line} ({self.hits} {hits_label})""\n        text = bp_pfx+loc\n        attr = [(apfx+""breakpoint"", len(text))]\n\n        return make_canvas([text], [attr], maxcol, apfx+""breakpoint"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 220, 'coloffset': 8, 'linematch': 'text = bp_pfx+loc', 'context': '        bp_pfx = bp_pfx.ljust(3)\n\n        hits_label = ""hits"" if self.hits != 1 else ""hit""\n        loc = f"" {self.filename}:{self.line} ({self.hits} {hits_label})""\n        text = bp_pfx+loc\n        attr = [(apfx+""breakpoint"", len(text))]\n\n        return make_canvas([text], [attr], maxcol, apfx+""breakpoint"")\n\n    def keypress(self, size, key):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 221, 'coloffset': 8, 'linematch': 'attr = [(apfx+""breakpoint"", len(text))]', 'context': '\n        hits_label = ""hits"" if self.hits != 1 else ""hit""\n        loc = f"" {self.filename}:{self.line} ({self.hits} {hits_label})""\n        text = bp_pfx+loc\n        attr = [(apfx+""breakpoint"", len(text))]\n\n        return make_canvas([text], [attr], maxcol, apfx+""breakpoint"")\n\n    def keypress(self, size, key):\n        return key', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 223, 'coloffset': 8, 'linematch': 'return make_canvas([text], [attr], maxcol, apfx+""breakpoint"")', 'context': '        loc = f"" {self.filename}:{self.line} ({self.hits} {hits_label})""\n        text = bp_pfx+loc\n        attr = [(apfx+""breakpoint"", len(text))]\n\n        return make_canvas([text], [attr], maxcol, apfx+""breakpoint"")\n\n    def keypress(self, size, key):\n        return key\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 282, 'coloffset': 8, 'linematch': '""""""', 'context': '        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: A Canvas subclass instance containing the rendered content of\n            this widget\n        """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 288, 'coloffset': 8, 'linematch': 'from pudb.ui_tools import make_canvas', 'context': '        :param focus: True if this widget or one of its children is in focus\n        :return: A Canvas subclass instance containing the rendered content of\n            this widget\n        """"""\n        from pudb.ui_tools import make_canvas\n\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""+self.attr_prefix+"" ""\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 290, 'coloffset': 8, 'linematch': 'maxcol = size[0]', 'context': '            this widget\n        """"""\n        from pudb.ui_tools import make_canvas\n\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""+self.attr_prefix+"" ""\n        else:\n            apfx = self.attr_prefix+"" ""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 291, 'coloffset': 8, 'linematch': 'if focus:', 'context': '        """"""\n        from pudb.ui_tools import make_canvas\n\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""+self.attr_prefix+"" ""\n        else:\n            apfx = self.attr_prefix+"" ""\n\n        var_label = self.var_label or """"', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 296, 'coloffset': 8, 'linematch': 'var_label = self.var_label or """"', 'context': '            apfx = ""focused ""+self.attr_prefix+"" ""\n        else:\n            apfx = self.attr_prefix+"" ""\n\n        var_label = self.var_label or """"\n\n        if self.wrap:\n            text = self._get_wrapped_lines(maxcol)\n\n            extralabel_full, extralabel_rem = divmod(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 298, 'coloffset': 8, 'linematch': 'if self.wrap:', 'context': '            apfx = self.attr_prefix+"" ""\n\n        var_label = self.var_label or """"\n\n        if self.wrap:\n            text = self._get_wrapped_lines(maxcol)\n\n            extralabel_full, extralabel_rem = divmod(\n                    text_width(var_label[maxcol:]), maxcol)\n            totallen = sum(text_width(i) for i in text)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 325, 'coloffset': 8, 'linematch': 'lprefix = len(self.prefix)', 'context': '                for i in range(fullcols + bool(rem))]\n\n            return make_canvas(text, attr, maxcol, apfx+""value"")\n\n        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 327, 'coloffset': 8, 'linematch': 'if self.value_str is not None:', 'context': '            return make_canvas(text, attr, maxcol, apfx+""value"")\n\n        lprefix = len(self.prefix)\n\n        if self.value_str is not None:\n            if self.var_label is not None:\n                if len(self._get_wrapped_lines(maxcol)) > 1:\n                    # label too long? generate separate value line\n                    text = [self.prefix + self.var_label + "":"",\n                            self.prefix+""  "" + self.value_str]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 360, 'coloffset': 8, 'linematch': 'for i in range(len(text)):', 'context': '\n        # Ellipses to show text was cut off\n        # encoding = urwid.util.detected_encoding\n\n        for i in range(len(text)):\n            if text_width(text[i]) > maxcol:\n                text[i] = text[i][:maxcol-3] + ""...""\n\n        return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 364, 'coloffset': 8, 'linematch': 'return make_canvas(text, attr, maxcol, apfx+""value"")', 'context': '        for i in range(len(text)):\n            if text_width(text[i]) > maxcol:\n                text[i] = text[i][:maxcol-3] + ""...""\n\n        return make_canvas(text, attr, maxcol, apfx+""value"")\n\n    def keypress(self, size, key):\n        return key\n\n# }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 305, 'coloffset': 20, 'linematch': 'len(self.prefix)  # Padding of first line', 'context': '            extralabel_full, extralabel_rem = divmod(\n                    text_width(var_label[maxcol:]), maxcol)\n            totallen = sum(text_width(i) for i in text)\n            labellen = (\n                    len(self.prefix)  # Padding of first line\n\n                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n                    * (extralabel_full + bool(extralabel_rem))\n\n                    + text_width(var_label)', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 305, 'coloffset': 20, 'linematch': 'len(self.prefix)  # Padding of first line', 'context': '            extralabel_full, extralabel_rem = divmod(\n                    text_width(var_label[maxcol:]), maxcol)\n            totallen = sum(text_width(i) for i in text)\n            labellen = (\n                    len(self.prefix)  # Padding of first line\n\n                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n                    * (extralabel_full + bool(extralabel_rem))\n\n                    + text_width(var_label)', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 305, 'coloffset': 20, 'linematch': 'len(self.prefix)  # Padding of first line', 'context': '            extralabel_full, extralabel_rem = divmod(\n                    text_width(var_label[maxcol:]), maxcol)\n            totallen = sum(text_width(i) for i in text)\n            labellen = (\n                    len(self.prefix)  # Padding of first line\n\n                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n                    * (extralabel_full + bool(extralabel_rem))\n\n                    + text_width(var_label)', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'def render(self, size, focus=False):', 'context': '\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'def render(self, size, focus=False):', 'context': '\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 281, 'coloffset': 4, 'linematch': 'def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'context': '            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: A Canvas subclass instance containing the rendered content of\n            this widget', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'def render(self, size, focus=False):', 'context': '\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n\n        maxcol = size[0]\n        hscroll = self.dbg_ui.source_hscroll_start', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 281, 'coloffset': 4, 'linematch': 'def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'context': '            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: A Canvas subclass instance containing the rendered content of\n            this widget', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3548', 'line': 65, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3550', 'line': 76, 'description': ['            ui_log.error(""Object {l!r} appears to be a collection, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -73,7 +73,7 @@\n             for count, entry in enumerate(collection):\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a collection, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a collection, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3552', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -77,7 +77,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, collection):\n         return len(collection)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #3555', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3556', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3557', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3558', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3559', 'line': 98, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3560', 'line': 107, 'description': ['                yield str(count), entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -104,7 +104,7 @@\n         assert isinstance(sequence, cls)\n         try:\n             for count, entry in enumerate(sequence):\n-                yield str(count), entry, f""[{count:d}]""\n+                yield str(count), entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3561', 'line': 109, 'description': ['            ui_log.error(""Object {l!r} appears to be a sequence, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -106,7 +106,7 @@\n             for count, entry in enumerate(sequence):\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a sequence, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3562', 'line': 110, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -107,7 +107,7 @@\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3563', 'line': 113, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -110,7 +110,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, sequence):\n         return len(sequence)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3564', 'line': 119, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3565', 'line': 121, 'description': ['        if cls is PudbMapping:'], 'failure': []}, {'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3572', 'line': 132, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3574', 'line': 139, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3575', 'line': 148, 'description': ['                key_repr = cls._safe_key_repr(key)'], 'failure': []}, {'name': 'Mutant #3576', 'line': 149, 'description': ['                yield (key_repr, mapping[key], f""[{key_repr}]"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -146,7 +146,7 @@\n         try:\n             for key in mapping.keys():\n                 key_repr = cls._safe_key_repr(key)\n-                yield (key_repr, mapping[key], f""[{key_repr}]"")\n+                yield (key_repr, mapping[key], f""XX[{key_repr}]XX"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3577', 'line': 151, 'description': ['            ui_log.error(""Object {l!r} appears to be a mapping, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -148,7 +148,7 @@\n                 key_repr = cls._safe_key_repr(key)\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a mapping, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3578', 'line': 152, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -149,7 +149,7 @@\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3579', 'line': 155, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -152,7 +152,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, mapping):\n         return len(mapping.keys())\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5177', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5178', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5179', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5180', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5181', 'line': 64, 'description': ['        if id_path in self.paths_to_expand:'], 'failure': []}, {'name': 'Mutant #5182', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5183', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5184', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = 43\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5185', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = None\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5187', 'line': 76, 'description': ['    @property'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -73,7 +73,6 @@\n     def bar(self):\n         return True\n \n-    @property\n     def red(self):\n         return ""red""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5189', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -77,7 +77,6 @@\n     def red(self):\n         return ""red""\n \n-    @classmethod\n     def blue(cls):\n         return ""blue""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5191', 'line': 84, 'description': ['    @staticmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -81,7 +81,6 @@\n     def blue(cls):\n         return ""blue""\n \n-    @staticmethod\n     def green():\n         return ""green""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5194', 'line': 92, 'description': ['        return ""amazing""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -89,7 +89,7 @@\n         return ""shh""\n \n     def __magicsomething__(self):\n-        return ""amazing""\n+        return ""XXamazingXX""\n \n \n def method_factory(method_name):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5195', 'line': 97, 'description': ['        func = getattr(self.__internal_dict__, method_name)'], 'failure': []}, {'name': 'Mutant #5196', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name != ""__getitem__""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5197', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name == ""XX__getitem__XX""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5198', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -101,7 +101,7 @@\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n             if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+                    and args and isinstance(args[1], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5199', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,8 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+            if (method_name == ""__getitem__"" or args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5200', 'line': 112, 'description': ['        ""__contains__"",'], 'failure': []}, {'name': 'Mutant #5201', 'line': 113, 'description': ['        ""__getitem__"",'], 'failure': []}, {'name': 'Mutant #5202', 'line': 114, 'description': ['        ""__iter__"",'], 'failure': []}, {'name': 'Mutant #5203', 'line': 115, 'description': ['        ""__len__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -112,7 +112,7 @@\n         ""__contains__"",\n         ""__getitem__"",\n         ""__iter__"",\n-        ""__len__"",\n+        ""XX__len__XX"",\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5204', 'line': 116, 'description': ['        ""__reversed__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -113,7 +113,7 @@\n         ""__getitem__"",\n         ""__iter__"",\n         ""__len__"",\n-        ""__reversed__"",\n+        ""XX__reversed__XX"",\n         ""count"",\n         ""get"",\n         ""index"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5205', 'line': 117, 'description': ['        ""count"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -114,7 +114,7 @@\n         ""__iter__"",\n         ""__len__"",\n         ""__reversed__"",\n-        ""count"",\n+        ""XXcountXX"",\n         ""get"",\n         ""index"",\n         ""items"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5206', 'line': 118, 'description': ['        ""get"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -115,7 +115,7 @@\n         ""__len__"",\n         ""__reversed__"",\n         ""count"",\n-        ""get"",\n+        ""XXgetXX"",\n         ""index"",\n         ""items"",\n         ""keys"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5207', 'line': 119, 'description': ['        ""index"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -116,7 +116,7 @@\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n-        ""index"",\n+        ""XXindexXX"",\n         ""items"",\n         ""keys"",\n         ""values"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5208', 'line': 120, 'description': ['        ""items"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -117,7 +117,7 @@\n         ""count"",\n         ""get"",\n         ""index"",\n-        ""items"",\n+        ""XXitemsXX"",\n         ""keys"",\n         ""values"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5209', 'line': 121, 'description': ['        ""keys"",'], 'failure': []}, {'name': 'Mutant #5210', 'line': 122, 'description': ['        ""values"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -119,7 +119,7 @@\n         ""index"",\n         ""items"",\n         ""keys"",\n-        ""values"",\n+        ""XXvaluesXX"",\n     }\n \n     # Deliberately starting from 0\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5215', 'line': 132, 'description': ['                    self.__internal_dict__ = dict(iterable)'], 'failure': []}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5219', 'line': 140, 'description': ['                func = method_factory(method)'], 'failure': []}, {'name': 'Mutant #5220', 'line': 151, 'description': ['    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)'], 'failure': []}, {'name': 'Mutant #5221', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5222', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5223', 'line': 155, 'description': ['        self.values_to_expand = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -152,7 +152,7 @@\n     MOD_STR = "" [all+()]""\n \n     def setUp(self):\n-        self.values_to_expand = []\n+        self.values_to_expand = None\n         self.class_counts = {\n             ""mappings"": 0,\n             ""sequences"": 0,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.63291139240506,"['CL001' 'CL002' 'ANNOT001' 'FLV001' 'F002' 'C002' 'NOA001' 'CML001'
 'COMPLEX001' 'F027' 'F030' 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/Assert'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef//BinOp[count(descendant::BinOp) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 1, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 1, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 1, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,parse_token,189-208,"[{'lineno': 191, 'coloffset': 8, 'linematch': 'if self.state == ParseState.idle:', 'context': '        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 192, 'coloffset': 12, 'linematch': 'if token in (self.t.Name.Function, self.t.Name.Function.Magic):', 'context': '\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 195, 'coloffset': 8, 'linematch': 'elif self.state == ParseState.found_function:', 'context': '        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren\n                self.paren_level = 1\n        else:\n            if (token is self.t.Name):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 196, 'coloffset': 12, 'linematch': 'if token is self.t.Punctuation and s == ""("":', 'context': '            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren\n                self.paren_level = 1\n        else:\n            if (token is self.t.Name):\n                return self.t.Token.Argument', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 200, 'coloffset': 12, 'linematch': 'if (token is self.t.Name):', 'context': '            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren\n                self.paren_level = 1\n        else:\n            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 206, 'coloffset': 12, 'linematch': 'if self.paren_level == 0:', 'context': '            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n\n\ntry:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 202, 'coloffset': 12, 'linematch': 'elif token is self.t.Punctuation and s == "")"":', 'context': '                self.paren_level = 1\n        else:\n            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 204, 'coloffset': 12, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 192, 'coloffset': 12, 'linematch': 'if token in (self.t.Name.Function, self.t.Name.Function.Magic):', 'context': '\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 196, 'coloffset': 12, 'linematch': 'if token is self.t.Punctuation and s == ""("":', 'context': '            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren\n                self.paren_level = 1\n        else:\n            if (token is self.t.Name):\n                return self.t.Token.Argument', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 17, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 17, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 17, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 17, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 17, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 204, 'coloffset': 49, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 189, 'coloffset': 4, 'linematch': 'def parse_token(self, token, s):', 'context': '        self.t = pygments_token\n        self.state = ParseState.idle\n        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 206, 'coloffset': 12, 'linematch': 'if self.paren_level == 0:', 'context': '            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n\n\ntry:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 192, 'coloffset': 12, 'linematch': 'if token in (self.t.Name.Function, self.t.Name.Function.Magic):', 'context': '\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 195, 'coloffset': 8, 'linematch': 'elif self.state == ParseState.found_function:', 'context': '        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren\n                self.paren_level = 1\n        else:\n            if (token is self.t.Name):', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 196, 'coloffset': 12, 'linematch': 'if token is self.t.Punctuation and s == ""("":', 'context': '            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren\n                self.paren_level = 1\n        else:\n            if (token is self.t.Name):\n                return self.t.Token.Argument', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 200, 'coloffset': 12, 'linematch': 'if (token is self.t.Name):', 'context': '            if token is self.t.Punctuation and s == ""("":\n                self.state = ParseState.found_open_paren\n                self.paren_level = 1\n        else:\n            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 202, 'coloffset': 12, 'linematch': 'elif token is self.t.Punctuation and s == "")"":', 'context': '                self.paren_level = 1\n        else:\n            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 204, 'coloffset': 12, 'linematch': 'elif token is self.t.Punctuation and s == ""("":', 'context': '            if (token is self.t.Name):\n                return self.t.Token.Argument\n            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 206, 'coloffset': 12, 'linematch': 'if self.paren_level == 0:', 'context': '            elif token is self.t.Punctuation and s == "")"":\n                self.paren_level -= 1\n            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n\n\ntry:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 189, 'coloffset': 4, 'linematch': 'def parse_token(self, token, s):', 'context': '        self.t = pygments_token\n        self.state = ParseState.idle\n        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 190, 'coloffset': 8, 'linematch': '""""""Parse token. Return None or replacement token type""""""', 'context': '        self.state = ParseState.idle\n        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 191, 'coloffset': 8, 'linematch': 'if self.state == ParseState.idle:', 'context': '        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0\n        elif self.state == ParseState.found_function:\n            if token is self.t.Punctuation and s == ""("":', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 208, 'coloffset': 8, 'linematch': 'return None', 'context': '            elif token is self.t.Punctuation and s == ""("":\n                self.paren_level += 1\n            if self.paren_level == 0:\n                self.state = ParseState.idle\n        return None\n\n\ntry:\n    import pygments  # noqa\nexcept ImportError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 189, 'coloffset': 4, 'linematch': 'def parse_token(self, token, s):', 'context': '        self.t = pygments_token\n        self.state = ParseState.idle\n        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 189, 'coloffset': 4, 'linematch': 'def parse_token(self, token, s):', 'context': '        self.t = pygments_token\n        self.state = ParseState.idle\n        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 189, 'coloffset': 4, 'linematch': 'def parse_token(self, token, s):', 'context': '        self.t = pygments_token\n        self.state = ParseState.idle\n        self.paren_level = 0\n\n    def parse_token(self, token, s):\n        """"""Parse token. Return None or replacement token type""""""\n        if self.state == ParseState.idle:\n            if token in (self.t.Name.Function, self.t.Name.Function.Magic):\n                self.state = ParseState.found_function\n                self.paren_level = 0', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3583', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': []}, {'name': 'Mutant #3584', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -189,7 +189,7 @@\n         # Do not globalize: cyclic import\n         from pudb.debugger import CONFIG\n \n-        self.show_detail = False\n+        self.show_detail = None\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3585', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': []}, {'name': 'Mutant #3586', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -190,7 +190,7 @@\n         from pudb.debugger import CONFIG\n \n         self.show_detail = False\n-        self.display_type = CONFIG[""stringifier""]\n+        self.display_type = None\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3587', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = True\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3588', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = None\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3589', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = True\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3590', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = None\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3591', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': []}, {'name': 'Mutant #3592', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -193,7 +193,7 @@\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n-        self.access_level = CONFIG[""default_variables_access_level""]\n+        self.access_level = None\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3593', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = True\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3594', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = None\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3595', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': []}, {'name': 'Mutant #3596', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -195,7 +195,7 @@\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n-        self.wrap = CONFIG[""wrap_variables""]\n+        self.wrap = None\n \n \n class WatchExpression:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3597', 'line': 203, 'description': ['        self.expression = expression'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -200,7 +200,7 @@\n \n class WatchExpression:\n     def __init__(self, expression):\n-        self.expression = expression\n+        self.expression = None\n \n \n class WatchEvalError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3598', 'line': 208, 'description': ['        return ""<error>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -205,7 +205,7 @@\n \n class WatchEvalError:\n     def __str__(self):\n-        return ""<error>""\n+        return ""XX<error>XX""\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5241', 'line': 189, 'description': ['            self.fail(""ui_log.exception was unexpectedly called"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -186,7 +186,7 @@\n         fail if it is called.\n         """"""\n         def fake_exception_log(*args, **kwargs):\n-            self.fail(""ui_log.exception was unexpectedly called"")\n+            self.fail(""XXui_log.exception was unexpectedly calledXX"")\n \n         old_logger = ui_log.exception\n         ui_log.exception = fake_exception_log\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5242', 'line': 191, 'description': ['        old_logger = ui_log.exception'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -188,7 +188,7 @@\n         def fake_exception_log(*args, **kwargs):\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n-        old_logger = ui_log.exception\n+        old_logger = None\n         ui_log.exception = fake_exception_log\n         try:\n             yield\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5243', 'line': 192, 'description': ['        ui_log.exception = fake_exception_log'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -189,7 +189,7 @@\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n         old_logger = ui_log.exception\n-        ui_log.exception = fake_exception_log\n+        ui_log.exception = None\n         try:\n             yield\n         finally:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5244', 'line': 196, 'description': ['            ui_log.exception = old_logger'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -193,7 +193,7 @@\n         try:\n             yield\n         finally:\n-            ui_log.exception = old_logger\n+            ui_log.exception = None\n \n     def assert_walks_contents(self, container, label=""xs""):\n         expand_paths = {label}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5245', 'line': 198, 'description': ['    def assert_walks_contents(self, container, label=""xs""):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -195,7 +195,7 @@\n         finally:\n             ui_log.exception = old_logger\n \n-    def assert_walks_contents(self, container, label=""xs""):\n+    def assert_walks_contents(self, container, label=""XXxsXX""):\n         expand_paths = {label}\n         self.values_to_expand = [container]\n         self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5246', 'line': 199, 'description': ['        expand_paths = {label}'], 'failure': []}, {'name': 'Mutant #5247', 'line': 200, 'description': ['        self.values_to_expand = [container]'], 'failure': []}, {'name': 'Mutant #5248', 'line': 201, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))'], 'failure': []}, {'name': 'Mutant #5249', 'line': 204, 'description': ['        expected = [(label, self.value_string(container))]'], 'failure': []}, {'name': 'Mutant #5250', 'line': 206, 'description': ['            expected.extend([(f""[{repr(key)}]"", repr(container[key]))'], 'failure': []}, {'name': 'Mutant #5251', 'line': 208, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}]",37.03703703703704,"['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'F027' 'F030'
 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 1, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,add_snippet,297-329,"[{'lineno': 298, 'coloffset': 12, 'linematch': 'if not s:', 'context': '            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return\n\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument\n            new_ttype = argument_parser.parse_token(ttype, s)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 304, 'coloffset': 12, 'linematch': 'if new_ttype:', 'context': '\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument\n            new_ttype = argument_parser.parse_token(ttype, s)\n            if new_ttype:\n                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 308, 'coloffset': 12, 'linematch': 'if ttype in ATTR_TRANSLATE:', 'context': '            if new_ttype:\n                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:\n                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 314, 'coloffset': 12, 'linematch': 'if (ttype == t.Name.Function', 'context': '                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone\n            if (ttype == t.Name.Function\n                    and s.startswith(""__"")\n                    and s.endswith(""__"")):\n                ttype = t.Token.Dunder\n\n            while ttype not in ATTR_MAP:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 309, 'coloffset': 16, 'linematch': 'if s in ATTR_TRANSLATE[ttype]:', 'context': '                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:\n                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone\n            if (ttype == t.Name.Function', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 320, 'coloffset': 16, 'linematch': 'if ttype.parent is not None:', 'context': '                    and s.endswith(""__"")):\n                ttype = t.Token.Dunder\n\n            while ttype not in ATTR_MAP:\n                if ttype.parent is not None:\n                    ttype = ttype.parent\n                else:\n                    raise RuntimeError(\n                            ""untreated token type: %s"" % str(ttype))\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 309, 'coloffset': 16, 'linematch': 'if s in ATTR_TRANSLATE[ttype]:', 'context': '                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:\n                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone\n            if (ttype == t.Name.Function', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 297, 'coloffset': 8, 'linematch': 'def add_snippet(self, ttype, s):', 'context': '            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return\n\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 304, 'coloffset': 12, 'linematch': 'if new_ttype:', 'context': '\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument\n            new_ttype = argument_parser.parse_token(ttype, s)\n            if new_ttype:\n                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 308, 'coloffset': 12, 'linematch': 'if ttype in ATTR_TRANSLATE:', 'context': '            if new_ttype:\n                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:\n                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 314, 'coloffset': 12, 'linematch': 'if (ttype == t.Name.Function', 'context': '                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone\n            if (ttype == t.Name.Function\n                    and s.startswith(""__"")\n                    and s.endswith(""__"")):\n                ttype = t.Token.Dunder\n\n            while ttype not in ATTR_MAP:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 309, 'coloffset': 16, 'linematch': 'if s in ATTR_TRANSLATE[ttype]:', 'context': '                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:\n                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone\n            if (ttype == t.Name.Function', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 297, 'coloffset': 8, 'linematch': 'def add_snippet(self, ttype, s):', 'context': '            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return\n\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 298, 'coloffset': 12, 'linematch': 'if not s:', 'context': '            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return\n\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument\n            new_ttype = argument_parser.parse_token(ttype, s)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 303, 'coloffset': 12, 'linematch': 'new_ttype = argument_parser.parse_token(ttype, s)', 'context': '                return\n\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument\n            new_ttype = argument_parser.parse_token(ttype, s)\n            if new_ttype:\n                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 304, 'coloffset': 12, 'linematch': 'if new_ttype:', 'context': '\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument\n            new_ttype = argument_parser.parse_token(ttype, s)\n            if new_ttype:\n                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 308, 'coloffset': 12, 'linematch': 'if ttype in ATTR_TRANSLATE:', 'context': '            if new_ttype:\n                ttype = new_ttype\n\n            # Translate tokens\n            if ttype in ATTR_TRANSLATE:\n                if s in ATTR_TRANSLATE[ttype]:\n                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 314, 'coloffset': 12, 'linematch': 'if (ttype == t.Name.Function', 'context': '                    ttype = ATTR_TRANSLATE[ttype][s]\n\n            # Translate dunder method tokens\n            # NOTE: leaves ""Magic"" name tokens alone\n            if (ttype == t.Name.Function\n                    and s.startswith(""__"")\n                    and s.endswith(""__"")):\n                ttype = t.Token.Dunder\n\n            while ttype not in ATTR_MAP:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 319, 'coloffset': 12, 'linematch': 'while ttype not in ATTR_MAP:', 'context': '                    and s.startswith(""__"")\n                    and s.endswith(""__"")):\n                ttype = t.Token.Dunder\n\n            while ttype not in ATTR_MAP:\n                if ttype.parent is not None:\n                    ttype = ttype.parent\n                else:\n                    raise RuntimeError(\n                            ""untreated token type: %s"" % str(ttype))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 326, 'coloffset': 12, 'linematch': 'attr = ATTR_MAP[ttype]', 'context': '                else:\n                    raise RuntimeError(\n                            ""untreated token type: %s"" % str(ttype))\n\n            attr = ATTR_MAP[ttype]\n\n            self.current_line += s\n            self.current_attr.append((attr, len(s)))\n\n        def shipout_line(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 328, 'coloffset': 12, 'linematch': 'self.current_line += s', 'context': '                            ""untreated token type: %s"" % str(ttype))\n\n            attr = ATTR_MAP[ttype]\n\n            self.current_line += s\n            self.current_attr.append((attr, len(s)))\n\n        def shipout_line(self):\n            self.result.append(\n                SourceLine(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 329, 'coloffset': 12, 'linematch': 'self.current_attr.append((attr, len(s)))', 'context': '\n            attr = ATTR_MAP[ttype]\n\n            self.current_line += s\n            self.current_attr.append((attr, len(s)))\n\n        def shipout_line(self):\n            self.result.append(\n                SourceLine(\n                    self.debugger_ui,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 297, 'coloffset': 8, 'linematch': 'def add_snippet(self, ttype, s):', 'context': '            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return\n\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 297, 'coloffset': 8, 'linematch': 'def add_snippet(self, ttype, s):', 'context': '            self.debugger_ui = debugger_ui\n            self.lineno_format = lineno_format\n            self.breakpoints = breakpoints\n\n        def add_snippet(self, ttype, s):\n            if not s:\n                return\n\n            # Find function arguments. When found, change their\n            # ttype to t.Token.Argument', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3680', 'line': 299, 'description': ['            text = self._get_wrapped_lines(maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -296,7 +296,7 @@\n         var_label = self.var_label or """"\n \n         if self.wrap:\n-            text = self._get_wrapped_lines(maxcol)\n+            text = None\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3681', 'line': 302, 'description': ['                    text_width(var_label[maxcol:]), maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -298,8 +298,7 @@\n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n \n-            extralabel_full, extralabel_rem = divmod(\n-                    text_width(var_label[maxcol:]), maxcol)\n+            extralabel_full, extralabel_rem = None\n             totallen = sum(text_width(i) for i in text)\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3682', 'line': 303, 'description': ['            totallen = sum(text_width(i) for i in text)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -300,7 +300,7 @@\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n-            totallen = sum(text_width(i) for i in text)\n+            totallen = None\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3683', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    - (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3684', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) - 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3685', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) + 3)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3686', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    / (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3687', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    * (extralabel_full - bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3688', 'line': 310, 'description': ['                    + text_width(var_label)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -307,7 +307,7 @@\n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n-                    + text_width(var_label)\n+                    - text_width(var_label)\n \n                     + 1  # for "":""\n                     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3689', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    - 1  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3690', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    + 2  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3691', 'line': 313, 'description': ['                    )'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -301,16 +301,7 @@\n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n             totallen = sum(text_width(i) for i in text)\n-            labellen = (\n-                    len(self.prefix)  # Padding of first line\n-\n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n-\n-                    + text_width(var_label)\n-\n-                    + 1  # for "":""\n-                    )\n+            labellen = None\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3692', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx-""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3693', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""XXlabelXX"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3694', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx-""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3695', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""XXvalueXX"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3696', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen + labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3697', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = None\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3698', 'line': 318, 'description': ['            fullcols, rem = divmod(totallen, maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -315,7 +315,7 @@\n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n-            fullcols, rem = divmod(totallen, maxcol)\n+            fullcols, rem = None\n \n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3699', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i/maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3700', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i - 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3701', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 2)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3702', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 1)/maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3703', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -318,7 +318,7 @@\n             fullcols, rem = divmod(totallen, maxcol)\n \n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+                for i in range(fullcols - bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3704', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,8 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+            attr = None\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3705', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx-""value"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3706', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx+""XXvalueXX"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3707', 'line': 325, 'description': ['        lprefix = len(self.prefix)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -322,7 +322,7 @@\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n-        lprefix = len(self.prefix)\n+        lprefix = None\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3708', 'line': 327, 'description': ['        if self.value_str is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -324,7 +324,7 @@\n \n         lprefix = len(self.prefix)\n \n-        if self.value_str is not None:\n+        if self.value_str is  None:\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3709', 'line': 328, 'description': ['            if self.var_label is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -325,7 +325,7 @@\n         lprefix = len(self.prefix)\n \n         if self.value_str is not None:\n-            if self.var_label is not None:\n+            if self.var_label is  None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3710', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) >= 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3711', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) > 2:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5312', 'line': 297, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -294,7 +294,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5313', 'line': 298, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -295,7 +295,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5314', 'line': 299, 'description': ['            ""foo bar"",'], 'failure': []}, {'name': 'Mutant #5315', 'line': 301, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -298,7 +298,7 @@\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5316', 'line': 304, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -301,7 +301,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5317', 'line': 305, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -302,7 +302,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for value in values:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5318', 'line': 307, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5319', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5320', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5321', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5322', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5323', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5324', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5325', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5326', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5327', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5328', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5329', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5330', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5331', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5332', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5333', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            1:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5334', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            0:                   43,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5335', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""XXaXX"":                 ""foo"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5336', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""a"":                 ""XXfooXX"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5337', 'line': 327, 'description': ['            """": None,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -324,7 +324,7 @@\n         self.assert_walks_contents({\n             0:                   42,\n             ""a"":                 ""foo"",\n-            """": None,\n+            ""XXXX"": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5338', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            False: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5339', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            True: True,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5340', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(4)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5341', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(3)): ""XXabcXX"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}]",9.67741935483871,['CL001' 'CL002' 'ANNOT001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,format,344-357,"[{'lineno': 356, 'coloffset': 12, 'linematch': 'if self.current_line:', 'context': '                        self.add_snippet(ttype, value[:newline_pos])\n                        self.shipout_line()\n                        value = value[newline_pos+1:]\n\n            if self.current_line:\n                self.shipout_line()\n\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 348, 'coloffset': 20, 'linematch': 'if newline_pos == -1:', 'context': '        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:\n                    newline_pos = value.find(""\\n"")\n                    if newline_pos == -1:\n                        self.add_snippet(ttype, value)\n                        break\n                    else:\n                        self.add_snippet(ttype, value[:newline_pos])\n                        self.shipout_line()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 344, 'coloffset': 8, 'linematch': 'def format(self, tokensource, outfile):', 'context': '            self.current_line = """"\n            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:\n                    newline_pos = value.find(""\\n"")\n                    if newline_pos == -1:\n                        self.add_snippet(ttype, value)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 344, 'coloffset': 8, 'linematch': 'def format(self, tokensource, outfile):', 'context': '            self.current_line = """"\n            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:\n                    newline_pos = value.find(""\\n"")\n                    if newline_pos == -1:\n                        self.add_snippet(ttype, value)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 345, 'coloffset': 12, 'linematch': 'for ttype, value in tokensource:', 'context': '            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:\n                    newline_pos = value.find(""\\n"")\n                    if newline_pos == -1:\n                        self.add_snippet(ttype, value)\n                        break', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 356, 'coloffset': 12, 'linematch': 'if self.current_line:', 'context': '                        self.add_snippet(ttype, value[:newline_pos])\n                        self.shipout_line()\n                        value = value[newline_pos+1:]\n\n            if self.current_line:\n                self.shipout_line()\n\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 344, 'coloffset': 8, 'linematch': 'def format(self, tokensource, outfile):', 'context': '            self.current_line = """"\n            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:\n                    newline_pos = value.find(""\\n"")\n                    if newline_pos == -1:\n                        self.add_snippet(ttype, value)', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 344, 'coloffset': 8, 'linematch': 'def format(self, tokensource, outfile):', 'context': '            self.current_line = """"\n            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:\n                    newline_pos = value.find(""\\n"")\n                    if newline_pos == -1:\n                        self.add_snippet(ttype, value)', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3742', 'line': 344, 'description': ['                            ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -338,10 +338,7 @@\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n-                    attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n-                            ]]\n+                    attr = None\n             else:\n                 text = [self.prefix + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3743', 'line': 346, 'description': ['                text = [self.prefix + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -343,7 +343,7 @@\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n-                text = [self.prefix + self.value_str]\n+                text = [self.prefix - self.value_str]\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3744', 'line': 346, 'description': ['                text = [self.prefix + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -343,7 +343,7 @@\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n-                text = [self.prefix + self.value_str]\n+                text = None\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3745', 'line': 349, 'description': ['                        (apfx+""label"", len(self.prefix)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -346,7 +346,7 @@\n                 text = [self.prefix + self.value_str]\n \n                 attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n+                        (apfx-""label"", len(self.prefix)),\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3746', 'line': 349, 'description': ['                        (apfx+""label"", len(self.prefix)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -346,7 +346,7 @@\n                 text = [self.prefix + self.value_str]\n \n                 attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n+                        (apfx+""XXlabelXX"", len(self.prefix)),\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3747', 'line': 350, 'description': ['                        (apfx+""value"", text_width(self.value_str)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -347,7 +347,7 @@\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n+                        (apfx-""value"", text_width(self.value_str)),\n                         ]]\n         else:\n             text = [self.prefix + self.var_label]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3748', 'line': 350, 'description': ['                        (apfx+""value"", text_width(self.value_str)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -347,7 +347,7 @@\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n+                        (apfx+""XXvalueXX"", text_width(self.value_str)),\n                         ]]\n         else:\n             text = [self.prefix + self.var_label]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3749', 'line': 351, 'description': ['                        ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -345,10 +345,7 @@\n             else:\n                 text = [self.prefix + self.value_str]\n \n-                attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n-                        ]]\n+                attr = None\n         else:\n             text = [self.prefix + self.var_label]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3750', 'line': 353, 'description': ['            text = [self.prefix + self.var_label]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -350,7 +350,7 @@\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n-            text = [self.prefix + self.var_label]\n+            text = [self.prefix - self.var_label]\n \n             attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3751', 'line': 353, 'description': ['            text = [self.prefix + self.var_label]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -350,7 +350,7 @@\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n-            text = [self.prefix + self.var_label]\n+            text = None\n \n             attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3752', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx-""label"", lprefix + text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3753', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx+""XXlabelXX"", lprefix + text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3754', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx+""label"", lprefix - text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3755', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = None\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5361', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5362', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5363', 'line': 348, 'description': ['        class_count = 0'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -345,7 +345,7 @@\n         self.assert_class_counts_equal({""sequences"": 1})\n \n     def test_containerlike_classes(self):\n-        class_count = 0\n+        class_count = 1\n         for cls_idx, containerlike_class in enumerate(\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5364', 'line': 348, 'description': ['        class_count = 0'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -345,7 +345,7 @@\n         self.assert_class_counts_equal({""sequences"": 1})\n \n     def test_containerlike_classes(self):\n-        class_count = 0\n+        class_count = None\n         for cls_idx, containerlike_class in enumerate(\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5365', 'line': 351, 'description': ['            label = containerlike_class.name()'], 'failure': []}, {'name': 'Mutant #5366', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -350,7 +350,7 @@\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n             value = containerlike_class(zip(string.ascii_lowercase,\n-                                            range(3, 10)))\n+                                            range(4, 10)))\n             self.assert_walks_contents(container=value, label=label)\n             class_count = cls_idx + 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5367', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -350,7 +350,7 @@\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n             value = containerlike_class(zip(string.ascii_lowercase,\n-                                            range(3, 10)))\n+                                            range(3, 11)))\n             self.assert_walks_contents(container=value, label=label)\n             class_count = cls_idx + 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5368', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': []}, {'name': 'Mutant #5369', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5370', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5371', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}]",28.000000000000004,['CL001' 'ANNOT001' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,pudb,8-34,"[{'lineno': 20, 'coloffset': 4, 'linematch': 'if not line.strip():', 'context': '    """"""\n\n    # Get the running instance\n\n    if not line.strip():\n        print(pudb.__doc__)\n        return\n\n    from IPython.utils.process import arg_split\n    args = arg_split(line)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 29, 'coloffset': 4, 'linematch': 'if not os.path.isfile(path):', 'context': '    args = arg_split(line)\n\n    path = os.path.abspath(args[0])\n    args = args[1:]\n    if not os.path.isfile(path):\n        from IPython.core.error import UsageError\n        raise UsageError(""%%pudb: file %s does not exist"" % path)\n\n    from pudb import runscript\n    runscript(path, args)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 8, 'coloffset': 0, 'linematch': 'def pudb(line):', 'context': 'from IPython import get_ipython\nfrom IPython.core.magic import register_line_magic\n\n\ndef pudb(line):\n    """"""\n    Debug a script (like %run -d) in the IPython process, using PuDB.\n\n    Usage:\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 29, 'coloffset': 4, 'linematch': 'if not os.path.isfile(path):', 'context': '    args = arg_split(line)\n\n    path = os.path.abspath(args[0])\n    args = args[1:]\n    if not os.path.isfile(path):\n        from IPython.core.error import UsageError\n        raise UsageError(""%%pudb: file %s does not exist"" % path)\n\n    from pudb import runscript\n    runscript(path, args)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 9, 'coloffset': 4, 'linematch': '""""""', 'context': 'from IPython.core.magic import register_line_magic\n\n\ndef pudb(line):\n    """"""\n    Debug a script (like %run -d) in the IPython process, using PuDB.\n\n    Usage:\n\n    %pudb test.py [args]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 20, 'coloffset': 4, 'linematch': 'if not line.strip():', 'context': '    """"""\n\n    # Get the running instance\n\n    if not line.strip():\n        print(pudb.__doc__)\n        return\n\n    from IPython.utils.process import arg_split\n    args = arg_split(line)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 24, 'coloffset': 4, 'linematch': 'from IPython.utils.process import arg_split', 'context': '    if not line.strip():\n        print(pudb.__doc__)\n        return\n\n    from IPython.utils.process import arg_split\n    args = arg_split(line)\n\n    path = os.path.abspath(args[0])\n    args = args[1:]\n    if not os.path.isfile(path):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 25, 'coloffset': 4, 'linematch': 'args = arg_split(line)', 'context': '        print(pudb.__doc__)\n        return\n\n    from IPython.utils.process import arg_split\n    args = arg_split(line)\n\n    path = os.path.abspath(args[0])\n    args = args[1:]\n    if not os.path.isfile(path):\n        from IPython.core.error import UsageError', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 27, 'coloffset': 4, 'linematch': 'path = os.path.abspath(args[0])', 'context': '\n    from IPython.utils.process import arg_split\n    args = arg_split(line)\n\n    path = os.path.abspath(args[0])\n    args = args[1:]\n    if not os.path.isfile(path):\n        from IPython.core.error import UsageError\n        raise UsageError(""%%pudb: file %s does not exist"" % path)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 28, 'coloffset': 4, 'linematch': 'args = args[1:]', 'context': '    from IPython.utils.process import arg_split\n    args = arg_split(line)\n\n    path = os.path.abspath(args[0])\n    args = args[1:]\n    if not os.path.isfile(path):\n        from IPython.core.error import UsageError\n        raise UsageError(""%%pudb: file %s does not exist"" % path)\n\n    from pudb import runscript', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 29, 'coloffset': 4, 'linematch': 'if not os.path.isfile(path):', 'context': '    args = arg_split(line)\n\n    path = os.path.abspath(args[0])\n    args = args[1:]\n    if not os.path.isfile(path):\n        from IPython.core.error import UsageError\n        raise UsageError(""%%pudb: file %s does not exist"" % path)\n\n    from pudb import runscript\n    runscript(path, args)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 33, 'coloffset': 4, 'linematch': 'from pudb import runscript', 'context': '    if not os.path.isfile(path):\n        from IPython.core.error import UsageError\n        raise UsageError(""%%pudb: file %s does not exist"" % path)\n\n    from pudb import runscript\n    runscript(path, args)\n\n\nregister_line_magic(pudb)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 34, 'coloffset': 4, 'linematch': 'runscript(path, args)', 'context': '        from IPython.core.error import UsageError\n        raise UsageError(""%%pudb: file %s does not exist"" % path)\n\n    from pudb import runscript\n    runscript(path, args)\n\n\nregister_line_magic(pudb)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5157', 'line': 32, 'description': ['        numpy_values = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -29,7 +29,7 @@\n     try:\n         import numpy as np\n     except ImportError:\n-        numpy_values = []\n+        numpy_values = None\n     else:\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5158', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(6), np.zeros(5)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5159', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(5), np.zeros(6)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5160', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': []}]",25.0,['CL001' 'ANNOT001' 'F002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,make_canvas,31-71,"[{'lineno': 41, 'coloffset': 8, 'linematch': 'if diff > 0:', 'context': '        # filter out zero-length attrs\n        line_attr = [(aname, la) for aname, la in line_attr if la > 0]\n\n        diff = maxcol - text_width(line)\n        if diff > 0:\n            line += "" ""*diff\n            line_attr.append((fill_attr, diff))\n        else:\n            from urwid.util import rle_subseg\n            line = line[:calc_text_pos(line, 0, len(line), maxcol)[0]]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 31, 'coloffset': 0, 'linematch': 'def make_canvas(txt, attr, maxcol, fill_attr=None):', 'context': '    s = s.encode(_target_encoding, ""replace"")\n    return s\n\n\ndef make_canvas(txt, attr, maxcol, fill_attr=None):\n    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 54, 'coloffset': 8, 'linematch': 'def get_byte_line_attr(line, line_attr):', 'context': ""        encoded_line, line_cs = apply_target_encoding(line)\n\n        # line_cs contains byte counts as requested by TextCanvas, but\n        # line_attr still contains column counts at this point: let's fix this.\n        def get_byte_line_attr(line, line_attr):\n            i = 0\n            for label, column_count in line_attr:\n                byte_count = len(encode_like_urwid(line[i:i+column_count]))\n                i += column_count\n                yield label, byte_count"", 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 31, 'coloffset': 0, 'linematch': 'def make_canvas(txt, attr, maxcol, fill_attr=None):', 'context': '    s = s.encode(_target_encoding, ""replace"")\n    return s\n\n\ndef make_canvas(txt, attr, maxcol, fill_attr=None):\n    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 36, 'coloffset': 4, 'linematch': 'for line, line_attr in zip(txt, attr):', 'context': '    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):\n        # filter out zero-length attrs\n        line_attr = [(aname, la) for aname, la in line_attr if la > 0]\n\n        diff = maxcol - text_width(line)\n        if diff > 0:', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 36, 'coloffset': 4, 'linematch': 'for line, line_attr in zip(txt, attr):', 'context': '    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):\n        # filter out zero-length attrs\n        line_attr = [(aname, la) for aname, la in line_attr if la > 0]\n\n        diff = maxcol - text_width(line)\n        if diff > 0:', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 32, 'coloffset': 4, 'linematch': 'processed_txt = []', 'context': '    return s\n\n\ndef make_canvas(txt, attr, maxcol, fill_attr=None):\n    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):\n        # filter out zero-length attrs', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 33, 'coloffset': 4, 'linematch': 'processed_attr = []', 'context': '\n\ndef make_canvas(txt, attr, maxcol, fill_attr=None):\n    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):\n        # filter out zero-length attrs\n        line_attr = [(aname, la) for aname, la in line_attr if la > 0]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 34, 'coloffset': 4, 'linematch': 'processed_cs = []', 'context': '\ndef make_canvas(txt, attr, maxcol, fill_attr=None):\n    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):\n        # filter out zero-length attrs\n        line_attr = [(aname, la) for aname, la in line_attr if la > 0]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 36, 'coloffset': 4, 'linematch': 'for line, line_attr in zip(txt, attr):', 'context': '    processed_txt = []\n    processed_attr = []\n    processed_cs = []\n\n    for line, line_attr in zip(txt, attr):\n        # filter out zero-length attrs\n        line_attr = [(aname, la) for aname, la in line_attr if la > 0]\n\n        diff = maxcol - text_width(line)\n        if diff > 0:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 55, 'coloffset': 12, 'linematch': 'i = 0', 'context': ""\n        # line_cs contains byte counts as requested by TextCanvas, but\n        # line_attr still contains column counts at this point: let's fix this.\n        def get_byte_line_attr(line, line_attr):\n            i = 0\n            for label, column_count in line_attr:\n                byte_count = len(encode_like_urwid(line[i:i+column_count]))\n                i += column_count\n                yield label, byte_count\n"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 56, 'coloffset': 12, 'linematch': 'for label, column_count in line_attr:', 'context': ""        # line_cs contains byte counts as requested by TextCanvas, but\n        # line_attr still contains column counts at this point: let's fix this.\n        def get_byte_line_attr(line, line_attr):\n            i = 0\n            for label, column_count in line_attr:\n                byte_count = len(encode_like_urwid(line[i:i+column_count]))\n                i += column_count\n                yield label, byte_count\n\n        line_attr = list(get_byte_line_attr(line, line_attr))"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 67, 'coloffset': 4, 'linematch': 'return urwid.TextCanvas(', 'context': '        processed_txt.append(encoded_line)\n        processed_attr.append(line_attr)\n        processed_cs.append(line_cs)\n\n    return urwid.TextCanvas(\n            processed_txt,\n            processed_attr,\n            processed_cs,\n            maxcol=maxcol)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3540', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = 1\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3541', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = None\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3543', 'line': 55, 'description': ['        if cls is PudbCollection:'], 'failure': []}, {'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3546', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3547', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3548', 'line': 65, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5157', 'line': 32, 'description': ['        numpy_values = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -29,7 +29,7 @@\n     try:\n         import numpy as np\n     except ImportError:\n-        numpy_values = []\n+        numpy_values = None\n     else:\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5158', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(6), np.zeros(5)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5159', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(5), np.zeros(6)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5160', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': []}, {'name': 'Mutant #5161', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""XXlólXX"".encode(), ""lól"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5162', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""lól"".encode(), ""XXlólXX"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5163', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233124, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5164', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""XXlólXX"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5165', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""lól"".encode(), ""XXlólXX""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5166', 'line': 39, 'description': ['            ] + numpy_values:'], 'failure': []}, {'name': 'Mutant #5167', 'line': 41, 'description': ['            iinfo = InspectInfo()'], 'failure': []}, {'name': 'Mutant #5168', 'line': 42, 'description': ['            iinfo.display_type = display_type'], 'failure': []}, {'name': 'Mutant #5169', 'line': 44, 'description': ['            strifier = get_stringifier(iinfo)'], 'failure': []}, {'name': 'Mutant #5170', 'line': 46, 'description': ['            s = strifier(value)'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}, {'name': 'Mutant #5173', 'line': 55, 'description': ['        self.paths_to_expand = paths_to_expand'], 'failure': []}, {'name': 'Mutant #5174', 'line': 59, 'description': ['            id_path, read_only)'], 'failure': []}, {'name': 'Mutant #5175', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5176', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5177', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5178', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5179', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5180', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5181', 'line': 64, 'description': ['        if id_path in self.paths_to_expand:'], 'failure': []}, {'name': 'Mutant #5182', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5183', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5184', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = 43\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5185', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = None\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}]",65.0,['CL001' 'ANNOT001' 'F001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*' './/FunctionDef//For[.//For]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 1, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,find_widget_in_container,92-97,"[{'lineno': 94, 'coloffset': 8, 'linematch': 'if w == widget:', 'context': '\n\ndef find_widget_in_container(container, widget) -> int:\n    for i, (w, _) in enumerate(container.contents):\n        if w == widget:\n            return i\n\n    raise ValueError(f""Widget not found in \'{type(container).__name__}\': {widget!r}"")\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 92, 'coloffset': 0, 'linematch': 'def find_widget_in_container(container, widget) -> int:', 'context': '        (""label"", label), str(value)]),\n        ""fixed value"", ""fixed value"")\n\n\ndef find_widget_in_container(container, widget) -> int:\n    for i, (w, _) in enumerate(container.contents):\n        if w == widget:\n            return i\n\n    raise ValueError(f""Widget not found in \'{type(container).__name__}\': {widget!r}"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 93, 'coloffset': 4, 'linematch': 'for i, (w, _) in enumerate(container.contents):', 'context': '        ""fixed value"", ""fixed value"")\n\n\ndef find_widget_in_container(container, widget) -> int:\n    for i, (w, _) in enumerate(container.contents):\n        if w == widget:\n            return i\n\n    raise ValueError(f""Widget not found in \'{type(container).__name__}\': {widget!r}"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 97, 'coloffset': 4, 'linematch': 'raise ValueError(f""Widget not found in \'{type(container).__name__}\': {widget!r}"")', 'context': '    for i, (w, _) in enumerate(container.contents):\n        if w == widget:\n            return i\n\n    raise ValueError(f""Widget not found in \'{type(container).__name__}\': {widget!r}"")\n\n\ndef focus_widget_in_container(container, widget) -> None:\n    container.focus_position = find_widget_in_container(container, widget)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3557', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3558', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5194', 'line': 92, 'description': ['        return ""amazing""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -89,7 +89,7 @@\n         return ""shh""\n \n     def __magicsomething__(self):\n-        return ""amazing""\n+        return ""XXamazingXX""\n \n \n def method_factory(method_name):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5195', 'line': 97, 'description': ['        func = getattr(self.__internal_dict__, method_name)'], 'failure': []}]",75.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,cancel_highlight,237-240,"[{'lineno': 238, 'coloffset': 8, 'linematch': 'if self.highlight_line is not None:', 'context': '        self.search_box = None\n        self.last_search_string = None\n\n    def cancel_highlight(self):\n        if self.highlight_line is not None:\n            self.highlight_line.set_highlight(False)\n            self.highlight_line = None\n\n    def cancel_search(self):\n        self.cancel_highlight()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 237, 'coloffset': 4, 'linematch': 'def cancel_highlight(self):', 'context': '\n        self.search_box = None\n        self.last_search_string = None\n\n    def cancel_highlight(self):\n        if self.highlight_line is not None:\n            self.highlight_line.set_highlight(False)\n            self.highlight_line = None\n\n    def cancel_search(self):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 238, 'coloffset': 8, 'linematch': 'if self.highlight_line is not None:', 'context': '        self.search_box = None\n        self.last_search_string = None\n\n    def cancel_highlight(self):\n        if self.highlight_line is not None:\n            self.highlight_line.set_highlight(False)\n            self.highlight_line = None\n\n    def cancel_search(self):\n        self.cancel_highlight()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3620', 'line': 238, 'description': ['        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -235,7 +235,7 @@\n             self.wrap = iinfo.wrap\n \n     def __str__(self):\n-        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n+        return (""XXVariableWidget: {value_str}, level {nesting_level}, at {id_path}XX""\n                 .format(\n                     value_str=self.value_str,\n                     nesting_level=self.nesting_level,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5275', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5276', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5279', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5280', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}]",88.88888888888889,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,open_search_ui,251-267,"[{'lineno': 254, 'coloffset': 8, 'linematch': 'if self.search_box is None:', 'context': '\n    def open_search_ui(self):\n        lhs_col = self.ui.lhs_col\n\n        if self.search_box is None:\n            _, self.search_start = self.ui.source.get_focus()\n\n            self.search_box = SearchBox(self)\n            self.search_AttrMap = urwid.AttrMap(\n                    self.search_box, ""search box"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 251, 'coloffset': 4, 'linematch': 'def open_search_ui(self):', 'context': '        self.search_box = None\n        del self.ui.lhs_col.contents[0]\n        self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])\n\n    def open_search_ui(self):\n        lhs_col = self.ui.lhs_col\n\n        if self.search_box is None:\n            _, self.search_start = self.ui.source.get_focus()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 252, 'coloffset': 8, 'linematch': 'lhs_col = self.ui.lhs_col', 'context': '        del self.ui.lhs_col.contents[0]\n        self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])\n\n    def open_search_ui(self):\n        lhs_col = self.ui.lhs_col\n\n        if self.search_box is None:\n            _, self.search_start = self.ui.source.get_focus()\n\n            self.search_box = SearchBox(self)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 254, 'coloffset': 8, 'linematch': 'if self.search_box is None:', 'context': '\n    def open_search_ui(self):\n        lhs_col = self.ui.lhs_col\n\n        if self.search_box is None:\n            _, self.search_start = self.ui.source.get_focus()\n\n            self.search_box = SearchBox(self)\n            self.search_AttrMap = urwid.AttrMap(\n                    self.search_box, ""search box"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 266, 'coloffset': 8, 'linematch': 'self.ui.columns.set_focus(lhs_col)', 'context': '                    0, (""flow"", None))\n            lhs_col.widget_list.insert(0, self.search_AttrMap)\n            self.ui.reset_cmdline_size()\n\n        self.ui.columns.set_focus(lhs_col)\n        lhs_col.set_focus(self.search_AttrMap)\n\n    def perform_search(self, dir, s=None, start=None, update_search_start=False):\n        self.cancel_highlight()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 267, 'coloffset': 8, 'linematch': 'lhs_col.set_focus(self.search_AttrMap)', 'context': '            lhs_col.widget_list.insert(0, self.search_AttrMap)\n            self.ui.reset_cmdline_size()\n\n        self.ui.columns.set_focus(lhs_col)\n        lhs_col.set_focus(self.search_AttrMap)\n\n    def perform_search(self, dir, s=None, start=None, update_search_start=False):\n        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3622', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol = len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3623', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol += len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3624', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3625', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3626', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = None\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3630', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label - "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3631', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + ""XX: XX"" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3632', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + "": "" - value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3633', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = None\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3634', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = self.prefix - alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3635', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = None\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3636', 'line': 260, 'description': ['        if not alltext[maxcol:]:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -257,7 +257,7 @@\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n-        if not alltext[maxcol:]:\n+        if  alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3637', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) + maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3638', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol + 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3639', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 3)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3640', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = None\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3659', 'line': 267, 'description': ['    def rows(self, size: Tuple[int], focus: bool = False) -> int:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -264,7 +264,7 @@\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n-    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n+    def rows(self, size: Tuple[int], focus: bool = True) -> int:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5284', 'line': 252, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -249,7 +249,7 @@\n         self.walker = BasicValueWalker(FrameVarInfoForTesting())\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5285', 'line': 253, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -250,7 +250,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5286', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5287', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5288', 'line': 255, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -252,7 +252,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5290', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5291', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5292', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5293', 'line': 260, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -257,7 +257,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5294', 'line': 261, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -258,7 +258,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5295', 'line': 262, 'description': ['            ""foo bar"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -259,7 +259,7 @@\n             # strings\n             """",\n             ""a"",\n-            ""foo bar"",\n+            ""XXfoo barXX"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5298', 'line': 267, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -264,7 +264,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}]",1.886792452830188,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,perform_search,269-314,"[{'lineno': 274, 'coloffset': 8, 'linematch': 'if s is None:', 'context': '        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])\n\n        if s is None:\n            s = self.last_search_string\n\n            if s is None:\n                self.ui.message(""No previous search term."")\n                return False', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 283, 'coloffset': 8, 'linematch': 'if start is None:', 'context': '                return False\n        else:\n            self.last_search_string = s\n\n        if start is None:\n            start = self.search_start\n\n        case_insensitive = s.lower() == s\n\n        if start > len(self.ui.source):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 288, 'coloffset': 8, 'linematch': 'if start > len(self.ui.source):', 'context': '            start = self.search_start\n\n        case_insensitive = s.lower() == s\n\n        if start > len(self.ui.source):\n            start = 0\n\n        i = (start+dir) % len(self.ui.source)\n\n        if i >= len(self.ui.source):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 293, 'coloffset': 8, 'linematch': 'if i >= len(self.ui.source):', 'context': '            start = 0\n\n        i = (start+dir) % len(self.ui.source)\n\n        if i >= len(self.ui.source):\n            i = 0\n\n        while i != start:\n            sline = self.ui.source[i].text\n            if case_insensitive:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 277, 'coloffset': 12, 'linematch': 'if s is None:', 'context': '\n        if s is None:\n            s = self.last_search_string\n\n            if s is None:\n                self.ui.message(""No previous search term."")\n                return False\n        else:\n            self.last_search_string = s\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 298, 'coloffset': 12, 'linematch': 'if case_insensitive:', 'context': '            i = 0\n\n        while i != start:\n            sline = self.ui.source[i].text\n            if case_insensitive:\n                sline = sline.lower()\n\n            if s in sline:\n                sl = self.ui.source[i]\n                sl.set_highlight(True)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 301, 'coloffset': 12, 'linematch': 'if s in sline:', 'context': '            sline = self.ui.source[i].text\n            if case_insensitive:\n                sline = sline.lower()\n\n            if s in sline:\n                sl = self.ui.source[i]\n                sl.set_highlight(True)\n                self.highlight_line = sl\n                self.ui.source.set_focus(i)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 307, 'coloffset': 16, 'linematch': 'if update_search_start:', 'context': '                sl.set_highlight(True)\n                self.highlight_line = sl\n                self.ui.source.set_focus(i)\n\n                if update_search_start:\n                    self.search_start = i\n\n                return True\n\n            i = (i+dir) % len(self.ui.source)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 277, 'coloffset': 12, 'linematch': 'if s is None:', 'context': '\n        if s is None:\n            s = self.last_search_string\n\n            if s is None:\n                self.ui.message(""No previous search term."")\n                return False\n        else:\n            self.last_search_string = s\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 307, 'coloffset': 16, 'linematch': 'if update_search_start:', 'context': '                sl.set_highlight(True)\n                self.highlight_line = sl\n                self.ui.source.set_focus(i)\n\n                if update_search_start:\n                    self.search_start = i\n\n                return True\n\n            i = (i+dir) % len(self.ui.source)', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 269, 'coloffset': 4, 'linematch': 'def perform_search(self, dir, s=None, start=None, update_search_start=False):', 'context': '\n        self.ui.columns.set_focus(lhs_col)\n        lhs_col.set_focus(self.search_AttrMap)\n\n    def perform_search(self, dir, s=None, start=None, update_search_start=False):\n        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])\n\n        if s is None:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 283, 'coloffset': 8, 'linematch': 'if start is None:', 'context': '                return False\n        else:\n            self.last_search_string = s\n\n        if start is None:\n            start = self.search_start\n\n        case_insensitive = s.lower() == s\n\n        if start > len(self.ui.source):', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 288, 'coloffset': 8, 'linematch': 'if start > len(self.ui.source):', 'context': '            start = self.search_start\n\n        case_insensitive = s.lower() == s\n\n        if start > len(self.ui.source):\n            start = 0\n\n        i = (start+dir) % len(self.ui.source)\n\n        if i >= len(self.ui.source):', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 293, 'coloffset': 8, 'linematch': 'if i >= len(self.ui.source):', 'context': '            start = 0\n\n        i = (start+dir) % len(self.ui.source)\n\n        if i >= len(self.ui.source):\n            i = 0\n\n        while i != start:\n            sline = self.ui.source[i].text\n            if case_insensitive:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 301, 'coloffset': 12, 'linematch': 'if s in sline:', 'context': '            sline = self.ui.source[i].text\n            if case_insensitive:\n                sline = sline.lower()\n\n            if s in sline:\n                sl = self.ui.source[i]\n                sl.set_highlight(True)\n                self.highlight_line = sl\n                self.ui.source.set_focus(i)\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 277, 'coloffset': 12, 'linematch': 'if s is None:', 'context': '\n        if s is None:\n            s = self.last_search_string\n\n            if s is None:\n                self.ui.message(""No previous search term."")\n                return False\n        else:\n            self.last_search_string = s\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 307, 'coloffset': 16, 'linematch': 'if update_search_start:', 'context': '                sl.set_highlight(True)\n                self.highlight_line = sl\n                self.ui.source.set_focus(i)\n\n                if update_search_start:\n                    self.search_start = i\n\n                return True\n\n            i = (i+dir) % len(self.ui.source)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 270, 'coloffset': 8, 'linematch': 'self.cancel_highlight()', 'context': '        self.ui.columns.set_focus(lhs_col)\n        lhs_col.set_focus(self.search_AttrMap)\n\n    def perform_search(self, dir, s=None, start=None, update_search_start=False):\n        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])\n\n        if s is None:\n            s = self.last_search_string', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 274, 'coloffset': 8, 'linematch': 'if s is None:', 'context': '        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])\n\n        if s is None:\n            s = self.last_search_string\n\n            if s is None:\n                self.ui.message(""No previous search term."")\n                return False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 283, 'coloffset': 8, 'linematch': 'if start is None:', 'context': '                return False\n        else:\n            self.last_search_string = s\n\n        if start is None:\n            start = self.search_start\n\n        case_insensitive = s.lower() == s\n\n        if start > len(self.ui.source):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 286, 'coloffset': 8, 'linematch': 'case_insensitive = s.lower() == s', 'context': '\n        if start is None:\n            start = self.search_start\n\n        case_insensitive = s.lower() == s\n\n        if start > len(self.ui.source):\n            start = 0\n\n        i = (start+dir) % len(self.ui.source)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 288, 'coloffset': 8, 'linematch': 'if start > len(self.ui.source):', 'context': '            start = self.search_start\n\n        case_insensitive = s.lower() == s\n\n        if start > len(self.ui.source):\n            start = 0\n\n        i = (start+dir) % len(self.ui.source)\n\n        if i >= len(self.ui.source):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 291, 'coloffset': 8, 'linematch': 'i = (start+dir) % len(self.ui.source)', 'context': '\n        if start > len(self.ui.source):\n            start = 0\n\n        i = (start+dir) % len(self.ui.source)\n\n        if i >= len(self.ui.source):\n            i = 0\n\n        while i != start:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 293, 'coloffset': 8, 'linematch': 'if i >= len(self.ui.source):', 'context': '            start = 0\n\n        i = (start+dir) % len(self.ui.source)\n\n        if i >= len(self.ui.source):\n            i = 0\n\n        while i != start:\n            sline = self.ui.source[i].text\n            if case_insensitive:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 296, 'coloffset': 8, 'linematch': 'while i != start:', 'context': '\n        if i >= len(self.ui.source):\n            i = 0\n\n        while i != start:\n            sline = self.ui.source[i].text\n            if case_insensitive:\n                sline = sline.lower()\n\n            if s in sline:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 314, 'coloffset': 8, 'linematch': 'return False', 'context': '                return True\n\n            i = (i+dir) % len(self.ui.source)\n\n        return False\n\n\nclass SearchBox(urwid.Edit):\n    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 269, 'coloffset': 4, 'linematch': 'def perform_search(self, dir, s=None, start=None, update_search_start=False):', 'context': '\n        self.ui.columns.set_focus(lhs_col)\n        lhs_col.set_focus(self.search_AttrMap)\n\n    def perform_search(self, dir, s=None, start=None, update_search_start=False):\n        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])\n\n        if s is None:', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 269, 'coloffset': 4, 'linematch': 'def perform_search(self, dir, s=None, start=None, update_search_start=False):', 'context': '\n        self.ui.columns.set_focus(lhs_col)\n        lhs_col.set_focus(self.search_AttrMap)\n\n    def perform_search(self, dir, s=None, start=None, update_search_start=False):\n        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])\n\n        if s is None:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 269, 'coloffset': 4, 'linematch': 'def perform_search(self, dir, s=None, start=None, update_search_start=False):', 'context': '\n        self.ui.columns.set_focus(lhs_col)\n        lhs_col.set_focus(self.search_AttrMap)\n\n    def perform_search(self, dir, s=None, start=None, update_search_start=False):\n        self.cancel_highlight()\n\n        # self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[1])\n\n        if s is None:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3660', 'line': 274, 'description': ['            return len(self._get_wrapped_lines(size[0]))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -271,7 +271,7 @@\n         :return: The number of rows required for this widget\n         """"""\n         if self.wrap:\n-            return len(self._get_wrapped_lines(size[0]))\n+            return len(self._get_wrapped_lines(size[1]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3666', 'line': 281, 'description': ['    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -278,7 +278,7 @@\n         else:\n             return 1\n \n-    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n+    def render(self, size: Tuple[int], focus: bool = True) -> urwid.Canvas:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3667', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = size[1]\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3668', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = None\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3669', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""XXfocused XX""+self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3670', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""-self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3671', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix-"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3672', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix+""XX XX""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3673', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = None\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3674', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix-"" ""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3675', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix+""XX XX""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3676', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = None\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3677', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3678', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3679', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = None\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3680', 'line': 299, 'description': ['            text = self._get_wrapped_lines(maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -296,7 +296,7 @@\n         var_label = self.var_label or """"\n \n         if self.wrap:\n-            text = self._get_wrapped_lines(maxcol)\n+            text = None\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3681', 'line': 302, 'description': ['                    text_width(var_label[maxcol:]), maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -298,8 +298,7 @@\n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n \n-            extralabel_full, extralabel_rem = divmod(\n-                    text_width(var_label[maxcol:]), maxcol)\n+            extralabel_full, extralabel_rem = None\n             totallen = sum(text_width(i) for i in text)\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3682', 'line': 303, 'description': ['            totallen = sum(text_width(i) for i in text)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -300,7 +300,7 @@\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n-            totallen = sum(text_width(i) for i in text)\n+            totallen = None\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3683', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    - (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3684', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) - 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3685', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) + 3)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3686', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    / (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3687', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    * (extralabel_full - bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3688', 'line': 310, 'description': ['                    + text_width(var_label)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -307,7 +307,7 @@\n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n-                    + text_width(var_label)\n+                    - text_width(var_label)\n \n                     + 1  # for "":""\n                     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3689', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    - 1  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3690', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    + 2  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3691', 'line': 313, 'description': ['                    )'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -301,16 +301,7 @@\n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n             totallen = sum(text_width(i) for i in text)\n-            labellen = (\n-                    len(self.prefix)  # Padding of first line\n-\n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n-\n-                    + text_width(var_label)\n-\n-                    + 1  # for "":""\n-                    )\n+            labellen = None\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5300', 'line': 270, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5303', 'line': 289, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -286,7 +286,7 @@\n         """"""\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5304', 'line': 290, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -287,7 +287,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5305', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5306', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5307', 'line': 292, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -289,7 +289,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5308', 'line': 293, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5309', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5310', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5311', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5312', 'line': 297, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -294,7 +294,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5313', 'line': 298, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -295,7 +295,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5314', 'line': 299, 'description': ['            ""foo bar"",'], 'failure': []}, {'name': 'Mutant #5315', 'line': 301, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -298,7 +298,7 @@\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5316', 'line': 304, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -301,7 +301,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5317', 'line': 305, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -302,7 +302,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for value in values:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5318', 'line': 307, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5319', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5320', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5321', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5322', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5323', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",10.714285714285714,['CL001' 'CL002' 'ANNOT001' 'F002' 'CML001' 'MRET001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,keypress,322-345,"[{'lineno': 326, 'coloffset': 8, 'linematch': 'if result is not None:', 'context': '    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 327, 'coloffset': 12, 'linematch': 'if key == ""esc"":', 'context': '        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 330, 'coloffset': 12, 'linematch': 'elif key == ""enter"":', 'context': '        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()\n                    self.controller.perform_search(dir=1, s=txt,\n                            update_search_start=True)\n                else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 331, 'coloffset': 16, 'linematch': 'if txt:', 'context': '            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()\n                    self.controller.perform_search(dir=1, s=txt,\n                            update_search_start=True)\n                else:\n                    self.controller.cancel_search()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 339, 'coloffset': 12, 'linematch': 'if self.controller.perform_search(dir=1, s=txt):', 'context': '                else:\n                    self.controller.cancel_search()\n                return None\n        else:\n            if self.controller.perform_search(dir=1, s=txt):\n                self.controller.search_AttrMap.set_attr_map({None: ""search box""})\n            else:\n                self.controller.search_AttrMap.set_attr_map(\n                        {None: ""search not found""})\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 327, 'coloffset': 12, 'linematch': 'if key == ""esc"":', 'context': '        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 331, 'coloffset': 16, 'linematch': 'if txt:', 'context': '            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()\n                    self.controller.perform_search(dir=1, s=txt,\n                            update_search_start=True)\n                else:\n                    self.controller.cancel_search()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 158, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '        cs = line_prefix_cs + cs\n\n        return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)\n\n    def keypress(self, size, key):\n        return key\n\n\nclass ParseState:\n    """"""States for the ArgumentParser class""""""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 322, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 366, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '                text[i] = text[i][:maxcol-3] + ""...""\n\n        return make_canvas(text, attr, maxcol, apfx+""value"")\n\n    def keypress(self, size, key):\n        return key\n\n# }}}\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 327, 'coloffset': 12, 'linematch': 'if key == ""esc"":', 'context': '        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 330, 'coloffset': 12, 'linematch': 'elif key == ""enter"":', 'context': '        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()\n                    self.controller.perform_search(dir=1, s=txt,\n                            update_search_start=True)\n                else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 331, 'coloffset': 16, 'linematch': 'if txt:', 'context': '            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:\n                    self.controller.hide_search_ui()\n                    self.controller.perform_search(dir=1, s=txt,\n                            update_search_start=True)\n                else:\n                    self.controller.cancel_search()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 339, 'coloffset': 12, 'linematch': 'if self.controller.perform_search(dir=1, s=txt):', 'context': '                else:\n                    self.controller.cancel_search()\n                return None\n        else:\n            if self.controller.perform_search(dir=1, s=txt):\n                self.controller.search_AttrMap.set_attr_map({None: ""search box""})\n            else:\n                self.controller.search_AttrMap.set_attr_map(\n                        {None: ""search not found""})\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 158, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '        cs = line_prefix_cs + cs\n\n        return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)\n\n    def keypress(self, size, key):\n        return key\n\n\nclass ParseState:\n    """"""States for the ArgumentParser class""""""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 366, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '                text[i] = text[i][:maxcol-3] + ""...""\n\n        return make_canvas(text, attr, maxcol, apfx+""value"")\n\n    def keypress(self, size, key):\n        return key\n\n# }}}\n\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 159, 'coloffset': 8, 'linematch': 'return key', 'context': '\n        return urwid.TextCanvas([encoded_text], [encoded_attr], [cs], maxcol=maxcol)\n\n    def keypress(self, size, key):\n        return key\n\n\nclass ParseState:\n    """"""States for the ArgumentParser class""""""\n    idle = 1', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 323, 'coloffset': 8, 'linematch': 'result = urwid.Edit.keypress(self, size, key)', 'context': '        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 324, 'coloffset': 8, 'linematch': 'txt = self.get_edit_text()', 'context': '        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 326, 'coloffset': 8, 'linematch': 'if result is not None:', 'context': '    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":\n                self.controller.cancel_search()\n                return None\n            elif key == ""enter"":\n                if txt:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 345, 'coloffset': 8, 'linematch': 'return result', 'context': '            else:\n                self.controller.search_AttrMap.set_attr_map(\n                        {None: ""search not found""})\n\n        return result\n\n# }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 367, 'coloffset': 8, 'linematch': 'return key', 'context': '\n        return make_canvas(text, attr, maxcol, apfx+""value"")\n\n    def keypress(self, size, key):\n        return key\n\n# }}}\n\n\n# {{{ stringifiers', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 322, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 322, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 322, 'coloffset': 4, 'linematch': 'def keypress(self, size, key):', 'context': '    def __init__(self, controller):\n        urwid.Edit.__init__(self, [(""label"", ""Search: "")], """")\n        self.controller = controller\n\n    def keypress(self, size, key):\n        result = urwid.Edit.keypress(self, size, key)\n        txt = self.get_edit_text()\n\n        if result is not None:\n            if key == ""esc"":', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3705', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx-""value"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3706', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx+""XXvalueXX"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3707', 'line': 325, 'description': ['        lprefix = len(self.prefix)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -322,7 +322,7 @@\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n-        lprefix = len(self.prefix)\n+        lprefix = None\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3708', 'line': 327, 'description': ['        if self.value_str is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -324,7 +324,7 @@\n \n         lprefix = len(self.prefix)\n \n-        if self.value_str is not None:\n+        if self.value_str is  None:\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3709', 'line': 328, 'description': ['            if self.var_label is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -325,7 +325,7 @@\n         lprefix = len(self.prefix)\n \n         if self.value_str is not None:\n-            if self.var_label is not None:\n+            if self.var_label is  None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3710', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) >= 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3711', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) > 2:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3712', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix - self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3713', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label - "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3714', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label + ""XX:XX"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3715', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix-""  "" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3716', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""XX  XX"" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3717', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""  "" - self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3718', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,8 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                    text = None\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3719', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx-""label"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3720', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""XXlabelXX"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3721', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""label"", lprefix-text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3722', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx-""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3723', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""XXvalueXX"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3724', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix-3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3725', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+4+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3726', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+3-text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3727', 'line': 337, 'description': ['                        ]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -331,10 +331,7 @@\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n-                    attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n-                        ]\n+                    attr = None\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3728', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix - self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3729', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label - "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3730', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + ""XX: XX"" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3731', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + "": "" - self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3732', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = None\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3733', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx-""label"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3734', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""XXlabelXX"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3735', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix-text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3736', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)-1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3737', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)+2),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3738', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx-""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3739', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""XXvalueXX"", text_width(self.value_str)+1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3740', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""value"", text_width(self.value_str)-1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3741', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""value"", text_width(self.value_str)+2),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3742', 'line': 344, 'description': ['                            ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -338,10 +338,7 @@\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n-                    attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n-                            ]]\n+                    attr = None\n             else:\n                 text = [self.prefix + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5333', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            1:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5334', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            0:                   43,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5335', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""XXaXX"":                 ""foo"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5336', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""a"":                 ""XXfooXX"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5337', 'line': 327, 'description': ['            """": None,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -324,7 +324,7 @@\n         self.assert_walks_contents({\n             0:                   42,\n             ""a"":                 ""foo"",\n-            """": None,\n+            ""XXXX"": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5338', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            False: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5339', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            True: True,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5340', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(4)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5341', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(3)): ""XXabcXX"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5342', 'line': 330, 'description': ['            ():                  ""empty tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -327,7 +327,7 @@\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n-            ():                  ""empty tuple"",\n+            ():                  ""XXempty tupleXX"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5343', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (2, 2, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5344', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 3, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5345', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""XXcXX"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5346', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""c"", ()):     ""XXtupleXX"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5347', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5348', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5349', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5350', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5351', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5352', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5353', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5354', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5355', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5356', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5357', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5358', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5359', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5360', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5361', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5362', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}]",8.823529411764707,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001' 'MRET001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,generate_executable_lines_for_code,98-114,"[{'lineno': 99, 'coloffset': 4, 'linematch': 'if sys.version_info >= (3, 10):', 'context': '\n# {{{ breakpoint validity\n\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:\n        lineno = code.co_firstlineno', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 101, 'coloffset': 12, 'linematch': 'if lineno is not None:', 'context': '\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:\n        lineno = code.co_firstlineno\n        yield lineno\n        # See https://github.com/python/cpython/blob/master/Objects/lnotab_notes.txt', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 111, 'coloffset': 12, 'linematch': 'if line_incr >= 0x80:', 'context': '\n        for line_incr in code.co_lnotab[1::2]:\n            # NB: This code is specific to Python 3.6 and higher\n            # https://github.com/python/cpython/blob/v3.6.0/Objects/lnotab_notes.txt\n            if line_incr >= 0x80:\n                line_incr -= 0x100\n            lineno += line_incr\n            yield lineno\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 101, 'coloffset': 12, 'linematch': 'if lineno is not None:', 'context': '\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:\n        lineno = code.co_firstlineno\n        yield lineno\n        # See https://github.com/python/cpython/blob/master/Objects/lnotab_notes.txt', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 111, 'coloffset': 12, 'linematch': 'if line_incr >= 0x80:', 'context': '\n        for line_incr in code.co_lnotab[1::2]:\n            # NB: This code is specific to Python 3.6 and higher\n            # https://github.com/python/cpython/blob/v3.6.0/Objects/lnotab_notes.txt\n            if line_incr >= 0x80:\n                line_incr -= 0x100\n            lineno += line_incr\n            yield lineno\n\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 98, 'coloffset': 0, 'linematch': 'def generate_executable_lines_for_code(code):', 'context': '\n\n# {{{ breakpoint validity\n\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 101, 'coloffset': 12, 'linematch': 'if lineno is not None:', 'context': '\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:\n        lineno = code.co_firstlineno\n        yield lineno\n        # See https://github.com/python/cpython/blob/master/Objects/lnotab_notes.txt', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 111, 'coloffset': 12, 'linematch': 'if line_incr >= 0x80:', 'context': '\n        for line_incr in code.co_lnotab[1::2]:\n            # NB: This code is specific to Python 3.6 and higher\n            # https://github.com/python/cpython/blob/v3.6.0/Objects/lnotab_notes.txt\n            if line_incr >= 0x80:\n                line_incr -= 0x100\n            lineno += line_incr\n            yield lineno\n\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 98, 'coloffset': 0, 'linematch': 'def generate_executable_lines_for_code(code):', 'context': '\n\n# {{{ breakpoint validity\n\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 99, 'coloffset': 4, 'linematch': 'if sys.version_info >= (3, 10):', 'context': '\n# {{{ breakpoint validity\n\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:\n        lineno = code.co_firstlineno', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 98, 'coloffset': 0, 'linematch': 'def generate_executable_lines_for_code(code):', 'context': '\n\n# {{{ breakpoint validity\n\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 98, 'coloffset': 0, 'linematch': 'def generate_executable_lines_for_code(code):', 'context': '\n\n# {{{ breakpoint validity\n\ndef generate_executable_lines_for_code(code):\n    if sys.version_info >= (3, 10):\n        for _start, _end, lineno in code.co_lines():\n            if lineno is not None:\n                yield lineno\n    else:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3559', 'line': 98, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3560', 'line': 107, 'description': ['                yield str(count), entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -104,7 +104,7 @@\n         assert isinstance(sequence, cls)\n         try:\n             for count, entry in enumerate(sequence):\n-                yield str(count), entry, f""[{count:d}]""\n+                yield str(count), entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3561', 'line': 109, 'description': ['            ui_log.error(""Object {l!r} appears to be a sequence, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -106,7 +106,7 @@\n             for count, entry in enumerate(sequence):\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a sequence, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3562', 'line': 110, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -107,7 +107,7 @@\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3563', 'line': 113, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -110,7 +110,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, sequence):\n         return len(sequence)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5196', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name != ""__getitem__""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5197', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name == ""XX__getitem__XX""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5198', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -101,7 +101,7 @@\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n             if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+                    and args and isinstance(args[1], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5199', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,8 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+            if (method_name == ""__getitem__"" or args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5200', 'line': 112, 'description': ['        ""__contains__"",'], 'failure': []}, {'name': 'Mutant #5201', 'line': 113, 'description': ['        ""__getitem__"",'], 'failure': []}, {'name': 'Mutant #5202', 'line': 114, 'description': ['        ""__iter__"",'], 'failure': []}]",33.33333333333333,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_breakpoint_invalid_reason,143-156,"[{'lineno': 147, 'coloffset': 4, 'linematch': 'if not line:', 'context': 'def get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache\n    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""\n\n    try:\n        executable_lines = get_executable_lines_for_file(filename)\n    except SyntaxError:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 155, 'coloffset': 4, 'linematch': 'if lineno not in executable_lines:', 'context': '        executable_lines = get_executable_lines_for_file(filename)\n    except SyntaxError:\n        return ""File failed to compile.""\n\n    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 143, 'coloffset': 0, 'linematch': 'def get_breakpoint_invalid_reason(filename, lineno):', 'context': '\n    return get_executable_lines_for_codes_recursive(codes)\n\n\ndef get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache\n    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 155, 'coloffset': 4, 'linematch': 'if lineno not in executable_lines:', 'context': '        executable_lines = get_executable_lines_for_file(filename)\n    except SyntaxError:\n        return ""File failed to compile.""\n\n    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 143, 'coloffset': 0, 'linematch': 'def get_breakpoint_invalid_reason(filename, lineno):', 'context': '\n    return get_executable_lines_for_codes_recursive(codes)\n\n\ndef get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache\n    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 145, 'coloffset': 4, 'linematch': 'import linecache', 'context': '\n\ndef get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache\n    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""\n\n    try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 146, 'coloffset': 4, 'linematch': 'line = linecache.getline(filename, lineno)', 'context': '\ndef get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache\n    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""\n\n    try:\n        executable_lines = get_executable_lines_for_file(filename)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 147, 'coloffset': 4, 'linematch': 'if not line:', 'context': 'def get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache\n    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""\n\n    try:\n        executable_lines = get_executable_lines_for_file(filename)\n    except SyntaxError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 150, 'coloffset': 4, 'linematch': 'try:', 'context': '    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""\n\n    try:\n        executable_lines = get_executable_lines_for_file(filename)\n    except SyntaxError:\n        return ""File failed to compile.""\n\n    if lineno not in executable_lines:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 155, 'coloffset': 4, 'linematch': 'if lineno not in executable_lines:', 'context': '        executable_lines = get_executable_lines_for_file(filename)\n    except SyntaxError:\n        return ""File failed to compile.""\n\n    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 143, 'coloffset': 0, 'linematch': 'def get_breakpoint_invalid_reason(filename, lineno):', 'context': '\n    return get_executable_lines_for_codes_recursive(codes)\n\n\ndef get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache\n    line = linecache.getline(filename, lineno)\n    if not line:\n        return ""Line is beyond end of file.""', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #3575', 'line': 148, 'description': ['                key_repr = cls._safe_key_repr(key)'], 'failure': []}, {'name': 'Mutant #3576', 'line': 149, 'description': ['                yield (key_repr, mapping[key], f""[{key_repr}]"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -146,7 +146,7 @@\n         try:\n             for key in mapping.keys():\n                 key_repr = cls._safe_key_repr(key)\n-                yield (key_repr, mapping[key], f""[{key_repr}]"")\n+                yield (key_repr, mapping[key], f""XX[{key_repr}]XX"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3577', 'line': 151, 'description': ['            ui_log.error(""Object {l!r} appears to be a mapping, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -148,7 +148,7 @@\n                 key_repr = cls._safe_key_repr(key)\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a mapping, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3578', 'line': 152, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -149,7 +149,7 @@\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3579', 'line': 155, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -152,7 +152,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, mapping):\n         return len(mapping.keys())\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5220', 'line': 151, 'description': ['    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)'], 'failure': []}, {'name': 'Mutant #5221', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5222', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5223', 'line': 155, 'description': ['        self.values_to_expand = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -152,7 +152,7 @@\n     MOD_STR = "" [all+()]""\n \n     def setUp(self):\n-        self.values_to_expand = []\n+        self.values_to_expand = None\n         self.class_counts = {\n             ""mappings"": 0,\n             ""sequences"": 0,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",44.44444444444444,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,lookup_module,159-186,"[{'lineno': 170, 'coloffset': 4, 'linematch': 'if os.path.isabs(filename) and os.path.exists(filename):', 'context': '    # stolen from pdb\n    import os\n    import sys\n\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 173, 'coloffset': 4, 'linematch': 'if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:', 'context': '\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 176, 'coloffset': 4, 'linematch': 'if ext == """":', 'context': '    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 178, 'coloffset': 4, 'linematch': 'if os.path.isabs(filename):', 'context': '        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):\n            dirname = os.readlink(dirname)\n        fullname = os.path.join(dirname, filename)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 184, 'coloffset': 8, 'linematch': 'if os.path.exists(fullname):', 'context': '    for dirname in sys.path:\n        while os.path.islink(dirname):\n            dirname = os.readlink(dirname)\n        fullname = os.path.join(dirname, filename)\n        if os.path.exists(fullname):\n            return fullname\n    return None\n\n# }}}\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 176, 'coloffset': 7, 'linematch': 'if ext == """":', 'context': '    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 159, 'coloffset': 0, 'linematch': 'def lookup_module(filename):', 'context': '    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.\n\n    lookupmodule() translates (possibly incomplete) file or module name\n    into an absolute file name.\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 173, 'coloffset': 4, 'linematch': 'if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:', 'context': '\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 176, 'coloffset': 4, 'linematch': 'if ext == """":', 'context': '    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 178, 'coloffset': 4, 'linematch': 'if os.path.isabs(filename):', 'context': '        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):\n            dirname = os.readlink(dirname)\n        fullname = os.path.join(dirname, filename)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 159, 'coloffset': 0, 'linematch': 'def lookup_module(filename):', 'context': '    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.\n\n    lookupmodule() translates (possibly incomplete) file or module name\n    into an absolute file name.\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 160, 'coloffset': 4, 'linematch': '""""""Helper function for break/clear parsing -- may be overridden.', 'context': '        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.\n\n    lookupmodule() translates (possibly incomplete) file or module name\n    into an absolute file name.\n    """"""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 167, 'coloffset': 4, 'linematch': 'import os', 'context': '    into an absolute file name.\n    """"""\n\n    # stolen from pdb\n    import os\n    import sys\n\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 168, 'coloffset': 4, 'linematch': 'import sys', 'context': '    """"""\n\n    # stolen from pdb\n    import os\n    import sys\n\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 170, 'coloffset': 4, 'linematch': 'if os.path.isabs(filename) and os.path.exists(filename):', 'context': '    # stolen from pdb\n    import os\n    import sys\n\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 172, 'coloffset': 4, 'linematch': 'f = os.path.join(sys.path[0], filename)', 'context': '    import sys\n\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 173, 'coloffset': 4, 'linematch': 'if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:', 'context': '\n    if os.path.isabs(filename) and os.path.exists(filename):\n        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 175, 'coloffset': 4, 'linematch': '_root, ext = os.path.splitext(filename)', 'context': '        return filename\n    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 176, 'coloffset': 4, 'linematch': 'if ext == """":', 'context': '    f = os.path.join(sys.path[0], filename)\n    if os.path.exists(f):  # and self.canonic(f) == self.mainpyfile:\n        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 178, 'coloffset': 4, 'linematch': 'if os.path.isabs(filename):', 'context': '        return f\n    _root, ext = os.path.splitext(filename)\n    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):\n            dirname = os.readlink(dirname)\n        fullname = os.path.join(dirname, filename)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 180, 'coloffset': 4, 'linematch': 'for dirname in sys.path:', 'context': '    if ext == """":\n        filename = filename + "".py""\n    if os.path.isabs(filename):\n        return filename\n    for dirname in sys.path:\n        while os.path.islink(dirname):\n            dirname = os.readlink(dirname)\n        fullname = os.path.join(dirname, filename)\n        if os.path.exists(fullname):\n            return fullname', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 186, 'coloffset': 4, 'linematch': 'return None', 'context': '            dirname = os.readlink(dirname)\n        fullname = os.path.join(dirname, filename)\n        if os.path.exists(fullname):\n            return fullname\n    return None\n\n# }}}\n\n\n# {{{ file encoding detection', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 159, 'coloffset': 0, 'linematch': 'def lookup_module(filename):', 'context': '    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.\n\n    lookupmodule() translates (possibly incomplete) file or module name\n    into an absolute file name.\n    """"""', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 159, 'coloffset': 0, 'linematch': 'def lookup_module(filename):', 'context': '    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.\n\n    lookupmodule() translates (possibly incomplete) file or module name\n    into an absolute file name.\n    """"""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 159, 'coloffset': 0, 'linematch': 'def lookup_module(filename):', 'context': '    if lineno not in executable_lines:\n        return ""No executable statement found in line.""\n\n\ndef lookup_module(filename):\n    """"""Helper function for break/clear parsing -- may be overridden.\n\n    lookupmodule() translates (possibly incomplete) file or module name\n    into an absolute file name.\n    """"""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3580', 'line': 166, 'description': [')'], 'failure': []}, {'name': 'Mutant #3581', 'line': 175, 'description': ['        self.id_path_to_iinfo = {}'], 'failure': []}, {'name': 'Mutant #3582', 'line': 176, 'description': ['        self.watches = []'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -173,7 +173,7 @@\n class FrameVarInfo:\n     def __init__(self):\n         self.id_path_to_iinfo = {}\n-        self.watches = []\n+        self.watches = None\n \n     def get_inspect_info(self, id_path, read_only):\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5228', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5229', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5230', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5231', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5232', 'line': 161, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5233', 'line': 163, 'description': ['    def value_string(self, obj, expand=True):'], 'failure': []}, {'name': 'Mutant #5234', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5235', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5236', 'line': 165, 'description': ['            return repr(obj) + self.MOD_STR'], 'failure': []}, {'name': 'Mutant #5237', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5238', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5239', 'line': 179, 'description': ['                 self.value_string(getattr(obj, label), expand=False))'], 'failure': []}, {'name': 'Mutant #5240', 'line': 182, 'description': ['    @contextlib.contextmanager'], 'failure': []}]",93.75,"['CL001' 'BOOL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'MRET001' 'F030'
 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,detect_encoding,201-269,"[{'lineno': 248, 'coloffset': 4, 'linematch': 'if isinstance(first, str):', 'context': '            raise SyntaxError(""encoding problem: utf-8"")\n        return encoding\n\n    first = read_or_stop()\n    if isinstance(first, str):\n        return None, [first]\n\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 251, 'coloffset': 4, 'linematch': 'if first.startswith(BOM_UTF8):', 'context': '    first = read_or_stop()\n    if isinstance(first, str):\n        return None, [first]\n\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n    if not first:\n        return ""utf-8"", []\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 254, 'coloffset': 4, 'linematch': 'if not first:', 'context': '\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n    if not first:\n        return ""utf-8"", []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 258, 'coloffset': 4, 'linematch': 'if encoding:', 'context': '    if not first:\n        return ""utf-8"", []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 262, 'coloffset': 4, 'linematch': 'if not second:', 'context': '    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 266, 'coloffset': 4, 'linematch': 'if encoding:', 'context': '    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]\n\n    return ""utf-8"", [first, second]\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 233, 'coloffset': 8, 'linematch': 'if not matches:', 'context': '        except UnicodeDecodeError:\n            return None\n\n        matches = cookie_re.findall(line_string)\n        if not matches:\n            return None\n        encoding = matches[0].decode()\n        try:\n            codec = lookup(encoding)\n        except LookupError as err:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 242, 'coloffset': 8, 'linematch': 'if bom_found and codec.name != ""utf-8"":', 'context': '        except LookupError as err:\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""unknown encoding: "" + encoding) from err\n\n        if bom_found and codec.name != ""utf-8"":\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""encoding problem: utf-8"")\n        return encoding\n\n    first = read_or_stop()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 201, 'coloffset': 0, 'linematch': 'def detect_encoding(line_iter):', 'context': 'cookie_re = re.compile(br""^\\s*#.*coding[:=]\\s*([-\\w.]+)"")\nfrom codecs import BOM_UTF8, lookup\n\n\ndef detect_encoding(line_iter):\n    """"""\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argment, line_iter,\n    an iterator on the lines to be read.\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 220, 'coloffset': 4, 'linematch': 'def read_or_stop():', 'context': '    If no encoding is specified, then the default of \'utf-8\' will be returned.\n    """"""\n    bom_found = False\n\n    def read_or_stop():\n        try:\n            return next(line_iter)\n        except StopIteration:\n            return """"\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 226, 'coloffset': 4, 'linematch': 'def find_cookie(line):', 'context': '            return next(line_iter)\n        except StopIteration:\n            return """"\n\n    def find_cookie(line):\n        try:\n            line_string = line\n        except UnicodeDecodeError:\n            return None\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 201, 'coloffset': 0, 'linematch': 'def detect_encoding(line_iter):', 'context': 'cookie_re = re.compile(br""^\\s*#.*coding[:=]\\s*([-\\w.]+)"")\nfrom codecs import BOM_UTF8, lookup\n\n\ndef detect_encoding(line_iter):\n    """"""\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argment, line_iter,\n    an iterator on the lines to be read.\n', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 242, 'coloffset': 8, 'linematch': 'if bom_found and codec.name != ""utf-8"":', 'context': '        except LookupError as err:\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""unknown encoding: "" + encoding) from err\n\n        if bom_found and codec.name != ""utf-8"":\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""encoding problem: utf-8"")\n        return encoding\n\n    first = read_or_stop()', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 251, 'coloffset': 4, 'linematch': 'if first.startswith(BOM_UTF8):', 'context': '    first = read_or_stop()\n    if isinstance(first, str):\n        return None, [first]\n\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n    if not first:\n        return ""utf-8"", []\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 254, 'coloffset': 4, 'linematch': 'if not first:', 'context': '\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n    if not first:\n        return ""utf-8"", []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 258, 'coloffset': 4, 'linematch': 'if encoding:', 'context': '    if not first:\n        return ""utf-8"", []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 262, 'coloffset': 4, 'linematch': 'if not second:', 'context': '    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 266, 'coloffset': 4, 'linematch': 'if encoding:', 'context': '    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]\n\n    return ""utf-8"", [first, second]\n\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 201, 'coloffset': 0, 'linematch': 'def detect_encoding(line_iter):', 'context': 'cookie_re = re.compile(br""^\\s*#.*coding[:=]\\s*([-\\w.]+)"")\nfrom codecs import BOM_UTF8, lookup\n\n\ndef detect_encoding(line_iter):\n    """"""\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argment, line_iter,\n    an iterator on the lines to be read.\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 220, 'coloffset': 4, 'linematch': 'def read_or_stop():', 'context': '    If no encoding is specified, then the default of \'utf-8\' will be returned.\n    """"""\n    bom_found = False\n\n    def read_or_stop():\n        try:\n            return next(line_iter)\n        except StopIteration:\n            return """"\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 226, 'coloffset': 4, 'linematch': 'def find_cookie(line):', 'context': '            return next(line_iter)\n        except StopIteration:\n            return """"\n\n    def find_cookie(line):\n        try:\n            line_string = line\n        except UnicodeDecodeError:\n            return None\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 202, 'coloffset': 4, 'linematch': '""""""', 'context': 'from codecs import BOM_UTF8, lookup\n\n\ndef detect_encoding(line_iter):\n    """"""\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argment, line_iter,\n    an iterator on the lines to be read.\n\n    It will read a maximum of two lines, and return the encoding used', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 218, 'coloffset': 4, 'linematch': 'bom_found = False', 'context': '    invalid charset, raise a SyntaxError.\n\n    If no encoding is specified, then the default of \'utf-8\' will be returned.\n    """"""\n    bom_found = False\n\n    def read_or_stop():\n        try:\n            return next(line_iter)\n        except StopIteration:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 220, 'coloffset': 4, 'linematch': 'def read_or_stop():', 'context': '    If no encoding is specified, then the default of \'utf-8\' will be returned.\n    """"""\n    bom_found = False\n\n    def read_or_stop():\n        try:\n            return next(line_iter)\n        except StopIteration:\n            return """"\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 221, 'coloffset': 8, 'linematch': 'try:', 'context': '    """"""\n    bom_found = False\n\n    def read_or_stop():\n        try:\n            return next(line_iter)\n        except StopIteration:\n            return """"\n\n    def find_cookie(line):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 226, 'coloffset': 4, 'linematch': 'def find_cookie(line):', 'context': '            return next(line_iter)\n        except StopIteration:\n            return """"\n\n    def find_cookie(line):\n        try:\n            line_string = line\n        except UnicodeDecodeError:\n            return None\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 227, 'coloffset': 8, 'linematch': 'try:', 'context': '        except StopIteration:\n            return """"\n\n    def find_cookie(line):\n        try:\n            line_string = line\n        except UnicodeDecodeError:\n            return None\n\n        matches = cookie_re.findall(line_string)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 232, 'coloffset': 8, 'linematch': 'matches = cookie_re.findall(line_string)', 'context': '            line_string = line\n        except UnicodeDecodeError:\n            return None\n\n        matches = cookie_re.findall(line_string)\n        if not matches:\n            return None\n        encoding = matches[0].decode()\n        try:\n            codec = lookup(encoding)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 233, 'coloffset': 8, 'linematch': 'if not matches:', 'context': '        except UnicodeDecodeError:\n            return None\n\n        matches = cookie_re.findall(line_string)\n        if not matches:\n            return None\n        encoding = matches[0].decode()\n        try:\n            codec = lookup(encoding)\n        except LookupError as err:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 235, 'coloffset': 8, 'linematch': 'encoding = matches[0].decode()', 'context': '\n        matches = cookie_re.findall(line_string)\n        if not matches:\n            return None\n        encoding = matches[0].decode()\n        try:\n            codec = lookup(encoding)\n        except LookupError as err:\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""unknown encoding: "" + encoding) from err', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 236, 'coloffset': 8, 'linematch': 'try:', 'context': '        matches = cookie_re.findall(line_string)\n        if not matches:\n            return None\n        encoding = matches[0].decode()\n        try:\n            codec = lookup(encoding)\n        except LookupError as err:\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""unknown encoding: "" + encoding) from err\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 242, 'coloffset': 8, 'linematch': 'if bom_found and codec.name != ""utf-8"":', 'context': '        except LookupError as err:\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""unknown encoding: "" + encoding) from err\n\n        if bom_found and codec.name != ""utf-8"":\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""encoding problem: utf-8"")\n        return encoding\n\n    first = read_or_stop()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 245, 'coloffset': 8, 'linematch': 'return encoding', 'context': '\n        if bom_found and codec.name != ""utf-8"":\n            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""encoding problem: utf-8"")\n        return encoding\n\n    first = read_or_stop()\n    if isinstance(first, str):\n        return None, [first]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 247, 'coloffset': 4, 'linematch': 'first = read_or_stop()', 'context': '            # This behaviour mimics the Python interpreter\n            raise SyntaxError(""encoding problem: utf-8"")\n        return encoding\n\n    first = read_or_stop()\n    if isinstance(first, str):\n        return None, [first]\n\n    if first.startswith(BOM_UTF8):\n        bom_found = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 248, 'coloffset': 4, 'linematch': 'if isinstance(first, str):', 'context': '            raise SyntaxError(""encoding problem: utf-8"")\n        return encoding\n\n    first = read_or_stop()\n    if isinstance(first, str):\n        return None, [first]\n\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 251, 'coloffset': 4, 'linematch': 'if first.startswith(BOM_UTF8):', 'context': '    first = read_or_stop()\n    if isinstance(first, str):\n        return None, [first]\n\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n    if not first:\n        return ""utf-8"", []\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 254, 'coloffset': 4, 'linematch': 'if not first:', 'context': '\n    if first.startswith(BOM_UTF8):\n        bom_found = True\n        first = first[3:]\n    if not first:\n        return ""utf-8"", []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 257, 'coloffset': 4, 'linematch': 'encoding = find_cookie(first)', 'context': '        first = first[3:]\n    if not first:\n        return ""utf-8"", []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 258, 'coloffset': 4, 'linematch': 'if encoding:', 'context': '    if not first:\n        return ""utf-8"", []\n\n    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 261, 'coloffset': 4, 'linematch': 'second = read_or_stop()', 'context': '    encoding = find_cookie(first)\n    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 262, 'coloffset': 4, 'linematch': 'if not second:', 'context': '    if encoding:\n        return encoding, [first]\n\n    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 265, 'coloffset': 4, 'linematch': 'encoding = find_cookie(second)', 'context': '    second = read_or_stop()\n    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]\n\n    return ""utf-8"", [first, second]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 266, 'coloffset': 4, 'linematch': 'if encoding:', 'context': '    if not second:\n        return ""utf-8"", [first]\n\n    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]\n\n    return ""utf-8"", [first, second]\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 269, 'coloffset': 4, 'linematch': 'return ""utf-8"", [first, second]', 'context': '    encoding = find_cookie(second)\n    if encoding:\n        return encoding, [first, second]\n\n    return ""utf-8"", [first, second]\n\n\ndef decode_lines(lines):\n    line_iter = iter(lines)\n    source_enc, detection_read_lines = detect_encoding(line_iter)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 201, 'coloffset': 0, 'linematch': 'def detect_encoding(line_iter):', 'context': 'cookie_re = re.compile(br""^\\s*#.*coding[:=]\\s*([-\\w.]+)"")\nfrom codecs import BOM_UTF8, lookup\n\n\ndef detect_encoding(line_iter):\n    """"""\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argment, line_iter,\n    an iterator on the lines to be read.\n', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 226, 'coloffset': 4, 'linematch': 'def find_cookie(line):', 'context': '            return next(line_iter)\n        except StopIteration:\n            return """"\n\n    def find_cookie(line):\n        try:\n            line_string = line\n        except UnicodeDecodeError:\n            return None\n', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 201, 'coloffset': 0, 'linematch': 'def detect_encoding(line_iter):', 'context': 'cookie_re = re.compile(br""^\\s*#.*coding[:=]\\s*([-\\w.]+)"")\nfrom codecs import BOM_UTF8, lookup\n\n\ndef detect_encoding(line_iter):\n    """"""\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argment, line_iter,\n    an iterator on the lines to be read.\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 226, 'coloffset': 4, 'linematch': 'def find_cookie(line):', 'context': '            return next(line_iter)\n        except StopIteration:\n            return """"\n\n    def find_cookie(line):\n        try:\n            line_string = line\n        except UnicodeDecodeError:\n            return None\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 201, 'coloffset': 0, 'linematch': 'def detect_encoding(line_iter):', 'context': 'cookie_re = re.compile(br""^\\s*#.*coding[:=]\\s*([-\\w.]+)"")\nfrom codecs import BOM_UTF8, lookup\n\n\ndef detect_encoding(line_iter):\n    """"""\n    The detect_encoding() function is used to detect the encoding that should\n    be used to decode a Python source file. It requires one argment, line_iter,\n    an iterator on the lines to be read.\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 226, 'coloffset': 4, 'linematch': 'def find_cookie(line):', 'context': '            return next(line_iter)\n        except StopIteration:\n            return """"\n\n    def find_cookie(line):\n        try:\n            line_string = line\n        except UnicodeDecodeError:\n            return None\n', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3597', 'line': 203, 'description': ['        self.expression = expression'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -200,7 +200,7 @@\n \n class WatchExpression:\n     def __init__(self, expression):\n-        self.expression = expression\n+        self.expression = None\n \n \n class WatchEvalError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3598', 'line': 208, 'description': ['        return ""<error>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -205,7 +205,7 @@\n \n class WatchEvalError:\n     def __str__(self):\n-        return ""<error>""\n+        return ""XX<error>XX""\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3599', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -213,7 +213,7 @@\n # {{{ widget\n \n class VariableWidget(urwid.FlowWidget):\n-    PREFIX = ""| ""\n+    PREFIX = ""XX| XX""\n \n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3600', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': []}, {'name': 'Mutant #3601', 'line': 221, 'description': ['        self.parent = parent'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -218,7 +218,7 @@\n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n-        self.parent = parent\n+        self.parent = None\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3602', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 1 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3603', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3604', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level - 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3605', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level + 2\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3606', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3607', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': []}, {'name': 'Mutant #3608', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -220,7 +220,7 @@\n         assert isinstance(id_path, str)\n         self.parent = parent\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n-        self.prefix = self.PREFIX * self.nesting_level\n+        self.prefix = None\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3609', 'line': 224, 'description': ['        self.var_label = var_label'], 'failure': []}, {'name': 'Mutant #3610', 'line': 225, 'description': ['        self.value_str = value_str'], 'failure': []}, {'name': 'Mutant #3611', 'line': 226, 'description': ['        self.id_path = id_path'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -223,7 +223,7 @@\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n-        self.id_path = id_path\n+        self.id_path = None\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3612', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix or ""XXvarXX""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3613', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix and ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3614', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = None\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3615', 'line': 228, 'description': ['        self.watch_expr = watch_expr'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -225,7 +225,7 @@\n         self.value_str = value_str\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n-        self.watch_expr = watch_expr\n+        self.watch_expr = None\n         if iinfo is None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3616', 'line': 229, 'description': ['        if iinfo is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -226,7 +226,7 @@\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n-        if iinfo is None:\n+        if iinfo is not None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3617', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = CONFIG[""XXwrap_variablesXX""]\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3618', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = None\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3619', 'line': 235, 'description': ['            self.wrap = iinfo.wrap'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -232,7 +232,7 @@\n \n             self.wrap = CONFIG[""wrap_variables""]\n         else:\n-            self.wrap = iinfo.wrap\n+            self.wrap = None\n \n     def __str__(self):\n         return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3620', 'line': 238, 'description': ['        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -235,7 +235,7 @@\n             self.wrap = iinfo.wrap\n \n     def __str__(self):\n-        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n+        return (""XXVariableWidget: {value_str}, level {nesting_level}, at {id_path}XX""\n                 .format(\n                     value_str=self.value_str,\n                     nesting_level=self.nesting_level,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3621', 'line': 246, 'description': ['        return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -243,7 +243,7 @@\n                 ))\n \n     def selectable(self):\n-        return True\n+        return False\n \n     def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3622', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol = len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3623', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol += len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3624', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3625', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3626', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = None\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3630', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label - "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3631', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + ""XX: XX"" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3632', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + "": "" - value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3633', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = None\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3634', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = self.prefix - alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3635', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = None\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3636', 'line': 260, 'description': ['        if not alltext[maxcol:]:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -257,7 +257,7 @@\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n-        if not alltext[maxcol:]:\n+        if  alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3637', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) + maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3638', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol + 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3639', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 3)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3640', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = None\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3659', 'line': 267, 'description': ['    def rows(self, size: Tuple[int], focus: bool = False) -> int:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -264,7 +264,7 @@\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n-    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n+    def rows(self, size: Tuple[int], focus: bool = True) -> int:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5248', 'line': 201, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))'], 'failure': []}, {'name': 'Mutant #5249', 'line': 204, 'description': ['        expected = [(label, self.value_string(container))]'], 'failure': []}, {'name': 'Mutant #5250', 'line': 206, 'description': ['            expected.extend([(f""[{repr(key)}]"", repr(container[key]))'], 'failure': []}, {'name': 'Mutant #5251', 'line': 208, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5252', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5253', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5254', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5255', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5256', 'line': 211, 'description': ['            expected.extend([(f""[{repr(index)}]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5257', 'line': 213, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5258', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5259', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5260', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5261', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5262', 'line': 216, 'description': ['            expected.extend([(""[]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5263', 'line': 218, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5264', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5265', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5266', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5267', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5268', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5269', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5270', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5271', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5272', 'line': 227, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5275', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5276', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5279', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5280', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5281', 'line': 241, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}, {'name': 'Mutant #5283', 'line': 249, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting())'], 'failure': []}, {'name': 'Mutant #5284', 'line': 252, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -249,7 +249,7 @@\n         self.walker = BasicValueWalker(FrameVarInfoForTesting())\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5285', 'line': 253, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -250,7 +250,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5286', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5287', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5288', 'line': 255, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -252,7 +252,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5290', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5291', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5292', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5293', 'line': 260, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -257,7 +257,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5294', 'line': 261, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -258,7 +258,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5295', 'line': 262, 'description': ['            ""foo bar"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -259,7 +259,7 @@\n             # strings\n             """",\n             ""a"",\n-            ""foo bar"",\n+            ""XXfoo barXX"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5298', 'line': 267, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -264,7 +264,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5299', 'line': 268, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -265,7 +265,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for label, value in enumerate(values):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",37.391304347826086,['CL001' 'ANNOT001' 'F001' 'F002' 'C002' 'CML001' 'MRET001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,decode_lines,272-282,"[{'lineno': 279, 'coloffset': 8, 'linematch': 'if hasattr(line, ""decode"") and source_enc is not None:', 'context': '\n    from itertools import chain\n\n    for line in chain(detection_read_lines, line_iter):\n        if hasattr(line, ""decode"") and source_enc is not None:\n            yield line.decode(source_enc)\n        else:\n            yield line\n\n# }}}', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 272, 'coloffset': 0, 'linematch': 'def decode_lines(lines):', 'context': '\n    return ""utf-8"", [first, second]\n\n\ndef decode_lines(lines):\n    line_iter = iter(lines)\n    source_enc, detection_read_lines = detect_encoding(line_iter)\n\n    from itertools import chain\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 272, 'coloffset': 0, 'linematch': 'def decode_lines(lines):', 'context': '\n    return ""utf-8"", [first, second]\n\n\ndef decode_lines(lines):\n    line_iter = iter(lines)\n    source_enc, detection_read_lines = detect_encoding(line_iter)\n\n    from itertools import chain\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 273, 'coloffset': 4, 'linematch': 'line_iter = iter(lines)', 'context': '    return ""utf-8"", [first, second]\n\n\ndef decode_lines(lines):\n    line_iter = iter(lines)\n    source_enc, detection_read_lines = detect_encoding(line_iter)\n\n    from itertools import chain\n\n    for line in chain(detection_read_lines, line_iter):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 274, 'coloffset': 4, 'linematch': 'source_enc, detection_read_lines = detect_encoding(line_iter)', 'context': '\n\ndef decode_lines(lines):\n    line_iter = iter(lines)\n    source_enc, detection_read_lines = detect_encoding(line_iter)\n\n    from itertools import chain\n\n    for line in chain(detection_read_lines, line_iter):\n        if hasattr(line, ""decode"") and source_enc is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 276, 'coloffset': 4, 'linematch': 'from itertools import chain', 'context': 'def decode_lines(lines):\n    line_iter = iter(lines)\n    source_enc, detection_read_lines = detect_encoding(line_iter)\n\n    from itertools import chain\n\n    for line in chain(detection_read_lines, line_iter):\n        if hasattr(line, ""decode"") and source_enc is not None:\n            yield line.decode(source_enc)\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 278, 'coloffset': 4, 'linematch': 'for line in chain(detection_read_lines, line_iter):', 'context': '    source_enc, detection_read_lines = detect_encoding(line_iter)\n\n    from itertools import chain\n\n    for line in chain(detection_read_lines, line_iter):\n        if hasattr(line, ""decode"") and source_enc is not None:\n            yield line.decode(source_enc)\n        else:\n            yield line\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3660', 'line': 274, 'description': ['            return len(self._get_wrapped_lines(size[0]))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -271,7 +271,7 @@\n         :return: The number of rows required for this widget\n         """"""\n         if self.wrap:\n-            return len(self._get_wrapped_lines(size[0]))\n+            return len(self._get_wrapped_lines(size[1]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3666', 'line': 281, 'description': ['    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -278,7 +278,7 @@\n         else:\n             return 1\n \n-    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n+    def render(self, size: Tuple[int], focus: bool = True) -> urwid.Canvas:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}]",22.22222222222222,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,emit,53-70,"[{'lineno': 59, 'coloffset': 12, 'linematch': 'if logfile is not None:', 'context': '        logfile = getlogfile()\n\n        self.acquire()\n        try:\n            if logfile is not None:\n                message = self.format(record)\n                with open(logfile, ""a"") as openfile:\n                    openfile.write(""\\n%s\\n"" % message)\n            elif _have_debugger():\n                dbg = _get_debugger()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 63, 'coloffset': 12, 'linematch': 'elif _have_debugger():', 'context': '            if logfile is not None:\n                message = self.format(record)\n                with open(logfile, ""a"") as openfile:\n                    openfile.write(""\\n%s\\n"" % message)\n            elif _have_debugger():\n                dbg = _get_debugger()\n                message = self.format(record)\n                dbg.ui.add_cmdline_content(message, ""command line error"")\n            else:\n                super().emit(record)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 53, 'coloffset': 4, 'linematch': 'def emit(self, record):', 'context': '    """"""\n    Logging handler that sends errors either to the terminal window or to\n    stderr, depending on whether the debugger is active.\n    """"""\n    def emit(self, record):\n        from pudb import _get_debugger, _have_debugger\n        logfile = getlogfile()\n\n        self.acquire()\n        try:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 63, 'coloffset': 12, 'linematch': 'elif _have_debugger():', 'context': '            if logfile is not None:\n                message = self.format(record)\n                with open(logfile, ""a"") as openfile:\n                    openfile.write(""\\n%s\\n"" % message)\n            elif _have_debugger():\n                dbg = _get_debugger()\n                message = self.format(record)\n                dbg.ui.add_cmdline_content(message, ""command line error"")\n            else:\n                super().emit(record)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 53, 'coloffset': 4, 'linematch': 'def emit(self, record):', 'context': '    """"""\n    Logging handler that sends errors either to the terminal window or to\n    stderr, depending on whether the debugger is active.\n    """"""\n    def emit(self, record):\n        from pudb import _get_debugger, _have_debugger\n        logfile = getlogfile()\n\n        self.acquire()\n        try:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 54, 'coloffset': 8, 'linematch': 'from pudb import _get_debugger, _have_debugger', 'context': '    Logging handler that sends errors either to the terminal window or to\n    stderr, depending on whether the debugger is active.\n    """"""\n    def emit(self, record):\n        from pudb import _get_debugger, _have_debugger\n        logfile = getlogfile()\n\n        self.acquire()\n        try:\n            if logfile is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 55, 'coloffset': 8, 'linematch': 'logfile = getlogfile()', 'context': '    stderr, depending on whether the debugger is active.\n    """"""\n    def emit(self, record):\n        from pudb import _get_debugger, _have_debugger\n        logfile = getlogfile()\n\n        self.acquire()\n        try:\n            if logfile is not None:\n                message = self.format(record)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 57, 'coloffset': 8, 'linematch': 'self.acquire()', 'context': '    def emit(self, record):\n        from pudb import _get_debugger, _have_debugger\n        logfile = getlogfile()\n\n        self.acquire()\n        try:\n            if logfile is not None:\n                message = self.format(record)\n                with open(logfile, ""a"") as openfile:\n                    openfile.write(""\\n%s\\n"" % message)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 58, 'coloffset': 8, 'linematch': 'try:', 'context': '        from pudb import _get_debugger, _have_debugger\n        logfile = getlogfile()\n\n        self.acquire()\n        try:\n            if logfile is not None:\n                message = self.format(record)\n                with open(logfile, ""a"") as openfile:\n                    openfile.write(""\\n%s\\n"" % message)\n            elif _have_debugger():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3543', 'line': 55, 'description': ['        if cls is PudbCollection:'], 'failure': []}, {'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3546', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3547', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3548', 'line': 65, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}, {'name': 'Mutant #5173', 'line': 55, 'description': ['        self.paths_to_expand = paths_to_expand'], 'failure': []}, {'name': 'Mutant #5174', 'line': 59, 'description': ['            id_path, read_only)'], 'failure': []}, {'name': 'Mutant #5175', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5176', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5177', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5178', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5179', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5180', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5181', 'line': 64, 'description': ['        if id_path in self.paths_to_expand:'], 'failure': []}, {'name': 'Mutant #5182', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5183', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,get_save_config_path,46-54,"[{'lineno': 48, 'coloffset': 4, 'linematch': 'if not XDG_CONFIG_HOME:', 'context': '\n\ndef get_save_config_path():\n    # This may not raise, as it is called during import.\n    if not XDG_CONFIG_HOME:\n        return None\n\n    path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)\n    os.makedirs(path, mode=0o700, exist_ok=True)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 46, 'coloffset': 0, 'linematch': 'def get_save_config_path():', 'context': 'else:\n    XDG_CONFIG_DIRS = os.environ.get(""XDG_CONFIG_DIRS"", ""/etc/xdg"").split("":"")\n\n\ndef get_save_config_path():\n    # This may not raise, as it is called during import.\n    if not XDG_CONFIG_HOME:\n        return None\n\n    path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 46, 'coloffset': 0, 'linematch': 'def get_save_config_path():', 'context': 'else:\n    XDG_CONFIG_DIRS = os.environ.get(""XDG_CONFIG_DIRS"", ""/etc/xdg"").split("":"")\n\n\ndef get_save_config_path():\n    # This may not raise, as it is called during import.\n    if not XDG_CONFIG_HOME:\n        return None\n\n    path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 48, 'coloffset': 4, 'linematch': 'if not XDG_CONFIG_HOME:', 'context': '\n\ndef get_save_config_path():\n    # This may not raise, as it is called during import.\n    if not XDG_CONFIG_HOME:\n        return None\n\n    path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)\n    os.makedirs(path, mode=0o700, exist_ok=True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 51, 'coloffset': 4, 'linematch': 'path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)', 'context': '    # This may not raise, as it is called during import.\n    if not XDG_CONFIG_HOME:\n        return None\n\n    path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)\n    os.makedirs(path, mode=0o700, exist_ok=True)\n\n    return path\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 52, 'coloffset': 4, 'linematch': 'os.makedirs(path, mode=0o700, exist_ok=True)', 'context': '    if not XDG_CONFIG_HOME:\n        return None\n\n    path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)\n    os.makedirs(path, mode=0o700, exist_ok=True)\n\n    return path\n\n\nCONF_SECTION = ""pudb""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 54, 'coloffset': 4, 'linematch': 'return path', 'context': '\n    path = os.path.join(XDG_CONFIG_HOME, XDG_CONF_RESOURCE)\n    os.makedirs(path, mode=0o700, exist_ok=True)\n\n    return path\n\n\nCONF_SECTION = ""pudb""\nCONF_FILE_NAME = ""pudb.cfg""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5170', 'line': 46, 'description': ['            s = strifier(value)'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,load_config,67-138,"[{'lineno': 71, 'coloffset': 4, 'linematch': 'if _config_[0] is not None:', 'context': 'def load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]\n\n    from os.path import isdir, join\n\n    cparser = ConfigParser()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 84, 'coloffset': 8, 'linematch': 'if cparser.has_section(CONF_SECTION):', 'context': '        cparser.read([\n            join(cdir, XDG_CONF_RESOURCE, CONF_FILE_NAME)\n            for cdir in XDG_CONFIG_DIRS if isdir(cdir)])\n\n        if cparser.has_section(CONF_SECTION):\n            conf_dict.update(dict(cparser.items(CONF_SECTION)))\n    except Exception:\n        settings_log.exception(""Failed to load config"")\n\n    conf_dict.setdefault(""shell"", ""internal"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 125, 'coloffset': 12, 'linematch': 'if conf_dict[name].lower() in [""0"", ""false"", ""off""]:', 'context': '    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:\n            if conf_dict[name].lower() in [""0"", ""false"", ""off""]:\n                conf_dict[name] = False\n            else:\n                conf_dict[name] = True\n        except Exception:\n            settings_log.exception(""Failed to process config"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 67, 'coloffset': 0, 'linematch': 'def load_config():', 'context': '\n_config_ = [None]\n\n\ndef load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'def normalize_bool_inplace(name):', 'context': '    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:\n            if conf_dict[name].lower() in [""0"", ""false"", ""off""]:\n                conf_dict[name] = False\n            else:\n                conf_dict[name] = True', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 67, 'coloffset': 0, 'linematch': 'def load_config():', 'context': '\n_config_ = [None]\n\n\ndef load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 67, 'coloffset': 0, 'linematch': 'def load_config():', 'context': '\n_config_ = [None]\n\n\ndef load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 67, 'coloffset': 0, 'linematch': 'def load_config():', 'context': '\n_config_ = [None]\n\n\ndef load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'def normalize_bool_inplace(name):', 'context': '    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:\n            if conf_dict[name].lower() in [""0"", ""false"", ""off""]:\n                conf_dict[name] = False\n            else:\n                conf_dict[name] = True', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 71, 'coloffset': 4, 'linematch': 'if _config_[0] is not None:', 'context': 'def load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]\n\n    from os.path import isdir, join\n\n    cparser = ConfigParser()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 74, 'coloffset': 4, 'linematch': 'from os.path import isdir, join', 'context': '    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]\n\n    from os.path import isdir, join\n\n    cparser = ConfigParser()\n\n    conf_dict = {}\n    try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 76, 'coloffset': 4, 'linematch': 'cparser = ConfigParser()', 'context': '        return _config_[0]\n\n    from os.path import isdir, join\n\n    cparser = ConfigParser()\n\n    conf_dict = {}\n    try:\n        cparser.read([\n            join(cdir, XDG_CONF_RESOURCE, CONF_FILE_NAME)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 78, 'coloffset': 4, 'linematch': 'conf_dict = {}', 'context': '    from os.path import isdir, join\n\n    cparser = ConfigParser()\n\n    conf_dict = {}\n    try:\n        cparser.read([\n            join(cdir, XDG_CONF_RESOURCE, CONF_FILE_NAME)\n            for cdir in XDG_CONFIG_DIRS if isdir(cdir)])\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 79, 'coloffset': 4, 'linematch': 'try:', 'context': '\n    cparser = ConfigParser()\n\n    conf_dict = {}\n    try:\n        cparser.read([\n            join(cdir, XDG_CONF_RESOURCE, CONF_FILE_NAME)\n            for cdir in XDG_CONFIG_DIRS if isdir(cdir)])\n\n        if cparser.has_section(CONF_SECTION):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 89, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""shell"", ""internal"")', 'context': '            conf_dict.update(dict(cparser.items(CONF_SECTION)))\n    except Exception:\n        settings_log.exception(""Failed to load config"")\n\n    conf_dict.setdefault(""shell"", ""internal"")\n    conf_dict.setdefault(""theme"", ""classic"")\n    conf_dict.setdefault(""line_numbers"", ""False"")\n    conf_dict.setdefault(""seen_welcome"", ""a"")\n\n    conf_dict.setdefault(""sidebar_width"", 0.5)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 90, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""theme"", ""classic"")', 'context': '    except Exception:\n        settings_log.exception(""Failed to load config"")\n\n    conf_dict.setdefault(""shell"", ""internal"")\n    conf_dict.setdefault(""theme"", ""classic"")\n    conf_dict.setdefault(""line_numbers"", ""False"")\n    conf_dict.setdefault(""seen_welcome"", ""a"")\n\n    conf_dict.setdefault(""sidebar_width"", 0.5)\n    conf_dict.setdefault(""variables_weight"", 1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 91, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""line_numbers"", ""False"")', 'context': '        settings_log.exception(""Failed to load config"")\n\n    conf_dict.setdefault(""shell"", ""internal"")\n    conf_dict.setdefault(""theme"", ""classic"")\n    conf_dict.setdefault(""line_numbers"", ""False"")\n    conf_dict.setdefault(""seen_welcome"", ""a"")\n\n    conf_dict.setdefault(""sidebar_width"", 0.5)\n    conf_dict.setdefault(""variables_weight"", 1)\n    conf_dict.setdefault(""stack_weight"", 1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 92, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""seen_welcome"", ""a"")', 'context': '\n    conf_dict.setdefault(""shell"", ""internal"")\n    conf_dict.setdefault(""theme"", ""classic"")\n    conf_dict.setdefault(""line_numbers"", ""False"")\n    conf_dict.setdefault(""seen_welcome"", ""a"")\n\n    conf_dict.setdefault(""sidebar_width"", 0.5)\n    conf_dict.setdefault(""variables_weight"", 1)\n    conf_dict.setdefault(""stack_weight"", 1)\n    conf_dict.setdefault(""breakpoints_weight"", 1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 94, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""sidebar_width"", 0.5)', 'context': '    conf_dict.setdefault(""theme"", ""classic"")\n    conf_dict.setdefault(""line_numbers"", ""False"")\n    conf_dict.setdefault(""seen_welcome"", ""a"")\n\n    conf_dict.setdefault(""sidebar_width"", 0.5)\n    conf_dict.setdefault(""variables_weight"", 1)\n    conf_dict.setdefault(""stack_weight"", 1)\n    conf_dict.setdefault(""breakpoints_weight"", 1)\n\n    conf_dict.setdefault(""current_stack_frame"", ""top"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 95, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""variables_weight"", 1)', 'context': '    conf_dict.setdefault(""line_numbers"", ""False"")\n    conf_dict.setdefault(""seen_welcome"", ""a"")\n\n    conf_dict.setdefault(""sidebar_width"", 0.5)\n    conf_dict.setdefault(""variables_weight"", 1)\n    conf_dict.setdefault(""stack_weight"", 1)\n    conf_dict.setdefault(""breakpoints_weight"", 1)\n\n    conf_dict.setdefault(""current_stack_frame"", ""top"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 96, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""stack_weight"", 1)', 'context': '    conf_dict.setdefault(""seen_welcome"", ""a"")\n\n    conf_dict.setdefault(""sidebar_width"", 0.5)\n    conf_dict.setdefault(""variables_weight"", 1)\n    conf_dict.setdefault(""stack_weight"", 1)\n    conf_dict.setdefault(""breakpoints_weight"", 1)\n\n    conf_dict.setdefault(""current_stack_frame"", ""top"")\n\n    conf_dict.setdefault(""stringifier"", ""default"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 97, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""breakpoints_weight"", 1)', 'context': '\n    conf_dict.setdefault(""sidebar_width"", 0.5)\n    conf_dict.setdefault(""variables_weight"", 1)\n    conf_dict.setdefault(""stack_weight"", 1)\n    conf_dict.setdefault(""breakpoints_weight"", 1)\n\n    conf_dict.setdefault(""current_stack_frame"", ""top"")\n\n    conf_dict.setdefault(""stringifier"", ""default"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 99, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""current_stack_frame"", ""top"")', 'context': '    conf_dict.setdefault(""variables_weight"", 1)\n    conf_dict.setdefault(""stack_weight"", 1)\n    conf_dict.setdefault(""breakpoints_weight"", 1)\n\n    conf_dict.setdefault(""current_stack_frame"", ""top"")\n\n    conf_dict.setdefault(""stringifier"", ""default"")\n\n    conf_dict.setdefault(""custom_theme"", """")\n    conf_dict.setdefault(""custom_stringifier"", """")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 101, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""stringifier"", ""default"")', 'context': '    conf_dict.setdefault(""breakpoints_weight"", 1)\n\n    conf_dict.setdefault(""current_stack_frame"", ""top"")\n\n    conf_dict.setdefault(""stringifier"", ""default"")\n\n    conf_dict.setdefault(""custom_theme"", """")\n    conf_dict.setdefault(""custom_stringifier"", """")\n    conf_dict.setdefault(""custom_shell"", """")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 103, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""custom_theme"", """")', 'context': '    conf_dict.setdefault(""current_stack_frame"", ""top"")\n\n    conf_dict.setdefault(""stringifier"", ""default"")\n\n    conf_dict.setdefault(""custom_theme"", """")\n    conf_dict.setdefault(""custom_stringifier"", """")\n    conf_dict.setdefault(""custom_shell"", """")\n\n    conf_dict.setdefault(""wrap_variables"", ""True"")\n    conf_dict.setdefault(""default_variables_access_level"", ""public"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 104, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""custom_stringifier"", """")', 'context': '\n    conf_dict.setdefault(""stringifier"", ""default"")\n\n    conf_dict.setdefault(""custom_theme"", """")\n    conf_dict.setdefault(""custom_stringifier"", """")\n    conf_dict.setdefault(""custom_shell"", """")\n\n    conf_dict.setdefault(""wrap_variables"", ""True"")\n    conf_dict.setdefault(""default_variables_access_level"", ""public"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 105, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""custom_shell"", """")', 'context': '    conf_dict.setdefault(""stringifier"", ""default"")\n\n    conf_dict.setdefault(""custom_theme"", """")\n    conf_dict.setdefault(""custom_stringifier"", """")\n    conf_dict.setdefault(""custom_shell"", """")\n\n    conf_dict.setdefault(""wrap_variables"", ""True"")\n    conf_dict.setdefault(""default_variables_access_level"", ""public"")\n\n    conf_dict.setdefault(""display"", ""auto"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 107, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""wrap_variables"", ""True"")', 'context': '    conf_dict.setdefault(""custom_theme"", """")\n    conf_dict.setdefault(""custom_stringifier"", """")\n    conf_dict.setdefault(""custom_shell"", """")\n\n    conf_dict.setdefault(""wrap_variables"", ""True"")\n    conf_dict.setdefault(""default_variables_access_level"", ""public"")\n\n    conf_dict.setdefault(""display"", ""auto"")\n\n    conf_dict.setdefault(""prompt_on_quit"", ""True"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 108, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""default_variables_access_level"", ""public"")', 'context': '    conf_dict.setdefault(""custom_stringifier"", """")\n    conf_dict.setdefault(""custom_shell"", """")\n\n    conf_dict.setdefault(""wrap_variables"", ""True"")\n    conf_dict.setdefault(""default_variables_access_level"", ""public"")\n\n    conf_dict.setdefault(""display"", ""auto"")\n\n    conf_dict.setdefault(""prompt_on_quit"", ""True"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 110, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""display"", ""auto"")', 'context': '\n    conf_dict.setdefault(""wrap_variables"", ""True"")\n    conf_dict.setdefault(""default_variables_access_level"", ""public"")\n\n    conf_dict.setdefault(""display"", ""auto"")\n\n    conf_dict.setdefault(""prompt_on_quit"", ""True"")\n\n    conf_dict.setdefault(""hide_cmdline_win"", ""False"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 112, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""prompt_on_quit"", ""True"")', 'context': '    conf_dict.setdefault(""default_variables_access_level"", ""public"")\n\n    conf_dict.setdefault(""display"", ""auto"")\n\n    conf_dict.setdefault(""prompt_on_quit"", ""True"")\n\n    conf_dict.setdefault(""hide_cmdline_win"", ""False"")\n\n    # hotkeys\n    conf_dict.setdefault(""hotkeys_code"", ""C"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 114, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""hide_cmdline_win"", ""False"")', 'context': '    conf_dict.setdefault(""display"", ""auto"")\n\n    conf_dict.setdefault(""prompt_on_quit"", ""True"")\n\n    conf_dict.setdefault(""hide_cmdline_win"", ""False"")\n\n    # hotkeys\n    conf_dict.setdefault(""hotkeys_code"", ""C"")\n    conf_dict.setdefault(""hotkeys_variables"", ""V"")\n    conf_dict.setdefault(""hotkeys_stack"", ""S"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 117, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""hotkeys_code"", ""C"")', 'context': '\n    conf_dict.setdefault(""hide_cmdline_win"", ""False"")\n\n    # hotkeys\n    conf_dict.setdefault(""hotkeys_code"", ""C"")\n    conf_dict.setdefault(""hotkeys_variables"", ""V"")\n    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 118, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""hotkeys_variables"", ""V"")', 'context': '    conf_dict.setdefault(""hide_cmdline_win"", ""False"")\n\n    # hotkeys\n    conf_dict.setdefault(""hotkeys_code"", ""C"")\n    conf_dict.setdefault(""hotkeys_variables"", ""V"")\n    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 119, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""hotkeys_stack"", ""S"")', 'context': '\n    # hotkeys\n    conf_dict.setdefault(""hotkeys_code"", ""C"")\n    conf_dict.setdefault(""hotkeys_variables"", ""V"")\n    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 120, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")', 'context': '    # hotkeys\n    conf_dict.setdefault(""hotkeys_code"", ""C"")\n    conf_dict.setdefault(""hotkeys_variables"", ""V"")\n    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:\n            if conf_dict[name].lower() in [""0"", ""false"", ""off""]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 121, 'coloffset': 4, 'linematch': 'conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")', 'context': '    conf_dict.setdefault(""hotkeys_code"", ""C"")\n    conf_dict.setdefault(""hotkeys_variables"", ""V"")\n    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:\n            if conf_dict[name].lower() in [""0"", ""false"", ""off""]:\n                conf_dict[name] = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'def normalize_bool_inplace(name):', 'context': '    conf_dict.setdefault(""hotkeys_stack"", ""S"")\n    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:\n            if conf_dict[name].lower() in [""0"", ""false"", ""off""]:\n                conf_dict[name] = False\n            else:\n                conf_dict[name] = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 124, 'coloffset': 8, 'linematch': 'try:', 'context': '    conf_dict.setdefault(""hotkeys_breakpoints"", ""B"")\n    conf_dict.setdefault(""hotkeys_toggle_cmdline_focus"", ""ctrl x"")\n\n    def normalize_bool_inplace(name):\n        try:\n            if conf_dict[name].lower() in [""0"", ""false"", ""off""]:\n                conf_dict[name] = False\n            else:\n                conf_dict[name] = True\n        except Exception:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 132, 'coloffset': 4, 'linematch': 'normalize_bool_inplace(""line_numbers"")', 'context': '                conf_dict[name] = True\n        except Exception:\n            settings_log.exception(""Failed to process config"")\n\n    normalize_bool_inplace(""line_numbers"")\n    normalize_bool_inplace(""wrap_variables"")\n    normalize_bool_inplace(""prompt_on_quit"")\n    normalize_bool_inplace(""hide_cmdline_win"")\n\n    _config_[0] = conf_dict', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 133, 'coloffset': 4, 'linematch': 'normalize_bool_inplace(""wrap_variables"")', 'context': '        except Exception:\n            settings_log.exception(""Failed to process config"")\n\n    normalize_bool_inplace(""line_numbers"")\n    normalize_bool_inplace(""wrap_variables"")\n    normalize_bool_inplace(""prompt_on_quit"")\n    normalize_bool_inplace(""hide_cmdline_win"")\n\n    _config_[0] = conf_dict\n    return conf_dict', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 134, 'coloffset': 4, 'linematch': 'normalize_bool_inplace(""prompt_on_quit"")', 'context': '            settings_log.exception(""Failed to process config"")\n\n    normalize_bool_inplace(""line_numbers"")\n    normalize_bool_inplace(""wrap_variables"")\n    normalize_bool_inplace(""prompt_on_quit"")\n    normalize_bool_inplace(""hide_cmdline_win"")\n\n    _config_[0] = conf_dict\n    return conf_dict\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 135, 'coloffset': 4, 'linematch': 'normalize_bool_inplace(""hide_cmdline_win"")', 'context': '\n    normalize_bool_inplace(""line_numbers"")\n    normalize_bool_inplace(""wrap_variables"")\n    normalize_bool_inplace(""prompt_on_quit"")\n    normalize_bool_inplace(""hide_cmdline_win"")\n\n    _config_[0] = conf_dict\n    return conf_dict\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 137, 'coloffset': 4, 'linematch': '_config_[0] = conf_dict', 'context': '    normalize_bool_inplace(""wrap_variables"")\n    normalize_bool_inplace(""prompt_on_quit"")\n    normalize_bool_inplace(""hide_cmdline_win"")\n\n    _config_[0] = conf_dict\n    return conf_dict\n\n\ndef save_config(conf_dict):\n    # This may not raise, as it is called during import.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 138, 'coloffset': 4, 'linematch': 'return conf_dict', 'context': '    normalize_bool_inplace(""prompt_on_quit"")\n    normalize_bool_inplace(""hide_cmdline_win"")\n\n    _config_[0] = conf_dict\n    return conf_dict\n\n\ndef save_config(conf_dict):\n    # This may not raise, as it is called during import.\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 67, 'coloffset': 0, 'linematch': 'def load_config():', 'context': '\n_config_ = [None]\n\n\ndef load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 67, 'coloffset': 0, 'linematch': 'def load_config():', 'context': '\n_config_ = [None]\n\n\ndef load_config():\n    # This may not raise, as it is called during import.\n\n    # Only ever do this once\n    if _config_[0] is not None:\n        return _config_[0]', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3550', 'line': 76, 'description': ['            ui_log.error(""Object {l!r} appears to be a collection, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -73,7 +73,7 @@\n             for count, entry in enumerate(collection):\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a collection, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a collection, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3552', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -77,7 +77,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, collection):\n         return len(collection)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #3555', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3556', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3557', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3558', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3559', 'line': 98, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3560', 'line': 107, 'description': ['                yield str(count), entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -104,7 +104,7 @@\n         assert isinstance(sequence, cls)\n         try:\n             for count, entry in enumerate(sequence):\n-                yield str(count), entry, f""[{count:d}]""\n+                yield str(count), entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3561', 'line': 109, 'description': ['            ui_log.error(""Object {l!r} appears to be a sequence, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -106,7 +106,7 @@\n             for count, entry in enumerate(sequence):\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a sequence, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3562', 'line': 110, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -107,7 +107,7 @@\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3563', 'line': 113, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -110,7 +110,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, sequence):\n         return len(sequence)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3564', 'line': 119, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3565', 'line': 121, 'description': ['        if cls is PudbMapping:'], 'failure': []}, {'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3572', 'line': 132, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5184', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = 43\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5185', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = None\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5187', 'line': 76, 'description': ['    @property'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -73,7 +73,6 @@\n     def bar(self):\n         return True\n \n-    @property\n     def red(self):\n         return ""red""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5189', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -77,7 +77,6 @@\n     def red(self):\n         return ""red""\n \n-    @classmethod\n     def blue(cls):\n         return ""blue""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5191', 'line': 84, 'description': ['    @staticmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -81,7 +81,6 @@\n     def blue(cls):\n         return ""blue""\n \n-    @staticmethod\n     def green():\n         return ""green""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5194', 'line': 92, 'description': ['        return ""amazing""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -89,7 +89,7 @@\n         return ""shh""\n \n     def __magicsomething__(self):\n-        return ""amazing""\n+        return ""XXamazingXX""\n \n \n def method_factory(method_name):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5195', 'line': 97, 'description': ['        func = getattr(self.__internal_dict__, method_name)'], 'failure': []}, {'name': 'Mutant #5196', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name != ""__getitem__""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5197', 'line': 103, 'description': ['            if (method_name == ""__getitem__""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,7 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n+            if (method_name == ""XX__getitem__XX""\n                     and args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5198', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -101,7 +101,7 @@\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n             if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+                    and args and isinstance(args[1], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5199', 'line': 104, 'description': ['                    and args and isinstance(args[0], int)):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -100,8 +100,7 @@\n         except KeyError:\n             # Classes without __iter__ are expected to raise IndexError in this\n             # sort of case. Frustrating, I know.\n-            if (method_name == ""__getitem__""\n-                    and args and isinstance(args[0], int)):\n+            if (method_name == ""__getitem__"" or args and isinstance(args[0], int)):\n                 raise IndexError from None\n             raise\n     return method\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5200', 'line': 112, 'description': ['        ""__contains__"",'], 'failure': []}, {'name': 'Mutant #5201', 'line': 113, 'description': ['        ""__getitem__"",'], 'failure': []}, {'name': 'Mutant #5202', 'line': 114, 'description': ['        ""__iter__"",'], 'failure': []}, {'name': 'Mutant #5203', 'line': 115, 'description': ['        ""__len__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -112,7 +112,7 @@\n         ""__contains__"",\n         ""__getitem__"",\n         ""__iter__"",\n-        ""__len__"",\n+        ""XX__len__XX"",\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5204', 'line': 116, 'description': ['        ""__reversed__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -113,7 +113,7 @@\n         ""__getitem__"",\n         ""__iter__"",\n         ""__len__"",\n-        ""__reversed__"",\n+        ""XX__reversed__XX"",\n         ""count"",\n         ""get"",\n         ""index"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5205', 'line': 117, 'description': ['        ""count"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -114,7 +114,7 @@\n         ""__iter__"",\n         ""__len__"",\n         ""__reversed__"",\n-        ""count"",\n+        ""XXcountXX"",\n         ""get"",\n         ""index"",\n         ""items"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5206', 'line': 118, 'description': ['        ""get"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -115,7 +115,7 @@\n         ""__len__"",\n         ""__reversed__"",\n         ""count"",\n-        ""get"",\n+        ""XXgetXX"",\n         ""index"",\n         ""items"",\n         ""keys"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5207', 'line': 119, 'description': ['        ""index"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -116,7 +116,7 @@\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n-        ""index"",\n+        ""XXindexXX"",\n         ""items"",\n         ""keys"",\n         ""values"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5208', 'line': 120, 'description': ['        ""items"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -117,7 +117,7 @@\n         ""count"",\n         ""get"",\n         ""index"",\n-        ""items"",\n+        ""XXitemsXX"",\n         ""keys"",\n         ""values"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5209', 'line': 121, 'description': ['        ""keys"",'], 'failure': []}, {'name': 'Mutant #5210', 'line': 122, 'description': ['        ""values"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -119,7 +119,7 @@\n         ""index"",\n         ""items"",\n         ""keys"",\n-        ""values"",\n+        ""XXvaluesXX"",\n     }\n \n     # Deliberately starting from 0\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5215', 'line': 132, 'description': ['                    self.__internal_dict__ = dict(iterable)'], 'failure': []}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}]",43.333333333333336,['CL001' 'ANNOT001' 'FLV001' 'F001' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,save_config,141-160,"[{'lineno': 154, 'coloffset': 8, 'linematch': 'if not save_path:', 'context': '        cparser.set(CONF_SECTION, key, str(conf_dict[key]))\n\n    try:\n        save_path = get_save_config_path()\n        if not save_path:\n            return\n        outf = open(join(save_path, CONF_FILE_NAME), ""w"")\n        cparser.write(outf)\n        outf.close()\n    except Exception:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 141, 'coloffset': 0, 'linematch': 'def save_config(conf_dict):', 'context': '    _config_[0] = conf_dict\n    return conf_dict\n\n\ndef save_config(conf_dict):\n    # This may not raise, as it is called during import.\n\n    from os.path import join\n\n    cparser = ConfigParser()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 141, 'coloffset': 0, 'linematch': 'def save_config(conf_dict):', 'context': '    _config_[0] = conf_dict\n    return conf_dict\n\n\ndef save_config(conf_dict):\n    # This may not raise, as it is called during import.\n\n    from os.path import join\n\n    cparser = ConfigParser()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 144, 'coloffset': 4, 'linematch': 'from os.path import join', 'context': '\ndef save_config(conf_dict):\n    # This may not raise, as it is called during import.\n\n    from os.path import join\n\n    cparser = ConfigParser()\n    cparser.add_section(CONF_SECTION)\n\n    for key in sorted(conf_dict):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 146, 'coloffset': 4, 'linematch': 'cparser = ConfigParser()', 'context': '    # This may not raise, as it is called during import.\n\n    from os.path import join\n\n    cparser = ConfigParser()\n    cparser.add_section(CONF_SECTION)\n\n    for key in sorted(conf_dict):\n        cparser.set(CONF_SECTION, key, str(conf_dict[key]))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 147, 'coloffset': 4, 'linematch': 'cparser.add_section(CONF_SECTION)', 'context': '\n    from os.path import join\n\n    cparser = ConfigParser()\n    cparser.add_section(CONF_SECTION)\n\n    for key in sorted(conf_dict):\n        cparser.set(CONF_SECTION, key, str(conf_dict[key]))\n\n    try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 149, 'coloffset': 4, 'linematch': 'for key in sorted(conf_dict):', 'context': '\n    cparser = ConfigParser()\n    cparser.add_section(CONF_SECTION)\n\n    for key in sorted(conf_dict):\n        cparser.set(CONF_SECTION, key, str(conf_dict[key]))\n\n    try:\n        save_path = get_save_config_path()\n        if not save_path:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 152, 'coloffset': 4, 'linematch': 'try:', 'context': '\n    for key in sorted(conf_dict):\n        cparser.set(CONF_SECTION, key, str(conf_dict[key]))\n\n    try:\n        save_path = get_save_config_path()\n        if not save_path:\n            return\n        outf = open(join(save_path, CONF_FILE_NAME), ""w"")\n        cparser.write(outf)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3575', 'line': 148, 'description': ['                key_repr = cls._safe_key_repr(key)'], 'failure': []}, {'name': 'Mutant #3576', 'line': 149, 'description': ['                yield (key_repr, mapping[key], f""[{key_repr}]"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -146,7 +146,7 @@\n         try:\n             for key in mapping.keys():\n                 key_repr = cls._safe_key_repr(key)\n-                yield (key_repr, mapping[key], f""[{key_repr}]"")\n+                yield (key_repr, mapping[key], f""XX[{key_repr}]XX"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3577', 'line': 151, 'description': ['            ui_log.error(""Object {l!r} appears to be a mapping, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -148,7 +148,7 @@\n                 key_repr = cls._safe_key_repr(key)\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a mapping, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3578', 'line': 152, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -149,7 +149,7 @@\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3579', 'line': 155, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -152,7 +152,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, mapping):\n         return len(mapping.keys())\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5220', 'line': 151, 'description': ['    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)'], 'failure': []}, {'name': 'Mutant #5221', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5222', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5223', 'line': 155, 'description': ['        self.values_to_expand = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -152,7 +152,7 @@\n     MOD_STR = "" [all+()]""\n \n     def setUp(self):\n-        self.values_to_expand = []\n+        self.values_to_expand = None\n         self.class_counts = {\n             ""mappings"": 0,\n             ""sequences"": 0,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5224', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5225', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5226', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5227', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5228', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5229', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5230', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5231', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}]",70.58823529411765,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,edit_config,163-513,"[{'lineno': 476, 'coloffset': 4, 'linematch': 'if ui.dialog(lb,         [', 'context': '            )\n\n    lb = urwid.ListBox(urwid.SimpleListWalker(lb_contents))\n\n    if ui.dialog(lb,         [\n            (""OK"", True),\n            (""Cancel"", False),\n            ],\n            title=""Edit Preferences""):\n        # Only update the settings here that instant-apply (above) doesn\'t take', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 199, 'coloffset': 8, 'linematch': 'if option == ""theme"":', 'context': '\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 201, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))\n                    return\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 202, 'coloffset': 16, 'linematch': 'if newvalue is None:', 'context': '        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))\n                    return\n\n                conf_dict.update(theme=newvalue)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'elif option == ""line_numbers"":', 'context': '\n                conf_dict.update(theme=newvalue)\n                _update_theme()\n\n        elif option == ""line_numbers"":\n            new_conf_dict[""line_numbers""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_line_numbers()\n\n        elif option == ""prompt_on_quit"":', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 215, 'coloffset': 8, 'linematch': 'elif option == ""prompt_on_quit"":', 'context': '            new_conf_dict[""line_numbers""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_line_numbers()\n\n        elif option == ""prompt_on_quit"":\n            new_conf_dict[""prompt_on_quit""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_prompt_on_quit()\n\n        elif option == ""hide_cmdline_win"":', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 220, 'coloffset': 8, 'linematch': 'elif option == ""hide_cmdline_win"":', 'context': '            new_conf_dict[""prompt_on_quit""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_prompt_on_quit()\n\n        elif option == ""hide_cmdline_win"":\n            new_conf_dict[""hide_cmdline_win""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_hide_cmdline_win()\n\n        elif option == ""current_stack_frame"":', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 225, 'coloffset': 8, 'linematch': 'elif option == ""current_stack_frame"":', 'context': '            new_conf_dict[""hide_cmdline_win""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_hide_cmdline_win()\n\n        elif option == ""current_stack_frame"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(new_conf_dict)\n                _update_current_stack_frame()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 227, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '            _update_hide_cmdline_win()\n\n        elif option == ""current_stack_frame"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(new_conf_dict)\n                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 231, 'coloffset': 8, 'linematch': 'elif option == ""stringifier"":', 'context': '            if new_state:\n                conf_dict.update(new_conf_dict)\n                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 233, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 234, 'coloffset': 16, 'linematch': 'if newvalue is None:', 'context': '\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 241, 'coloffset': 8, 'linematch': 'elif option == ""default_variables_access_level"":', 'context': '\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()\n\n        elif option == ""default_variables_access_level"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 243, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '                _update_stringifier()\n\n        elif option == ""default_variables_access_level"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 247, 'coloffset': 8, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 485, 'coloffset': 8, 'linematch': 'if theme_rb_group[-1].state:', 'context': ""        # Only update the settings here that instant-apply (above) doesn't take\n        # care of.\n\n        # if we had a custom theme, it wasn't updated live\n        if theme_rb_group[-1].state:\n            newvalue = theme_edit.get_edit_text()\n            conf_dict.update(theme=newvalue, custom_theme=newvalue)\n            _update_theme()\n\n        # Ditto for custom stringifiers"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 491, 'coloffset': 8, 'linematch': 'if stringifier_rb_group[-1].state:', 'context': '            conf_dict.update(theme=newvalue, custom_theme=newvalue)\n            _update_theme()\n\n        # Ditto for custom stringifiers\n        if stringifier_rb_group[-1].state:\n            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 496, 'coloffset': 8, 'linematch': 'if shell_rb_group[-1].state:', 'context': '            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:\n            newvalue = shell_edit.get_edit_text()\n            conf_dict.update(shell=newvalue, custom_shell=newvalue)\n        else:\n            for shell, shell_rb in zip(shells, shell_rbs):\n                if shell_rb.get_state():', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 501, 'coloffset': 16, 'linematch': 'if shell_rb.get_state():', 'context': '            newvalue = shell_edit.get_edit_text()\n            conf_dict.update(shell=newvalue, custom_shell=newvalue)\n        else:\n            for shell, shell_rb in zip(shells, shell_rbs):\n                if shell_rb.get_state():\n                    conf_dict[""shell""] = shell\n\n        for display, display_rb in zip(displays, display_rbs):\n            if display_rb.get_state():\n                conf_dict[""display""] = display', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 505, 'coloffset': 12, 'linematch': 'if display_rb.get_state():', 'context': '                if shell_rb.get_state():\n                    conf_dict[""shell""] = shell\n\n        for display, display_rb in zip(displays, display_rbs):\n            if display_rb.get_state():\n                conf_dict[""display""] = display\n\n    else:  # The user chose cancel, revert changes\n        conf_dict.update(old_conf_dict)\n        _update_theme()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 201, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))\n                    return\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 202, 'coloffset': 16, 'linematch': 'if newvalue is None:', 'context': '        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))\n                    return\n\n                conf_dict.update(theme=newvalue)', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 227, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '            _update_hide_cmdline_win()\n\n        elif option == ""current_stack_frame"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(new_conf_dict)\n                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 233, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 234, 'coloffset': 16, 'linematch': 'if newvalue is None:', 'context': '\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 243, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '                _update_stringifier()\n\n        elif option == ""default_variables_access_level"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 485, 'coloffset': 8, 'linematch': 'if theme_rb_group[-1].state:', 'context': ""        # Only update the settings here that instant-apply (above) doesn't take\n        # care of.\n\n        # if we had a custom theme, it wasn't updated live\n        if theme_rb_group[-1].state:\n            newvalue = theme_edit.get_edit_text()\n            conf_dict.update(theme=newvalue, custom_theme=newvalue)\n            _update_theme()\n\n        # Ditto for custom stringifiers"", 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 491, 'coloffset': 8, 'linematch': 'if stringifier_rb_group[-1].state:', 'context': '            conf_dict.update(theme=newvalue, custom_theme=newvalue)\n            _update_theme()\n\n        # Ditto for custom stringifiers\n        if stringifier_rb_group[-1].state:\n            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 496, 'coloffset': 8, 'linematch': 'if shell_rb_group[-1].state:', 'context': '            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:\n            newvalue = shell_edit.get_edit_text()\n            conf_dict.update(shell=newvalue, custom_shell=newvalue)\n        else:\n            for shell, shell_rb in zip(shells, shell_rbs):\n                if shell_rb.get_state():', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 501, 'coloffset': 16, 'linematch': 'if shell_rb.get_state():', 'context': '            newvalue = shell_edit.get_edit_text()\n            conf_dict.update(shell=newvalue, custom_shell=newvalue)\n        else:\n            for shell, shell_rb in zip(shells, shell_rbs):\n                if shell_rb.get_state():\n                    conf_dict[""shell""] = shell\n\n        for display, display_rb in zip(displays, display_rbs):\n            if display_rb.get_state():\n                conf_dict[""display""] = display', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 505, 'coloffset': 12, 'linematch': 'if display_rb.get_state():', 'context': '                if shell_rb.get_state():\n                    conf_dict[""shell""] = shell\n\n        for display, display_rb in zip(displays, display_rbs):\n            if display_rb.get_state():\n                conf_dict[""display""] = display\n\n    else:  # The user chose cancel, revert changes\n        conf_dict.update(old_conf_dict)\n        _update_theme()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 234, 'coloffset': 19, 'linematch': 'if newvalue is None:', 'context': '\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 234, 'coloffset': 19, 'linematch': 'if newvalue is None:', 'context': '\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 247, 'coloffset': 13, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 234, 'coloffset': 19, 'linematch': 'if newvalue is None:', 'context': '\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 168, 'coloffset': 4, 'linematch': 'def _update_theme():', 'context': '    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 172, 'coloffset': 4, 'linematch': 'def _update_line_numbers():', 'context': '    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 176, 'coloffset': 4, 'linematch': 'def _update_prompt_on_quit():', 'context': '    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 179, 'coloffset': 4, 'linematch': 'def _update_hide_cmdline_win():', 'context': '\n    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 182, 'coloffset': 4, 'linematch': 'def _update_current_stack_frame():', 'context': '\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 185, 'coloffset': 4, 'linematch': 'def _update_stringifier():', 'context': '\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 190, 'coloffset': 4, 'linematch': 'def _update_default_variables_access_level():', 'context': '        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 193, 'coloffset': 4, 'linematch': 'def _update_wrap_variables():', 'context': '\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 196, 'coloffset': 4, 'linematch': 'def _update_config(check_box, new_state, option_newvalue):', 'context': '\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 348, 'coloffset': 28, 'linematch': 'stringifier_opts = list(STRINGIFIERS.keys())', 'context': '\n    # {{{ stringifier\n\n    from pudb.var_view import STRINGIFIERS\n    stringifier_opts = list(STRINGIFIERS.keys())\n    known_stringifier = conf_dict[""stringifier""] in stringifier_opts\n    stringifier_rb_group = []\n    stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])\n    stringifier_info = urwid.Text(\n        ""This is the default function that will be called on variables in the ""', 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 491, 'coloffset': 8, 'linematch': 'if stringifier_rb_group[-1].state:', 'context': '            conf_dict.update(theme=newvalue, custom_theme=newvalue)\n            _update_theme()\n\n        # Ditto for custom stringifiers\n        if stringifier_rb_group[-1].state:\n            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 496, 'coloffset': 8, 'linematch': 'if shell_rb_group[-1].state:', 'context': '            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:\n            newvalue = shell_edit.get_edit_text()\n            conf_dict.update(shell=newvalue, custom_shell=newvalue)\n        else:\n            for shell, shell_rb in zip(shells, shell_rbs):\n                if shell_rb.get_state():', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 485, 'coloffset': 8, 'linematch': 'if theme_rb_group[-1].state:', 'context': ""        # Only update the settings here that instant-apply (above) doesn't take\n        # care of.\n\n        # if we had a custom theme, it wasn't updated live\n        if theme_rb_group[-1].state:\n            newvalue = theme_edit.get_edit_text()\n            conf_dict.update(theme=newvalue, custom_theme=newvalue)\n            _update_theme()\n\n        # Ditto for custom stringifiers"", 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 491, 'coloffset': 8, 'linematch': 'if stringifier_rb_group[-1].state:', 'context': '            conf_dict.update(theme=newvalue, custom_theme=newvalue)\n            _update_theme()\n\n        # Ditto for custom stringifiers\n        if stringifier_rb_group[-1].state:\n            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 496, 'coloffset': 8, 'linematch': 'if shell_rb_group[-1].state:', 'context': '            newvalue = stringifier_edit.get_edit_text()\n            conf_dict.update(stringifier=newvalue, custom_stringifier=newvalue)\n            _update_stringifier()\n\n        if shell_rb_group[-1].state:\n            newvalue = shell_edit.get_edit_text()\n            conf_dict.update(shell=newvalue, custom_shell=newvalue)\n        else:\n            for shell, shell_rb in zip(shells, shell_rbs):\n                if shell_rb.get_state():', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 501, 'coloffset': 16, 'linematch': 'if shell_rb.get_state():', 'context': '            newvalue = shell_edit.get_edit_text()\n            conf_dict.update(shell=newvalue, custom_shell=newvalue)\n        else:\n            for shell, shell_rb in zip(shells, shell_rbs):\n                if shell_rb.get_state():\n                    conf_dict[""shell""] = shell\n\n        for display, display_rb in zip(displays, display_rbs):\n            if display_rb.get_state():\n                conf_dict[""display""] = display', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 505, 'coloffset': 12, 'linematch': 'if display_rb.get_state():', 'context': '                if shell_rb.get_state():\n                    conf_dict[""shell""] = shell\n\n        for display, display_rb in zip(displays, display_rbs):\n            if display_rb.get_state():\n                conf_dict[""display""] = display\n\n    else:  # The user chose cancel, revert changes\n        conf_dict.update(old_conf_dict)\n        _update_theme()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 201, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))\n                    return\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 202, 'coloffset': 16, 'linematch': 'if newvalue is None:', 'context': '        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))\n                    return\n\n                conf_dict.update(theme=newvalue)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 210, 'coloffset': 8, 'linematch': 'elif option == ""line_numbers"":', 'context': '\n                conf_dict.update(theme=newvalue)\n                _update_theme()\n\n        elif option == ""line_numbers"":\n            new_conf_dict[""line_numbers""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_line_numbers()\n\n        elif option == ""prompt_on_quit"":', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 215, 'coloffset': 8, 'linematch': 'elif option == ""prompt_on_quit"":', 'context': '            new_conf_dict[""line_numbers""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_line_numbers()\n\n        elif option == ""prompt_on_quit"":\n            new_conf_dict[""prompt_on_quit""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_prompt_on_quit()\n\n        elif option == ""hide_cmdline_win"":', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 220, 'coloffset': 8, 'linematch': 'elif option == ""hide_cmdline_win"":', 'context': '            new_conf_dict[""prompt_on_quit""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_prompt_on_quit()\n\n        elif option == ""hide_cmdline_win"":\n            new_conf_dict[""hide_cmdline_win""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_hide_cmdline_win()\n\n        elif option == ""current_stack_frame"":', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 225, 'coloffset': 8, 'linematch': 'elif option == ""current_stack_frame"":', 'context': '            new_conf_dict[""hide_cmdline_win""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_hide_cmdline_win()\n\n        elif option == ""current_stack_frame"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(new_conf_dict)\n                _update_current_stack_frame()\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 227, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '            _update_hide_cmdline_win()\n\n        elif option == ""current_stack_frame"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(new_conf_dict)\n                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 231, 'coloffset': 8, 'linematch': 'elif option == ""stringifier"":', 'context': '            if new_state:\n                conf_dict.update(new_conf_dict)\n                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 233, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '                _update_current_stack_frame()\n\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 234, 'coloffset': 16, 'linematch': 'if newvalue is None:', 'context': '\n        elif option == ""stringifier"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    lb.set_focus(lb_contents.index(stringifier_edit_list_item))\n                    return\n\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 241, 'coloffset': 8, 'linematch': 'elif option == ""default_variables_access_level"":', 'context': '\n                conf_dict.update(stringifier=newvalue)\n                _update_stringifier()\n\n        elif option == ""default_variables_access_level"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 243, 'coloffset': 12, 'linematch': 'if new_state:', 'context': '                _update_stringifier()\n\n        elif option == ""default_variables_access_level"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 247, 'coloffset': 8, 'linematch': 'elif option == ""wrap_variables"":', 'context': '            if new_state:\n                conf_dict.update(default_variables_access_level=newvalue)\n                _update_default_variables_access_level()\n\n        elif option == ""wrap_variables"":\n            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 168, 'coloffset': 4, 'linematch': 'def _update_theme():', 'context': '    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 172, 'coloffset': 4, 'linematch': 'def _update_line_numbers():', 'context': '    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 176, 'coloffset': 4, 'linematch': 'def _update_prompt_on_quit():', 'context': '    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 179, 'coloffset': 4, 'linematch': 'def _update_hide_cmdline_win():', 'context': '\n    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 182, 'coloffset': 4, 'linematch': 'def _update_current_stack_frame():', 'context': '\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 185, 'coloffset': 4, 'linematch': 'def _update_stringifier():', 'context': '\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 190, 'coloffset': 4, 'linematch': 'def _update_default_variables_access_level():', 'context': '        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 193, 'coloffset': 4, 'linematch': 'def _update_wrap_variables():', 'context': '\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 196, 'coloffset': 4, 'linematch': 'def _update_config(check_box, new_state, option_newvalue):', 'context': '\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 164, 'coloffset': 4, 'linematch': 'import urwid', 'context': '        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():\n        ui.setup_palette(ui.screen)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 166, 'coloffset': 4, 'linematch': 'old_conf_dict = conf_dict.copy()', 'context': '\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 168, 'coloffset': 4, 'linematch': 'def _update_theme():', 'context': '    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 169, 'coloffset': 8, 'linematch': 'ui.setup_palette(ui.screen)', 'context': '\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 170, 'coloffset': 8, 'linematch': 'ui.screen.clear()', 'context': '    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 172, 'coloffset': 4, 'linematch': 'def _update_line_numbers():', 'context': '    def _update_theme():\n        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 173, 'coloffset': 8, 'linematch': 'for sl in ui.source:', 'context': '        ui.setup_palette(ui.screen)\n        ui.screen.clear()\n\n    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 176, 'coloffset': 4, 'linematch': 'def _update_prompt_on_quit():', 'context': '    def _update_line_numbers():\n        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 177, 'coloffset': 8, 'linematch': 'pass', 'context': '        for sl in ui.source:\n            sl._invalidate()\n\n    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 179, 'coloffset': 4, 'linematch': 'def _update_hide_cmdline_win():', 'context': '\n    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 180, 'coloffset': 8, 'linematch': 'ui.update_cmdline_win()', 'context': '    def _update_prompt_on_quit():\n        pass\n\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 182, 'coloffset': 4, 'linematch': 'def _update_current_stack_frame():', 'context': '\n    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 183, 'coloffset': 8, 'linematch': 'ui.update_stack()', 'context': '    def _update_hide_cmdline_win():\n        ui.update_cmdline_win()\n\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 185, 'coloffset': 4, 'linematch': 'def _update_stringifier():', 'context': '\n    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 186, 'coloffset': 8, 'linematch': 'import pudb.var_view', 'context': '    def _update_current_stack_frame():\n        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():\n        ui.update_var_view()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 187, 'coloffset': 8, 'linematch': 'pudb.var_view.custom_stringifier_dict = {}', 'context': '        ui.update_stack()\n\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 188, 'coloffset': 8, 'linematch': 'ui.update_var_view()', 'context': '\n    def _update_stringifier():\n        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 190, 'coloffset': 4, 'linematch': 'def _update_default_variables_access_level():', 'context': '        import pudb.var_view\n        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 191, 'coloffset': 8, 'linematch': 'ui.update_var_view()', 'context': '        pudb.var_view.custom_stringifier_dict = {}\n        ui.update_var_view()\n\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 193, 'coloffset': 4, 'linematch': 'def _update_wrap_variables():', 'context': '\n    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 194, 'coloffset': 8, 'linematch': 'ui.update_var_view()', 'context': '    def _update_default_variables_access_level():\n        ui.update_var_view()\n\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 196, 'coloffset': 4, 'linematch': 'def _update_config(check_box, new_state, option_newvalue):', 'context': '\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 197, 'coloffset': 8, 'linematch': 'option, newvalue = option_newvalue', 'context': '    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 198, 'coloffset': 8, 'linematch': 'new_conf_dict = {option: newvalue}', 'context': '        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 199, 'coloffset': 8, 'linematch': 'if option == ""theme"":', 'context': '\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:\n                if newvalue is None:\n                    # Select the custom theme entry dialog\n                    lb.set_focus(lb_contents.index(theme_edit_list_item))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 252, 'coloffset': 4, 'linematch': 'heading = urwid.Text(""This is the preferences screen for PuDB. ""', 'context': '            new_conf_dict[""wrap_variables""] = not check_box.get_state()\n            conf_dict.update(new_conf_dict)\n            _update_wrap_variables()\n\n    heading = urwid.Text(""This is the preferences screen for PuDB. ""\n        ""Hit Ctrl-P at any time to get back to it.\\n\\n""\n        ""Configuration settings are saved in ""\n        ""$HOME/.config/pudb or $XDG_CONFIG_HOME/pudb ""\n        ""environment variable. If both variables are not set ""\n        ""configurations settings will not be saved.\\n"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 259, 'coloffset': 4, 'linematch': 'cb_line_numbers = urwid.CheckBox(""Show Line Numbers"",', 'context': '        ""$HOME/.config/pudb or $XDG_CONFIG_HOME/pudb ""\n        ""environment variable. If both variables are not set ""\n        ""configurations settings will not be saved.\\n"")\n\n    cb_line_numbers = urwid.CheckBox(""Show Line Numbers"",\n            bool(conf_dict[""line_numbers""]), on_state_change=_update_config,\n                user_data=(""line_numbers"", None))\n\n    cb_prompt_on_quit = urwid.CheckBox(""Prompt before quitting"",\n            bool(conf_dict[""prompt_on_quit""]), on_state_change=_update_config,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 263, 'coloffset': 4, 'linematch': 'cb_prompt_on_quit = urwid.CheckBox(""Prompt before quitting"",', 'context': '    cb_line_numbers = urwid.CheckBox(""Show Line Numbers"",\n            bool(conf_dict[""line_numbers""]), on_state_change=_update_config,\n                user_data=(""line_numbers"", None))\n\n    cb_prompt_on_quit = urwid.CheckBox(""Prompt before quitting"",\n            bool(conf_dict[""prompt_on_quit""]), on_state_change=_update_config,\n                user_data=(""prompt_on_quit"", None))\n\n    hide_cmdline_win = urwid.CheckBox(""Hide command line""\n            f""({conf_dict[\'hotkeys_toggle_cmdline_focus\']}) window ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 267, 'coloffset': 4, 'linematch': 'hide_cmdline_win = urwid.CheckBox(""Hide command line""', 'context': '    cb_prompt_on_quit = urwid.CheckBox(""Prompt before quitting"",\n            bool(conf_dict[""prompt_on_quit""]), on_state_change=_update_config,\n                user_data=(""prompt_on_quit"", None))\n\n    hide_cmdline_win = urwid.CheckBox(""Hide command line""\n            f""({conf_dict[\'hotkeys_toggle_cmdline_focus\']}) window ""\n                                      ""when not in use"",\n            bool(conf_dict[""hide_cmdline_win""]), on_state_change=_update_config,\n                user_data=(""hide_cmdline_win"", None))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 275, 'coloffset': 4, 'linematch': 'shell_info = urwid.Text(""This is the shell that will be ""', 'context': '                user_data=(""hide_cmdline_win"", None))\n\n    # {{{ shells\n\n    shell_info = urwid.Text(""This is the shell that will be ""\n            ""used when you hit \'!\'.\\n"")\n    shells = [""internal"", ""classic"", ""ipython"", ""ipython_kernel"", ""bpython"",\n              ""ptpython"", ""ptipython""]\n    known_shell = conf_dict[""shell""] in shells\n    shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 277, 'coloffset': 4, 'linematch': 'shells = [""internal"", ""classic"", ""ipython"", ""ipython_kernel"", ""bpython"",', 'context': '    # {{{ shells\n\n    shell_info = urwid.Text(""This is the shell that will be ""\n            ""used when you hit \'!\'.\\n"")\n    shells = [""internal"", ""classic"", ""ipython"", ""ipython_kernel"", ""bpython"",\n              ""ptpython"", ""ptipython""]\n    known_shell = conf_dict[""shell""] in shells\n    shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])\n    shell_edit_list_item = urwid.AttrMap(shell_edit, ""input"", ""focused input"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 279, 'coloffset': 4, 'linematch': 'known_shell = conf_dict[""shell""] in shells', 'context': '    shell_info = urwid.Text(""This is the shell that will be ""\n            ""used when you hit \'!\'.\\n"")\n    shells = [""internal"", ""classic"", ""ipython"", ""ipython_kernel"", ""bpython"",\n              ""ptpython"", ""ptipython""]\n    known_shell = conf_dict[""shell""] in shells\n    shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])\n    shell_edit_list_item = urwid.AttrMap(shell_edit, ""input"", ""focused input"")\n\n    shell_rb_group = []\n    shell_rbs = [', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 280, 'coloffset': 4, 'linematch': 'shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])', 'context': '            ""used when you hit \'!\'.\\n"")\n    shells = [""internal"", ""classic"", ""ipython"", ""ipython_kernel"", ""bpython"",\n              ""ptpython"", ""ptipython""]\n    known_shell = conf_dict[""shell""] in shells\n    shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])\n    shell_edit_list_item = urwid.AttrMap(shell_edit, ""input"", ""focused input"")\n\n    shell_rb_group = []\n    shell_rbs = [\n            urwid.RadioButton(shell_rb_group, name,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 281, 'coloffset': 4, 'linematch': 'shell_edit_list_item = urwid.AttrMap(shell_edit, ""input"", ""focused input"")', 'context': '    shells = [""internal"", ""classic"", ""ipython"", ""ipython_kernel"", ""bpython"",\n              ""ptpython"", ""ptipython""]\n    known_shell = conf_dict[""shell""] in shells\n    shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])\n    shell_edit_list_item = urwid.AttrMap(shell_edit, ""input"", ""focused input"")\n\n    shell_rb_group = []\n    shell_rbs = [\n            urwid.RadioButton(shell_rb_group, name,\n                conf_dict[""shell""] == name)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 283, 'coloffset': 4, 'linematch': 'shell_rb_group = []', 'context': '    known_shell = conf_dict[""shell""] in shells\n    shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])\n    shell_edit_list_item = urwid.AttrMap(shell_edit, ""input"", ""focused input"")\n\n    shell_rb_group = []\n    shell_rbs = [\n            urwid.RadioButton(shell_rb_group, name,\n                conf_dict[""shell""] == name)\n            for name in shells]+[\n                urwid.RadioButton(shell_rb_group, ""Custom:"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 284, 'coloffset': 4, 'linematch': 'shell_rbs = [', 'context': '    shell_edit = urwid.Edit(edit_text=conf_dict[""custom_shell""])\n    shell_edit_list_item = urwid.AttrMap(shell_edit, ""input"", ""focused input"")\n\n    shell_rb_group = []\n    shell_rbs = [\n            urwid.RadioButton(shell_rb_group, name,\n                conf_dict[""shell""] == name)\n            for name in shells]+[\n                urwid.RadioButton(shell_rb_group, ""Custom:"",\n                not known_shell, on_state_change=_update_config,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 305, 'coloffset': 4, 'linematch': 'from pudb.themes import THEMES', 'context': '    # }}}\n\n    # {{{ themes\n\n    from pudb.themes import THEMES\n\n    known_theme = conf_dict[""theme""] in THEMES\n\n    theme_rb_group = []\n    theme_edit = urwid.Edit(edit_text=conf_dict[""custom_theme""])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 307, 'coloffset': 4, 'linematch': 'known_theme = conf_dict[""theme""] in THEMES', 'context': '    # {{{ themes\n\n    from pudb.themes import THEMES\n\n    known_theme = conf_dict[""theme""] in THEMES\n\n    theme_rb_group = []\n    theme_edit = urwid.Edit(edit_text=conf_dict[""custom_theme""])\n    theme_edit_list_item = urwid.AttrMap(theme_edit, ""input"", ""focused input"")\n    theme_rbs = [', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 309, 'coloffset': 4, 'linematch': 'theme_rb_group = []', 'context': '    from pudb.themes import THEMES\n\n    known_theme = conf_dict[""theme""] in THEMES\n\n    theme_rb_group = []\n    theme_edit = urwid.Edit(edit_text=conf_dict[""custom_theme""])\n    theme_edit_list_item = urwid.AttrMap(theme_edit, ""input"", ""focused input"")\n    theme_rbs = [\n            urwid.RadioButton(theme_rb_group, name,\n                conf_dict[""theme""] == name, on_state_change=_update_config,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 310, 'coloffset': 4, 'linematch': 'theme_edit = urwid.Edit(edit_text=conf_dict[""custom_theme""])', 'context': '\n    known_theme = conf_dict[""theme""] in THEMES\n\n    theme_rb_group = []\n    theme_edit = urwid.Edit(edit_text=conf_dict[""custom_theme""])\n    theme_edit_list_item = urwid.AttrMap(theme_edit, ""input"", ""focused input"")\n    theme_rbs = [\n            urwid.RadioButton(theme_rb_group, name,\n                conf_dict[""theme""] == name, on_state_change=_update_config,\n                user_data=(""theme"", name))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 311, 'coloffset': 4, 'linematch': 'theme_edit_list_item = urwid.AttrMap(theme_edit, ""input"", ""focused input"")', 'context': '    known_theme = conf_dict[""theme""] in THEMES\n\n    theme_rb_group = []\n    theme_edit = urwid.Edit(edit_text=conf_dict[""custom_theme""])\n    theme_edit_list_item = urwid.AttrMap(theme_edit, ""input"", ""focused input"")\n    theme_rbs = [\n            urwid.RadioButton(theme_rb_group, name,\n                conf_dict[""theme""] == name, on_state_change=_update_config,\n                user_data=(""theme"", name))\n            for name in THEMES]+[', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 312, 'coloffset': 4, 'linematch': 'theme_rbs = [', 'context': '\n    theme_rb_group = []\n    theme_edit = urwid.Edit(edit_text=conf_dict[""custom_theme""])\n    theme_edit_list_item = urwid.AttrMap(theme_edit, ""input"", ""focused input"")\n    theme_rbs = [\n            urwid.RadioButton(theme_rb_group, name,\n                conf_dict[""theme""] == name, on_state_change=_update_config,\n                user_data=(""theme"", name))\n            for name in THEMES]+[\n                urwid.RadioButton(theme_rb_group, ""Custom:"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 332, 'coloffset': 4, 'linematch': 'stack_rb_group = []', 'context': '    # }}}\n\n    # {{{ stack\n\n    stack_rb_group = []\n    stack_opts = [""top"", ""bottom""]\n    stack_info = urwid.Text(""Show the current stack frame at the\\n"")\n    stack_rbs = [\n            urwid.RadioButton(stack_rb_group, name,\n                conf_dict[""current_stack_frame""] == name,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 333, 'coloffset': 4, 'linematch': 'stack_opts = [""top"", ""bottom""]', 'context': '\n    # {{{ stack\n\n    stack_rb_group = []\n    stack_opts = [""top"", ""bottom""]\n    stack_info = urwid.Text(""Show the current stack frame at the\\n"")\n    stack_rbs = [\n            urwid.RadioButton(stack_rb_group, name,\n                conf_dict[""current_stack_frame""] == name,\n                on_state_change=_update_config,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'stack_info = urwid.Text(""Show the current stack frame at the\\n"")', 'context': '    # {{{ stack\n\n    stack_rb_group = []\n    stack_opts = [""top"", ""bottom""]\n    stack_info = urwid.Text(""Show the current stack frame at the\\n"")\n    stack_rbs = [\n            urwid.RadioButton(stack_rb_group, name,\n                conf_dict[""current_stack_frame""] == name,\n                on_state_change=_update_config,\n                user_data=(""current_stack_frame"", name))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 335, 'coloffset': 4, 'linematch': 'stack_rbs = [', 'context': '\n    stack_rb_group = []\n    stack_opts = [""top"", ""bottom""]\n    stack_info = urwid.Text(""Show the current stack frame at the\\n"")\n    stack_rbs = [\n            urwid.RadioButton(stack_rb_group, name,\n                conf_dict[""current_stack_frame""] == name,\n                on_state_change=_update_config,\n                user_data=(""current_stack_frame"", name))\n            for name in stack_opts', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 347, 'coloffset': 4, 'linematch': 'from pudb.var_view import STRINGIFIERS', 'context': '    # }}}\n\n    # {{{ stringifier\n\n    from pudb.var_view import STRINGIFIERS\n    stringifier_opts = list(STRINGIFIERS.keys())\n    known_stringifier = conf_dict[""stringifier""] in stringifier_opts\n    stringifier_rb_group = []\n    stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])\n    stringifier_info = urwid.Text(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 348, 'coloffset': 4, 'linematch': 'stringifier_opts = list(STRINGIFIERS.keys())', 'context': '\n    # {{{ stringifier\n\n    from pudb.var_view import STRINGIFIERS\n    stringifier_opts = list(STRINGIFIERS.keys())\n    known_stringifier = conf_dict[""stringifier""] in stringifier_opts\n    stringifier_rb_group = []\n    stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])\n    stringifier_info = urwid.Text(\n        ""This is the default function that will be called on variables in the ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 349, 'coloffset': 4, 'linematch': 'known_stringifier = conf_dict[""stringifier""] in stringifier_opts', 'context': '    # {{{ stringifier\n\n    from pudb.var_view import STRINGIFIERS\n    stringifier_opts = list(STRINGIFIERS.keys())\n    known_stringifier = conf_dict[""stringifier""] in stringifier_opts\n    stringifier_rb_group = []\n    stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])\n    stringifier_info = urwid.Text(\n        ""This is the default function that will be called on variables in the ""\n        ""variables list. You can also change this on a per-variable basis by ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 350, 'coloffset': 4, 'linematch': 'stringifier_rb_group = []', 'context': '\n    from pudb.var_view import STRINGIFIERS\n    stringifier_opts = list(STRINGIFIERS.keys())\n    known_stringifier = conf_dict[""stringifier""] in stringifier_opts\n    stringifier_rb_group = []\n    stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])\n    stringifier_info = urwid.Text(\n        ""This is the default function that will be called on variables in the ""\n        ""variables list. You can also change this on a per-variable basis by ""\n        ""selecting a variable and typing \'e\' to edit the variable\'s display ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 351, 'coloffset': 4, 'linematch': 'stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])', 'context': '    from pudb.var_view import STRINGIFIERS\n    stringifier_opts = list(STRINGIFIERS.keys())\n    known_stringifier = conf_dict[""stringifier""] in stringifier_opts\n    stringifier_rb_group = []\n    stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])\n    stringifier_info = urwid.Text(\n        ""This is the default function that will be called on variables in the ""\n        ""variables list. You can also change this on a per-variable basis by ""\n        ""selecting a variable and typing \'e\' to edit the variable\'s display ""\n        ""settings, or by typing one of d/t/r/s/i/c. Note that str and repr will ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 352, 'coloffset': 4, 'linematch': 'stringifier_info = urwid.Text(', 'context': '    stringifier_opts = list(STRINGIFIERS.keys())\n    known_stringifier = conf_dict[""stringifier""] in stringifier_opts\n    stringifier_rb_group = []\n    stringifier_edit = urwid.Edit(edit_text=conf_dict[""custom_stringifier""])\n    stringifier_info = urwid.Text(\n        ""This is the default function that will be called on variables in the ""\n        ""variables list. You can also change this on a per-variable basis by ""\n        ""selecting a variable and typing \'e\' to edit the variable\'s display ""\n        ""settings, or by typing one of d/t/r/s/i/c. Note that str and repr will ""\n        ""be slower than the default, type, or id stringifiers.\\n"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 358, 'coloffset': 4, 'linematch': 'stringifier_edit_list_item = urwid.AttrMap(stringifier_edit,', 'context': '        ""variables list. You can also change this on a per-variable basis by ""\n        ""selecting a variable and typing \'e\' to edit the variable\'s display ""\n        ""settings, or by typing one of d/t/r/s/i/c. Note that str and repr will ""\n        ""be slower than the default, type, or id stringifiers.\\n"")\n    stringifier_edit_list_item = urwid.AttrMap(stringifier_edit,\n                                               ""input"", ""focused input"")\n    stringifier_rbs = [\n            urwid.RadioButton(stringifier_rb_group, name,\n                conf_dict[""stringifier""] == name,\n                on_state_change=_update_config,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 360, 'coloffset': 4, 'linematch': 'stringifier_rbs = [', 'context': '        ""settings, or by typing one of d/t/r/s/i/c. Note that str and repr will ""\n        ""be slower than the default, type, or id stringifiers.\\n"")\n    stringifier_edit_list_item = urwid.AttrMap(stringifier_edit,\n                                               ""input"", ""focused input"")\n    stringifier_rbs = [\n            urwid.RadioButton(stringifier_rb_group, name,\n                conf_dict[""stringifier""] == name,\n                on_state_change=_update_config,\n                user_data=(""stringifier"", name))\n            for name in stringifier_opts', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 386, 'coloffset': 4, 'linematch': 'default_variables_access_level_opts = [""public"", ""private"", ""all""]', 'context': '    # }}}\n\n    # {{{ variables access level\n\n    default_variables_access_level_opts = [""public"", ""private"", ""all""]\n    default_variables_access_level_rb_group = []\n    default_variables_access_level_info = urwid.Text(\n            ""Set the default attribute visibility ""\n            ""of variables in the variables list.\\n""\n            ""\\nNote that you can change this option on ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 387, 'coloffset': 4, 'linematch': 'default_variables_access_level_rb_group = []', 'context': '\n    # {{{ variables access level\n\n    default_variables_access_level_opts = [""public"", ""private"", ""all""]\n    default_variables_access_level_rb_group = []\n    default_variables_access_level_info = urwid.Text(\n            ""Set the default attribute visibility ""\n            ""of variables in the variables list.\\n""\n            ""\\nNote that you can change this option on ""\n            ""a per-variable basis by selecting the ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 388, 'coloffset': 4, 'linematch': 'default_variables_access_level_info = urwid.Text(', 'context': '    # {{{ variables access level\n\n    default_variables_access_level_opts = [""public"", ""private"", ""all""]\n    default_variables_access_level_rb_group = []\n    default_variables_access_level_info = urwid.Text(\n            ""Set the default attribute visibility ""\n            ""of variables in the variables list.\\n""\n            ""\\nNote that you can change this option on ""\n            ""a per-variable basis by selecting the ""\n            ""variable and pressing \'*\'."")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 394, 'coloffset': 4, 'linematch': 'default_variables_access_level_rbs = [', 'context': '            ""of variables in the variables list.\\n""\n            ""\\nNote that you can change this option on ""\n            ""a per-variable basis by selecting the ""\n            ""variable and pressing \'*\'."")\n    default_variables_access_level_rbs = [\n            urwid.RadioButton(default_variables_access_level_rb_group, name,\n                conf_dict[""default_variables_access_level""] == name,\n                on_state_change=_update_config,\n                user_data=(""default_variables_access_level"", name))\n            for name in default_variables_access_level_opts', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 406, 'coloffset': 4, 'linematch': 'cb_wrap_variables = urwid.CheckBox(""Wrap variables"",', 'context': '    # }}}\n\n    # {{{ wrap variables\n\n    cb_wrap_variables = urwid.CheckBox(""Wrap variables"",\n            bool(conf_dict[""wrap_variables""]), on_state_change=_update_config,\n                user_data=(""wrap_variables"", None))\n\n    wrap_variables_info = urwid.Text(""\\nNote that you can change this option on ""\n                                     ""a per-variable basis by selecting the ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 410, 'coloffset': 4, 'linematch': 'wrap_variables_info = urwid.Text(""\\nNote that you can change this option on ""', 'context': '    cb_wrap_variables = urwid.CheckBox(""Wrap variables"",\n            bool(conf_dict[""wrap_variables""]), on_state_change=_update_config,\n                user_data=(""wrap_variables"", None))\n\n    wrap_variables_info = urwid.Text(""\\nNote that you can change this option on ""\n                                     ""a per-variable basis by selecting the ""\n                                     ""variable and pressing \'w\'."")\n\n    # }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 418, 'coloffset': 4, 'linematch': 'display_info = urwid.Text(""What driver is used to talk to your terminal. ""', 'context': '    # }}}\n\n    # {{{ display\n\n    display_info = urwid.Text(""What driver is used to talk to your terminal. ""\n            ""\'raw\' has the most features (colors and highlighting), ""\n            ""but is only correct for ""\n            ""XTerm and terminals like it. \'curses\' ""\n            ""has fewer ""\n            ""features, but it will work with just about any terminal. \'auto\' ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 428, 'coloffset': 4, 'linematch': 'displays = [""auto"", ""raw"", ""curses""]', 'context': '            ""will attempt to pick between the two based on availability and ""\n            ""the $TERM environment variable.\\n\\n""\n            ""Changing this setting requires a restart of PuDB."")\n\n    displays = [""auto"", ""raw"", ""curses""]\n\n    display_rb_group = []\n    display_rbs = [\n            urwid.RadioButton(display_rb_group, name,\n                conf_dict[""display""] == name)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 430, 'coloffset': 4, 'linematch': 'display_rb_group = []', 'context': '            ""Changing this setting requires a restart of PuDB."")\n\n    displays = [""auto"", ""raw"", ""curses""]\n\n    display_rb_group = []\n    display_rbs = [\n            urwid.RadioButton(display_rb_group, name,\n                conf_dict[""display""] == name)\n            for name in displays]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 431, 'coloffset': 4, 'linematch': 'display_rbs = [', 'context': '\n    displays = [""auto"", ""raw"", ""curses""]\n\n    display_rb_group = []\n    display_rbs = [\n            urwid.RadioButton(display_rb_group, name,\n                conf_dict[""display""] == name)\n            for name in displays]\n\n    # }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 438, 'coloffset': 4, 'linematch': 'lb_contents = (', 'context': '            for name in displays]\n\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 474, 'coloffset': 4, 'linematch': 'lb = urwid.ListBox(urwid.SimpleListWalker(lb_contents))', 'context': '            + [display_info]\n            + display_rbs\n            )\n\n    lb = urwid.ListBox(urwid.SimpleListWalker(lb_contents))\n\n    if ui.dialog(lb,         [\n            (""OK"", True),\n            (""Cancel"", False),\n            ],', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 476, 'coloffset': 4, 'linematch': 'if ui.dialog(lb,         [', 'context': '            )\n\n    lb = urwid.ListBox(urwid.SimpleListWalker(lb_contents))\n\n    if ui.dialog(lb,         [\n            (""OK"", True),\n            (""Cancel"", False),\n            ],\n            title=""Edit Preferences""):\n        # Only update the settings here that instant-apply (above) doesn\'t take', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 439, 'coloffset': 12, 'linematch': '[heading]', 'context': '\n    # }}}\n\n    lb_contents = (\n            [heading]\n            + [urwid.AttrMap(urwid.Text(""General:\\n""), ""group head"")]\n            + [cb_line_numbers]\n            + [cb_prompt_on_quit]\n            + [hide_cmdline_win]\n', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[count(./body/*) > 50]', 'check_id': 'F026', 'check_name': 'method-too-long'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 196, 'coloffset': 4, 'linematch': 'def _update_config(check_box, new_state, option_newvalue):', 'context': '\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 196, 'coloffset': 4, 'linematch': 'def _update_config(check_box, new_state, option_newvalue):', 'context': '\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[count(./body/*) > 50]', 'check_id': 'P003', 'check_name': 'long-method'}, {'lineno': 163, 'coloffset': 0, 'linematch': 'def edit_config(ui, conf_dict):', 'context': '    except Exception:\n        settings_log.exception(""Failed to save config"")\n\n\ndef edit_config(ui, conf_dict):\n    import urwid\n\n    old_conf_dict = conf_dict.copy()\n\n    def _update_theme():', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}, {'lineno': 196, 'coloffset': 4, 'linematch': 'def _update_config(check_box, new_state, option_newvalue):', 'context': '\n    def _update_wrap_variables():\n        ui.update_var_view()\n\n    def _update_config(check_box, new_state, option_newvalue):\n        option, newvalue = option_newvalue\n        new_conf_dict = {option: newvalue}\n        if option == ""theme"":\n            # only activate if the new state of the radio button is \'on\'\n            if new_state:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3580', 'line': 166, 'description': [')'], 'failure': []}, {'name': 'Mutant #3581', 'line': 175, 'description': ['        self.id_path_to_iinfo = {}'], 'failure': []}, {'name': 'Mutant #3582', 'line': 176, 'description': ['        self.watches = []'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -173,7 +173,7 @@\n class FrameVarInfo:\n     def __init__(self):\n         self.id_path_to_iinfo = {}\n-        self.watches = []\n+        self.watches = None\n \n     def get_inspect_info(self, id_path, read_only):\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3583', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': []}, {'name': 'Mutant #3584', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -189,7 +189,7 @@\n         # Do not globalize: cyclic import\n         from pudb.debugger import CONFIG\n \n-        self.show_detail = False\n+        self.show_detail = None\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3585', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': []}, {'name': 'Mutant #3586', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -190,7 +190,7 @@\n         from pudb.debugger import CONFIG\n \n         self.show_detail = False\n-        self.display_type = CONFIG[""stringifier""]\n+        self.display_type = None\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3587', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = True\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3588', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = None\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3589', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = True\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3590', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = None\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3591', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': []}, {'name': 'Mutant #3592', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -193,7 +193,7 @@\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n-        self.access_level = CONFIG[""default_variables_access_level""]\n+        self.access_level = None\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3593', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = True\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3594', 'line': 197, 'description': ['        self.show_methods = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -194,7 +194,7 @@\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n-        self.show_methods = False\n+        self.show_methods = None\n         self.wrap = CONFIG[""wrap_variables""]\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3595', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': []}, {'name': 'Mutant #3596', 'line': 198, 'description': ['        self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -195,7 +195,7 @@\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n-        self.wrap = CONFIG[""wrap_variables""]\n+        self.wrap = None\n \n \n class WatchExpression:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3597', 'line': 203, 'description': ['        self.expression = expression'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -200,7 +200,7 @@\n \n class WatchExpression:\n     def __init__(self, expression):\n-        self.expression = expression\n+        self.expression = None\n \n \n class WatchEvalError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3598', 'line': 208, 'description': ['        return ""<error>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -205,7 +205,7 @@\n \n class WatchEvalError:\n     def __str__(self):\n-        return ""<error>""\n+        return ""XX<error>XX""\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3599', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -213,7 +213,7 @@\n # {{{ widget\n \n class VariableWidget(urwid.FlowWidget):\n-    PREFIX = ""| ""\n+    PREFIX = ""XX| XX""\n \n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3600', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': []}, {'name': 'Mutant #3601', 'line': 221, 'description': ['        self.parent = parent'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -218,7 +218,7 @@\n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n-        self.parent = parent\n+        self.parent = None\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3602', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 1 if parent is None else parent.nesting_level + 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3603', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3604', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level - 1\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3605', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -219,7 +219,7 @@\n             attr_prefix=None, watch_expr=None, iinfo=None):\n         assert isinstance(id_path, str)\n         self.parent = parent\n-        self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n+        self.nesting_level = 0 if parent is None else parent.nesting_level + 2\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3606', 'line': 222, 'description': ['        self.nesting_level = 0 if parent is None else parent.nesting_level + 1'], 'failure': []}, {'name': 'Mutant #3607', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': []}, {'name': 'Mutant #3608', 'line': 223, 'description': ['        self.prefix = self.PREFIX * self.nesting_level'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -220,7 +220,7 @@\n         assert isinstance(id_path, str)\n         self.parent = parent\n         self.nesting_level = 0 if parent is None else parent.nesting_level + 1\n-        self.prefix = self.PREFIX * self.nesting_level\n+        self.prefix = None\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3609', 'line': 224, 'description': ['        self.var_label = var_label'], 'failure': []}, {'name': 'Mutant #3610', 'line': 225, 'description': ['        self.value_str = value_str'], 'failure': []}, {'name': 'Mutant #3611', 'line': 226, 'description': ['        self.id_path = id_path'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -223,7 +223,7 @@\n         self.prefix = self.PREFIX * self.nesting_level\n         self.var_label = var_label\n         self.value_str = value_str\n-        self.id_path = id_path\n+        self.id_path = None\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3612', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix or ""XXvarXX""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3613', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = attr_prefix and ""var""\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3614', 'line': 227, 'description': ['        self.attr_prefix = attr_prefix or ""var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -224,7 +224,7 @@\n         self.var_label = var_label\n         self.value_str = value_str\n         self.id_path = id_path\n-        self.attr_prefix = attr_prefix or ""var""\n+        self.attr_prefix = None\n         self.watch_expr = watch_expr\n         if iinfo is None:\n             # Do not globalize: cyclic import\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3615', 'line': 228, 'description': ['        self.watch_expr = watch_expr'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -225,7 +225,7 @@\n         self.value_str = value_str\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n-        self.watch_expr = watch_expr\n+        self.watch_expr = None\n         if iinfo is None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3616', 'line': 229, 'description': ['        if iinfo is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -226,7 +226,7 @@\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n-        if iinfo is None:\n+        if iinfo is not None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3617', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = CONFIG[""XXwrap_variablesXX""]\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3618', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = None\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3619', 'line': 235, 'description': ['            self.wrap = iinfo.wrap'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -232,7 +232,7 @@\n \n             self.wrap = CONFIG[""wrap_variables""]\n         else:\n-            self.wrap = iinfo.wrap\n+            self.wrap = None\n \n     def __str__(self):\n         return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3620', 'line': 238, 'description': ['        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -235,7 +235,7 @@\n             self.wrap = iinfo.wrap\n \n     def __str__(self):\n-        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n+        return (""XXVariableWidget: {value_str}, level {nesting_level}, at {id_path}XX""\n                 .format(\n                     value_str=self.value_str,\n                     nesting_level=self.nesting_level,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3621', 'line': 246, 'description': ['        return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -243,7 +243,7 @@\n                 ))\n \n     def selectable(self):\n-        return True\n+        return False\n \n     def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3622', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol = len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3623', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol += len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3624', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3625', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3626', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = None\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3630', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label - "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3631', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + ""XX: XX"" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3632', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + "": "" - value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3633', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = None\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3634', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = self.prefix - alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3635', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = None\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3636', 'line': 260, 'description': ['        if not alltext[maxcol:]:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -257,7 +257,7 @@\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n-        if not alltext[maxcol:]:\n+        if  alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3637', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) + maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3638', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol + 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3639', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 3)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3640', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = None\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3659', 'line': 267, 'description': ['    def rows(self, size: Tuple[int], focus: bool = False) -> int:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -264,7 +264,7 @@\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n-    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n+    def rows(self, size: Tuple[int], focus: bool = True) -> int:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3660', 'line': 274, 'description': ['            return len(self._get_wrapped_lines(size[0]))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -271,7 +271,7 @@\n         :return: The number of rows required for this widget\n         """"""\n         if self.wrap:\n-            return len(self._get_wrapped_lines(size[0]))\n+            return len(self._get_wrapped_lines(size[1]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3666', 'line': 281, 'description': ['    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -278,7 +278,7 @@\n         else:\n             return 1\n \n-    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n+    def render(self, size: Tuple[int], focus: bool = True) -> urwid.Canvas:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3667', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = size[1]\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3668', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = None\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3669', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""XXfocused XX""+self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3670', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""-self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3671', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix-"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3672', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix+""XX XX""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3673', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = None\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3674', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix-"" ""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3675', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix+""XX XX""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3676', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = None\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3677', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3678', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3679', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = None\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3680', 'line': 299, 'description': ['            text = self._get_wrapped_lines(maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -296,7 +296,7 @@\n         var_label = self.var_label or """"\n \n         if self.wrap:\n-            text = self._get_wrapped_lines(maxcol)\n+            text = None\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3681', 'line': 302, 'description': ['                    text_width(var_label[maxcol:]), maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -298,8 +298,7 @@\n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n \n-            extralabel_full, extralabel_rem = divmod(\n-                    text_width(var_label[maxcol:]), maxcol)\n+            extralabel_full, extralabel_rem = None\n             totallen = sum(text_width(i) for i in text)\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3682', 'line': 303, 'description': ['            totallen = sum(text_width(i) for i in text)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -300,7 +300,7 @@\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n-            totallen = sum(text_width(i) for i in text)\n+            totallen = None\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3683', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    - (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3684', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) - 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3685', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) + 3)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3686', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    / (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3687', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    * (extralabel_full - bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3688', 'line': 310, 'description': ['                    + text_width(var_label)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -307,7 +307,7 @@\n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n-                    + text_width(var_label)\n+                    - text_width(var_label)\n \n                     + 1  # for "":""\n                     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3689', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    - 1  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3690', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    + 2  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3691', 'line': 313, 'description': ['                    )'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -301,16 +301,7 @@\n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n             totallen = sum(text_width(i) for i in text)\n-            labellen = (\n-                    len(self.prefix)  # Padding of first line\n-\n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n-\n-                    + text_width(var_label)\n-\n-                    + 1  # for "":""\n-                    )\n+            labellen = None\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3692', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx-""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3693', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""XXlabelXX"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3694', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx-""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3695', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""XXvalueXX"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3696', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen + labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3697', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = None\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3698', 'line': 318, 'description': ['            fullcols, rem = divmod(totallen, maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -315,7 +315,7 @@\n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n-            fullcols, rem = divmod(totallen, maxcol)\n+            fullcols, rem = None\n \n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3699', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i/maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3700', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i - 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3701', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 2)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3702', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 1)/maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3703', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -318,7 +318,7 @@\n             fullcols, rem = divmod(totallen, maxcol)\n \n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+                for i in range(fullcols - bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3704', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,8 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+            attr = None\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3705', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx-""value"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3706', 'line': 323, 'description': ['            return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -320,7 +320,7 @@\n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n-            return make_canvas(text, attr, maxcol, apfx+""value"")\n+            return make_canvas(text, attr, maxcol, apfx+""XXvalueXX"")\n \n         lprefix = len(self.prefix)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3707', 'line': 325, 'description': ['        lprefix = len(self.prefix)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -322,7 +322,7 @@\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n-        lprefix = len(self.prefix)\n+        lprefix = None\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3708', 'line': 327, 'description': ['        if self.value_str is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -324,7 +324,7 @@\n \n         lprefix = len(self.prefix)\n \n-        if self.value_str is not None:\n+        if self.value_str is  None:\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3709', 'line': 328, 'description': ['            if self.var_label is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -325,7 +325,7 @@\n         lprefix = len(self.prefix)\n \n         if self.value_str is not None:\n-            if self.var_label is not None:\n+            if self.var_label is  None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3710', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) >= 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3711', 'line': 329, 'description': ['                if len(self._get_wrapped_lines(maxcol)) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -326,7 +326,7 @@\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n-                if len(self._get_wrapped_lines(maxcol)) > 1:\n+                if len(self._get_wrapped_lines(maxcol)) > 2:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3712', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix - self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3713', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label - "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3714', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label + ""XX:XX"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3715', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix-""  "" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3716', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""XX  XX"" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3717', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""  "" - self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3718', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,8 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                    text = None\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3719', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx-""label"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3720', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""XXlabelXX"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3721', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""label"", lprefix-text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3722', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx-""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3723', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""XXvalueXX"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3724', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix-3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3725', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+4+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3726', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+3-text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3727', 'line': 337, 'description': ['                        ]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -331,10 +331,7 @@\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n-                    attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n-                        ]\n+                    attr = None\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3728', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix - self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3729', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label - "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3730', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + ""XX: XX"" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3731', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + "": "" - self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3732', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = None\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3733', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx-""label"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3734', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""XXlabelXX"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3735', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix-text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3736', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)-1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3737', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)+2),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3738', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx-""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3739', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""XXvalueXX"", text_width(self.value_str)+1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3740', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""value"", text_width(self.value_str)-1),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3741', 'line': 343, 'description': ['                            (apfx+""value"", text_width(self.value_str)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -340,7 +340,7 @@\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n+                            (apfx+""value"", text_width(self.value_str)+2),\n                             ]]\n             else:\n                 text = [self.prefix + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3742', 'line': 344, 'description': ['                            ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -338,10 +338,7 @@\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n-                    attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n-                            (apfx+""value"", text_width(self.value_str)+1),\n-                            ]]\n+                    attr = None\n             else:\n                 text = [self.prefix + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3743', 'line': 346, 'description': ['                text = [self.prefix + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -343,7 +343,7 @@\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n-                text = [self.prefix + self.value_str]\n+                text = [self.prefix - self.value_str]\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3744', 'line': 346, 'description': ['                text = [self.prefix + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -343,7 +343,7 @@\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n-                text = [self.prefix + self.value_str]\n+                text = None\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3745', 'line': 349, 'description': ['                        (apfx+""label"", len(self.prefix)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -346,7 +346,7 @@\n                 text = [self.prefix + self.value_str]\n \n                 attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n+                        (apfx-""label"", len(self.prefix)),\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3746', 'line': 349, 'description': ['                        (apfx+""label"", len(self.prefix)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -346,7 +346,7 @@\n                 text = [self.prefix + self.value_str]\n \n                 attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n+                        (apfx+""XXlabelXX"", len(self.prefix)),\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3747', 'line': 350, 'description': ['                        (apfx+""value"", text_width(self.value_str)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -347,7 +347,7 @@\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n+                        (apfx-""value"", text_width(self.value_str)),\n                         ]]\n         else:\n             text = [self.prefix + self.var_label]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3748', 'line': 350, 'description': ['                        (apfx+""value"", text_width(self.value_str)),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -347,7 +347,7 @@\n \n                 attr = [[\n                         (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n+                        (apfx+""XXvalueXX"", text_width(self.value_str)),\n                         ]]\n         else:\n             text = [self.prefix + self.var_label]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3749', 'line': 351, 'description': ['                        ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -345,10 +345,7 @@\n             else:\n                 text = [self.prefix + self.value_str]\n \n-                attr = [[\n-                        (apfx+""label"", len(self.prefix)),\n-                        (apfx+""value"", text_width(self.value_str)),\n-                        ]]\n+                attr = None\n         else:\n             text = [self.prefix + self.var_label]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3750', 'line': 353, 'description': ['            text = [self.prefix + self.var_label]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -350,7 +350,7 @@\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n-            text = [self.prefix + self.var_label]\n+            text = [self.prefix - self.var_label]\n \n             attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3751', 'line': 353, 'description': ['            text = [self.prefix + self.var_label]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -350,7 +350,7 @@\n                         (apfx+""value"", text_width(self.value_str)),\n                         ]]\n         else:\n-            text = [self.prefix + self.var_label]\n+            text = None\n \n             attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3752', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx-""label"", lprefix + text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3753', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx+""XXlabelXX"", lprefix + text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3754', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = [[(apfx+""label"", lprefix - text_width(self.var_label)), ]]\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3755', 'line': 355, 'description': ['            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -352,7 +352,7 @@\n         else:\n             text = [self.prefix + self.var_label]\n \n-            attr = [[(apfx+""label"", lprefix + text_width(self.var_label)), ]]\n+            attr = None\n \n         # Ellipses to show text was cut off\n         # encoding = urwid.util.detected_encoding\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3756', 'line': 361, 'description': ['            if text_width(text[i]) > maxcol:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -358,7 +358,7 @@\n         # encoding = urwid.util.detected_encoding\n \n         for i in range(len(text)):\n-            if text_width(text[i]) > maxcol:\n+            if text_width(text[i]) >= maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3757', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol+3] + ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3758', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol-4] + ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3759', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol-3] - ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3760', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol-3] + ""XX...XX""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3761', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = None\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3762', 'line': 364, 'description': ['        return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -361,7 +361,7 @@\n             if text_width(text[i]) > maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n-        return make_canvas(text, attr, maxcol, apfx+""value"")\n+        return make_canvas(text, attr, maxcol, apfx-""value"")\n \n     def keypress(self, size, key):\n         return key\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3763', 'line': 364, 'description': ['        return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -361,7 +361,7 @@\n             if text_width(text[i]) > maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n-        return make_canvas(text, attr, maxcol, apfx+""value"")\n+        return make_canvas(text, attr, maxcol, apfx+""XXvalueXX"")\n \n     def keypress(self, size, key):\n         return key\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3764', 'line': 380, 'description': [')'], 'failure': []}, {'name': 'Mutant #3765', 'line': 389, 'description': ['        ""BuiltinFunctionType BuiltinMethodType  ClassType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -386,7 +386,7 @@\n     import types\n \n     return tuple(getattr(types, s) for s in\n-        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n+        ""XXBuiltinFunctionType BuiltinMethodType  ClassType XX""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3766', 'line': 390, 'description': ['        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -387,7 +387,7 @@\n \n     return tuple(getattr(types, s) for s in\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n-        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n+        ""XXCodeType FileType FrameType FunctionType GetSetDescriptorType XX""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3767', 'line': 391, 'description': ['        ""LambdaType MemberDescriptorType MethodType ModuleType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -388,7 +388,7 @@\n     return tuple(getattr(types, s) for s in\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n-        ""LambdaType MemberDescriptorType MethodType ModuleType ""\n+        ""XXLambdaType MemberDescriptorType MethodType ModuleType XX""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3768', 'line': 392, 'description': ['        ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -389,7 +389,7 @@\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n-        ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n+        ""XXSliceType TypeType TracebackType UnboundMethodType XRangeTypeXX"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3769', 'line': 393, 'description': ['        if hasattr(types, s)) + (WatchEvalError,)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -390,7 +390,7 @@\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n-        if hasattr(types, s)) + (WatchEvalError,)\n+        if hasattr(types, s)) - (WatchEvalError,)\n \n \n STR_SAFE_TYPES = get_str_safe_types()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3770', 'line': 396, 'description': ['STR_SAFE_TYPES = get_str_safe_types()'], 'failure': []}, {'name': 'Mutant #3771', 'line': 405, 'description': ['    if HAVE_NUMPY and isinstance(value, numpy.ndarray):'], 'failure': []}, {'name': 'Mutant #3772', 'line': 406, 'description': ['        return ""%s(%s) %s"" % ('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -403,7 +403,7 @@\n         return repr(value)\n \n     if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n-        return ""%s(%s) %s"" % (\n+        return ""XX%s(%s) %sXX"" % (\n                 type(value).__name__, value.dtype, value.shape)\n \n     elif HAVE_NUMPY and isinstance(value, numpy.number):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3773', 'line': 406, 'description': ['        return ""%s(%s) %s"" % ('], 'failure': []}, {'name': 'Mutant #3774', 'line': 409, 'description': ['    elif HAVE_NUMPY and isinstance(value, numpy.number):'], 'failure': []}, {'name': 'Mutant #3775', 'line': 410, 'description': ['        return str(f""{value} ({value.dtype})"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -407,7 +407,7 @@\n                 type(value).__name__, value.dtype, value.shape)\n \n     elif HAVE_NUMPY and isinstance(value, numpy.number):\n-        return str(f""{value} ({value.dtype})"")\n+        return str(f""XX{value} ({value.dtype})XX"")\n \n     elif isinstance(value, STR_SAFE_TYPES):\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3776', 'line': 416, 'description': ['            message = ""string safe type stringifier failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -413,7 +413,7 @@\n         try:\n             return str(value)\n         except Exception:\n-            message = ""string safe type stringifier failed""\n+            message = ""XXstring safe type stringifier failedXX""\n             ui_log.exception(message)\n             return ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3777', 'line': 416, 'description': ['            message = ""string safe type stringifier failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -413,7 +413,7 @@\n         try:\n             return str(value)\n         except Exception:\n-            message = ""string safe type stringifier failed""\n+            message = None\n             ui_log.exception(message)\n             return ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3778', 'line': 418, 'description': ['            return ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -415,7 +415,7 @@\n         except Exception:\n             message = ""string safe type stringifier failed""\n             ui_log.exception(message)\n-            return ""!! %s !!"" % message\n+            return ""XX!! %s !!XX"" % message\n \n     elif hasattr(type(value), ""safely_stringify_for_pudb""):\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3779', 'line': 418, 'description': ['            return ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -415,7 +415,7 @@\n         except Exception:\n             message = ""string safe type stringifier failed""\n             ui_log.exception(message)\n-            return ""!! %s !!"" % message\n+            return ""!! %s !!"" / message\n \n     elif hasattr(type(value), ""safely_stringify_for_pudb""):\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3780', 'line': 420, 'description': ['    elif hasattr(type(value), ""safely_stringify_for_pudb""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -417,7 +417,7 @@\n             ui_log.exception(message)\n             return ""!! %s !!"" % message\n \n-    elif hasattr(type(value), ""safely_stringify_for_pudb""):\n+    elif hasattr(type(value), ""XXsafely_stringify_for_pudbXX""):\n         try:\n             # (E.g.) Mock objects will pretend to have this\n             # and return nonsense.\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3781', 'line': 424, 'description': ['            result = value.safely_stringify_for_pudb()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -421,7 +421,7 @@\n         try:\n             # (E.g.) Mock objects will pretend to have this\n             # and return nonsense.\n-            result = value.safely_stringify_for_pudb()\n+            result = None\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3782', 'line': 426, 'description': ['            message = ""safely_stringify_for_pudb call failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -423,7 +423,7 @@\n             # and return nonsense.\n             result = value.safely_stringify_for_pudb()\n         except Exception:\n-            message = ""safely_stringify_for_pudb call failed""\n+            message = ""XXsafely_stringify_for_pudb call failedXX""\n             ui_log.exception(message)\n             result = ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3783', 'line': 426, 'description': ['            message = ""safely_stringify_for_pudb call failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -423,7 +423,7 @@\n             # and return nonsense.\n             result = value.safely_stringify_for_pudb()\n         except Exception:\n-            message = ""safely_stringify_for_pudb call failed""\n+            message = None\n             ui_log.exception(message)\n             result = ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3784', 'line': 428, 'description': ['            result = ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -425,7 +425,7 @@\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n-            result = ""!! %s !!"" % message\n+            result = ""XX!! %s !!XX"" % message\n \n         if isinstance(result, str):\n             return str(result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3785', 'line': 428, 'description': ['            result = ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -425,7 +425,7 @@\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n-            result = ""!! %s !!"" % message\n+            result = ""!! %s !!"" / message\n \n         if isinstance(result, str):\n             return str(result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3786', 'line': 428, 'description': ['            result = ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -425,7 +425,7 @@\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n-            result = ""!! %s !!"" % message\n+            result = None\n \n         if isinstance(result, str):\n             return str(result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3787', 'line': 436, 'description': ['            obj_len = len(value)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -433,7 +433,7 @@\n     elif isinstance(value, Sized):\n         try:\n             # Example: numpy arrays with shape == () raise on len()\n-            obj_len = len(value)\n+            obj_len = None\n         except TypeError:\n             pass\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3788', 'line': 440, 'description': ['            return f""{type(value).__name__} ({obj_len})""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -437,7 +437,7 @@\n         except TypeError:\n             pass\n         else:\n-            return f""{type(value).__name__} ({obj_len})""\n+            return f""XX{type(value).__name__} ({obj_len})XX""\n \n     return str(type(value).__name__)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3789', 'line': 450, 'description': ['    return ""{id:#x}"".format(id=id(obj))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -447,7 +447,7 @@\n \n \n def id_stringifier(obj):\n-    return ""{id:#x}"".format(id=id(obj))\n+    return ""XX{id:#x}XX"".format(id=id(obj))\n \n \n def error_stringifier(_):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3790', 'line': 454, 'description': ['    return ""ERROR: Invalid custom stringifier file.""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -451,7 +451,7 @@\n \n \n def error_stringifier(_):\n-    return ""ERROR: Invalid custom stringifier file.""\n+    return ""XXERROR: Invalid custom stringifier file.XX""\n \n \n custom_stringifier_dict = {}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3791', 'line': 457, 'description': ['custom_stringifier_dict = {}'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -454,7 +454,7 @@\n     return ""ERROR: Invalid custom stringifier file.""\n \n \n-custom_stringifier_dict = {}\n+custom_stringifier_dict = None\n \n STRINGIFIERS = {\n     ""default"": default_stringifier,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3792', 'line': 460, 'description': ['    ""default"": default_stringifier,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -457,7 +457,7 @@\n custom_stringifier_dict = {}\n \n STRINGIFIERS = {\n-    ""default"": default_stringifier,\n+    ""XXdefaultXX"": default_stringifier,\n     ""type"": type_stringifier,\n     ""repr"": repr,\n     ""str"": str,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3793', 'line': 461, 'description': ['    ""type"": type_stringifier,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -458,7 +458,7 @@\n \n STRINGIFIERS = {\n     ""default"": default_stringifier,\n-    ""type"": type_stringifier,\n+    ""XXtypeXX"": type_stringifier,\n     ""repr"": repr,\n     ""str"": str,\n     ""id"": id_stringifier,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3794', 'line': 462, 'description': ['    ""repr"": repr,'], 'failure': []}, {'name': 'Mutant #3795', 'line': 463, 'description': ['    ""str"": str,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -460,7 +460,7 @@\n     ""default"": default_stringifier,\n     ""type"": type_stringifier,\n     ""repr"": repr,\n-    ""str"": str,\n+    ""XXstrXX"": str,\n     ""id"": id_stringifier,\n }\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3796', 'line': 464, 'description': ['    ""id"": id_stringifier,'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -461,7 +461,7 @@\n     ""type"": type_stringifier,\n     ""repr"": repr,\n     ""str"": str,\n-    ""id"": id_stringifier,\n+    ""XXidXX"": id_stringifier,\n }\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3797', 'line': 465, 'description': ['}'], 'failure': []}, {'name': 'Mutant #3798', 'line': 475, 'description': ['        if """" == iinfo.display_type.strip():'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -472,7 +472,7 @@\n     try:\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n-        if """" == iinfo.display_type.strip():\n+        if ""XXXX"" == iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3799', 'line': 475, 'description': ['        if """" == iinfo.display_type.strip():'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -472,7 +472,7 @@\n     try:\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n-        if """" == iinfo.display_type.strip():\n+        if """" != iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3800', 'line': 476, 'description': ['            return lambda _: ""ERROR: custom stringifier is not set""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -473,7 +473,7 @@\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n         if """" == iinfo.display_type.strip():\n-            return lambda _: ""ERROR: custom stringifier is not set""\n+            return lambda _: ""XXERROR: custom stringifier is not setXX""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3801', 'line': 476, 'description': ['            return lambda _: ""ERROR: custom stringifier is not set""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -473,7 +473,7 @@\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n         if """" == iinfo.display_type.strip():\n-            return lambda _: ""ERROR: custom stringifier is not set""\n+            return lambda _: None\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3802', 'line': 478, 'description': ['            if not custom_stringifier_dict:  # Only execfile once'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -475,7 +475,7 @@\n         if """" == iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n-            if not custom_stringifier_dict:  # Only execfile once\n+            if  custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n                 custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n                 with open(custom_stringifier_fname) as inf:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3803', 'line': 480, 'description': ['                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -477,7 +477,7 @@\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n-                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n+                custom_stringifier_fname = None\n                 with open(custom_stringifier_fname) as inf:\n                     exec(compile(inf.read(), custom_stringifier_fname, ""exec""),\n                             custom_stringifier_dict,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3804', 'line': 482, 'description': ['                    exec(compile(inf.read(), custom_stringifier_fname, ""exec""),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -479,7 +479,7 @@\n                 from os.path import expanduser, expandvars\n                 custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n                 with open(custom_stringifier_fname) as inf:\n-                    exec(compile(inf.read(), custom_stringifier_fname, ""exec""),\n+                    exec(compile(inf.read(), custom_stringifier_fname, ""XXexecXX""),\n                             custom_stringifier_dict,\n                             custom_stringifier_dict)\n         except FileNotFoundError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3805', 'line': 486, 'description': ['            ui_log.error(""Unable to locate custom stringifier file {!r}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -483,7 +483,7 @@\n                             custom_stringifier_dict,\n                             custom_stringifier_dict)\n         except FileNotFoundError:\n-            ui_log.error(""Unable to locate custom stringifier file {!r}""\n+            ui_log.error(""XXUnable to locate custom stringifier file {!r}XX""\n                          .format(iinfo.display_type))\n             return error_stringifier\n         except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3806', 'line': 490, 'description': ['            ui_log.exception(""Error when importing custom stringifier"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -487,7 +487,7 @@\n                          .format(iinfo.display_type))\n             return error_stringifier\n         except Exception:\n-            ui_log.exception(""Error when importing custom stringifier"")\n+            ui_log.exception(""XXError when importing custom stringifierXX"")\n             return error_stringifier\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3807', 'line': 493, 'description': ['            if ""pudb_stringifier"" not in custom_stringifier_dict:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -490,7 +490,7 @@\n             ui_log.exception(""Error when importing custom stringifier"")\n             return error_stringifier\n         else:\n-            if ""pudb_stringifier"" not in custom_stringifier_dict:\n+            if ""XXpudb_stringifierXX"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3808', 'line': 493, 'description': ['            if ""pudb_stringifier"" not in custom_stringifier_dict:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -490,7 +490,7 @@\n             ui_log.exception(""Error when importing custom stringifier"")\n             return error_stringifier\n         else:\n-            if ""pudb_stringifier"" not in custom_stringifier_dict:\n+            if ""pudb_stringifier""  in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3809', 'line': 494, 'description': ['                ui_log.error(f""{iinfo.display_type} does not contain a function ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -491,7 +491,7 @@\n             return error_stringifier\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n-                ui_log.error(f""{iinfo.display_type} does not contain a function ""\n+                ui_log.error(f""XX{iinfo.display_type} does not contain a function XX""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3810', 'line': 495, 'description': ['                             ""named pudb_stringifier at the module level."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -492,7 +492,7 @@\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n-                             ""named pudb_stringifier at the module level."")\n+                             ""XXnamed pudb_stringifier at the module level.XX"")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n                         ""pudb_stringifier not defined."")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3811', 'line': 497, 'description': ['                        ""ERROR: Invalid custom stringifier file: ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -494,7 +494,7 @@\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n-                        ""ERROR: Invalid custom stringifier file: ""\n+                        ""XXERROR: Invalid custom stringifier file: XX""\n                         ""pudb_stringifier not defined."")\n             else:\n                 return (lambda value:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3812', 'line': 498, 'description': ['                        ""pudb_stringifier not defined."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -495,7 +495,7 @@\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n-                        ""pudb_stringifier not defined."")\n+                        ""XXpudb_stringifier not defined.XX"")\n             else:\n                 return (lambda value:\n                     str(custom_stringifier_dict[""pudb_stringifier""](value)))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3813', 'line': 498, 'description': ['                        ""pudb_stringifier not defined."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -493,9 +493,7 @@\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n-                return lambda value: str(\n-                        ""ERROR: Invalid custom stringifier file: ""\n-                        ""pudb_stringifier not defined."")\n+                return lambda value: None\n             else:\n                 return (lambda value:\n                     str(custom_stringifier_dict[""pudb_stringifier""](value)))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3814', 'line': 501, 'description': ['                    str(custom_stringifier_dict[""pudb_stringifier""](value)))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -498,7 +498,7 @@\n                         ""pudb_stringifier not defined."")\n             else:\n                 return (lambda value:\n-                    str(custom_stringifier_dict[""pudb_stringifier""](value)))\n+                    str(custom_stringifier_dict[""XXpudb_stringifierXX""](value)))\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3815', 'line': 501, 'description': ['                    str(custom_stringifier_dict[""pudb_stringifier""](value)))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -497,8 +497,7 @@\n                         ""ERROR: Invalid custom stringifier file: ""\n                         ""pudb_stringifier not defined."")\n             else:\n-                return (lambda value:\n-                    str(custom_stringifier_dict[""pudb_stringifier""](value)))\n+                return (lambda value: None)\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3816', 'line': 509, 'description': ['    EMPTY_LABEL = ""<empty>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -506,7 +506,7 @@\n # {{{ tree walking\n \n class ValueWalker(ABC):\n-    EMPTY_LABEL = ""<empty>""\n+    EMPTY_LABEL = ""XX<empty>XX""\n     CONTINUATION_LABEL = ""[...]""\n \n     def __init__(self, frame_var_info):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3817', 'line': 509, 'description': ['    EMPTY_LABEL = ""<empty>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -506,7 +506,7 @@\n # {{{ tree walking\n \n class ValueWalker(ABC):\n-    EMPTY_LABEL = ""<empty>""\n+    EMPTY_LABEL = None\n     CONTINUATION_LABEL = ""[...]""\n \n     def __init__(self, frame_var_info):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3818', 'line': 510, 'description': ['    CONTINUATION_LABEL = ""[...]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -507,7 +507,7 @@\n \n class ValueWalker(ABC):\n     EMPTY_LABEL = ""<empty>""\n-    CONTINUATION_LABEL = ""[...]""\n+    CONTINUATION_LABEL = ""XX[...]XX""\n \n     def __init__(self, frame_var_info):\n         self.frame_var_info = frame_var_info\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3819', 'line': 510, 'description': ['    CONTINUATION_LABEL = ""[...]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -507,7 +507,7 @@\n \n class ValueWalker(ABC):\n     EMPTY_LABEL = ""<empty>""\n-    CONTINUATION_LABEL = ""[...]""\n+    CONTINUATION_LABEL = None\n \n     def __init__(self, frame_var_info):\n         self.frame_var_info = frame_var_info\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3820', 'line': 513, 'description': ['        self.frame_var_info = frame_var_info'], 'failure': []}, {'name': 'Mutant #5233', 'line': 163, 'description': ['    def value_string(self, obj, expand=True):'], 'failure': []}, {'name': 'Mutant #5234', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5235', 'line': 164, 'description': ['        if expand and obj in self.values_to_expand:'], 'failure': []}, {'name': 'Mutant #5236', 'line': 165, 'description': ['            return repr(obj) + self.MOD_STR'], 'failure': []}, {'name': 'Mutant #5237', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5238', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5239', 'line': 179, 'description': ['                 self.value_string(getattr(obj, label), expand=False))'], 'failure': []}, {'name': 'Mutant #5240', 'line': 182, 'description': ['    @contextlib.contextmanager'], 'failure': []}, {'name': 'Mutant #5241', 'line': 189, 'description': ['            self.fail(""ui_log.exception was unexpectedly called"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -186,7 +186,7 @@\n         fail if it is called.\n         """"""\n         def fake_exception_log(*args, **kwargs):\n-            self.fail(""ui_log.exception was unexpectedly called"")\n+            self.fail(""XXui_log.exception was unexpectedly calledXX"")\n \n         old_logger = ui_log.exception\n         ui_log.exception = fake_exception_log\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5242', 'line': 191, 'description': ['        old_logger = ui_log.exception'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -188,7 +188,7 @@\n         def fake_exception_log(*args, **kwargs):\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n-        old_logger = ui_log.exception\n+        old_logger = None\n         ui_log.exception = fake_exception_log\n         try:\n             yield\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5243', 'line': 192, 'description': ['        ui_log.exception = fake_exception_log'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -189,7 +189,7 @@\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n         old_logger = ui_log.exception\n-        ui_log.exception = fake_exception_log\n+        ui_log.exception = None\n         try:\n             yield\n         finally:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5244', 'line': 196, 'description': ['            ui_log.exception = old_logger'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -193,7 +193,7 @@\n         try:\n             yield\n         finally:\n-            ui_log.exception = old_logger\n+            ui_log.exception = None\n \n     def assert_walks_contents(self, container, label=""xs""):\n         expand_paths = {label}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5245', 'line': 198, 'description': ['    def assert_walks_contents(self, container, label=""xs""):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -195,7 +195,7 @@\n         finally:\n             ui_log.exception = old_logger\n \n-    def assert_walks_contents(self, container, label=""xs""):\n+    def assert_walks_contents(self, container, label=""XXxsXX""):\n         expand_paths = {label}\n         self.values_to_expand = [container]\n         self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5246', 'line': 199, 'description': ['        expand_paths = {label}'], 'failure': []}, {'name': 'Mutant #5247', 'line': 200, 'description': ['        self.values_to_expand = [container]'], 'failure': []}, {'name': 'Mutant #5248', 'line': 201, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting(expand_paths))'], 'failure': []}, {'name': 'Mutant #5249', 'line': 204, 'description': ['        expected = [(label, self.value_string(container))]'], 'failure': []}, {'name': 'Mutant #5250', 'line': 206, 'description': ['            expected.extend([(f""[{repr(key)}]"", repr(container[key]))'], 'failure': []}, {'name': 'Mutant #5251', 'line': 208, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5252', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5253', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5254', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5255', 'line': 209, 'description': ['            self.class_counts[""mappings""] += 1'], 'failure': []}, {'name': 'Mutant #5256', 'line': 211, 'description': ['            expected.extend([(f""[{repr(index)}]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5257', 'line': 213, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5258', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5259', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5260', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5261', 'line': 214, 'description': ['            self.class_counts[""sequences""] += 1'], 'failure': []}, {'name': 'Mutant #5262', 'line': 216, 'description': ['            expected.extend([(""[]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5263', 'line': 218, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5264', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5265', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5266', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5267', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5268', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5269', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5270', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5271', 'line': 221, 'description': ['            self.class_counts[""other""] += 1'], 'failure': []}, {'name': 'Mutant #5272', 'line': 227, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5273', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5274', 'line': 237, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5275', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5276', 'line': 238, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5279', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5280', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5281', 'line': 241, 'description': ['        }'], 'failure': []}, {'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}, {'name': 'Mutant #5283', 'line': 249, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting())'], 'failure': []}, {'name': 'Mutant #5284', 'line': 252, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -249,7 +249,7 @@\n         self.walker = BasicValueWalker(FrameVarInfoForTesting())\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5285', 'line': 253, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -250,7 +250,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5286', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5287', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5288', 'line': 255, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -252,7 +252,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5290', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5291', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5292', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5293', 'line': 260, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -257,7 +257,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5294', 'line': 261, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -258,7 +258,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5295', 'line': 262, 'description': ['            ""foo bar"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -259,7 +259,7 @@\n             # strings\n             """",\n             ""a"",\n-            ""foo bar"",\n+            ""XXfoo barXX"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5298', 'line': 267, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -264,7 +264,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5299', 'line': 268, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -265,7 +265,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for label, value in enumerate(values):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5300', 'line': 270, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5303', 'line': 289, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -286,7 +286,7 @@\n         """"""\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5304', 'line': 290, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -287,7 +287,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5305', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5306', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5307', 'line': 292, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -289,7 +289,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5308', 'line': 293, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5309', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5310', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5311', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5312', 'line': 297, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -294,7 +294,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5313', 'line': 298, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -295,7 +295,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5314', 'line': 299, 'description': ['            ""foo bar"",'], 'failure': []}, {'name': 'Mutant #5315', 'line': 301, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -298,7 +298,7 @@\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5316', 'line': 304, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -301,7 +301,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5317', 'line': 305, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -302,7 +302,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for value in values:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5318', 'line': 307, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5319', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5320', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5321', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5322', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5323', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5324', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5325', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5326', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5327', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5328', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5329', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5330', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5331', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5332', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5333', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            1:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5334', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            0:                   43,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5335', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""XXaXX"":                 ""foo"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5336', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""a"":                 ""XXfooXX"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5337', 'line': 327, 'description': ['            """": None,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -324,7 +324,7 @@\n         self.assert_walks_contents({\n             0:                   42,\n             ""a"":                 ""foo"",\n-            """": None,\n+            ""XXXX"": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5338', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            False: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5339', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            True: True,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5340', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(4)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5341', 'line': 329, 'description': ['            frozenset(range(3)): ""abc"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -326,7 +326,7 @@\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n-            frozenset(range(3)): ""abc"",\n+            frozenset(range(3)): ""XXabcXX"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5342', 'line': 330, 'description': ['            ():                  ""empty tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -327,7 +327,7 @@\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n-            ():                  ""empty tuple"",\n+            ():                  ""XXempty tupleXX"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5343', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (2, 2, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5344', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 3, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5345', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""XXcXX"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5346', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""c"", ()):     ""XXtupleXX"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5347', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5348', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5349', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5350', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5351', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5352', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5353', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5354', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5355', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5356', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5357', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5358', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5359', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5360', 'line': 343, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -340,7 +340,7 @@\n \n     def test_tuple(self):\n         self.assert_walks_contents((\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ))\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5361', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5362', 'line': 345, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5363', 'line': 348, 'description': ['        class_count = 0'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -345,7 +345,7 @@\n         self.assert_class_counts_equal({""sequences"": 1})\n \n     def test_containerlike_classes(self):\n-        class_count = 0\n+        class_count = 1\n         for cls_idx, containerlike_class in enumerate(\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5364', 'line': 348, 'description': ['        class_count = 0'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -345,7 +345,7 @@\n         self.assert_class_counts_equal({""sequences"": 1})\n \n     def test_containerlike_classes(self):\n-        class_count = 0\n+        class_count = None\n         for cls_idx, containerlike_class in enumerate(\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5365', 'line': 351, 'description': ['            label = containerlike_class.name()'], 'failure': []}, {'name': 'Mutant #5366', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -350,7 +350,7 @@\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n             value = containerlike_class(zip(string.ascii_lowercase,\n-                                            range(3, 10)))\n+                                            range(4, 10)))\n             self.assert_walks_contents(container=value, label=label)\n             class_count = cls_idx + 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5367', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -350,7 +350,7 @@\n                 generate_containerlike_class()):\n             label = containerlike_class.name()\n             value = containerlike_class(zip(string.ascii_lowercase,\n-                                            range(3, 10)))\n+                                            range(3, 11)))\n             self.assert_walks_contents(container=value, label=label)\n             class_count = cls_idx + 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5368', 'line': 353, 'description': ['                                            range(3, 10)))'], 'failure': []}, {'name': 'Mutant #5369', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5370', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5371', 'line': 355, 'description': ['            class_count = cls_idx + 1'], 'failure': []}, {'name': 'Mutant #5372', 'line': 358, 'description': ['            ""mappings"": 256,'], 'failure': []}, {'name': 'Mutant #5373', 'line': 358, 'description': ['            ""mappings"": 256,'], 'failure': []}, {'name': 'Mutant #5374', 'line': 359, 'description': ['            ""sequences"": 256,'], 'failure': []}, {'name': 'Mutant #5375', 'line': 359, 'description': ['            ""sequences"": 256,'], 'failure': []}, {'name': 'Mutant #5376', 'line': 360, 'description': ['            ""collections"": 256,'], 'failure': []}, {'name': 'Mutant #5377', 'line': 360, 'description': ['            ""collections"": 256,'], 'failure': []}, {'name': 'Mutant #5378', 'line': 361, 'description': ['            ""other"": 1280,'], 'failure': []}, {'name': 'Mutant #5379', 'line': 361, 'description': ['            ""other"": 1280,'], 'failure': []}, {'name': 'Mutant #5380', 'line': 364, 'description': ['        walked_total = (self.class_counts[""mappings""]'], 'failure': []}, {'name': 'Mutant #5381', 'line': 365, 'description': ['                        + self.class_counts[""sequences""]'], 'failure': []}, {'name': 'Mutant #5382', 'line': 365, 'description': ['                        + self.class_counts[""sequences""]'], 'failure': []}, {'name': 'Mutant #5383', 'line': 366, 'description': ['                        + self.class_counts[""collections""]'], 'failure': []}, {'name': 'Mutant #5384', 'line': 366, 'description': ['                        + self.class_counts[""collections""]'], 'failure': []}, {'name': 'Mutant #5385', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}, {'name': 'Mutant #5386', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}, {'name': 'Mutant #5387', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}, {'name': 'Mutant #5388', 'line': 388, 'description': ['        self.assert_walks_contents(Reasonable, label=""Reasonable"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -385,7 +385,7 @@\n         """"""\n         Are the class objects themselves expandable?\n         """"""\n-        self.assert_walks_contents(Reasonable, label=""Reasonable"")\n+        self.assert_walks_contents(Reasonable, label=""XXReasonableXX"")\n         self.assert_class_counts_equal({""other"": 1})\n \n     def test_maybe_unreasonable_classes(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5389', 'line': 389, 'description': ['        self.assert_class_counts_equal({""other"": 1})'], 'failure': []}, {'name': 'Mutant #5390', 'line': 389, 'description': ['        self.assert_class_counts_equal({""other"": 1})'], 'failure': []}, {'name': 'Mutant #5391', 'line': 404, 'description': ['        self.assert_class_counts_equal({""other"": 2048})'], 'failure': []}, {'name': 'Mutant #5392', 'line': 404, 'description': ['        self.assert_class_counts_equal({""other"": 2048})'], 'failure': []}]",26.932668329177055,"['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'KF001' 'FLV001' 'F001' 'F002'
 'C002' 'CML001' 'COMPLEX001' 'F026' 'F027' 'F030' 'P003' 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//Call/func/Attribute[@attr=""keys""]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef//BinOp[count(descendant::BinOp) > 2]'
 './/FunctionDef[count(./body/*) > 50]'
 './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 1, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 1, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 1, 'unused-variables': 0, 'method-too-long': 1, 'high-cyclomatic-complexity': 1, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,parse_breakpoints,518-560,"[{'lineno': 523, 'coloffset': 8, 'linematch': 'if not arg:', 'context': '    # b [ (filename:lineno | function) [, ""condition""] ]\n\n    breakpoints = []\n    for arg in lines:\n        if not arg:\n            continue\n        arg = arg[1:]\n\n        filename = None\n        lineno = None', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 532, 'coloffset': 8, 'linematch': 'if comma > 0:', 'context': '        lineno = None\n        cond = None\n        comma = arg.find("","")\n\n        if comma > 0:\n            # parse stuff after comma: ""condition""\n            cond = arg[comma+1:].lstrip()\n            arg = arg[:comma].rstrip()\n\n        colon = arg.rfind("":"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 540, 'coloffset': 8, 'linematch': 'if colon > 0:', 'context': '\n        colon = arg.rfind("":"")\n        funcname = None\n\n        if colon > 0:\n            filename = arg[:colon].strip()\n\n            f = lookup_module(filename)\n            if not f:\n                continue', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 557, 'coloffset': 8, 'linematch': 'if get_breakpoint_invalid_reason(filename, lineno) is None:', 'context': '                continue\n        else:\n            continue\n\n        if get_breakpoint_invalid_reason(filename, lineno) is None:\n            breakpoints.append((filename, lineno, False, cond, funcname))\n\n    return breakpoints\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 544, 'coloffset': 12, 'linematch': 'if not f:', 'context': '        if colon > 0:\n            filename = arg[:colon].strip()\n\n            f = lookup_module(filename)\n            if not f:\n                continue\n            else:\n                filename = f\n\n            arg = arg[colon+1:].lstrip()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 544, 'coloffset': 12, 'linematch': 'if not f:', 'context': '        if colon > 0:\n            filename = arg[:colon].strip()\n\n            f = lookup_module(filename)\n            if not f:\n                continue\n            else:\n                filename = f\n\n            arg = arg[colon+1:].lstrip()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 518, 'coloffset': 0, 'linematch': 'def parse_breakpoints(lines):', 'context': '\n\n# {{{ breakpoint saving\n\ndef parse_breakpoints(lines):\n    # b [ (filename:lineno | function) [, ""condition""] ]\n\n    breakpoints = []\n    for arg in lines:\n        if not arg:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 532, 'coloffset': 8, 'linematch': 'if comma > 0:', 'context': '        lineno = None\n        cond = None\n        comma = arg.find("","")\n\n        if comma > 0:\n            # parse stuff after comma: ""condition""\n            cond = arg[comma+1:].lstrip()\n            arg = arg[:comma].rstrip()\n\n        colon = arg.rfind("":"")', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 540, 'coloffset': 8, 'linematch': 'if colon > 0:', 'context': '\n        colon = arg.rfind("":"")\n        funcname = None\n\n        if colon > 0:\n            filename = arg[:colon].strip()\n\n            f = lookup_module(filename)\n            if not f:\n                continue', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 557, 'coloffset': 8, 'linematch': 'if get_breakpoint_invalid_reason(filename, lineno) is None:', 'context': '                continue\n        else:\n            continue\n\n        if get_breakpoint_invalid_reason(filename, lineno) is None:\n            breakpoints.append((filename, lineno, False, cond, funcname))\n\n    return breakpoints\n\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 544, 'coloffset': 12, 'linematch': 'if not f:', 'context': '        if colon > 0:\n            filename = arg[:colon].strip()\n\n            f = lookup_module(filename)\n            if not f:\n                continue\n            else:\n                filename = f\n\n            arg = arg[colon+1:].lstrip()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 518, 'coloffset': 0, 'linematch': 'def parse_breakpoints(lines):', 'context': '\n\n# {{{ breakpoint saving\n\ndef parse_breakpoints(lines):\n    # b [ (filename:lineno | function) [, ""condition""] ]\n\n    breakpoints = []\n    for arg in lines:\n        if not arg:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 521, 'coloffset': 4, 'linematch': 'breakpoints = []', 'context': '\ndef parse_breakpoints(lines):\n    # b [ (filename:lineno | function) [, ""condition""] ]\n\n    breakpoints = []\n    for arg in lines:\n        if not arg:\n            continue\n        arg = arg[1:]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 522, 'coloffset': 4, 'linematch': 'for arg in lines:', 'context': 'def parse_breakpoints(lines):\n    # b [ (filename:lineno | function) [, ""condition""] ]\n\n    breakpoints = []\n    for arg in lines:\n        if not arg:\n            continue\n        arg = arg[1:]\n\n        filename = None', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 560, 'coloffset': 4, 'linematch': 'return breakpoints', 'context': '\n        if get_breakpoint_invalid_reason(filename, lineno) is None:\n            breakpoints.append((filename, lineno, False, cond, funcname))\n\n    return breakpoints\n\n\ndef get_breakpoints_file_name():\n    from os.path import join\n    save_path = get_save_config_path()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 518, 'coloffset': 0, 'linematch': 'def parse_breakpoints(lines):', 'context': '\n\n# {{{ breakpoint saving\n\ndef parse_breakpoints(lines):\n    # b [ (filename:lineno | function) [, ""condition""] ]\n\n    breakpoints = []\n    for arg in lines:\n        if not arg:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 518, 'coloffset': 0, 'linematch': 'def parse_breakpoints(lines):', 'context': '\n\n# {{{ breakpoint saving\n\ndef parse_breakpoints(lines):\n    # b [ (filename:lineno | function) [, ""condition""] ]\n\n    breakpoints = []\n    for arg in lines:\n        if not arg:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3822', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = ""XX%s.cont-%dXX"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3823', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = ""%s.cont-%d"" / (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3824', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = None\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3825', 'line': 529, 'description': ['        if not self.frame_var_info.get_inspect_info('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -526,7 +526,7 @@\n             continue adding entries from the container.\n         """"""\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n-        if not self.frame_var_info.get_inspect_info(\n+        if  self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n                 omitted = f""{length - count}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3826', 'line': 530, 'description': ['                cont_id_path, read_only=True).show_detail:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -527,7 +527,7 @@\n         """"""\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n-                cont_id_path, read_only=True).show_detail:\n+                cont_id_path, read_only=False).show_detail:\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3827', 'line': 531, 'description': ['            if length > 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -528,7 +528,7 @@\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n-            if length > 0:\n+            if length >= 0:\n                 omitted = f""{length - count}""\n             else:\n                 omitted = ""some""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3828', 'line': 531, 'description': ['            if length > 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -528,7 +528,7 @@\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n-            if length > 0:\n+            if length > 1:\n                 omitted = f""{length - count}""\n             else:\n                 omitted = ""some""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3829', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = f""{length + count}""\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3830', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = f""XX{length - count}XX""\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3831', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = None\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3832', 'line': 534, 'description': ['                omitted = ""some""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -531,7 +531,7 @@\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n-                omitted = ""some""\n+                omitted = ""XXsomeXX""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3833', 'line': 534, 'description': ['                omitted = ""some""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -531,7 +531,7 @@\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n-                omitted = ""some""\n+                omitted = None\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3834', 'line': 536, 'description': ['                          f""<{omitted} items omitted, expand to see more>"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -533,7 +533,7 @@\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n-                          f""<{omitted} items omitted, expand to see more>"",\n+                          f""XX<{omitted} items omitted, expand to see more>XX"",\n                           id_path=cont_id_path)\n             return True\n         return False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3835', 'line': 538, 'description': ['            return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -535,7 +535,7 @@\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n-            return True\n+            return False\n         return False\n \n     def walk_container(self, parent: VariableWidget, label: str,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3836', 'line': 539, 'description': ['        return False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -536,7 +536,7 @@\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n             return True\n-        return False\n+        return True\n \n     def walk_container(self, parent: VariableWidget, label: str,\n                        value, id_path: str = None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3837', 'line': 545, 'description': ['                                 if isinstance(value, cls))'], 'failure': []}, {'name': 'Mutant #3838', 'line': 548, 'description': ['            return False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -545,7 +545,7 @@\n                                  if isinstance(value, cls))\n         except StopIteration:\n             # Not recognized as a container\n-            return False\n+            return True\n \n         is_empty = True\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3839', 'line': 550, 'description': ['        is_empty = True'], 'failure': []}, {'name': 'Mutant #3840', 'line': 550, 'description': ['        is_empty = True'], 'failure': []}, {'name': 'Mutant #3841', 'line': 553, 'description': ['            is_empty = False'], 'failure': []}, {'name': 'Mutant #3842', 'line': 553, 'description': ['            is_empty = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -550,7 +550,7 @@\n         is_empty = True\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n-            is_empty = False\n+            is_empty = None\n             if count > 0 and count % 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3843', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3844', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 1 and count % 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3845', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 0 and count / 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3846', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 0 and count % 11 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3847', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3848', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3849', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3850', 'line': 556, 'description': ['                    length = container_cls.length(value)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -553,7 +553,7 @@\n             is_empty = False\n             if count > 0 and count % 10 == 0:\n                 try:\n-                    length = container_cls.length(value)\n+                    length = None\n                 except Exception:\n                     length = -1\n                 if self.add_continuation_item(parent, id_path, count, length):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3851', 'line': 558, 'description': ['                    length = -1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -555,7 +555,7 @@\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n-                    length = -1\n+                    length = +1\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3852', 'line': 558, 'description': ['                    length = -1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -555,7 +555,7 @@\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n-                    length = -1\n+                    length = -2\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3853', 'line': 558, 'description': ['                    length = -1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -555,7 +555,7 @@\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n-                    length = -1\n+                    length = None\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3854', 'line': 560, 'description': ['                    return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -557,7 +557,7 @@\n                 except Exception:\n                     length = -1\n                 if self.add_continuation_item(parent, id_path, count, length):\n-                    return True\n+                    return False\n \n             entry_id_path = f""{id_path}{id_path_ext}""\n             self.walk_value(parent,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",24.242424242424242,['CL001' 'CL002' 'ANNOT001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_breakpoints_file_name,563-569,"[{'lineno': 566, 'coloffset': 4, 'linematch': 'if not save_path:', 'context': '\ndef get_breakpoints_file_name():\n    from os.path import join\n    save_path = get_save_config_path()\n    if not save_path:\n        return None\n    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 563, 'coloffset': 0, 'linematch': 'def get_breakpoints_file_name():', 'context': '\n    return breakpoints\n\n\ndef get_breakpoints_file_name():\n    from os.path import join\n    save_path = get_save_config_path()\n    if not save_path:\n        return None\n    else:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 563, 'coloffset': 0, 'linematch': 'def get_breakpoints_file_name():', 'context': '\n    return breakpoints\n\n\ndef get_breakpoints_file_name():\n    from os.path import join\n    save_path = get_save_config_path()\n    if not save_path:\n        return None\n    else:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 564, 'coloffset': 4, 'linematch': 'from os.path import join', 'context': '    return breakpoints\n\n\ndef get_breakpoints_file_name():\n    from os.path import join\n    save_path = get_save_config_path()\n    if not save_path:\n        return None\n    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 565, 'coloffset': 4, 'linematch': 'save_path = get_save_config_path()', 'context': '\n\ndef get_breakpoints_file_name():\n    from os.path import join\n    save_path = get_save_config_path()\n    if not save_path:\n        return None\n    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 566, 'coloffset': 4, 'linematch': 'if not save_path:', 'context': '\ndef get_breakpoints_file_name():\n    from os.path import join\n    save_path = get_save_config_path()\n    if not save_path:\n        return None\n    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3857', 'line': 564, 'description': ['                            ""[{}]"".format(entry_label if entry_label else """"),'], 'failure': []}, {'name': 'Mutant #3858', 'line': 564, 'description': ['                            ""[{}]"".format(entry_label if entry_label else """"),'], 'failure': []}, {'name': 'Mutant #3859', 'line': 569, 'description': ['                          id_path=f""{id_path}{self.EMPTY_LABEL}"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -566,7 +566,7 @@\n \n         if is_empty:\n             self.add_item(parent, self.EMPTY_LABEL, None,\n-                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n+                          id_path=f""XX{id_path}{self.EMPTY_LABEL}XX"")\n \n         return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",66.66666666666666,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,load_breakpoints,572-595,"[{'lineno': 581, 'coloffset': 8, 'linematch': 'if isdir(cdir):', 'context': '    from os.path import isdir, join\n\n    file_names = []\n    for cdir in XDG_CONFIG_DIRS:\n        if isdir(cdir):\n            for name in [SAVED_BREAKPOINTS_FILE_NAME, BREAKPOINTS_FILE_NAME]:\n                file_names.append(join(cdir, XDG_CONF_RESOURCE, name))\n\n    lines = []\n    for fname in file_names:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 572, 'coloffset': 0, 'linematch': 'def load_breakpoints():', 'context': '    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n\ndef load_breakpoints():\n    """"""\n    Loads and check saved breakpoints out from files\n    Returns: list of tuples\n    """"""\n    from os.path import isdir, join', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 572, 'coloffset': 0, 'linematch': 'def load_breakpoints():', 'context': '    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n\ndef load_breakpoints():\n    """"""\n    Loads and check saved breakpoints out from files\n    Returns: list of tuples\n    """"""\n    from os.path import isdir, join', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 572, 'coloffset': 0, 'linematch': 'def load_breakpoints():', 'context': '    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n\ndef load_breakpoints():\n    """"""\n    Loads and check saved breakpoints out from files\n    Returns: list of tuples\n    """"""\n    from os.path import isdir, join', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 580, 'coloffset': 4, 'linematch': 'for cdir in XDG_CONFIG_DIRS:', 'context': '    """"""\n    from os.path import isdir, join\n\n    file_names = []\n    for cdir in XDG_CONFIG_DIRS:\n        if isdir(cdir):\n            for name in [SAVED_BREAKPOINTS_FILE_NAME, BREAKPOINTS_FILE_NAME]:\n                file_names.append(join(cdir, XDG_CONF_RESOURCE, name))\n\n    lines = []', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 573, 'coloffset': 4, 'linematch': '""""""', 'context': '        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n\ndef load_breakpoints():\n    """"""\n    Loads and check saved breakpoints out from files\n    Returns: list of tuples\n    """"""\n    from os.path import isdir, join\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 577, 'coloffset': 4, 'linematch': 'from os.path import isdir, join', 'context': '    """"""\n    Loads and check saved breakpoints out from files\n    Returns: list of tuples\n    """"""\n    from os.path import isdir, join\n\n    file_names = []\n    for cdir in XDG_CONFIG_DIRS:\n        if isdir(cdir):\n            for name in [SAVED_BREAKPOINTS_FILE_NAME, BREAKPOINTS_FILE_NAME]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 579, 'coloffset': 4, 'linematch': 'file_names = []', 'context': '    Returns: list of tuples\n    """"""\n    from os.path import isdir, join\n\n    file_names = []\n    for cdir in XDG_CONFIG_DIRS:\n        if isdir(cdir):\n            for name in [SAVED_BREAKPOINTS_FILE_NAME, BREAKPOINTS_FILE_NAME]:\n                file_names.append(join(cdir, XDG_CONF_RESOURCE, name))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 580, 'coloffset': 4, 'linematch': 'for cdir in XDG_CONFIG_DIRS:', 'context': '    """"""\n    from os.path import isdir, join\n\n    file_names = []\n    for cdir in XDG_CONFIG_DIRS:\n        if isdir(cdir):\n            for name in [SAVED_BREAKPOINTS_FILE_NAME, BREAKPOINTS_FILE_NAME]:\n                file_names.append(join(cdir, XDG_CONF_RESOURCE, name))\n\n    lines = []', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 585, 'coloffset': 4, 'linematch': 'lines = []', 'context': '        if isdir(cdir):\n            for name in [SAVED_BREAKPOINTS_FILE_NAME, BREAKPOINTS_FILE_NAME]:\n                file_names.append(join(cdir, XDG_CONF_RESOURCE, name))\n\n    lines = []\n    for fname in file_names:\n        try:\n            rc_file = open(fname)\n        except OSError:\n            pass', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 586, 'coloffset': 4, 'linematch': 'for fname in file_names:', 'context': '            for name in [SAVED_BREAKPOINTS_FILE_NAME, BREAKPOINTS_FILE_NAME]:\n                file_names.append(join(cdir, XDG_CONF_RESOURCE, name))\n\n    lines = []\n    for fname in file_names:\n        try:\n            rc_file = open(fname)\n        except OSError:\n            pass\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 595, 'coloffset': 4, 'linematch': 'return parse_breakpoints(lines)', 'context': '        else:\n            lines.extend([line.strip() for line in rc_file.readlines()])\n            rc_file.close()\n\n    return parse_breakpoints(lines)\n\n\ndef save_breakpoints(bp_list):\n    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 572, 'coloffset': 0, 'linematch': 'def load_breakpoints():', 'context': '    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n\ndef load_breakpoints():\n    """"""\n    Loads and check saved breakpoints out from files\n    Returns: list of tuples\n    """"""\n    from os.path import isdir, join', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 572, 'coloffset': 0, 'linematch': 'def load_breakpoints():', 'context': '    else:\n        return join(save_path, SAVED_BREAKPOINTS_FILE_NAME)\n\n\ndef load_breakpoints():\n    """"""\n    Loads and check saved breakpoints out from files\n    Returns: list of tuples\n    """"""\n    from os.path import isdir, join', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3861', 'line': 575, 'description': ['            keys = dir(value)'], 'failure': []}, {'name': 'Mutant #3862', 'line': 577, 'description': ['            ui_log.exception(f""Failed to look up attributes on {label}"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -574,7 +574,7 @@\n         try:\n             keys = dir(value)\n         except Exception:\n-            ui_log.exception(f""Failed to look up attributes on {label}"")\n+            ui_log.exception(f""XXFailed to look up attributes on {label}XX"")\n             return\n \n         for key in sorted(keys):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3863', 'line': 581, 'description': ['            if iinfo.access_level == ""public"":'], 'failure': []}, {'name': 'Mutant #3864', 'line': 581, 'description': ['            if iinfo.access_level == ""public"":'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -578,7 +578,7 @@\n             return\n \n         for key in sorted(keys):\n-            if iinfo.access_level == ""public"":\n+            if iinfo.access_level == ""XXpublicXX"":\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3865', 'line': 582, 'description': ['                if key.startswith(""_""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -579,7 +579,7 @@\n \n         for key in sorted(keys):\n             if iinfo.access_level == ""public"":\n-                if key.startswith(""_""):\n+                if key.startswith(""XX_XX""):\n                     continue\n             elif iinfo.access_level == ""private"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3866', 'line': 583, 'description': ['                    continue'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -580,7 +580,7 @@\n         for key in sorted(keys):\n             if iinfo.access_level == ""public"":\n                 if key.startswith(""_""):\n-                    continue\n+                    break\n             elif iinfo.access_level == ""private"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n                     continue\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3867', 'line': 584, 'description': ['            elif iinfo.access_level == ""private"":'], 'failure': []}, {'name': 'Mutant #3868', 'line': 584, 'description': ['            elif iinfo.access_level == ""private"":'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -581,7 +581,7 @@\n             if iinfo.access_level == ""public"":\n                 if key.startswith(""_""):\n                     continue\n-            elif iinfo.access_level == ""private"":\n+            elif iinfo.access_level == ""XXprivateXX"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n                     continue\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3869', 'line': 585, 'description': ['                if key.startswith(""__"") and key.endswith(""__""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -582,7 +582,7 @@\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n-                if key.startswith(""__"") and key.endswith(""__""):\n+                if key.startswith(""XX__XX"") and key.endswith(""__""):\n                     continue\n \n             try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3870', 'line': 585, 'description': ['                if key.startswith(""__"") and key.endswith(""__""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -582,7 +582,7 @@\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n-                if key.startswith(""__"") and key.endswith(""__""):\n+                if key.startswith(""__"") and key.endswith(""XX__XX""):\n                     continue\n \n             try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3871', 'line': 585, 'description': ['                if key.startswith(""__"") and key.endswith(""__""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -582,7 +582,7 @@\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n-                if key.startswith(""__"") and key.endswith(""__""):\n+                if key.startswith(""__"") or key.endswith(""__""):\n                     continue\n \n             try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3872', 'line': 586, 'description': ['                    continue'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -583,7 +583,7 @@\n                     continue\n             elif iinfo.access_level == ""private"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n-                    continue\n+                    break\n \n             try:\n                 with warnings.catch_warnings():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3873', 'line': 590, 'description': ['                    warnings.simplefilter(""ignore"")'], 'failure': []}, {'name': 'Mutant #3874', 'line': 591, 'description': ['                    attr_value = getattr(value, key)'], 'failure': []}, {'name': 'Mutant #3875', 'line': 592, 'description': ['                if inspect.isroutine(attr_value) and not iinfo.show_methods:'], 'failure': []}, {'name': 'Mutant #3876', 'line': 592, 'description': ['                if inspect.isroutine(attr_value) and not iinfo.show_methods:'], 'failure': []}, {'name': 'Mutant #3877', 'line': 593, 'description': ['                    continue'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -590,7 +590,7 @@\n                     warnings.simplefilter(""ignore"")\n                     attr_value = getattr(value, key)\n                 if inspect.isroutine(attr_value) and not iinfo.show_methods:\n-                    continue\n+                    break\n             except Exception:\n                 attr_value = WatchEvalError()\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3878', 'line': 595, 'description': ['                attr_value = WatchEvalError()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -592,7 +592,7 @@\n                 if inspect.isroutine(attr_value) and not iinfo.show_methods:\n                     continue\n             except Exception:\n-                attr_value = WatchEvalError()\n+                attr_value = None\n \n             self.walk_value(parent,\n                     "".%s"" % key, attr_value,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",38.88888888888889,['CL001' 'ANNOT001' 'FLV001' 'C002' 'F001' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef//For[.//For]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 1, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,save_breakpoints,598-614,"[{'lineno': 603, 'coloffset': 4, 'linematch': 'if not save_path:', 'context': '    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects\n    """"""\n    save_path = get_breakpoints_file_name()\n    if not save_path:\n        return\n\n    histfile = open(get_breakpoints_file_name(), ""w"")\n    bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}\n    for bp in bp_list:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 610, 'coloffset': 8, 'linematch': 'if bp[2]:', 'context': '    histfile = open(get_breakpoints_file_name(), ""w"")\n    bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}\n    for bp in bp_list:\n        line = ""b %s:%d"" % (bp[0], bp[1])\n        if bp[2]:\n            line += "", %s"" % bp[2]\n        line += ""\\n""\n        histfile.write(line)\n    histfile.close()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 301, 'coloffset': 4, 'linematch': 'def save_breakpoints(self):', 'context': '            sys.settrace(self.trace_dispatch)\n        else:\n            return\n\n    def save_breakpoints(self):\n        from pudb.settings import save_breakpoints\n        save_breakpoints([\n            bp\n            for fn, bp_lst in self.get_all_breaks().items()\n            for lineno in bp_lst', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 598, 'coloffset': 0, 'linematch': 'def save_breakpoints(bp_list):', 'context': '\n    return parse_breakpoints(lines)\n\n\ndef save_breakpoints(bp_list):\n    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects\n    """"""\n    save_path = get_breakpoints_file_name()\n    if not save_path:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 301, 'coloffset': 4, 'linematch': 'def save_breakpoints(self):', 'context': '            sys.settrace(self.trace_dispatch)\n        else:\n            return\n\n    def save_breakpoints(self):\n        from pudb.settings import save_breakpoints\n        save_breakpoints([\n            bp\n            for fn, bp_lst in self.get_all_breaks().items()\n            for lineno in bp_lst', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 598, 'coloffset': 0, 'linematch': 'def save_breakpoints(bp_list):', 'context': '\n    return parse_breakpoints(lines)\n\n\ndef save_breakpoints(bp_list):\n    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects\n    """"""\n    save_path = get_breakpoints_file_name()\n    if not save_path:', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 301, 'coloffset': 4, 'linematch': 'def save_breakpoints(self):', 'context': '            sys.settrace(self.trace_dispatch)\n        else:\n            return\n\n    def save_breakpoints(self):\n        from pudb.settings import save_breakpoints\n        save_breakpoints([\n            bp\n            for fn, bp_lst in self.get_all_breaks().items()\n            for lineno in bp_lst', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 598, 'coloffset': 0, 'linematch': 'def save_breakpoints(bp_list):', 'context': '\n    return parse_breakpoints(lines)\n\n\ndef save_breakpoints(bp_list):\n    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects\n    """"""\n    save_path = get_breakpoints_file_name()\n    if not save_path:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 302, 'coloffset': 8, 'linematch': 'from pudb.settings import save_breakpoints', 'context': '        else:\n            return\n\n    def save_breakpoints(self):\n        from pudb.settings import save_breakpoints\n        save_breakpoints([\n            bp\n            for fn, bp_lst in self.get_all_breaks().items()\n            for lineno in bp_lst\n            for bp in self.get_breaks(fn, lineno)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 303, 'coloffset': 8, 'linematch': 'save_breakpoints([', 'context': '            return\n\n    def save_breakpoints(self):\n        from pudb.settings import save_breakpoints\n        save_breakpoints([\n            bp\n            for fn, bp_lst in self.get_all_breaks().items()\n            for lineno in bp_lst\n            for bp in self.get_breaks(fn, lineno)\n            if not bp.temporary])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 599, 'coloffset': 4, 'linematch': '""""""', 'context': '    return parse_breakpoints(lines)\n\n\ndef save_breakpoints(bp_list):\n    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects\n    """"""\n    save_path = get_breakpoints_file_name()\n    if not save_path:\n        return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 602, 'coloffset': 4, 'linematch': 'save_path = get_breakpoints_file_name()', 'context': 'def save_breakpoints(bp_list):\n    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects\n    """"""\n    save_path = get_breakpoints_file_name()\n    if not save_path:\n        return\n\n    histfile = open(get_breakpoints_file_name(), ""w"")\n    bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 603, 'coloffset': 4, 'linematch': 'if not save_path:', 'context': '    """"""\n    :arg bp_list: a list of `bdb.Breakpoint` objects\n    """"""\n    save_path = get_breakpoints_file_name()\n    if not save_path:\n        return\n\n    histfile = open(get_breakpoints_file_name(), ""w"")\n    bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}\n    for bp in bp_list:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 606, 'coloffset': 4, 'linematch': 'histfile = open(get_breakpoints_file_name(), ""w"")', 'context': '    save_path = get_breakpoints_file_name()\n    if not save_path:\n        return\n\n    histfile = open(get_breakpoints_file_name(), ""w"")\n    bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}\n    for bp in bp_list:\n        line = ""b %s:%d"" % (bp[0], bp[1])\n        if bp[2]:\n            line += "", %s"" % bp[2]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 607, 'coloffset': 4, 'linematch': 'bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}', 'context': '    if not save_path:\n        return\n\n    histfile = open(get_breakpoints_file_name(), ""w"")\n    bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}\n    for bp in bp_list:\n        line = ""b %s:%d"" % (bp[0], bp[1])\n        if bp[2]:\n            line += "", %s"" % bp[2]\n        line += ""\\n""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 608, 'coloffset': 4, 'linematch': 'for bp in bp_list:', 'context': '        return\n\n    histfile = open(get_breakpoints_file_name(), ""w"")\n    bp_list = {(bp.file, bp.line, bp.cond) for bp in bp_list}\n    for bp in bp_list:\n        line = ""b %s:%d"" % (bp[0], bp[1])\n        if bp[2]:\n            line += "", %s"" % bp[2]\n        line += ""\\n""\n        histfile.write(line)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 614, 'coloffset': 4, 'linematch': 'histfile.close()', 'context': '        if bp[2]:\n            line += "", %s"" % bp[2]\n        line += ""\\n""\n        histfile.write(line)\n    histfile.close()\n\n# }}}\n\n# vim:foldmethod=marker', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3879', 'line': 598, 'description': ['                    "".%s"" % key, attr_value,'], 'failure': []}, {'name': 'Mutant #3880', 'line': 598, 'description': ['                    "".%s"" % key, attr_value,'], 'failure': []}, {'name': 'Mutant #3881', 'line': 599, 'description': ['                    f""{id_path}.{key}"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -596,7 +596,7 @@\n \n             self.walk_value(parent,\n                     "".%s"" % key, attr_value,\n-                    f""{id_path}.{key}"")\n+                    f""XX{id_path}.{key}XX"")\n \n     def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n         if id_path is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3882', 'line': 602, 'description': ['        if id_path is None:'], 'failure': []}, {'name': 'Mutant #3883', 'line': 603, 'description': ['            id_path = label'], 'failure': []}, {'name': 'Mutant #3884', 'line': 606, 'description': ['        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -603,7 +603,7 @@\n             id_path = label\n \n         assert isinstance(id_path, str)\n-        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n+        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=False)\n \n         try:\n             displayed_value = get_stringifier(iinfo)(value)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3885', 'line': 606, 'description': ['        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)'], 'failure': []}, {'name': 'Mutant #3886', 'line': 609, 'description': ['            displayed_value = get_stringifier(iinfo)(value)'], 'failure': []}, {'name': 'Mutant #3887', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -611,7 +611,7 @@\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n             displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+                            - "" (!! %s error !!)"" % iinfo.display_type\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3888', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -611,7 +611,7 @@\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n             displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+                            + ""XX (!! %s error !!)XX"" % iinfo.display_type\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3889', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -611,7 +611,7 @@\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n             displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+                            + "" (!! %s error !!)"" / iinfo.display_type\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3890', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -610,8 +610,7 @@\n         except Exception:\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n-            displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+            displayed_value = None\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['CL001' 'ANNOT001' 'FLV001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,default_stringifier,401-442,"[{'lineno': 402, 'coloffset': 4, 'linematch': 'if isinstance(value, BASIC_TYPES):', 'context': '# }}}\n\n\ndef default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (\n                type(value).__name__, value.dtype, value.shape)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 405, 'coloffset': 4, 'linematch': 'if HAVE_NUMPY and isinstance(value, numpy.ndarray):', 'context': 'def default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (\n                type(value).__name__, value.dtype, value.shape)\n\n    elif HAVE_NUMPY and isinstance(value, numpy.number):\n        return str(f""{value} ({value.dtype})"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 409, 'coloffset': 4, 'linematch': 'elif HAVE_NUMPY and isinstance(value, numpy.number):', 'context': '    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (\n                type(value).__name__, value.dtype, value.shape)\n\n    elif HAVE_NUMPY and isinstance(value, numpy.number):\n        return str(f""{value} ({value.dtype})"")\n\n    elif isinstance(value, STR_SAFE_TYPES):\n        try:\n            return str(value)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 412, 'coloffset': 4, 'linematch': 'elif isinstance(value, STR_SAFE_TYPES):', 'context': '\n    elif HAVE_NUMPY and isinstance(value, numpy.number):\n        return str(f""{value} ({value.dtype})"")\n\n    elif isinstance(value, STR_SAFE_TYPES):\n        try:\n            return str(value)\n        except Exception:\n            message = ""string safe type stringifier failed""\n            ui_log.exception(message)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 420, 'coloffset': 4, 'linematch': 'elif hasattr(type(value), ""safely_stringify_for_pudb""):', 'context': '            message = ""string safe type stringifier failed""\n            ui_log.exception(message)\n            return ""!! %s !!"" % message\n\n    elif hasattr(type(value), ""safely_stringify_for_pudb""):\n        try:\n            # (E.g.) Mock objects will pretend to have this\n            # and return nonsense.\n            result = value.safely_stringify_for_pudb()\n        except Exception:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 430, 'coloffset': 8, 'linematch': 'if isinstance(result, str):', 'context': '            message = ""safely_stringify_for_pudb call failed""\n            ui_log.exception(message)\n            result = ""!! %s !!"" % message\n\n        if isinstance(result, str):\n            return str(result)\n\n    elif isinstance(value, Sized):\n        try:\n            # Example: numpy arrays with shape == () raise on len()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 433, 'coloffset': 4, 'linematch': 'elif isinstance(value, Sized):', 'context': '\n        if isinstance(result, str):\n            return str(result)\n\n    elif isinstance(value, Sized):\n        try:\n            # Example: numpy arrays with shape == () raise on len()\n            obj_len = len(value)\n        except TypeError:\n            pass', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 430, 'coloffset': 8, 'linematch': 'if isinstance(result, str):', 'context': '            message = ""safely_stringify_for_pudb call failed""\n            ui_log.exception(message)\n            result = ""!! %s !!"" % message\n\n        if isinstance(result, str):\n            return str(result)\n\n    elif isinstance(value, Sized):\n        try:\n            # Example: numpy arrays with shape == () raise on len()', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 401, 'coloffset': 0, 'linematch': 'def default_stringifier(value):', 'context': '\n# }}}\n\n\ndef default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 405, 'coloffset': 4, 'linematch': 'if HAVE_NUMPY and isinstance(value, numpy.ndarray):', 'context': 'def default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (\n                type(value).__name__, value.dtype, value.shape)\n\n    elif HAVE_NUMPY and isinstance(value, numpy.number):\n        return str(f""{value} ({value.dtype})"")', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 409, 'coloffset': 4, 'linematch': 'elif HAVE_NUMPY and isinstance(value, numpy.number):', 'context': '    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (\n                type(value).__name__, value.dtype, value.shape)\n\n    elif HAVE_NUMPY and isinstance(value, numpy.number):\n        return str(f""{value} ({value.dtype})"")\n\n    elif isinstance(value, STR_SAFE_TYPES):\n        try:\n            return str(value)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 412, 'coloffset': 4, 'linematch': 'elif isinstance(value, STR_SAFE_TYPES):', 'context': '\n    elif HAVE_NUMPY and isinstance(value, numpy.number):\n        return str(f""{value} ({value.dtype})"")\n\n    elif isinstance(value, STR_SAFE_TYPES):\n        try:\n            return str(value)\n        except Exception:\n            message = ""string safe type stringifier failed""\n            ui_log.exception(message)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 420, 'coloffset': 4, 'linematch': 'elif hasattr(type(value), ""safely_stringify_for_pudb""):', 'context': '            message = ""string safe type stringifier failed""\n            ui_log.exception(message)\n            return ""!! %s !!"" % message\n\n    elif hasattr(type(value), ""safely_stringify_for_pudb""):\n        try:\n            # (E.g.) Mock objects will pretend to have this\n            # and return nonsense.\n            result = value.safely_stringify_for_pudb()\n        except Exception:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 430, 'coloffset': 8, 'linematch': 'if isinstance(result, str):', 'context': '            message = ""safely_stringify_for_pudb call failed""\n            ui_log.exception(message)\n            result = ""!! %s !!"" % message\n\n        if isinstance(result, str):\n            return str(result)\n\n    elif isinstance(value, Sized):\n        try:\n            # Example: numpy arrays with shape == () raise on len()', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 433, 'coloffset': 4, 'linematch': 'elif isinstance(value, Sized):', 'context': '\n        if isinstance(result, str):\n            return str(result)\n\n    elif isinstance(value, Sized):\n        try:\n            # Example: numpy arrays with shape == () raise on len()\n            obj_len = len(value)\n        except TypeError:\n            pass', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 401, 'coloffset': 0, 'linematch': 'def default_stringifier(value):', 'context': '\n# }}}\n\n\ndef default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 402, 'coloffset': 4, 'linematch': 'if isinstance(value, BASIC_TYPES):', 'context': '# }}}\n\n\ndef default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (\n                type(value).__name__, value.dtype, value.shape)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 405, 'coloffset': 4, 'linematch': 'if HAVE_NUMPY and isinstance(value, numpy.ndarray):', 'context': 'def default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (\n                type(value).__name__, value.dtype, value.shape)\n\n    elif HAVE_NUMPY and isinstance(value, numpy.number):\n        return str(f""{value} ({value.dtype})"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 442, 'coloffset': 4, 'linematch': 'return str(type(value).__name__)', 'context': '            pass\n        else:\n            return f""{type(value).__name__} ({obj_len})""\n\n    return str(type(value).__name__)\n\n\ndef type_stringifier(value):\n    return str(type(value).__name__)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 401, 'coloffset': 0, 'linematch': 'def default_stringifier(value):', 'context': '\n# }}}\n\n\ndef default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 401, 'coloffset': 0, 'linematch': 'def default_stringifier(value):', 'context': '\n# }}}\n\n\ndef default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 401, 'coloffset': 0, 'linematch': 'def default_stringifier(value):', 'context': '\n# }}}\n\n\ndef default_stringifier(value):\n    if isinstance(value, BASIC_TYPES):\n        return repr(value)\n\n    if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n        return ""%s(%s) %s"" % (', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3771', 'line': 405, 'description': ['    if HAVE_NUMPY and isinstance(value, numpy.ndarray):'], 'failure': []}, {'name': 'Mutant #3772', 'line': 406, 'description': ['        return ""%s(%s) %s"" % ('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -403,7 +403,7 @@\n         return repr(value)\n \n     if HAVE_NUMPY and isinstance(value, numpy.ndarray):\n-        return ""%s(%s) %s"" % (\n+        return ""XX%s(%s) %sXX"" % (\n                 type(value).__name__, value.dtype, value.shape)\n \n     elif HAVE_NUMPY and isinstance(value, numpy.number):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3773', 'line': 406, 'description': ['        return ""%s(%s) %s"" % ('], 'failure': []}, {'name': 'Mutant #3774', 'line': 409, 'description': ['    elif HAVE_NUMPY and isinstance(value, numpy.number):'], 'failure': []}, {'name': 'Mutant #3775', 'line': 410, 'description': ['        return str(f""{value} ({value.dtype})"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -407,7 +407,7 @@\n                 type(value).__name__, value.dtype, value.shape)\n \n     elif HAVE_NUMPY and isinstance(value, numpy.number):\n-        return str(f""{value} ({value.dtype})"")\n+        return str(f""XX{value} ({value.dtype})XX"")\n \n     elif isinstance(value, STR_SAFE_TYPES):\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3776', 'line': 416, 'description': ['            message = ""string safe type stringifier failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -413,7 +413,7 @@\n         try:\n             return str(value)\n         except Exception:\n-            message = ""string safe type stringifier failed""\n+            message = ""XXstring safe type stringifier failedXX""\n             ui_log.exception(message)\n             return ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3777', 'line': 416, 'description': ['            message = ""string safe type stringifier failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -413,7 +413,7 @@\n         try:\n             return str(value)\n         except Exception:\n-            message = ""string safe type stringifier failed""\n+            message = None\n             ui_log.exception(message)\n             return ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3778', 'line': 418, 'description': ['            return ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -415,7 +415,7 @@\n         except Exception:\n             message = ""string safe type stringifier failed""\n             ui_log.exception(message)\n-            return ""!! %s !!"" % message\n+            return ""XX!! %s !!XX"" % message\n \n     elif hasattr(type(value), ""safely_stringify_for_pudb""):\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3779', 'line': 418, 'description': ['            return ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -415,7 +415,7 @@\n         except Exception:\n             message = ""string safe type stringifier failed""\n             ui_log.exception(message)\n-            return ""!! %s !!"" % message\n+            return ""!! %s !!"" / message\n \n     elif hasattr(type(value), ""safely_stringify_for_pudb""):\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3780', 'line': 420, 'description': ['    elif hasattr(type(value), ""safely_stringify_for_pudb""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -417,7 +417,7 @@\n             ui_log.exception(message)\n             return ""!! %s !!"" % message\n \n-    elif hasattr(type(value), ""safely_stringify_for_pudb""):\n+    elif hasattr(type(value), ""XXsafely_stringify_for_pudbXX""):\n         try:\n             # (E.g.) Mock objects will pretend to have this\n             # and return nonsense.\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3781', 'line': 424, 'description': ['            result = value.safely_stringify_for_pudb()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -421,7 +421,7 @@\n         try:\n             # (E.g.) Mock objects will pretend to have this\n             # and return nonsense.\n-            result = value.safely_stringify_for_pudb()\n+            result = None\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3782', 'line': 426, 'description': ['            message = ""safely_stringify_for_pudb call failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -423,7 +423,7 @@\n             # and return nonsense.\n             result = value.safely_stringify_for_pudb()\n         except Exception:\n-            message = ""safely_stringify_for_pudb call failed""\n+            message = ""XXsafely_stringify_for_pudb call failedXX""\n             ui_log.exception(message)\n             result = ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3783', 'line': 426, 'description': ['            message = ""safely_stringify_for_pudb call failed""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -423,7 +423,7 @@\n             # and return nonsense.\n             result = value.safely_stringify_for_pudb()\n         except Exception:\n-            message = ""safely_stringify_for_pudb call failed""\n+            message = None\n             ui_log.exception(message)\n             result = ""!! %s !!"" % message\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3784', 'line': 428, 'description': ['            result = ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -425,7 +425,7 @@\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n-            result = ""!! %s !!"" % message\n+            result = ""XX!! %s !!XX"" % message\n \n         if isinstance(result, str):\n             return str(result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3785', 'line': 428, 'description': ['            result = ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -425,7 +425,7 @@\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n-            result = ""!! %s !!"" % message\n+            result = ""!! %s !!"" / message\n \n         if isinstance(result, str):\n             return str(result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3786', 'line': 428, 'description': ['            result = ""!! %s !!"" % message'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -425,7 +425,7 @@\n         except Exception:\n             message = ""safely_stringify_for_pudb call failed""\n             ui_log.exception(message)\n-            result = ""!! %s !!"" % message\n+            result = None\n \n         if isinstance(result, str):\n             return str(result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3787', 'line': 436, 'description': ['            obj_len = len(value)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -433,7 +433,7 @@\n     elif isinstance(value, Sized):\n         try:\n             # Example: numpy arrays with shape == () raise on len()\n-            obj_len = len(value)\n+            obj_len = None\n         except TypeError:\n             pass\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3788', 'line': 440, 'description': ['            return f""{type(value).__name__} ({obj_len})""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -437,7 +437,7 @@\n         except TypeError:\n             pass\n         else:\n-            return f""{type(value).__name__} ({obj_len})""\n+            return f""XX{type(value).__name__} ({obj_len})XX""\n \n     return str(type(value).__name__)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5391', 'line': 404, 'description': ['        self.assert_class_counts_equal({""other"": 2048})'], 'failure': []}, {'name': 'Mutant #5392', 'line': 404, 'description': ['        self.assert_class_counts_equal({""other"": 2048})'], 'failure': []}]",25.0,['CL001' 'CL002' 'ANNOT001' 'F002' 'C002' 'CML001' 'MRET001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_stringifier,468-501,"[{'lineno': 475, 'coloffset': 8, 'linematch': 'if """" == iinfo.display_type.strip():', 'context': '    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]\n    except KeyError:\n        if """" == iinfo.display_type.strip():\n            return lambda _: ""ERROR: custom stringifier is not set""\n        try:\n            if not custom_stringifier_dict:  # Only execfile once\n                from os.path import expanduser, expandvars\n                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 478, 'coloffset': 12, 'linematch': 'if not custom_stringifier_dict:  # Only execfile once', 'context': '    except KeyError:\n        if """" == iinfo.display_type.strip():\n            return lambda _: ""ERROR: custom stringifier is not set""\n        try:\n            if not custom_stringifier_dict:  # Only execfile once\n                from os.path import expanduser, expandvars\n                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n                with open(custom_stringifier_fname) as inf:\n                    exec(compile(inf.read(), custom_stringifier_fname, ""exec""),\n                            custom_stringifier_dict,', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 493, 'coloffset': 12, 'linematch': 'if ""pudb_stringifier"" not in custom_stringifier_dict:', 'context': '        except Exception:\n            ui_log.exception(""Error when importing custom stringifier"")\n            return error_stringifier\n        else:\n            if ""pudb_stringifier"" not in custom_stringifier_dict:\n                ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                             ""named pudb_stringifier at the module level."")\n                return lambda value: str(\n                        ""ERROR: Invalid custom stringifier file: ""\n                        ""pudb_stringifier not defined."")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 468, 'coloffset': 0, 'linematch': 'def get_stringifier(iinfo: InspectInfo) -> Callable:', 'context': '    ""id"": id_stringifier,\n}\n\n\ndef get_stringifier(iinfo: InspectInfo) -> Callable:\n    """"""\n    :return: a function that turns an object into a Unicode text object.\n    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 468, 'coloffset': 0, 'linematch': 'def get_stringifier(iinfo: InspectInfo) -> Callable:', 'context': '    ""id"": id_stringifier,\n}\n\n\ndef get_stringifier(iinfo: InspectInfo) -> Callable:\n    """"""\n    :return: a function that turns an object into a Unicode text object.\n    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 469, 'coloffset': 4, 'linematch': '""""""', 'context': '}\n\n\ndef get_stringifier(iinfo: InspectInfo) -> Callable:\n    """"""\n    :return: a function that turns an object into a Unicode text object.\n    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]\n    except KeyError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 472, 'coloffset': 4, 'linematch': 'try:', 'context': 'def get_stringifier(iinfo: InspectInfo) -> Callable:\n    """"""\n    :return: a function that turns an object into a Unicode text object.\n    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]\n    except KeyError:\n        if """" == iinfo.display_type.strip():\n            return lambda _: ""ERROR: custom stringifier is not set""\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 468, 'coloffset': 0, 'linematch': 'def get_stringifier(iinfo: InspectInfo) -> Callable:', 'context': '    ""id"": id_stringifier,\n}\n\n\ndef get_stringifier(iinfo: InspectInfo) -> Callable:\n    """"""\n    :return: a function that turns an object into a Unicode text object.\n    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 468, 'coloffset': 0, 'linematch': 'def get_stringifier(iinfo: InspectInfo) -> Callable:', 'context': '    ""id"": id_stringifier,\n}\n\n\ndef get_stringifier(iinfo: InspectInfo) -> Callable:\n    """"""\n    :return: a function that turns an object into a Unicode text object.\n    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 468, 'coloffset': 0, 'linematch': 'def get_stringifier(iinfo: InspectInfo) -> Callable:', 'context': '    ""id"": id_stringifier,\n}\n\n\ndef get_stringifier(iinfo: InspectInfo) -> Callable:\n    """"""\n    :return: a function that turns an object into a Unicode text object.\n    """"""\n    try:\n        return STRINGIFIERS[iinfo.display_type]', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3798', 'line': 475, 'description': ['        if """" == iinfo.display_type.strip():'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -472,7 +472,7 @@\n     try:\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n-        if """" == iinfo.display_type.strip():\n+        if ""XXXX"" == iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3799', 'line': 475, 'description': ['        if """" == iinfo.display_type.strip():'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -472,7 +472,7 @@\n     try:\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n-        if """" == iinfo.display_type.strip():\n+        if """" != iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3800', 'line': 476, 'description': ['            return lambda _: ""ERROR: custom stringifier is not set""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -473,7 +473,7 @@\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n         if """" == iinfo.display_type.strip():\n-            return lambda _: ""ERROR: custom stringifier is not set""\n+            return lambda _: ""XXERROR: custom stringifier is not setXX""\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3801', 'line': 476, 'description': ['            return lambda _: ""ERROR: custom stringifier is not set""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -473,7 +473,7 @@\n         return STRINGIFIERS[iinfo.display_type]\n     except KeyError:\n         if """" == iinfo.display_type.strip():\n-            return lambda _: ""ERROR: custom stringifier is not set""\n+            return lambda _: None\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3802', 'line': 478, 'description': ['            if not custom_stringifier_dict:  # Only execfile once'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -475,7 +475,7 @@\n         if """" == iinfo.display_type.strip():\n             return lambda _: ""ERROR: custom stringifier is not set""\n         try:\n-            if not custom_stringifier_dict:  # Only execfile once\n+            if  custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n                 custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n                 with open(custom_stringifier_fname) as inf:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3803', 'line': 480, 'description': ['                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -477,7 +477,7 @@\n         try:\n             if not custom_stringifier_dict:  # Only execfile once\n                 from os.path import expanduser, expandvars\n-                custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n+                custom_stringifier_fname = None\n                 with open(custom_stringifier_fname) as inf:\n                     exec(compile(inf.read(), custom_stringifier_fname, ""exec""),\n                             custom_stringifier_dict,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3804', 'line': 482, 'description': ['                    exec(compile(inf.read(), custom_stringifier_fname, ""exec""),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -479,7 +479,7 @@\n                 from os.path import expanduser, expandvars\n                 custom_stringifier_fname = expanduser(expandvars(iinfo.display_type))\n                 with open(custom_stringifier_fname) as inf:\n-                    exec(compile(inf.read(), custom_stringifier_fname, ""exec""),\n+                    exec(compile(inf.read(), custom_stringifier_fname, ""XXexecXX""),\n                             custom_stringifier_dict,\n                             custom_stringifier_dict)\n         except FileNotFoundError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3805', 'line': 486, 'description': ['            ui_log.error(""Unable to locate custom stringifier file {!r}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -483,7 +483,7 @@\n                             custom_stringifier_dict,\n                             custom_stringifier_dict)\n         except FileNotFoundError:\n-            ui_log.error(""Unable to locate custom stringifier file {!r}""\n+            ui_log.error(""XXUnable to locate custom stringifier file {!r}XX""\n                          .format(iinfo.display_type))\n             return error_stringifier\n         except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3806', 'line': 490, 'description': ['            ui_log.exception(""Error when importing custom stringifier"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -487,7 +487,7 @@\n                          .format(iinfo.display_type))\n             return error_stringifier\n         except Exception:\n-            ui_log.exception(""Error when importing custom stringifier"")\n+            ui_log.exception(""XXError when importing custom stringifierXX"")\n             return error_stringifier\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3807', 'line': 493, 'description': ['            if ""pudb_stringifier"" not in custom_stringifier_dict:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -490,7 +490,7 @@\n             ui_log.exception(""Error when importing custom stringifier"")\n             return error_stringifier\n         else:\n-            if ""pudb_stringifier"" not in custom_stringifier_dict:\n+            if ""XXpudb_stringifierXX"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3808', 'line': 493, 'description': ['            if ""pudb_stringifier"" not in custom_stringifier_dict:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -490,7 +490,7 @@\n             ui_log.exception(""Error when importing custom stringifier"")\n             return error_stringifier\n         else:\n-            if ""pudb_stringifier"" not in custom_stringifier_dict:\n+            if ""pudb_stringifier""  in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3809', 'line': 494, 'description': ['                ui_log.error(f""{iinfo.display_type} does not contain a function ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -491,7 +491,7 @@\n             return error_stringifier\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n-                ui_log.error(f""{iinfo.display_type} does not contain a function ""\n+                ui_log.error(f""XX{iinfo.display_type} does not contain a function XX""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3810', 'line': 495, 'description': ['                             ""named pudb_stringifier at the module level."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -492,7 +492,7 @@\n         else:\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n-                             ""named pudb_stringifier at the module level."")\n+                             ""XXnamed pudb_stringifier at the module level.XX"")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n                         ""pudb_stringifier not defined."")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3811', 'line': 497, 'description': ['                        ""ERROR: Invalid custom stringifier file: ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -494,7 +494,7 @@\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n-                        ""ERROR: Invalid custom stringifier file: ""\n+                        ""XXERROR: Invalid custom stringifier file: XX""\n                         ""pudb_stringifier not defined."")\n             else:\n                 return (lambda value:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3812', 'line': 498, 'description': ['                        ""pudb_stringifier not defined."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -495,7 +495,7 @@\n                              ""named pudb_stringifier at the module level."")\n                 return lambda value: str(\n                         ""ERROR: Invalid custom stringifier file: ""\n-                        ""pudb_stringifier not defined."")\n+                        ""XXpudb_stringifier not defined.XX"")\n             else:\n                 return (lambda value:\n                     str(custom_stringifier_dict[""pudb_stringifier""](value)))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3813', 'line': 498, 'description': ['                        ""pudb_stringifier not defined."")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -493,9 +493,7 @@\n             if ""pudb_stringifier"" not in custom_stringifier_dict:\n                 ui_log.error(f""{iinfo.display_type} does not contain a function ""\n                              ""named pudb_stringifier at the module level."")\n-                return lambda value: str(\n-                        ""ERROR: Invalid custom stringifier file: ""\n-                        ""pudb_stringifier not defined."")\n+                return lambda value: None\n             else:\n                 return (lambda value:\n                     str(custom_stringifier_dict[""pudb_stringifier""](value)))\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3814', 'line': 501, 'description': ['                    str(custom_stringifier_dict[""pudb_stringifier""](value)))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -498,7 +498,7 @@\n                         ""pudb_stringifier not defined."")\n             else:\n                 return (lambda value:\n-                    str(custom_stringifier_dict[""pudb_stringifier""](value)))\n+                    str(custom_stringifier_dict[""XXpudb_stringifierXX""](value)))\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3815', 'line': 501, 'description': ['                    str(custom_stringifier_dict[""pudb_stringifier""](value)))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -497,8 +497,7 @@\n                         ""ERROR: Invalid custom stringifier file: ""\n                         ""pudb_stringifier not defined."")\n             else:\n-                return (lambda value:\n-                    str(custom_stringifier_dict[""pudb_stringifier""](value)))\n+                return (lambda value: None)\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'C002' 'CML001' 'MRET001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,make_var_view,722-758,"[{'lineno': 739, 'coloffset': 4, 'linematch': 'if ""__return__"" in vars:', 'context': '\n        WatchValueWalker(frame_var_info, watch_widget_list, watch_expr) \\\n                .walk_value(None, watch_expr.expression, value)\n\n    if ""__return__"" in vars:\n        ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n                attr_prefix=""return"")\n\n    for var in vars:\n        if not (var.startswith(""__"") and var.endswith(""__"")):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 749, 'coloffset': 4, 'linematch': 'if watch_widget_list:', 'context': '            tmv_walker.walk_value(None, var, locals[var])\n\n    result = tmv_walker.main_widget_list\n\n    if watch_widget_list:\n        result = (watch_widget_list + [SEPARATOR] + result)\n\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 752, 'coloffset': 4, 'linematch': 'if tmv_walker.top_widget_list:', 'context': '\n    if watch_widget_list:\n        result = (watch_widget_list + [SEPARATOR] + result)\n\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n\n    if ret_walker.widget_list:\n        result = (ret_walker.widget_list + result)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 755, 'coloffset': 4, 'linematch': 'if ret_walker.widget_list:', 'context': '\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n\n    if ret_walker.widget_list:\n        result = (ret_walker.widget_list + result)\n\n    return result\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 744, 'coloffset': 8, 'linematch': 'if not (var.startswith(""__"") and var.endswith(""__"")):', 'context': '        ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n                attr_prefix=""return"")\n\n    for var in vars:\n        if not (var.startswith(""__"") and var.endswith(""__"")):\n            tmv_walker.walk_value(None, var, locals[var])\n\n    result = tmv_walker.main_widget_list\n\n    if watch_widget_list:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 722, 'coloffset': 0, 'linematch': 'def make_var_view(frame_var_info, locals, globals):', 'context': '\nSEPARATOR = urwid.AttrMap(urwid.Text(""""), ""variable separator"")\n\n\ndef make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 723, 'coloffset': 16, 'linematch': 'vars = list(locals.keys())', 'context': 'SEPARATOR = urwid.AttrMap(urwid.Text(""""), ""variable separator"")\n\n\ndef make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)\n    watch_widget_list = []', 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 749, 'coloffset': 4, 'linematch': 'if watch_widget_list:', 'context': '            tmv_walker.walk_value(None, var, locals[var])\n\n    result = tmv_walker.main_widget_list\n\n    if watch_widget_list:\n        result = (watch_widget_list + [SEPARATOR] + result)\n\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 752, 'coloffset': 4, 'linematch': 'if tmv_walker.top_widget_list:', 'context': '\n    if watch_widget_list:\n        result = (watch_widget_list + [SEPARATOR] + result)\n\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n\n    if ret_walker.widget_list:\n        result = (ret_walker.widget_list + result)\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 755, 'coloffset': 4, 'linematch': 'if ret_walker.widget_list:', 'context': '\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n\n    if ret_walker.widget_list:\n        result = (ret_walker.widget_list + result)\n\n    return result\n\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 722, 'coloffset': 0, 'linematch': 'def make_var_view(frame_var_info, locals, globals):', 'context': '\nSEPARATOR = urwid.AttrMap(urwid.Text(""""), ""variable separator"")\n\n\ndef make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 723, 'coloffset': 4, 'linematch': 'vars = list(locals.keys())', 'context': 'SEPARATOR = urwid.AttrMap(urwid.Text(""""), ""variable separator"")\n\n\ndef make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)\n    watch_widget_list = []', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 724, 'coloffset': 4, 'linematch': 'vars.sort(key=str.lower)', 'context': '\n\ndef make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)\n    watch_widget_list = []\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 726, 'coloffset': 4, 'linematch': 'tmv_walker = TopAndMainVariableWalker(frame_var_info)', 'context': 'def make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)\n    watch_widget_list = []\n\n    for watch_expr in frame_var_info.watches:\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 727, 'coloffset': 4, 'linematch': 'ret_walker = BasicValueWalker(frame_var_info)', 'context': '    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)\n    watch_widget_list = []\n\n    for watch_expr in frame_var_info.watches:\n        try:\n            value = eval(watch_expr.expression, globals, locals)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 728, 'coloffset': 4, 'linematch': 'watch_widget_list = []', 'context': '    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)\n    watch_widget_list = []\n\n    for watch_expr in frame_var_info.watches:\n        try:\n            value = eval(watch_expr.expression, globals, locals)\n        except Exception:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 730, 'coloffset': 4, 'linematch': 'for watch_expr in frame_var_info.watches:', 'context': '    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)\n    watch_widget_list = []\n\n    for watch_expr in frame_var_info.watches:\n        try:\n            value = eval(watch_expr.expression, globals, locals)\n        except Exception:\n            value = WatchEvalError()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 739, 'coloffset': 4, 'linematch': 'if ""__return__"" in vars:', 'context': '\n        WatchValueWalker(frame_var_info, watch_widget_list, watch_expr) \\\n                .walk_value(None, watch_expr.expression, value)\n\n    if ""__return__"" in vars:\n        ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n                attr_prefix=""return"")\n\n    for var in vars:\n        if not (var.startswith(""__"") and var.endswith(""__"")):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 743, 'coloffset': 4, 'linematch': 'for var in vars:', 'context': '    if ""__return__"" in vars:\n        ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n                attr_prefix=""return"")\n\n    for var in vars:\n        if not (var.startswith(""__"") and var.endswith(""__"")):\n            tmv_walker.walk_value(None, var, locals[var])\n\n    result = tmv_walker.main_widget_list\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 747, 'coloffset': 4, 'linematch': 'result = tmv_walker.main_widget_list', 'context': '    for var in vars:\n        if not (var.startswith(""__"") and var.endswith(""__"")):\n            tmv_walker.walk_value(None, var, locals[var])\n\n    result = tmv_walker.main_widget_list\n\n    if watch_widget_list:\n        result = (watch_widget_list + [SEPARATOR] + result)\n\n    if tmv_walker.top_widget_list:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 749, 'coloffset': 4, 'linematch': 'if watch_widget_list:', 'context': '            tmv_walker.walk_value(None, var, locals[var])\n\n    result = tmv_walker.main_widget_list\n\n    if watch_widget_list:\n        result = (watch_widget_list + [SEPARATOR] + result)\n\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 752, 'coloffset': 4, 'linematch': 'if tmv_walker.top_widget_list:', 'context': '\n    if watch_widget_list:\n        result = (watch_widget_list + [SEPARATOR] + result)\n\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n\n    if ret_walker.widget_list:\n        result = (ret_walker.widget_list + result)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 755, 'coloffset': 4, 'linematch': 'if ret_walker.widget_list:', 'context': '\n    if tmv_walker.top_widget_list:\n        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n\n    if ret_walker.widget_list:\n        result = (ret_walker.widget_list + result)\n\n    return result\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 758, 'coloffset': 4, 'linematch': 'return result', 'context': '\n    if ret_walker.widget_list:\n        result = (ret_walker.widget_list + result)\n\n    return result\n\n\nclass FrameVarInfoKeeper:\n    def __init__(self):\n        self.frame_var_info = {}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 722, 'coloffset': 0, 'linematch': 'def make_var_view(frame_var_info, locals, globals):', 'context': '\nSEPARATOR = urwid.AttrMap(urwid.Text(""""), ""variable separator"")\n\n\ndef make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 722, 'coloffset': 0, 'linematch': 'def make_var_view(frame_var_info, locals, globals):', 'context': '\nSEPARATOR = urwid.AttrMap(urwid.Text(""""), ""variable separator"")\n\n\ndef make_var_view(frame_var_info, locals, globals):\n    vars = list(locals.keys())\n    vars.sort(key=str.lower)\n\n    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n    ret_walker = BasicValueWalker(frame_var_info)', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3946', 'line': 723, 'description': ['    vars = list(locals.keys())'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -720,7 +720,7 @@\n \n \n def make_var_view(frame_var_info, locals, globals):\n-    vars = list(locals.keys())\n+    vars = None\n     vars.sort(key=str.lower)\n \n     tmv_walker = TopAndMainVariableWalker(frame_var_info)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3947', 'line': 726, 'description': ['    tmv_walker = TopAndMainVariableWalker(frame_var_info)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -723,7 +723,7 @@\n     vars = list(locals.keys())\n     vars.sort(key=str.lower)\n \n-    tmv_walker = TopAndMainVariableWalker(frame_var_info)\n+    tmv_walker = None\n     ret_walker = BasicValueWalker(frame_var_info)\n     watch_widget_list = []\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3948', 'line': 727, 'description': ['    ret_walker = BasicValueWalker(frame_var_info)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -724,7 +724,7 @@\n     vars.sort(key=str.lower)\n \n     tmv_walker = TopAndMainVariableWalker(frame_var_info)\n-    ret_walker = BasicValueWalker(frame_var_info)\n+    ret_walker = None\n     watch_widget_list = []\n \n     for watch_expr in frame_var_info.watches:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3949', 'line': 728, 'description': ['    watch_widget_list = []'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -725,7 +725,7 @@\n \n     tmv_walker = TopAndMainVariableWalker(frame_var_info)\n     ret_walker = BasicValueWalker(frame_var_info)\n-    watch_widget_list = []\n+    watch_widget_list = None\n \n     for watch_expr in frame_var_info.watches:\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3950', 'line': 732, 'description': ['            value = eval(watch_expr.expression, globals, locals)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -729,7 +729,7 @@\n \n     for watch_expr in frame_var_info.watches:\n         try:\n-            value = eval(watch_expr.expression, globals, locals)\n+            value = None\n         except Exception:\n             value = WatchEvalError()\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3951', 'line': 734, 'description': ['            value = WatchEvalError()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -731,7 +731,7 @@\n         try:\n             value = eval(watch_expr.expression, globals, locals)\n         except Exception:\n-            value = WatchEvalError()\n+            value = None\n \n         WatchValueWalker(frame_var_info, watch_widget_list, watch_expr) \\\n                 .walk_value(None, watch_expr.expression, value)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3952', 'line': 739, 'description': ['    if ""__return__"" in vars:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -736,7 +736,7 @@\n         WatchValueWalker(frame_var_info, watch_widget_list, watch_expr) \\\n                 .walk_value(None, watch_expr.expression, value)\n \n-    if ""__return__"" in vars:\n+    if ""XX__return__XX"" in vars:\n         ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n                 attr_prefix=""return"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3953', 'line': 739, 'description': ['    if ""__return__"" in vars:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -736,7 +736,7 @@\n         WatchValueWalker(frame_var_info, watch_widget_list, watch_expr) \\\n                 .walk_value(None, watch_expr.expression, value)\n \n-    if ""__return__"" in vars:\n+    if ""__return__"" not in vars:\n         ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n                 attr_prefix=""return"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3954', 'line': 740, 'description': ['        ret_walker.walk_value(None, ""Return"", locals[""__return__""],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -737,7 +737,7 @@\n                 .walk_value(None, watch_expr.expression, value)\n \n     if ""__return__"" in vars:\n-        ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n+        ret_walker.walk_value(None, ""XXReturnXX"", locals[""__return__""],\n                 attr_prefix=""return"")\n \n     for var in vars:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3955', 'line': 740, 'description': ['        ret_walker.walk_value(None, ""Return"", locals[""__return__""],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -737,7 +737,7 @@\n                 .walk_value(None, watch_expr.expression, value)\n \n     if ""__return__"" in vars:\n-        ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n+        ret_walker.walk_value(None, ""Return"", locals[""XX__return__XX""],\n                 attr_prefix=""return"")\n \n     for var in vars:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3956', 'line': 741, 'description': ['                attr_prefix=""return"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -738,7 +738,7 @@\n \n     if ""__return__"" in vars:\n         ret_walker.walk_value(None, ""Return"", locals[""__return__""],\n-                attr_prefix=""return"")\n+                attr_prefix=""XXreturnXX"")\n \n     for var in vars:\n         if not (var.startswith(""__"") and var.endswith(""__"")):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3957', 'line': 744, 'description': ['        if not (var.startswith(""__"") and var.endswith(""__"")):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -741,7 +741,7 @@\n                 attr_prefix=""return"")\n \n     for var in vars:\n-        if not (var.startswith(""__"") and var.endswith(""__"")):\n+        if  (var.startswith(""__"") and var.endswith(""__"")):\n             tmv_walker.walk_value(None, var, locals[var])\n \n     result = tmv_walker.main_widget_list\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3958', 'line': 744, 'description': ['        if not (var.startswith(""__"") and var.endswith(""__"")):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -741,7 +741,7 @@\n                 attr_prefix=""return"")\n \n     for var in vars:\n-        if not (var.startswith(""__"") and var.endswith(""__"")):\n+        if not (var.startswith(""XX__XX"") and var.endswith(""__"")):\n             tmv_walker.walk_value(None, var, locals[var])\n \n     result = tmv_walker.main_widget_list\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3959', 'line': 744, 'description': ['        if not (var.startswith(""__"") and var.endswith(""__"")):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -741,7 +741,7 @@\n                 attr_prefix=""return"")\n \n     for var in vars:\n-        if not (var.startswith(""__"") and var.endswith(""__"")):\n+        if not (var.startswith(""__"") and var.endswith(""XX__XX"")):\n             tmv_walker.walk_value(None, var, locals[var])\n \n     result = tmv_walker.main_widget_list\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3960', 'line': 744, 'description': ['        if not (var.startswith(""__"") and var.endswith(""__"")):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -741,7 +741,7 @@\n                 attr_prefix=""return"")\n \n     for var in vars:\n-        if not (var.startswith(""__"") and var.endswith(""__"")):\n+        if not (var.startswith(""__"") or var.endswith(""__"")):\n             tmv_walker.walk_value(None, var, locals[var])\n \n     result = tmv_walker.main_widget_list\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3961', 'line': 747, 'description': ['    result = tmv_walker.main_widget_list'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -744,7 +744,7 @@\n         if not (var.startswith(""__"") and var.endswith(""__"")):\n             tmv_walker.walk_value(None, var, locals[var])\n \n-    result = tmv_walker.main_widget_list\n+    result = None\n \n     if watch_widget_list:\n         result = (watch_widget_list + [SEPARATOR] + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3962', 'line': 750, 'description': ['        result = (watch_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -747,7 +747,7 @@\n     result = tmv_walker.main_widget_list\n \n     if watch_widget_list:\n-        result = (watch_widget_list + [SEPARATOR] + result)\n+        result = (watch_widget_list - [SEPARATOR] + result)\n \n     if tmv_walker.top_widget_list:\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3963', 'line': 750, 'description': ['        result = (watch_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -747,7 +747,7 @@\n     result = tmv_walker.main_widget_list\n \n     if watch_widget_list:\n-        result = (watch_widget_list + [SEPARATOR] + result)\n+        result = (watch_widget_list + [SEPARATOR] - result)\n \n     if tmv_walker.top_widget_list:\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3964', 'line': 750, 'description': ['        result = (watch_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -747,7 +747,7 @@\n     result = tmv_walker.main_widget_list\n \n     if watch_widget_list:\n-        result = (watch_widget_list + [SEPARATOR] + result)\n+        result = None\n \n     if tmv_walker.top_widget_list:\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3965', 'line': 753, 'description': ['        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -750,7 +750,7 @@\n         result = (watch_widget_list + [SEPARATOR] + result)\n \n     if tmv_walker.top_widget_list:\n-        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n+        result = (tmv_walker.top_widget_list - [SEPARATOR] + result)\n \n     if ret_walker.widget_list:\n         result = (ret_walker.widget_list + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3966', 'line': 753, 'description': ['        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -750,7 +750,7 @@\n         result = (watch_widget_list + [SEPARATOR] + result)\n \n     if tmv_walker.top_widget_list:\n-        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n+        result = (tmv_walker.top_widget_list + [SEPARATOR] - result)\n \n     if ret_walker.widget_list:\n         result = (ret_walker.widget_list + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3967', 'line': 753, 'description': ['        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -750,7 +750,7 @@\n         result = (watch_widget_list + [SEPARATOR] + result)\n \n     if tmv_walker.top_widget_list:\n-        result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n+        result = None\n \n     if ret_walker.widget_list:\n         result = (ret_walker.widget_list + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3968', 'line': 756, 'description': ['        result = (ret_walker.widget_list + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -753,7 +753,7 @@\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n \n     if ret_walker.widget_list:\n-        result = (ret_walker.widget_list + result)\n+        result = (ret_walker.widget_list - result)\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3969', 'line': 756, 'description': ['        result = (ret_walker.widget_list + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -753,7 +753,7 @@\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n \n     if ret_walker.widget_list:\n-        result = (ret_walker.widget_list + result)\n+        result = None\n \n     return result\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'KF001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//Call/func/Attribute[@attr=""keys""]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 1, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,__subclasshook__,120-130,"[{'lineno': 121, 'coloffset': 8, 'linematch': 'if cls is PudbMapping:', 'context': '\nclass PudbMapping(ABC):  # noqa: B024\n    @classmethod\n    def __subclasshook__(cls, c):\n        if cls is PudbMapping:\n            try:\n                return all([\n                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),\n                    any(""__iter__"" in b.__dict__ for b in c.__mro__),\n                    any(""keys"" in b.__dict__ for b in c.__mro__),', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 120, 'coloffset': 4, 'linematch': 'def __subclasshook__(cls, c):', 'context': '\n\nclass PudbMapping(ABC):  # noqa: B024\n    @classmethod\n    def __subclasshook__(cls, c):\n        if cls is PudbMapping:\n            try:\n                return all([\n                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),\n                    any(""__iter__"" in b.__dict__ for b in c.__mro__),', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 120, 'coloffset': 4, 'linematch': 'def __subclasshook__(cls, c):', 'context': '\n\nclass PudbMapping(ABC):  # noqa: B024\n    @classmethod\n    def __subclasshook__(cls, c):\n        if cls is PudbMapping:\n            try:\n                return all([\n                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),\n                    any(""__iter__"" in b.__dict__ for b in c.__mro__),', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 120, 'coloffset': 4, 'linematch': 'def __subclasshook__(cls, c):', 'context': '\n\nclass PudbMapping(ABC):  # noqa: B024\n    @classmethod\n    def __subclasshook__(cls, c):\n        if cls is PudbMapping:\n            try:\n                return all([\n                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),\n                    any(""__iter__"" in b.__dict__ for b in c.__mro__),', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 121, 'coloffset': 8, 'linematch': 'if cls is PudbMapping:', 'context': '\nclass PudbMapping(ABC):  # noqa: B024\n    @classmethod\n    def __subclasshook__(cls, c):\n        if cls is PudbMapping:\n            try:\n                return all([\n                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),\n                    any(""__iter__"" in b.__dict__ for b in c.__mro__),\n                    any(""keys"" in b.__dict__ for b in c.__mro__),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 130, 'coloffset': 8, 'linematch': 'return NotImplemented', 'context': '                    any(""keys"" in b.__dict__ for b in c.__mro__),\n                ])\n            except Exception:\n                pass\n        return NotImplemented\n\n    @classmethod\n    def _safe_key_repr(cls, key):\n        try:\n            return repr(key)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3565', 'line': 121, 'description': ['        if cls is PudbMapping:'], 'failure': []}, {'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5208', 'line': 120, 'description': ['        ""items"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -117,7 +117,7 @@\n         ""count"",\n         ""get"",\n         ""index"",\n-        ""items"",\n+        ""XXitemsXX"",\n         ""keys"",\n         ""values"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5209', 'line': 121, 'description': ['        ""keys"",'], 'failure': []}, {'name': 'Mutant #5210', 'line': 122, 'description': ['        ""values"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -119,7 +119,7 @@\n         ""index"",\n         ""items"",\n         ""keys"",\n-        ""values"",\n+        ""XXvaluesXX"",\n     }\n \n     # Deliberately starting from 0\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",78.57142857142857,['CL001' 'ANNOT001' 'FLV001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_get_wrapped_lines,248-265,"[{'lineno': 260, 'coloffset': 8, 'linematch': 'if not alltext[maxcol:]:', 'context': '        value_str = self.value_str or """"\n        alltext = var_label + "": "" + value_str\n        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 248, 'coloffset': 4, 'linematch': 'def _get_wrapped_lines(self, maxcol: int) -> List[str]:', 'context': '\n    def selectable(self):\n        return True\n\n    def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n        """"""\n        :param maxcol: the number of columns available to this widget\n        :return: list of string lines, including prefixes, wrapped to fit in\n            the available space\n        """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 248, 'coloffset': 4, 'linematch': 'def _get_wrapped_lines(self, maxcol: int) -> List[str]:', 'context': '\n    def selectable(self):\n        return True\n\n    def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n        """"""\n        :param maxcol: the number of columns available to this widget\n        :return: list of string lines, including prefixes, wrapped to fit in\n            the available space\n        """"""', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 248, 'coloffset': 4, 'linematch': 'def _get_wrapped_lines(self, maxcol: int) -> List[str]:', 'context': '\n    def selectable(self):\n        return True\n\n    def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n        """"""\n        :param maxcol: the number of columns available to this widget\n        :return: list of string lines, including prefixes, wrapped to fit in\n            the available space\n        """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 249, 'coloffset': 8, 'linematch': '""""""', 'context': '    def selectable(self):\n        return True\n\n    def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n        """"""\n        :param maxcol: the number of columns available to this widget\n        :return: list of string lines, including prefixes, wrapped to fit in\n            the available space\n        """"""\n        maxcol -= len(self.prefix)  # self.prefix is padding', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 254, 'coloffset': 8, 'linematch': 'maxcol -= len(self.prefix)  # self.prefix is padding', 'context': '        :param maxcol: the number of columns available to this widget\n        :return: list of string lines, including prefixes, wrapped to fit in\n            the available space\n        """"""\n        maxcol -= len(self.prefix)  # self.prefix is padding\n        var_label = self.var_label or """"\n        value_str = self.value_str or """"\n        alltext = var_label + "": "" + value_str\n        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 255, 'coloffset': 8, 'linematch': 'var_label = self.var_label or """"', 'context': '        :return: list of string lines, including prefixes, wrapped to fit in\n            the available space\n        """"""\n        maxcol -= len(self.prefix)  # self.prefix is padding\n        var_label = self.var_label or """"\n        value_str = self.value_str or """"\n        alltext = var_label + "": "" + value_str\n        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 256, 'coloffset': 8, 'linematch': 'value_str = self.value_str or """"', 'context': '            the available space\n        """"""\n        maxcol -= len(self.prefix)  # self.prefix is padding\n        var_label = self.var_label or """"\n        value_str = self.value_str or """"\n        alltext = var_label + "": "" + value_str\n        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 257, 'coloffset': 8, 'linematch': 'alltext = var_label + "": "" + value_str', 'context': '        """"""\n        maxcol -= len(self.prefix)  # self.prefix is padding\n        var_label = self.var_label or """"\n        value_str = self.value_str or """"\n        alltext = var_label + "": "" + value_str\n        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 259, 'coloffset': 8, 'linematch': 'firstline = self.prefix + alltext[:maxcol]', 'context': '        var_label = self.var_label or """"\n        value_str = self.value_str or """"\n        alltext = var_label + "": "" + value_str\n        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 260, 'coloffset': 8, 'linematch': 'if not alltext[maxcol:]:', 'context': '        value_str = self.value_str or """"\n        alltext = var_label + "": "" + value_str\n        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 262, 'coloffset': 8, 'linematch': 'fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)', 'context': '        # The first line is not indented\n        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 263, 'coloffset': 8, 'linematch': 'restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]', 'context': '        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 265, 'coloffset': 8, 'linematch': 'return [firstline] + [self.prefix + ""  "" + i for i in restlines]', 'context': '            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 263, 'coloffset': 53, 'linematch': 'restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]', 'context': '        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}, {'lineno': 263, 'coloffset': 53, 'linematch': 'restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]', 'context': '        firstline = self.prefix + alltext[:maxcol]\n        if not alltext[maxcol:]:\n            return [firstline]\n        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""', 'pattern': './/FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'check_id': 'COMPLEX001', 'check_name': 'complex-expressions'}]","[{'name': 'Mutant #3622', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol = len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3623', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol += len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3624', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3625', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3626', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = None\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3630', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label - "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3631', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + ""XX: XX"" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3632', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + "": "" - value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3633', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = None\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3634', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = self.prefix - alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3635', 'line': 259, 'description': ['        firstline = self.prefix + alltext[:maxcol]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -256,7 +256,7 @@\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n-        firstline = self.prefix + alltext[:maxcol]\n+        firstline = None\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3636', 'line': 260, 'description': ['        if not alltext[maxcol:]:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -257,7 +257,7 @@\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n-        if not alltext[maxcol:]:\n+        if  alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3637', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) + maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3638', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol + 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3639', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 3)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3640', 'line': 262, 'description': ['        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -259,7 +259,7 @@\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n             return [firstline]\n-        fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n+        fulllines, rest = None\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5283', 'line': 249, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting())'], 'failure': []}, {'name': 'Mutant #5284', 'line': 252, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -249,7 +249,7 @@\n         self.walker = BasicValueWalker(FrameVarInfoForTesting())\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5285', 'line': 253, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -250,7 +250,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5286', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5287', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5288', 'line': 255, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -252,7 +252,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5290', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5291', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5292', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5293', 'line': 260, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -257,7 +257,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5294', 'line': 261, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -258,7 +258,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5295', 'line': 262, 'description': ['            ""foo bar"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -259,7 +259,7 @@\n             # strings\n             """",\n             ""a"",\n-            ""foo bar"",\n+            ""XXfoo barXX"",\n             ""  lots\\tof\\nspaces\\r "",\n             ""♫"",\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}]",3.8461538461538463,['CL001' 'ANNOT001' 'FLV001' 'C002' 'CML001' 'COMPLEX001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef//BinOp[count(descendant::BinOp) > 2]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 1, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,rows,267-279,"[{'lineno': 273, 'coloffset': 8, 'linematch': 'if self.wrap:', 'context': '        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: The number of rows required for this widget\n        """"""\n        if self.wrap:\n            return len(self._get_wrapped_lines(size[0]))\n\n        if len(self._get_wrapped_lines(size[0])) > 1:\n            return 2\n        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 276, 'coloffset': 8, 'linematch': 'if len(self._get_wrapped_lines(size[0])) > 1:', 'context': '        """"""\n        if self.wrap:\n            return len(self._get_wrapped_lines(size[0]))\n\n        if len(self._get_wrapped_lines(size[0])) > 1:\n            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 58, 'coloffset': 4, 'linematch': 'def rows(self, size, focus=False):', 'context': '    def set_breakpoint(self, has_breakpoint):\n        self.has_breakpoint = has_breakpoint\n        self._invalidate()\n\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 199, 'coloffset': 4, 'linematch': 'def rows(self, size, focus=False):', 'context': '\n    def selectable(self):\n        return True\n\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        maxcol = size[0]\n        if focus:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 267, 'coloffset': 4, 'linematch': 'def rows(self, size: Tuple[int], focus: bool = False) -> int:', 'context': '        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: The number of rows required for this widget\n        """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 276, 'coloffset': 8, 'linematch': 'if len(self._get_wrapped_lines(size[0])) > 1:', 'context': '        """"""\n        if self.wrap:\n            return len(self._get_wrapped_lines(size[0]))\n\n        if len(self._get_wrapped_lines(size[0])) > 1:\n            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 58, 'coloffset': 4, 'linematch': 'def rows(self, size, focus=False):', 'context': '    def set_breakpoint(self, has_breakpoint):\n        self.has_breakpoint = has_breakpoint\n        self._invalidate()\n\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 267, 'coloffset': 4, 'linematch': 'def rows(self, size: Tuple[int], focus: bool = False) -> int:', 'context': '        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: The number of rows required for this widget\n        """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 59, 'coloffset': 8, 'linematch': 'return 1', 'context': '        self.has_breakpoint = has_breakpoint\n        self._invalidate()\n\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        from pudb.debugger import CONFIG\n        render_line_nr = CONFIG[""line_numbers""]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 200, 'coloffset': 8, 'linematch': 'return 1', 'context': '    def selectable(self):\n        return True\n\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):\n        maxcol = size[0]\n        if focus:\n            apfx = ""focused ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 268, 'coloffset': 8, 'linematch': '""""""', 'context': '            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: The number of rows required for this widget\n        """"""\n        if self.wrap:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 273, 'coloffset': 8, 'linematch': 'if self.wrap:', 'context': '        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: The number of rows required for this widget\n        """"""\n        if self.wrap:\n            return len(self._get_wrapped_lines(size[0]))\n\n        if len(self._get_wrapped_lines(size[0])) > 1:\n            return 2\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 276, 'coloffset': 8, 'linematch': 'if len(self._get_wrapped_lines(size[0])) > 1:', 'context': '        """"""\n        if self.wrap:\n            return len(self._get_wrapped_lines(size[0]))\n\n        if len(self._get_wrapped_lines(size[0])) > 1:\n            return 2\n        else:\n            return 1\n\n    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 267, 'coloffset': 4, 'linematch': 'def rows(self, size: Tuple[int], focus: bool = False) -> int:', 'context': '        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n            for i in range(fulllines + bool(rest))]\n        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n\n    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n        """"""\n        :param size: (maxcol,) the number of columns available to this widget\n        :param focus: True if this widget or one of its children is in focus\n        :return: The number of rows required for this widget\n        """"""', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #3659', 'line': 267, 'description': ['    def rows(self, size: Tuple[int], focus: bool = False) -> int:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -264,7 +264,7 @@\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n-    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n+    def rows(self, size: Tuple[int], focus: bool = True) -> int:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3660', 'line': 274, 'description': ['            return len(self._get_wrapped_lines(size[0]))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -271,7 +271,7 @@\n         :return: The number of rows required for this widget\n         """"""\n         if self.wrap:\n-            return len(self._get_wrapped_lines(size[0]))\n+            return len(self._get_wrapped_lines(size[1]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5298', 'line': 267, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -264,7 +264,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5299', 'line': 268, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -265,7 +265,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for label, value in enumerate(values):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5300', 'line': 270, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}]",25.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,add_continuation_item,519-539,"[{'lineno': 529, 'coloffset': 8, 'linematch': 'if not self.frame_var_info.get_inspect_info(', 'context': '            container should be added. If no continuation item was added,\n            continue adding entries from the container.\n        """"""\n        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n        if not self.frame_var_info.get_inspect_info(\n                cont_id_path, read_only=True).show_detail:\n            if length > 0:\n                omitted = f""{length - count}""\n            else:\n                omitted = ""some""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 531, 'coloffset': 12, 'linematch': 'if length > 0:', 'context': '        """"""\n        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n        if not self.frame_var_info.get_inspect_info(\n                cont_id_path, read_only=True).show_detail:\n            if length > 0:\n                omitted = f""{length - count}""\n            else:\n                omitted = ""some""\n            self.add_item(parent, self.CONTINUATION_LABEL,\n                          f""<{omitted} items omitted, expand to see more>"",', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 531, 'coloffset': 12, 'linematch': 'if length > 0:', 'context': '        """"""\n        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n        if not self.frame_var_info.get_inspect_info(\n                cont_id_path, read_only=True).show_detail:\n            if length > 0:\n                omitted = f""{length - count}""\n            else:\n                omitted = ""some""\n            self.add_item(parent, self.CONTINUATION_LABEL,\n                          f""<{omitted} items omitted, expand to see more>"",', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 519, 'coloffset': 4, 'linematch': 'def add_continuation_item(self, parent: VariableWidget, id_path: str,', 'context': '    @abstractmethod\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        pass\n\n    def add_continuation_item(self, parent: VariableWidget, id_path: str,\n                              count: int, length: int) -> bool:\n        """"""\n        :arg length: the total length of the container. Negative if not known.\n        :returns: True if a continuation item (""[...]"") was added, else False.\n            If a continuation item was added, no further entries in the', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 531, 'coloffset': 12, 'linematch': 'if length > 0:', 'context': '        """"""\n        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n        if not self.frame_var_info.get_inspect_info(\n                cont_id_path, read_only=True).show_detail:\n            if length > 0:\n                omitted = f""{length - count}""\n            else:\n                omitted = ""some""\n            self.add_item(parent, self.CONTINUATION_LABEL,\n                          f""<{omitted} items omitted, expand to see more>"",', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 519, 'coloffset': 4, 'linematch': 'def add_continuation_item(self, parent: VariableWidget, id_path: str,', 'context': '    @abstractmethod\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        pass\n\n    def add_continuation_item(self, parent: VariableWidget, id_path: str,\n                              count: int, length: int) -> bool:\n        """"""\n        :arg length: the total length of the container. Negative if not known.\n        :returns: True if a continuation item (""[...]"") was added, else False.\n            If a continuation item was added, no further entries in the', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 521, 'coloffset': 8, 'linematch': '""""""', 'context': '        pass\n\n    def add_continuation_item(self, parent: VariableWidget, id_path: str,\n                              count: int, length: int) -> bool:\n        """"""\n        :arg length: the total length of the container. Negative if not known.\n        :returns: True if a continuation item (""[...]"") was added, else False.\n            If a continuation item was added, no further entries in the\n            container should be added. If no continuation item was added,\n            continue adding entries from the container.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 528, 'coloffset': 8, 'linematch': 'cont_id_path = ""%s.cont-%d"" % (id_path, count)', 'context': '            If a continuation item was added, no further entries in the\n            container should be added. If no continuation item was added,\n            continue adding entries from the container.\n        """"""\n        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n        if not self.frame_var_info.get_inspect_info(\n                cont_id_path, read_only=True).show_detail:\n            if length > 0:\n                omitted = f""{length - count}""\n            else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 529, 'coloffset': 8, 'linematch': 'if not self.frame_var_info.get_inspect_info(', 'context': '            container should be added. If no continuation item was added,\n            continue adding entries from the container.\n        """"""\n        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n        if not self.frame_var_info.get_inspect_info(\n                cont_id_path, read_only=True).show_detail:\n            if length > 0:\n                omitted = f""{length - count}""\n            else:\n                omitted = ""some""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 539, 'coloffset': 8, 'linematch': 'return False', 'context': '            self.add_item(parent, self.CONTINUATION_LABEL,\n                          f""<{omitted} items omitted, expand to see more>"",\n                          id_path=cont_id_path)\n            return True\n        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3822', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = ""XX%s.cont-%dXX"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3823', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = ""%s.cont-%d"" / (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3824', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = None\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3825', 'line': 529, 'description': ['        if not self.frame_var_info.get_inspect_info('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -526,7 +526,7 @@\n             continue adding entries from the container.\n         """"""\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n-        if not self.frame_var_info.get_inspect_info(\n+        if  self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n                 omitted = f""{length - count}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3826', 'line': 530, 'description': ['                cont_id_path, read_only=True).show_detail:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -527,7 +527,7 @@\n         """"""\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n-                cont_id_path, read_only=True).show_detail:\n+                cont_id_path, read_only=False).show_detail:\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3827', 'line': 531, 'description': ['            if length > 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -528,7 +528,7 @@\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n-            if length > 0:\n+            if length >= 0:\n                 omitted = f""{length - count}""\n             else:\n                 omitted = ""some""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3828', 'line': 531, 'description': ['            if length > 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -528,7 +528,7 @@\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n-            if length > 0:\n+            if length > 1:\n                 omitted = f""{length - count}""\n             else:\n                 omitted = ""some""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3829', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = f""{length + count}""\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3830', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = f""XX{length - count}XX""\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3831', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = None\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3832', 'line': 534, 'description': ['                omitted = ""some""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -531,7 +531,7 @@\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n-                omitted = ""some""\n+                omitted = ""XXsomeXX""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3833', 'line': 534, 'description': ['                omitted = ""some""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -531,7 +531,7 @@\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n-                omitted = ""some""\n+                omitted = None\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3834', 'line': 536, 'description': ['                          f""<{omitted} items omitted, expand to see more>"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -533,7 +533,7 @@\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n-                          f""<{omitted} items omitted, expand to see more>"",\n+                          f""XX<{omitted} items omitted, expand to see more>XX"",\n                           id_path=cont_id_path)\n             return True\n         return False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3835', 'line': 538, 'description': ['            return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -535,7 +535,7 @@\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n-            return True\n+            return False\n         return False\n \n     def walk_container(self, parent: VariableWidget, label: str,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3836', 'line': 539, 'description': ['        return False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -536,7 +536,7 @@\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n             return True\n-        return False\n+        return True\n \n     def walk_container(self, parent: VariableWidget, label: str,\n                        value, id_path: str = None):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,walk_container,541-571,"[{'lineno': 567, 'coloffset': 8, 'linematch': 'if is_empty:', 'context': '            self.walk_value(parent,\n                            ""[{}]"".format(entry_label if entry_label else """"),\n                            entry, entry_id_path)\n\n        if is_empty:\n            self.add_item(parent, self.EMPTY_LABEL, None,\n                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n\n        return True\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 554, 'coloffset': 12, 'linematch': 'if count > 0 and count % 10 == 0:', 'context': '        is_empty = True\n        for count, (entry_label, entry, id_path_ext) in enumerate(\n                container_cls.entries(value, label)):\n            is_empty = False\n            if count > 0 and count % 10 == 0:\n                try:\n                    length = container_cls.length(value)\n                except Exception:\n                    length = -1\n                if self.add_continuation_item(parent, id_path, count, length):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 559, 'coloffset': 16, 'linematch': 'if self.add_continuation_item(parent, id_path, count, length):', 'context': '                try:\n                    length = container_cls.length(value)\n                except Exception:\n                    length = -1\n                if self.add_continuation_item(parent, id_path, count, length):\n                    return True\n\n            entry_id_path = f""{id_path}{id_path_ext}""\n            self.walk_value(parent,\n                            ""[{}]"".format(entry_label if entry_label else """"),', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 559, 'coloffset': 16, 'linematch': 'if self.add_continuation_item(parent, id_path, count, length):', 'context': '                try:\n                    length = container_cls.length(value)\n                except Exception:\n                    length = -1\n                if self.add_continuation_item(parent, id_path, count, length):\n                    return True\n\n            entry_id_path = f""{id_path}{id_path_ext}""\n            self.walk_value(parent,\n                            ""[{}]"".format(entry_label if entry_label else """"),', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 541, 'coloffset': 4, 'linematch': 'def walk_container(self, parent: VariableWidget, label: str,', 'context': '                          id_path=cont_id_path)\n            return True\n        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES\n                                 if isinstance(value, cls))\n        except StopIteration:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 541, 'coloffset': 4, 'linematch': 'def walk_container(self, parent: VariableWidget, label: str,', 'context': '                          id_path=cont_id_path)\n            return True\n        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES\n                                 if isinstance(value, cls))\n        except StopIteration:', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 559, 'coloffset': 16, 'linematch': 'if self.add_continuation_item(parent, id_path, count, length):', 'context': '                try:\n                    length = container_cls.length(value)\n                except Exception:\n                    length = -1\n                if self.add_continuation_item(parent, id_path, count, length):\n                    return True\n\n            entry_id_path = f""{id_path}{id_path_ext}""\n            self.walk_value(parent,\n                            ""[{}]"".format(entry_label if entry_label else """"),', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 541, 'coloffset': 4, 'linematch': 'def walk_container(self, parent: VariableWidget, label: str,', 'context': '                          id_path=cont_id_path)\n            return True\n        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES\n                                 if isinstance(value, cls))\n        except StopIteration:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 543, 'coloffset': 8, 'linematch': 'try:', 'context': '        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES\n                                 if isinstance(value, cls))\n        except StopIteration:\n            # Not recognized as a container\n            return False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 550, 'coloffset': 8, 'linematch': 'is_empty = True', 'context': '        except StopIteration:\n            # Not recognized as a container\n            return False\n\n        is_empty = True\n        for count, (entry_label, entry, id_path_ext) in enumerate(\n                container_cls.entries(value, label)):\n            is_empty = False\n            if count > 0 and count % 10 == 0:\n                try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 551, 'coloffset': 8, 'linematch': 'for count, (entry_label, entry, id_path_ext) in enumerate(', 'context': '            # Not recognized as a container\n            return False\n\n        is_empty = True\n        for count, (entry_label, entry, id_path_ext) in enumerate(\n                container_cls.entries(value, label)):\n            is_empty = False\n            if count > 0 and count % 10 == 0:\n                try:\n                    length = container_cls.length(value)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 567, 'coloffset': 8, 'linematch': 'if is_empty:', 'context': '            self.walk_value(parent,\n                            ""[{}]"".format(entry_label if entry_label else """"),\n                            entry, entry_id_path)\n\n        if is_empty:\n            self.add_item(parent, self.EMPTY_LABEL, None,\n                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n\n        return True\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 571, 'coloffset': 8, 'linematch': 'return True', 'context': '        if is_empty:\n            self.add_item(parent, self.EMPTY_LABEL, None,\n                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n\n        return True\n\n    def walk_attributes(self, parent, label, value, id_path, iinfo):\n        try:\n            keys = dir(value)\n        except Exception:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 541, 'coloffset': 4, 'linematch': 'def walk_container(self, parent: VariableWidget, label: str,', 'context': '                          id_path=cont_id_path)\n            return True\n        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES\n                                 if isinstance(value, cls))\n        except StopIteration:', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 541, 'coloffset': 4, 'linematch': 'def walk_container(self, parent: VariableWidget, label: str,', 'context': '                          id_path=cont_id_path)\n            return True\n        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES\n                                 if isinstance(value, cls))\n        except StopIteration:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 541, 'coloffset': 4, 'linematch': 'def walk_container(self, parent: VariableWidget, label: str,', 'context': '                          id_path=cont_id_path)\n            return True\n        return False\n\n    def walk_container(self, parent: VariableWidget, label: str,\n                       value, id_path: str = None):\n        try:\n            container_cls = next(cls for cls in CONTAINER_CLASSES\n                                 if isinstance(value, cls))\n        except StopIteration:', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3837', 'line': 545, 'description': ['                                 if isinstance(value, cls))'], 'failure': []}, {'name': 'Mutant #3838', 'line': 548, 'description': ['            return False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -545,7 +545,7 @@\n                                  if isinstance(value, cls))\n         except StopIteration:\n             # Not recognized as a container\n-            return False\n+            return True\n \n         is_empty = True\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3839', 'line': 550, 'description': ['        is_empty = True'], 'failure': []}, {'name': 'Mutant #3840', 'line': 550, 'description': ['        is_empty = True'], 'failure': []}, {'name': 'Mutant #3841', 'line': 553, 'description': ['            is_empty = False'], 'failure': []}, {'name': 'Mutant #3842', 'line': 553, 'description': ['            is_empty = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -550,7 +550,7 @@\n         is_empty = True\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n-            is_empty = False\n+            is_empty = None\n             if count > 0 and count % 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3843', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3844', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 1 and count % 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3845', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 0 and count / 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3846', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 0 and count % 11 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3847', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3848', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3849', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3850', 'line': 556, 'description': ['                    length = container_cls.length(value)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -553,7 +553,7 @@\n             is_empty = False\n             if count > 0 and count % 10 == 0:\n                 try:\n-                    length = container_cls.length(value)\n+                    length = None\n                 except Exception:\n                     length = -1\n                 if self.add_continuation_item(parent, id_path, count, length):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3851', 'line': 558, 'description': ['                    length = -1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -555,7 +555,7 @@\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n-                    length = -1\n+                    length = +1\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3852', 'line': 558, 'description': ['                    length = -1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -555,7 +555,7 @@\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n-                    length = -1\n+                    length = -2\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3853', 'line': 558, 'description': ['                    length = -1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -555,7 +555,7 @@\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n-                    length = -1\n+                    length = None\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3854', 'line': 560, 'description': ['                    return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -557,7 +557,7 @@\n                 except Exception:\n                     length = -1\n                 if self.add_continuation_item(parent, id_path, count, length):\n-                    return True\n+                    return False\n \n             entry_id_path = f""{id_path}{id_path_ext}""\n             self.walk_value(parent,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3855', 'line': 562, 'description': ['            entry_id_path = f""{id_path}{id_path_ext}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -559,7 +559,7 @@\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n-            entry_id_path = f""{id_path}{id_path_ext}""\n+            entry_id_path = f""XX{id_path}{id_path_ext}XX""\n             self.walk_value(parent,\n                             ""[{}]"".format(entry_label if entry_label else """"),\n                             entry, entry_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3856', 'line': 562, 'description': ['            entry_id_path = f""{id_path}{id_path_ext}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -559,7 +559,7 @@\n                 if self.add_continuation_item(parent, id_path, count, length):\n                     return True\n \n-            entry_id_path = f""{id_path}{id_path_ext}""\n+            entry_id_path = None\n             self.walk_value(parent,\n                             ""[{}]"".format(entry_label if entry_label else """"),\n                             entry, entry_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3857', 'line': 564, 'description': ['                            ""[{}]"".format(entry_label if entry_label else """"),'], 'failure': []}, {'name': 'Mutant #3858', 'line': 564, 'description': ['                            ""[{}]"".format(entry_label if entry_label else """"),'], 'failure': []}, {'name': 'Mutant #3859', 'line': 569, 'description': ['                          id_path=f""{id_path}{self.EMPTY_LABEL}"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -566,7 +566,7 @@\n \n         if is_empty:\n             self.add_item(parent, self.EMPTY_LABEL, None,\n-                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n+                          id_path=f""XX{id_path}{self.EMPTY_LABEL}XX"")\n \n         return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3860', 'line': 571, 'description': ['        return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -568,7 +568,7 @@\n             self.add_item(parent, self.EMPTY_LABEL, None,\n                           id_path=f""{id_path}{self.EMPTY_LABEL}"")\n \n-        return True\n+        return False\n \n     def walk_attributes(self, parent, label, value, id_path, iinfo):\n         try:\n', 'type': 'failure', 'message': 'bad_survived'}]}]",41.66666666666667,"['CL001' 'CL002' 'ANNOT001' 'FLV001' 'C002' 'CML001' 'MRET001' 'F030'
 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,walk_attributes,573-599,"[{'lineno': 581, 'coloffset': 12, 'linematch': 'if iinfo.access_level == ""public"":', 'context': '            ui_log.exception(f""Failed to look up attributes on {label}"")\n            return\n\n        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 582, 'coloffset': 16, 'linematch': 'if key.startswith(""_""):', 'context': '            return\n\n        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 584, 'coloffset': 12, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 585, 'coloffset': 16, 'linematch': 'if key.startswith(""__"") and key.endswith(""__""):', 'context': '            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():\n                    warnings.simplefilter(""ignore"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 592, 'coloffset': 16, 'linematch': 'if inspect.isroutine(attr_value) and not iinfo.show_methods:', 'context': '            try:\n                with warnings.catch_warnings():\n                    warnings.simplefilter(""ignore"")\n                    attr_value = getattr(value, key)\n                if inspect.isroutine(attr_value) and not iinfo.show_methods:\n                    continue\n            except Exception:\n                attr_value = WatchEvalError()\n\n            self.walk_value(parent,', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 582, 'coloffset': 16, 'linematch': 'if key.startswith(""_""):', 'context': '            return\n\n        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 585, 'coloffset': 16, 'linematch': 'if key.startswith(""__"") and key.endswith(""__""):', 'context': '            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():\n                    warnings.simplefilter(""ignore"")', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 584, 'coloffset': 17, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 584, 'coloffset': 17, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 584, 'coloffset': 17, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 584, 'coloffset': 17, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 584, 'coloffset': 17, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 584, 'coloffset': 17, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 584, 'coloffset': 17, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 573, 'coloffset': 4, 'linematch': 'def walk_attributes(self, parent, label, value, id_path, iinfo):', 'context': '                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n\n        return True\n\n    def walk_attributes(self, parent, label, value, id_path, iinfo):\n        try:\n            keys = dir(value)\n        except Exception:\n            ui_log.exception(f""Failed to look up attributes on {label}"")\n            return', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 582, 'coloffset': 16, 'linematch': 'if key.startswith(""_""):', 'context': '            return\n\n        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 584, 'coloffset': 12, 'linematch': 'elif iinfo.access_level == ""private"":', 'context': '        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 585, 'coloffset': 16, 'linematch': 'if key.startswith(""__"") and key.endswith(""__""):', 'context': '            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):\n                    continue\n\n            try:\n                with warnings.catch_warnings():\n                    warnings.simplefilter(""ignore"")', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 573, 'coloffset': 4, 'linematch': 'def walk_attributes(self, parent, label, value, id_path, iinfo):', 'context': '                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n\n        return True\n\n    def walk_attributes(self, parent, label, value, id_path, iinfo):\n        try:\n            keys = dir(value)\n        except Exception:\n            ui_log.exception(f""Failed to look up attributes on {label}"")\n            return', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 574, 'coloffset': 8, 'linematch': 'try:', 'context': '\n        return True\n\n    def walk_attributes(self, parent, label, value, id_path, iinfo):\n        try:\n            keys = dir(value)\n        except Exception:\n            ui_log.exception(f""Failed to look up attributes on {label}"")\n            return\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 580, 'coloffset': 8, 'linematch': 'for key in sorted(keys):', 'context': '        except Exception:\n            ui_log.exception(f""Failed to look up attributes on {label}"")\n            return\n\n        for key in sorted(keys):\n            if iinfo.access_level == ""public"":\n                if key.startswith(""_""):\n                    continue\n            elif iinfo.access_level == ""private"":\n                if key.startswith(""__"") and key.endswith(""__""):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 573, 'coloffset': 4, 'linematch': 'def walk_attributes(self, parent, label, value, id_path, iinfo):', 'context': '                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n\n        return True\n\n    def walk_attributes(self, parent, label, value, id_path, iinfo):\n        try:\n            keys = dir(value)\n        except Exception:\n            ui_log.exception(f""Failed to look up attributes on {label}"")\n            return', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 573, 'coloffset': 4, 'linematch': 'def walk_attributes(self, parent, label, value, id_path, iinfo):', 'context': '                          id_path=f""{id_path}{self.EMPTY_LABEL}"")\n\n        return True\n\n    def walk_attributes(self, parent, label, value, id_path, iinfo):\n        try:\n            keys = dir(value)\n        except Exception:\n            ui_log.exception(f""Failed to look up attributes on {label}"")\n            return', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3861', 'line': 575, 'description': ['            keys = dir(value)'], 'failure': []}, {'name': 'Mutant #3862', 'line': 577, 'description': ['            ui_log.exception(f""Failed to look up attributes on {label}"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -574,7 +574,7 @@\n         try:\n             keys = dir(value)\n         except Exception:\n-            ui_log.exception(f""Failed to look up attributes on {label}"")\n+            ui_log.exception(f""XXFailed to look up attributes on {label}XX"")\n             return\n \n         for key in sorted(keys):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3863', 'line': 581, 'description': ['            if iinfo.access_level == ""public"":'], 'failure': []}, {'name': 'Mutant #3864', 'line': 581, 'description': ['            if iinfo.access_level == ""public"":'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -578,7 +578,7 @@\n             return\n \n         for key in sorted(keys):\n-            if iinfo.access_level == ""public"":\n+            if iinfo.access_level == ""XXpublicXX"":\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3865', 'line': 582, 'description': ['                if key.startswith(""_""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -579,7 +579,7 @@\n \n         for key in sorted(keys):\n             if iinfo.access_level == ""public"":\n-                if key.startswith(""_""):\n+                if key.startswith(""XX_XX""):\n                     continue\n             elif iinfo.access_level == ""private"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3866', 'line': 583, 'description': ['                    continue'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -580,7 +580,7 @@\n         for key in sorted(keys):\n             if iinfo.access_level == ""public"":\n                 if key.startswith(""_""):\n-                    continue\n+                    break\n             elif iinfo.access_level == ""private"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n                     continue\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3867', 'line': 584, 'description': ['            elif iinfo.access_level == ""private"":'], 'failure': []}, {'name': 'Mutant #3868', 'line': 584, 'description': ['            elif iinfo.access_level == ""private"":'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -581,7 +581,7 @@\n             if iinfo.access_level == ""public"":\n                 if key.startswith(""_""):\n                     continue\n-            elif iinfo.access_level == ""private"":\n+            elif iinfo.access_level == ""XXprivateXX"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n                     continue\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3869', 'line': 585, 'description': ['                if key.startswith(""__"") and key.endswith(""__""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -582,7 +582,7 @@\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n-                if key.startswith(""__"") and key.endswith(""__""):\n+                if key.startswith(""XX__XX"") and key.endswith(""__""):\n                     continue\n \n             try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3870', 'line': 585, 'description': ['                if key.startswith(""__"") and key.endswith(""__""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -582,7 +582,7 @@\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n-                if key.startswith(""__"") and key.endswith(""__""):\n+                if key.startswith(""__"") and key.endswith(""XX__XX""):\n                     continue\n \n             try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3871', 'line': 585, 'description': ['                if key.startswith(""__"") and key.endswith(""__""):'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -582,7 +582,7 @@\n                 if key.startswith(""_""):\n                     continue\n             elif iinfo.access_level == ""private"":\n-                if key.startswith(""__"") and key.endswith(""__""):\n+                if key.startswith(""__"") or key.endswith(""__""):\n                     continue\n \n             try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3872', 'line': 586, 'description': ['                    continue'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -583,7 +583,7 @@\n                     continue\n             elif iinfo.access_level == ""private"":\n                 if key.startswith(""__"") and key.endswith(""__""):\n-                    continue\n+                    break\n \n             try:\n                 with warnings.catch_warnings():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3873', 'line': 590, 'description': ['                    warnings.simplefilter(""ignore"")'], 'failure': []}, {'name': 'Mutant #3874', 'line': 591, 'description': ['                    attr_value = getattr(value, key)'], 'failure': []}, {'name': 'Mutant #3875', 'line': 592, 'description': ['                if inspect.isroutine(attr_value) and not iinfo.show_methods:'], 'failure': []}, {'name': 'Mutant #3876', 'line': 592, 'description': ['                if inspect.isroutine(attr_value) and not iinfo.show_methods:'], 'failure': []}, {'name': 'Mutant #3877', 'line': 593, 'description': ['                    continue'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -590,7 +590,7 @@\n                     warnings.simplefilter(""ignore"")\n                     attr_value = getattr(value, key)\n                 if inspect.isroutine(attr_value) and not iinfo.show_methods:\n-                    continue\n+                    break\n             except Exception:\n                 attr_value = WatchEvalError()\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3878', 'line': 595, 'description': ['                attr_value = WatchEvalError()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -592,7 +592,7 @@\n                 if inspect.isroutine(attr_value) and not iinfo.show_methods:\n                     continue\n             except Exception:\n-                attr_value = WatchEvalError()\n+                attr_value = None\n \n             self.walk_value(parent,\n                     "".%s"" % key, attr_value,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3879', 'line': 598, 'description': ['                    "".%s"" % key, attr_value,'], 'failure': []}, {'name': 'Mutant #3880', 'line': 598, 'description': ['                    "".%s"" % key, attr_value,'], 'failure': []}, {'name': 'Mutant #3881', 'line': 599, 'description': ['                    f""{id_path}.{key}"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -596,7 +596,7 @@\n \n             self.walk_value(parent,\n                     "".%s"" % key, attr_value,\n-                    f""{id_path}.{key}"")\n+                    f""XX{id_path}.{key}XX"")\n \n     def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n         if id_path is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}]",42.857142857142854,['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,walk_value,601-629,"[{'lineno': 602, 'coloffset': 8, 'linematch': 'if id_path is None:', 'context': '                    "".%s"" % key, attr_value,\n                    f""{id_path}.{key}"")\n\n    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 617, 'coloffset': 8, 'linematch': 'if iinfo.show_detail:', 'context': '            displayed_value = type_stringifier(value) \\\n                            + "" (!! %s error !!)"" % iinfo.display_type\n            ui_log.exception(""stringifier failed"")\n\n        if iinfo.show_detail:\n            marker = iinfo.access_level[:3]\n            if iinfo.show_methods:\n                marker += ""+()""\n            displayed_value += "" [%s]"" % marker\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 626, 'coloffset': 8, 'linematch': 'if iinfo.show_detail:', 'context': '\n        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)\n\n        if iinfo.show_detail:\n            if isinstance(value, CONTAINER_CLASSES):\n                self.walk_container(new_parent_item, label, value, id_path)\n            self.walk_attributes(new_parent_item, label, value, id_path, iinfo)\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 619, 'coloffset': 12, 'linematch': 'if iinfo.show_methods:', 'context': '            ui_log.exception(""stringifier failed"")\n\n        if iinfo.show_detail:\n            marker = iinfo.access_level[:3]\n            if iinfo.show_methods:\n                marker += ""+()""\n            displayed_value += "" [%s]"" % marker\n\n        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 627, 'coloffset': 12, 'linematch': 'if isinstance(value, CONTAINER_CLASSES):', 'context': '        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)\n\n        if iinfo.show_detail:\n            if isinstance(value, CONTAINER_CLASSES):\n                self.walk_container(new_parent_item, label, value, id_path)\n            self.walk_attributes(new_parent_item, label, value, id_path, iinfo)\n\n\nclass BasicValueWalker(ValueWalker):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 619, 'coloffset': 12, 'linematch': 'if iinfo.show_methods:', 'context': '            ui_log.exception(""stringifier failed"")\n\n        if iinfo.show_detail:\n            marker = iinfo.access_level[:3]\n            if iinfo.show_methods:\n                marker += ""+()""\n            displayed_value += "" [%s]"" % marker\n\n        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 627, 'coloffset': 12, 'linematch': 'if isinstance(value, CONTAINER_CLASSES):', 'context': '        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)\n\n        if iinfo.show_detail:\n            if isinstance(value, CONTAINER_CLASSES):\n                self.walk_container(new_parent_item, label, value, id_path)\n            self.walk_attributes(new_parent_item, label, value, id_path, iinfo)\n\n\nclass BasicValueWalker(ValueWalker):', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 601, 'coloffset': 4, 'linematch': 'def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):', 'context': '            self.walk_value(parent,\n                    "".%s"" % key, attr_value,\n                    f""{id_path}.{key}"")\n\n    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 617, 'coloffset': 8, 'linematch': 'if iinfo.show_detail:', 'context': '            displayed_value = type_stringifier(value) \\\n                            + "" (!! %s error !!)"" % iinfo.display_type\n            ui_log.exception(""stringifier failed"")\n\n        if iinfo.show_detail:\n            marker = iinfo.access_level[:3]\n            if iinfo.show_methods:\n                marker += ""+()""\n            displayed_value += "" [%s]"" % marker\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 626, 'coloffset': 8, 'linematch': 'if iinfo.show_detail:', 'context': '\n        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)\n\n        if iinfo.show_detail:\n            if isinstance(value, CONTAINER_CLASSES):\n                self.walk_container(new_parent_item, label, value, id_path)\n            self.walk_attributes(new_parent_item, label, value, id_path, iinfo)\n\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 619, 'coloffset': 12, 'linematch': 'if iinfo.show_methods:', 'context': '            ui_log.exception(""stringifier failed"")\n\n        if iinfo.show_detail:\n            marker = iinfo.access_level[:3]\n            if iinfo.show_methods:\n                marker += ""+()""\n            displayed_value += "" [%s]"" % marker\n\n        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 627, 'coloffset': 12, 'linematch': 'if isinstance(value, CONTAINER_CLASSES):', 'context': '        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)\n\n        if iinfo.show_detail:\n            if isinstance(value, CONTAINER_CLASSES):\n                self.walk_container(new_parent_item, label, value, id_path)\n            self.walk_attributes(new_parent_item, label, value, id_path, iinfo)\n\n\nclass BasicValueWalker(ValueWalker):', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 601, 'coloffset': 4, 'linematch': 'def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):', 'context': '            self.walk_value(parent,\n                    "".%s"" % key, attr_value,\n                    f""{id_path}.{key}"")\n\n    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 605, 'coloffset': 8, 'linematch': 'assert isinstance(id_path, str)', 'context': '    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n\n        try:\n            displayed_value = get_stringifier(iinfo)(value)\n        except Exception:', 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 602, 'coloffset': 8, 'linematch': 'if id_path is None:', 'context': '                    "".%s"" % key, attr_value,\n                    f""{id_path}.{key}"")\n\n    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 605, 'coloffset': 8, 'linematch': 'assert isinstance(id_path, str)', 'context': '    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n\n        try:\n            displayed_value = get_stringifier(iinfo)(value)\n        except Exception:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 606, 'coloffset': 8, 'linematch': 'iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)', 'context': '        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n\n        try:\n            displayed_value = get_stringifier(iinfo)(value)\n        except Exception:\n            # Unfortunately, anything can happen when calling str() or', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 608, 'coloffset': 8, 'linematch': 'try:', 'context': '\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n\n        try:\n            displayed_value = get_stringifier(iinfo)(value)\n        except Exception:\n            # Unfortunately, anything can happen when calling str() or\n            # repr() on a random object.\n            displayed_value = type_stringifier(value) \\', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 617, 'coloffset': 8, 'linematch': 'if iinfo.show_detail:', 'context': '            displayed_value = type_stringifier(value) \\\n                            + "" (!! %s error !!)"" % iinfo.display_type\n            ui_log.exception(""stringifier failed"")\n\n        if iinfo.show_detail:\n            marker = iinfo.access_level[:3]\n            if iinfo.show_methods:\n                marker += ""+()""\n            displayed_value += "" [%s]"" % marker\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 623, 'coloffset': 8, 'linematch': 'new_parent_item = self.add_item(parent, label, displayed_value,', 'context': '            if iinfo.show_methods:\n                marker += ""+()""\n            displayed_value += "" [%s]"" % marker\n\n        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)\n\n        if iinfo.show_detail:\n            if isinstance(value, CONTAINER_CLASSES):\n                self.walk_container(new_parent_item, label, value, id_path)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 626, 'coloffset': 8, 'linematch': 'if iinfo.show_detail:', 'context': '\n        new_parent_item = self.add_item(parent, label, displayed_value,\n            id_path, attr_prefix)\n\n        if iinfo.show_detail:\n            if isinstance(value, CONTAINER_CLASSES):\n                self.walk_container(new_parent_item, label, value, id_path)\n            self.walk_attributes(new_parent_item, label, value, id_path, iinfo)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 601, 'coloffset': 4, 'linematch': 'def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):', 'context': '            self.walk_value(parent,\n                    "".%s"" % key, attr_value,\n                    f""{id_path}.{key}"")\n\n    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 601, 'coloffset': 4, 'linematch': 'def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):', 'context': '            self.walk_value(parent,\n                    "".%s"" % key, attr_value,\n                    f""{id_path}.{key}"")\n\n    def walk_value(self, parent, label, value, id_path=None, attr_prefix=None):\n        if id_path is None:\n            id_path = label\n\n        assert isinstance(id_path, str)\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3882', 'line': 602, 'description': ['        if id_path is None:'], 'failure': []}, {'name': 'Mutant #3883', 'line': 603, 'description': ['            id_path = label'], 'failure': []}, {'name': 'Mutant #3884', 'line': 606, 'description': ['        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -603,7 +603,7 @@\n             id_path = label\n \n         assert isinstance(id_path, str)\n-        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n+        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=False)\n \n         try:\n             displayed_value = get_stringifier(iinfo)(value)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3885', 'line': 606, 'description': ['        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)'], 'failure': []}, {'name': 'Mutant #3886', 'line': 609, 'description': ['            displayed_value = get_stringifier(iinfo)(value)'], 'failure': []}, {'name': 'Mutant #3887', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -611,7 +611,7 @@\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n             displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+                            - "" (!! %s error !!)"" % iinfo.display_type\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3888', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -611,7 +611,7 @@\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n             displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+                            + ""XX (!! %s error !!)XX"" % iinfo.display_type\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3889', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -611,7 +611,7 @@\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n             displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+                            + "" (!! %s error !!)"" / iinfo.display_type\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3890', 'line': 614, 'description': ['                            + "" (!! %s error !!)"" % iinfo.display_type'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -610,8 +610,7 @@\n         except Exception:\n             # Unfortunately, anything can happen when calling str() or\n             # repr() on a random object.\n-            displayed_value = type_stringifier(value) \\\n-                            + "" (!! %s error !!)"" % iinfo.display_type\n+            displayed_value = None\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3891', 'line': 615, 'description': ['            ui_log.exception(""stringifier failed"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -612,7 +612,7 @@\n             # repr() on a random object.\n             displayed_value = type_stringifier(value) \\\n                             + "" (!! %s error !!)"" % iinfo.display_type\n-            ui_log.exception(""stringifier failed"")\n+            ui_log.exception(""XXstringifier failedXX"")\n \n         if iinfo.show_detail:\n             marker = iinfo.access_level[:3]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3892', 'line': 618, 'description': ['            marker = iinfo.access_level[:3]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -615,7 +615,7 @@\n             ui_log.exception(""stringifier failed"")\n \n         if iinfo.show_detail:\n-            marker = iinfo.access_level[:3]\n+            marker = iinfo.access_level[:4]\n             if iinfo.show_methods:\n                 marker += ""+()""\n             displayed_value += "" [%s]"" % marker\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3893', 'line': 618, 'description': ['            marker = iinfo.access_level[:3]'], 'failure': []}, {'name': 'Mutant #3894', 'line': 620, 'description': ['                marker += ""+()""'], 'failure': []}, {'name': 'Mutant #3895', 'line': 620, 'description': ['                marker += ""+()""'], 'failure': []}, {'name': 'Mutant #3896', 'line': 620, 'description': ['                marker += ""+()""'], 'failure': []}, {'name': 'Mutant #3897', 'line': 621, 'description': ['            displayed_value += "" [%s]"" % marker'], 'failure': []}, {'name': 'Mutant #3898', 'line': 621, 'description': ['            displayed_value += "" [%s]"" % marker'], 'failure': []}, {'name': 'Mutant #3899', 'line': 621, 'description': ['            displayed_value += "" [%s]"" % marker'], 'failure': []}, {'name': 'Mutant #3900', 'line': 621, 'description': ['            displayed_value += "" [%s]"" % marker'], 'failure': []}, {'name': 'Mutant #3901', 'line': 624, 'description': ['            id_path, attr_prefix)'], 'failure': []}]",65.0,['CL001' 'CL002' 'ANNOT001' 'F002' 'C002' 'NOA001' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/Assert'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 1, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_should_repeat_at_top,676-690,"[{'lineno': 680, 'coloffset': 8, 'linematch': 'if id_path is None:', 'context': '    def _should_repeat_at_top(id_path, tipp) -> bool:\n        """"""\n        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False\n        if id_path == tipp:\n            return True\n\n        # Perhaps it\'s a child of the top-level path', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 682, 'coloffset': 8, 'linematch': 'if id_path == tipp:', 'context': '        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False\n        if id_path == tipp:\n            return True\n\n        # Perhaps it\'s a child of the top-level path\n        before, sep, after = id_path.partition(tipp)\n        return (before == """"', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 676, 'coloffset': 4, 'linematch': 'def _should_repeat_at_top(id_path, tipp) -> bool:', 'context': '\n        self.top_id_path_prefixes = []\n\n    @staticmethod\n    def _should_repeat_at_top(id_path, tipp) -> bool:\n        """"""\n        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 682, 'coloffset': 8, 'linematch': 'if id_path == tipp:', 'context': '        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False\n        if id_path == tipp:\n            return True\n\n        # Perhaps it\'s a child of the top-level path\n        before, sep, after = id_path.partition(tipp)\n        return (before == """"', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 676, 'coloffset': 4, 'linematch': 'def _should_repeat_at_top(id_path, tipp) -> bool:', 'context': '\n        self.top_id_path_prefixes = []\n\n    @staticmethod\n    def _should_repeat_at_top(id_path, tipp) -> bool:\n        """"""\n        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 677, 'coloffset': 8, 'linematch': '""""""', 'context': '        self.top_id_path_prefixes = []\n\n    @staticmethod\n    def _should_repeat_at_top(id_path, tipp) -> bool:\n        """"""\n        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False\n        if id_path == tipp:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 680, 'coloffset': 8, 'linematch': 'if id_path is None:', 'context': '    def _should_repeat_at_top(id_path, tipp) -> bool:\n        """"""\n        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False\n        if id_path == tipp:\n            return True\n\n        # Perhaps it\'s a child of the top-level path', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 682, 'coloffset': 8, 'linematch': 'if id_path == tipp:', 'context': '        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False\n        if id_path == tipp:\n            return True\n\n        # Perhaps it\'s a child of the top-level path\n        before, sep, after = id_path.partition(tipp)\n        return (before == """"', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 686, 'coloffset': 8, 'linematch': 'before, sep, after = id_path.partition(tipp)', 'context': '        if id_path == tipp:\n            return True\n\n        # Perhaps it\'s a child of the top-level path\n        before, sep, after = id_path.partition(tipp)\n        return (before == """"\n                and sep == tipp\n                and len(after) > 0\n                and after[0] in "".<["")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 687, 'coloffset': 8, 'linematch': 'return (before == """"', 'context': '            return True\n\n        # Perhaps it\'s a child of the top-level path\n        before, sep, after = id_path.partition(tipp)\n        return (before == """"\n                and sep == tipp\n                and len(after) > 0\n                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 676, 'coloffset': 4, 'linematch': 'def _should_repeat_at_top(id_path, tipp) -> bool:', 'context': '\n        self.top_id_path_prefixes = []\n\n    @staticmethod\n    def _should_repeat_at_top(id_path, tipp) -> bool:\n        """"""\n        :return: True if the id_path is a child path of tipp\n        """"""\n        if id_path is None:\n            return False', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #3919', 'line': 680, 'description': ['        if id_path is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -677,7 +677,7 @@\n         """"""\n         :return: True if the id_path is a child path of tipp\n         """"""\n-        if id_path is None:\n+        if id_path is not None:\n             return False\n         if id_path == tipp:\n             return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3920', 'line': 681, 'description': ['            return False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -678,7 +678,7 @@\n         :return: True if the id_path is a child path of tipp\n         """"""\n         if id_path is None:\n-            return False\n+            return True\n         if id_path == tipp:\n             return True\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3921', 'line': 682, 'description': ['        if id_path == tipp:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -679,7 +679,7 @@\n         """"""\n         if id_path is None:\n             return False\n-        if id_path == tipp:\n+        if id_path != tipp:\n             return True\n \n         # Perhaps it\'s a child of the top-level path\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3922', 'line': 683, 'description': ['            return True'], 'failure': [{'inner': ""--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -680,7 +680,7 @@\n         if id_path is None:\n             return False\n         if id_path == tipp:\n-            return True\n+            return False\n \n         # Perhaps it's a child of the top-level path\n         before, sep, after = id_path.partition(tipp)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3923', 'line': 686, 'description': ['        before, sep, after = id_path.partition(tipp)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -683,7 +683,7 @@\n             return True\n \n         # Perhaps it\'s a child of the top-level path\n-        before, sep, after = id_path.partition(tipp)\n+        before, sep, after = None\n         return (before == """"\n                 and sep == tipp\n                 and len(after) > 0\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3924', 'line': 687, 'description': ['        return (before == """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -684,7 +684,7 @@\n \n         # Perhaps it\'s a child of the top-level path\n         before, sep, after = id_path.partition(tipp)\n-        return (before == """"\n+        return (before != """"\n                 and sep == tipp\n                 and len(after) > 0\n                 and after[0] in "".<["")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3925', 'line': 687, 'description': ['        return (before == """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -684,7 +684,7 @@\n \n         # Perhaps it\'s a child of the top-level path\n         before, sep, after = id_path.partition(tipp)\n-        return (before == """"\n+        return (before == ""XXXX""\n                 and sep == tipp\n                 and len(after) > 0\n                 and after[0] in "".<["")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3926', 'line': 688, 'description': ['                and sep == tipp'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -685,7 +685,7 @@\n         # Perhaps it\'s a child of the top-level path\n         before, sep, after = id_path.partition(tipp)\n         return (before == """"\n-                and sep == tipp\n+                and sep != tipp\n                 and len(after) > 0\n                 and after[0] in "".<["")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3927', 'line': 689, 'description': ['                and len(after) > 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -686,7 +686,7 @@\n         before, sep, after = id_path.partition(tipp)\n         return (before == """"\n                 and sep == tipp\n-                and len(after) > 0\n+                and len(after) >= 0\n                 and after[0] in "".<["")\n \n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3928', 'line': 689, 'description': ['                and len(after) > 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -686,7 +686,7 @@\n         before, sep, after = id_path.partition(tipp)\n         return (before == """"\n                 and sep == tipp\n-                and len(after) > 0\n+                and len(after) > 1\n                 and after[0] in "".<["")\n \n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3929', 'line': 690, 'description': ['                and after[0] in "".<["")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -687,7 +687,7 @@\n         return (before == """"\n                 and sep == tipp\n                 and len(after) > 0\n-                and after[0] in "".<["")\n+                and after[1] in "".<["")\n \n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n         iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3930', 'line': 690, 'description': ['                and after[0] in "".<["")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -687,7 +687,7 @@\n         return (before == """"\n                 and sep == tipp\n                 and len(after) > 0\n-                and after[0] in "".<["")\n+                and after[0] not in "".<["")\n \n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n         iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3931', 'line': 690, 'description': ['                and after[0] in "".<["")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -687,7 +687,7 @@\n         return (before == """"\n                 and sep == tipp\n                 and len(after) > 0\n-                and after[0] in "".<["")\n+                and after[0] in ""XX.<[XX"")\n \n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n         iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3932', 'line': 690, 'description': ['                and after[0] in "".<["")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -684,8 +684,7 @@\n \n         # Perhaps it\'s a child of the top-level path\n         before, sep, after = id_path.partition(tipp)\n-        return (before == """"\n-                and sep == tipp\n+        return (before == """" or sep == tipp\n                 and len(after) > 0\n                 and after[0] in "".<["")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,add_item,692-712,"[{'lineno': 694, 'coloffset': 8, 'linematch': 'if iinfo.highlighted:', 'context': '                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 698, 'coloffset': 8, 'linematch': 'if repeated_at_top and id_path is not None:', 'context': '        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)\n\n        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 705, 'coloffset': 8, 'linematch': 'if repeated_at_top:', 'context': '        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True\n\n        if repeated_at_top:\n            self.top_widget_list.append(VariableWidget(parent, var_label,\n                value_str, id_path, attr_prefix, iinfo=iinfo))\n\n        new_item = VariableWidget(parent, var_label, value_str, id_path,\n            attr_prefix, iinfo=iinfo)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 702, 'coloffset': 12, 'linematch': 'if self._should_repeat_at_top(id_path, tipp):', 'context': '        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)\n\n        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True\n\n        if repeated_at_top:\n            self.top_widget_list.append(VariableWidget(parent, var_label,\n                value_str, id_path, attr_prefix, iinfo=iinfo))', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 692, 'coloffset': 4, 'linematch': 'def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):', 'context': '                and sep == tipp\n                and len(after) > 0\n                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 698, 'coloffset': 8, 'linematch': 'if repeated_at_top and id_path is not None:', 'context': '        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)\n\n        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 705, 'coloffset': 8, 'linematch': 'if repeated_at_top:', 'context': '        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True\n\n        if repeated_at_top:\n            self.top_widget_list.append(VariableWidget(parent, var_label,\n                value_str, id_path, attr_prefix, iinfo=iinfo))\n\n        new_item = VariableWidget(parent, var_label, value_str, id_path,\n            attr_prefix, iinfo=iinfo)', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 692, 'coloffset': 4, 'linematch': 'def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):', 'context': '                and sep == tipp\n                and len(after) > 0\n                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 693, 'coloffset': 8, 'linematch': 'iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)', 'context': '                and len(after) > 0\n                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 694, 'coloffset': 8, 'linematch': 'if iinfo.highlighted:', 'context': '                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 697, 'coloffset': 8, 'linematch': 'repeated_at_top = iinfo.repeated_at_top', 'context': '        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)\n\n        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 698, 'coloffset': 8, 'linematch': 'if repeated_at_top and id_path is not None:', 'context': '        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)\n\n        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 701, 'coloffset': 8, 'linematch': 'for tipp in self.top_id_path_prefixes:', 'context': '        repeated_at_top = iinfo.repeated_at_top\n        if repeated_at_top and id_path is not None:\n            self.top_id_path_prefixes.append(id_path)\n\n        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True\n\n        if repeated_at_top:\n            self.top_widget_list.append(VariableWidget(parent, var_label,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 705, 'coloffset': 8, 'linematch': 'if repeated_at_top:', 'context': '        for tipp in self.top_id_path_prefixes:\n            if self._should_repeat_at_top(id_path, tipp):\n                repeated_at_top = True\n\n        if repeated_at_top:\n            self.top_widget_list.append(VariableWidget(parent, var_label,\n                value_str, id_path, attr_prefix, iinfo=iinfo))\n\n        new_item = VariableWidget(parent, var_label, value_str, id_path,\n            attr_prefix, iinfo=iinfo)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 709, 'coloffset': 8, 'linematch': 'new_item = VariableWidget(parent, var_label, value_str, id_path,', 'context': '        if repeated_at_top:\n            self.top_widget_list.append(VariableWidget(parent, var_label,\n                value_str, id_path, attr_prefix, iinfo=iinfo))\n\n        new_item = VariableWidget(parent, var_label, value_str, id_path,\n            attr_prefix, iinfo=iinfo)\n        self.main_widget_list.append(new_item)\n        return new_item\n\n# }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 711, 'coloffset': 8, 'linematch': 'self.main_widget_list.append(new_item)', 'context': '                value_str, id_path, attr_prefix, iinfo=iinfo))\n\n        new_item = VariableWidget(parent, var_label, value_str, id_path,\n            attr_prefix, iinfo=iinfo)\n        self.main_widget_list.append(new_item)\n        return new_item\n\n# }}}\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 712, 'coloffset': 8, 'linematch': 'return new_item', 'context': '\n        new_item = VariableWidget(parent, var_label, value_str, id_path,\n            attr_prefix, iinfo=iinfo)\n        self.main_widget_list.append(new_item)\n        return new_item\n\n# }}}\n\n\n# {{{ top level', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 692, 'coloffset': 4, 'linematch': 'def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):', 'context': '                and sep == tipp\n                and len(after) > 0\n                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 692, 'coloffset': 4, 'linematch': 'def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):', 'context': '                and sep == tipp\n                and len(after) > 0\n                and after[0] in "".<["")\n\n    def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n        if iinfo.highlighted:\n            attr_prefix = ""highlighted var""\n\n        repeated_at_top = iinfo.repeated_at_top', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3933', 'line': 693, 'description': ['        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -690,7 +690,7 @@\n                 and after[0] in "".<["")\n \n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n-        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n+        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=False)\n         if iinfo.highlighted:\n             attr_prefix = ""highlighted var""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3934', 'line': 693, 'description': ['        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -690,7 +690,7 @@\n                 and after[0] in "".<["")\n \n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n-        iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n+        iinfo = None\n         if iinfo.highlighted:\n             attr_prefix = ""highlighted var""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3935', 'line': 695, 'description': ['            attr_prefix = ""highlighted var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -692,7 +692,7 @@\n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n         iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n         if iinfo.highlighted:\n-            attr_prefix = ""highlighted var""\n+            attr_prefix = ""XXhighlighted varXX""\n \n         repeated_at_top = iinfo.repeated_at_top\n         if repeated_at_top and id_path is not None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3936', 'line': 695, 'description': ['            attr_prefix = ""highlighted var""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -692,7 +692,7 @@\n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n         iinfo = self.frame_var_info.get_inspect_info(id_path, read_only=True)\n         if iinfo.highlighted:\n-            attr_prefix = ""highlighted var""\n+            attr_prefix = None\n \n         repeated_at_top = iinfo.repeated_at_top\n         if repeated_at_top and id_path is not None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3937', 'line': 697, 'description': ['        repeated_at_top = iinfo.repeated_at_top'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -694,7 +694,7 @@\n         if iinfo.highlighted:\n             attr_prefix = ""highlighted var""\n \n-        repeated_at_top = iinfo.repeated_at_top\n+        repeated_at_top = None\n         if repeated_at_top and id_path is not None:\n             self.top_id_path_prefixes.append(id_path)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3938', 'line': 698, 'description': ['        if repeated_at_top and id_path is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -695,7 +695,7 @@\n             attr_prefix = ""highlighted var""\n \n         repeated_at_top = iinfo.repeated_at_top\n-        if repeated_at_top and id_path is not None:\n+        if repeated_at_top and id_path is  None:\n             self.top_id_path_prefixes.append(id_path)\n \n         for tipp in self.top_id_path_prefixes:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3939', 'line': 698, 'description': ['        if repeated_at_top and id_path is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -695,7 +695,7 @@\n             attr_prefix = ""highlighted var""\n \n         repeated_at_top = iinfo.repeated_at_top\n-        if repeated_at_top and id_path is not None:\n+        if repeated_at_top or id_path is not None:\n             self.top_id_path_prefixes.append(id_path)\n \n         for tipp in self.top_id_path_prefixes:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3940', 'line': 703, 'description': ['                repeated_at_top = True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -700,7 +700,7 @@\n \n         for tipp in self.top_id_path_prefixes:\n             if self._should_repeat_at_top(id_path, tipp):\n-                repeated_at_top = True\n+                repeated_at_top = False\n \n         if repeated_at_top:\n             self.top_widget_list.append(VariableWidget(parent, var_label,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3941', 'line': 703, 'description': ['                repeated_at_top = True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -700,7 +700,7 @@\n \n         for tipp in self.top_id_path_prefixes:\n             if self._should_repeat_at_top(id_path, tipp):\n-                repeated_at_top = True\n+                repeated_at_top = None\n \n         if repeated_at_top:\n             self.top_widget_list.append(VariableWidget(parent, var_label,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3942', 'line': 710, 'description': ['            attr_prefix, iinfo=iinfo)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -706,8 +706,7 @@\n             self.top_widget_list.append(VariableWidget(parent, var_label,\n                 value_str, id_path, attr_prefix, iinfo=iinfo))\n \n-        new_item = VariableWidget(parent, var_label, value_str, id_path,\n-            attr_prefix, iinfo=iinfo)\n+        new_item = None\n         self.main_widget_list.append(new_item)\n         return new_item\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_frame_var_info,765-772,"[{'lineno': 766, 'coloffset': 8, 'linematch': 'if ssid is None:', 'context': '    def __init__(self):\n        self.frame_var_info = {}\n\n    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n        if read_only:\n            return self.frame_var_info.get(ssid, FrameVarInfo())\n        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 769, 'coloffset': 8, 'linematch': 'if read_only:', 'context': '    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n        if read_only:\n            return self.frame_var_info.get(ssid, FrameVarInfo())\n        else:\n            return self.frame_var_info.setdefault(ssid, FrameVarInfo())\n\n# }}}', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 765, 'coloffset': 4, 'linematch': 'def get_frame_var_info(self, read_only, ssid=None):', 'context': 'class FrameVarInfoKeeper:\n    def __init__(self):\n        self.frame_var_info = {}\n\n    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n        if read_only:\n            return self.frame_var_info.get(ssid, FrameVarInfo())', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 769, 'coloffset': 8, 'linematch': 'if read_only:', 'context': '    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n        if read_only:\n            return self.frame_var_info.get(ssid, FrameVarInfo())\n        else:\n            return self.frame_var_info.setdefault(ssid, FrameVarInfo())\n\n# }}}', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 765, 'coloffset': 4, 'linematch': 'def get_frame_var_info(self, read_only, ssid=None):', 'context': 'class FrameVarInfoKeeper:\n    def __init__(self):\n        self.frame_var_info = {}\n\n    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n        if read_only:\n            return self.frame_var_info.get(ssid, FrameVarInfo())', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 766, 'coloffset': 8, 'linematch': 'if ssid is None:', 'context': '    def __init__(self):\n        self.frame_var_info = {}\n\n    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n        if read_only:\n            return self.frame_var_info.get(ssid, FrameVarInfo())\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 769, 'coloffset': 8, 'linematch': 'if read_only:', 'context': '    def get_frame_var_info(self, read_only, ssid=None):\n        if ssid is None:\n            # self.debugger set by subclass\n            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n        if read_only:\n            return self.frame_var_info.get(ssid, FrameVarInfo())\n        else:\n            return self.frame_var_info.setdefault(ssid, FrameVarInfo())\n\n# }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3971', 'line': 766, 'description': ['        if ssid is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -763,7 +763,7 @@\n         self.frame_var_info = {}\n \n     def get_frame_var_info(self, read_only, ssid=None):\n-        if ssid is None:\n+        if ssid is not None:\n             # self.debugger set by subclass\n             ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3972', 'line': 768, 'description': ['            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -765,7 +765,7 @@\n     def get_frame_var_info(self, read_only, ssid=None):\n         if ssid is None:\n             # self.debugger set by subclass\n-            ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n+            ssid = None  # noqa: E501 # pylint: disable=no-member\n         if read_only:\n             return self.frame_var_info.get(ssid, FrameVarInfo())\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,simple_func,23-43,"[{'lineno': 23, 'coloffset': 0, 'linematch': 'def simple_func(x):', 'context': '\nset_trace()\n\n\ndef simple_func(x):\n    x += 1\n\n    s = range(20)\n    z = None  # noqa: F841\n    w = ()  # noqa: F841', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 23, 'coloffset': 0, 'linematch': 'def simple_func(x):', 'context': '\nset_trace()\n\n\ndef simple_func(x):\n    x += 1\n\n    s = range(20)\n    z = None  # noqa: F841\n    w = ()  # noqa: F841', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 24, 'coloffset': 4, 'linematch': 'x += 1', 'context': 'set_trace()\n\n\ndef simple_func(x):\n    x += 1\n\n    s = range(20)\n    z = None  # noqa: F841\n    w = ()  # noqa: F841\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 26, 'coloffset': 4, 'linematch': 's = range(20)', 'context': '\ndef simple_func(x):\n    x += 1\n\n    s = range(20)\n    z = None  # noqa: F841\n    w = ()  # noqa: F841\n\n    y = {i: i**2 for i in s}  # noqa: F841\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 27, 'coloffset': 4, 'linematch': 'z = None  # noqa: F841', 'context': 'def simple_func(x):\n    x += 1\n\n    s = range(20)\n    z = None  # noqa: F841\n    w = ()  # noqa: F841\n\n    y = {i: i**2 for i in s}  # noqa: F841\n\n    k = set(range(5, 99))  # noqa: F841', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 28, 'coloffset': 4, 'linematch': 'w = ()  # noqa: F841', 'context': '    x += 1\n\n    s = range(20)\n    z = None  # noqa: F841\n    w = ()  # noqa: F841\n\n    y = {i: i**2 for i in s}  # noqa: F841\n\n    k = set(range(5, 99))  # noqa: F841\n    c = Color(137, 214, 56, 88)  # noqa: F841', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 30, 'coloffset': 4, 'linematch': 'y = {i: i**2 for i in s}  # noqa: F841', 'context': '    s = range(20)\n    z = None  # noqa: F841\n    w = ()  # noqa: F841\n\n    y = {i: i**2 for i in s}  # noqa: F841\n\n    k = set(range(5, 99))  # noqa: F841\n    c = Color(137, 214, 56, 88)  # noqa: F841\n\n    try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 32, 'coloffset': 4, 'linematch': 'k = set(range(5, 99))  # noqa: F841', 'context': '    w = ()  # noqa: F841\n\n    y = {i: i**2 for i in s}  # noqa: F841\n\n    k = set(range(5, 99))  # noqa: F841\n    c = Color(137, 214, 56, 88)  # noqa: F841\n\n    try:\n        x.invalid  # noqa: B018\n    except AttributeError:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 33, 'coloffset': 4, 'linematch': 'c = Color(137, 214, 56, 88)  # noqa: F841', 'context': '\n    y = {i: i**2 for i in s}  # noqa: F841\n\n    k = set(range(5, 99))  # noqa: F841\n    c = Color(137, 214, 56, 88)  # noqa: F841\n\n    try:\n        x.invalid  # noqa: B018\n    except AttributeError:\n        pass', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 35, 'coloffset': 4, 'linematch': 'try:', 'context': '\n    k = set(range(5, 99))  # noqa: F841\n    c = Color(137, 214, 56, 88)  # noqa: F841\n\n    try:\n        x.invalid  # noqa: B018\n    except AttributeError:\n        pass\n\n    # import sys', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 43, 'coloffset': 4, 'linematch': 'return 2*x', 'context': '\n    # import sys\n    # sys.exit(1)\n\n    return 2*x\n\n\ndef fermat(n):\n    """"""Returns triplets of the form x^n + y^n = z^n.\n    Warning! Untested with n > 2.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5157', 'line': 32, 'description': ['        numpy_values = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -29,7 +29,7 @@\n     try:\n         import numpy as np\n     except ImportError:\n-        numpy_values = []\n+        numpy_values = None\n     else:\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5158', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(6), np.zeros(5)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5159', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -31,7 +31,7 @@\n     except ImportError:\n         numpy_values = []\n     else:\n-        numpy_values = [np.float32(5), np.zeros(5)]\n+        numpy_values = [np.float32(5), np.zeros(6)]\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5160', 'line': 34, 'description': ['        numpy_values = [np.float32(5), np.zeros(5)]'], 'failure': []}, {'name': 'Mutant #5161', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""XXlólXX"".encode(), ""lól"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5162', 'line': 37, 'description': ['            A, A2, A(), A2(), ""lól"".encode(), ""lól"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -34,7 +34,7 @@\n         numpy_values = [np.float32(5), np.zeros(5)]\n \n     for value in [\n-            A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n+            A, A2, A(), A2(), ""lól"".encode(), ""XXlólXX"",\n             1233123, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5163', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233124, [""lól"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5164', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""XXlólXX"".encode(), ""lól""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5165', 'line': 38, 'description': ['            1233123, [""lól"".encode(), ""lól""],'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -35,7 +35,7 @@\n \n     for value in [\n             A, A2, A(), A2(), ""lól"".encode(), ""lól"",\n-            1233123, [""lól"".encode(), ""lól""],\n+            1233123, [""lól"".encode(), ""XXlólXX""],\n             ] + numpy_values:\n         for display_type in STRINGIFIERS:\n             iinfo = InspectInfo()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5166', 'line': 39, 'description': ['            ] + numpy_values:'], 'failure': []}, {'name': 'Mutant #5167', 'line': 41, 'description': ['            iinfo = InspectInfo()'], 'failure': []}, {'name': 'Mutant #5168', 'line': 42, 'description': ['            iinfo.display_type = display_type'], 'failure': []}]",28.57142857142857,['ANNOT001' 'FLV001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,generate_containerlike_class,110-143,"[{'lineno': 110, 'coloffset': 0, 'linematch': 'def generate_containerlike_class():', 'context': '            raise\n    return method\n\n\ndef generate_containerlike_class():\n    methods = {\n        ""__contains__"",\n        ""__getitem__"",\n        ""__iter__"",\n        ""__len__"",', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 131, 'coloffset': 16, 'linematch': 'def __init__(self, iterable):', 'context': '        for selected_methods in sorted(\n                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):\n                    self.__internal_dict__ = dict(iterable)\n\n                @classmethod\n                def name(cls):\n                    return ""ContainerlikeClass:{}"".format(', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 135, 'coloffset': 16, 'linematch': 'def name(cls):', 'context': '                def __init__(self, iterable):\n                    self.__internal_dict__ = dict(iterable)\n\n                @classmethod\n                def name(cls):\n                    return ""ContainerlikeClass:{}"".format(\n                            "":"".join(selected_methods))  # noqa: B023\n\n            for method in selected_methods:\n                func = method_factory(method)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 110, 'coloffset': 0, 'linematch': 'def generate_containerlike_class():', 'context': '            raise\n    return method\n\n\ndef generate_containerlike_class():\n    methods = {\n        ""__contains__"",\n        ""__getitem__"",\n        ""__iter__"",\n        ""__len__"",', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 126, 'coloffset': 4, 'linematch': 'for r in range(0, len(methods) + 1):', 'context': '        ""values"",\n    }\n\n    # Deliberately starting from 0\n    for r in range(0, len(methods) + 1):\n        for selected_methods in sorted(\n                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 127, 'coloffset': 8, 'linematch': 'for selected_methods in sorted(', 'context': '    }\n\n    # Deliberately starting from 0\n    for r in range(0, len(methods) + 1):\n        for selected_methods in sorted(\n                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):\n                    self.__internal_dict__ = dict(iterable)', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 130, 'coloffset': 12, 'linematch': 'class ContainerlikeClass:', 'context': '    for r in range(0, len(methods) + 1):\n        for selected_methods in sorted(\n                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):\n                    self.__internal_dict__ = dict(iterable)\n\n                @classmethod\n                def name(cls):', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 126, 'coloffset': 4, 'linematch': 'for r in range(0, len(methods) + 1):', 'context': '        ""values"",\n    }\n\n    # Deliberately starting from 0\n    for r in range(0, len(methods) + 1):\n        for selected_methods in sorted(\n                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 127, 'coloffset': 8, 'linematch': 'for selected_methods in sorted(', 'context': '    }\n\n    # Deliberately starting from 0\n    for r in range(0, len(methods) + 1):\n        for selected_methods in sorted(\n                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):\n                    self.__internal_dict__ = dict(iterable)', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 111, 'coloffset': 4, 'linematch': 'methods = {', 'context': '    return method\n\n\ndef generate_containerlike_class():\n    methods = {\n        ""__contains__"",\n        ""__getitem__"",\n        ""__iter__"",\n        ""__len__"",\n        ""__reversed__"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 126, 'coloffset': 4, 'linematch': 'for r in range(0, len(methods) + 1):', 'context': '        ""values"",\n    }\n\n    # Deliberately starting from 0\n    for r in range(0, len(methods) + 1):\n        for selected_methods in sorted(\n                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 132, 'coloffset': 20, 'linematch': 'self.__internal_dict__ = dict(iterable)', 'context': '                map(sorted, itertools.combinations(methods, r))):\n\n            class ContainerlikeClass:\n                def __init__(self, iterable):\n                    self.__internal_dict__ = dict(iterable)\n\n                @classmethod\n                def name(cls):\n                    return ""ContainerlikeClass:{}"".format(\n                            "":"".join(selected_methods))  # noqa: B023', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 136, 'coloffset': 20, 'linematch': 'return ""ContainerlikeClass:{}"".format(', 'context': '                    self.__internal_dict__ = dict(iterable)\n\n                @classmethod\n                def name(cls):\n                    return ""ContainerlikeClass:{}"".format(\n                            "":"".join(selected_methods))  # noqa: B023\n\n            for method in selected_methods:\n                func = method_factory(method)\n                setattr(ContainerlikeClass, method, func)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3562', 'line': 110, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -107,7 +107,7 @@\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3563', 'line': 113, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -110,7 +110,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, sequence):\n         return len(sequence)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3564', 'line': 119, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3565', 'line': 121, 'description': ['        if cls is PudbMapping:'], 'failure': []}, {'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3572', 'line': 132, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3574', 'line': 139, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5200', 'line': 112, 'description': ['        ""__contains__"",'], 'failure': []}, {'name': 'Mutant #5201', 'line': 113, 'description': ['        ""__getitem__"",'], 'failure': []}, {'name': 'Mutant #5202', 'line': 114, 'description': ['        ""__iter__"",'], 'failure': []}, {'name': 'Mutant #5203', 'line': 115, 'description': ['        ""__len__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -112,7 +112,7 @@\n         ""__contains__"",\n         ""__getitem__"",\n         ""__iter__"",\n-        ""__len__"",\n+        ""XX__len__XX"",\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5204', 'line': 116, 'description': ['        ""__reversed__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -113,7 +113,7 @@\n         ""__getitem__"",\n         ""__iter__"",\n         ""__len__"",\n-        ""__reversed__"",\n+        ""XX__reversed__XX"",\n         ""count"",\n         ""get"",\n         ""index"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5205', 'line': 117, 'description': ['        ""count"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -114,7 +114,7 @@\n         ""__iter__"",\n         ""__len__"",\n         ""__reversed__"",\n-        ""count"",\n+        ""XXcountXX"",\n         ""get"",\n         ""index"",\n         ""items"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5206', 'line': 118, 'description': ['        ""get"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -115,7 +115,7 @@\n         ""__len__"",\n         ""__reversed__"",\n         ""count"",\n-        ""get"",\n+        ""XXgetXX"",\n         ""index"",\n         ""items"",\n         ""keys"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5207', 'line': 119, 'description': ['        ""index"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -116,7 +116,7 @@\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n-        ""index"",\n+        ""XXindexXX"",\n         ""items"",\n         ""keys"",\n         ""values"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5208', 'line': 120, 'description': ['        ""items"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -117,7 +117,7 @@\n         ""count"",\n         ""get"",\n         ""index"",\n-        ""items"",\n+        ""XXitemsXX"",\n         ""keys"",\n         ""values"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5209', 'line': 121, 'description': ['        ""keys"",'], 'failure': []}, {'name': 'Mutant #5210', 'line': 122, 'description': ['        ""values"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -119,7 +119,7 @@\n         ""index"",\n         ""items"",\n         ""keys"",\n-        ""values"",\n+        ""XXvaluesXX"",\n     }\n \n     # Deliberately starting from 0\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5215', 'line': 132, 'description': ['                    self.__internal_dict__ = dict(iterable)'], 'failure': []}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5219', 'line': 140, 'description': ['                func = method_factory(method)'], 'failure': []}]",60.60606060606061,['ANNOT001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*' './/FunctionDef//For[.//For]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 1, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,bar,73-74,"[{'lineno': 73, 'coloffset': 4, 'linematch': 'def bar(self):', 'context': 'class Reasonable:\n    def __init__(self):\n        self.x = 42\n\n    def bar(self):\n        return True\n\n    @property\n    def red(self):\n        return ""red""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 74, 'coloffset': 8, 'linematch': 'return True', 'context': '    def __init__(self):\n        self.x = 42\n\n    def bar(self):\n        return True\n\n    @property\n    def red(self):\n        return ""red""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,red,77-78,"[{'lineno': 77, 'coloffset': 4, 'linematch': 'def red(self):', 'context': '    def bar(self):\n        return True\n\n    @property\n    def red(self):\n        return ""red""\n\n    @classmethod\n    def blue(cls):\n        return ""blue""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 78, 'coloffset': 8, 'linematch': 'return ""red""', 'context': '        return True\n\n    @property\n    def red(self):\n        return ""red""\n\n    @classmethod\n    def blue(cls):\n        return ""blue""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,blue,81-82,"[{'lineno': 81, 'coloffset': 4, 'linematch': 'def blue(cls):', 'context': '    def red(self):\n        return ""red""\n\n    @classmethod\n    def blue(cls):\n        return ""blue""\n\n    @staticmethod\n    def green():\n        return ""green""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 82, 'coloffset': 8, 'linematch': 'return ""blue""', 'context': '        return ""red""\n\n    @classmethod\n    def blue(cls):\n        return ""blue""\n\n    @staticmethod\n    def green():\n        return ""green""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,green,85-86,"[{'lineno': 85, 'coloffset': 4, 'linematch': 'def green():', 'context': '    def blue(cls):\n        return ""blue""\n\n    @staticmethod\n    def green():\n        return ""green""\n\n    def _private(self):\n        return ""shh""\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 86, 'coloffset': 8, 'linematch': 'return ""green""', 'context': '        return ""blue""\n\n    @staticmethod\n    def green():\n        return ""green""\n\n    def _private(self):\n        return ""shh""\n\n    def __magicsomething__(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_private,88-89,"[{'lineno': 88, 'coloffset': 4, 'linematch': 'def _private(self):', 'context': '    @staticmethod\n    def green():\n        return ""green""\n\n    def _private(self):\n        return ""shh""\n\n    def __magicsomething__(self):\n        return ""amazing""\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 89, 'coloffset': 8, 'linematch': 'return ""shh""', 'context': '    def green():\n        return ""green""\n\n    def _private(self):\n        return ""shh""\n\n    def __magicsomething__(self):\n        return ""amazing""\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,__magicsomething__,91-92,"[{'lineno': 91, 'coloffset': 4, 'linematch': 'def __magicsomething__(self):', 'context': '\n    def _private(self):\n        return ""shh""\n\n    def __magicsomething__(self):\n        return ""amazing""\n\n\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 92, 'coloffset': 8, 'linematch': 'return ""amazing""', 'context': '    def _private(self):\n        return ""shh""\n\n    def __magicsomething__(self):\n        return ""amazing""\n\n\ndef method_factory(method_name):\n    def method(self, *args, **kwargs):\n        func = getattr(self.__internal_dict__, method_name)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3555', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3556', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3557', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3558', 'line': 92, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5194', 'line': 92, 'description': ['        return ""amazing""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -89,7 +89,7 @@\n         return ""shh""\n \n     def __magicsomething__(self):\n-        return ""amazing""\n+        return ""XXamazingXX""\n \n \n def method_factory(method_name):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",80.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,setUp,154-161,"[{'lineno': 154, 'coloffset': 4, 'linematch': 'def setUp(self):', 'context': '    """"""\n    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)\n    MOD_STR = "" [all+()]""\n\n    def setUp(self):\n        self.values_to_expand = []\n        self.class_counts = {\n            ""mappings"": 0,\n            ""sequences"": 0,\n            ""collections"": 0,', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 155, 'coloffset': 8, 'linematch': 'self.values_to_expand = []', 'context': '    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)\n    MOD_STR = "" [all+()]""\n\n    def setUp(self):\n        self.values_to_expand = []\n        self.class_counts = {\n            ""mappings"": 0,\n            ""sequences"": 0,\n            ""collections"": 0,\n            ""other"": 0,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 156, 'coloffset': 8, 'linematch': 'self.class_counts = {', 'context': '    MOD_STR = "" [all+()]""\n\n    def setUp(self):\n        self.values_to_expand = []\n        self.class_counts = {\n            ""mappings"": 0,\n            ""sequences"": 0,\n            ""collections"": 0,\n            ""other"": 0,\n        }', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3579', 'line': 155, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -152,7 +152,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, mapping):\n         return len(mapping.keys())\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5223', 'line': 155, 'description': ['        self.values_to_expand = []'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -152,7 +152,7 @@\n     MOD_STR = "" [all+()]""\n \n     def setUp(self):\n-        self.values_to_expand = []\n+        self.values_to_expand = None\n         self.class_counts = {\n             ""mappings"": 0,\n             ""sequences"": 0,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5224', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5225', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5226', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5227', 'line': 158, 'description': ['            ""sequences"": 0,'], 'failure': []}, {'name': 'Mutant #5228', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5229', 'line': 159, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5230', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5231', 'line': 160, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5232', 'line': 161, 'description': ['        }'], 'failure': []}]",81.81818181818183,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,expected_attrs,172-180,"[{'lineno': 172, 'coloffset': 4, 'linematch': 'def expected_attrs(self, obj):', 'context': '    def walked_values(self):\n        return [(w.var_label, w.value_str)\n                for w in self.walker.widget_list]\n\n    def expected_attrs(self, obj):\n        """"""\n        `dir()` the object and return (label, value string) pairs for each\n        attribute. Should match the order that these attributes would appear in\n        the var_view.\n        """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 172, 'coloffset': 4, 'linematch': 'def expected_attrs(self, obj):', 'context': '    def walked_values(self):\n        return [(w.var_label, w.value_str)\n                for w in self.walker.widget_list]\n\n    def expected_attrs(self, obj):\n        """"""\n        `dir()` the object and return (label, value string) pairs for each\n        attribute. Should match the order that these attributes would appear in\n        the var_view.\n        """"""', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 173, 'coloffset': 8, 'linematch': '""""""', 'context': '        return [(w.var_label, w.value_str)\n                for w in self.walker.widget_list]\n\n    def expected_attrs(self, obj):\n        """"""\n        `dir()` the object and return (label, value string) pairs for each\n        attribute. Should match the order that these attributes would appear in\n        the var_view.\n        """"""\n        return [(""."" + str(label),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 178, 'coloffset': 8, 'linematch': 'return [(""."" + str(label),', 'context': '        `dir()` the object and return (label, value string) pairs for each\n        attribute. Should match the order that these attributes would appear in\n        the var_view.\n        """"""\n        return [(""."" + str(label),\n                 self.value_string(getattr(obj, label), expand=False))\n                for label in sorted(dir(obj))]\n\n    @contextlib.contextmanager\n    def patched_logging(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3581', 'line': 175, 'description': ['        self.id_path_to_iinfo = {}'], 'failure': []}, {'name': 'Mutant #3582', 'line': 176, 'description': ['        self.watches = []'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -173,7 +173,7 @@\n class FrameVarInfo:\n     def __init__(self):\n         self.id_path_to_iinfo = {}\n-        self.watches = []\n+        self.watches = None\n \n     def get_inspect_info(self, id_path, read_only):\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5237', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5238', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5239', 'line': 179, 'description': ['                 self.value_string(getattr(obj, label), expand=False))'], 'failure': []}]",80.0,['ANNOT001' 'FLV001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,patched_logging,183-196,"[{'lineno': 183, 'coloffset': 4, 'linematch': 'def patched_logging(self):', 'context': '                 self.value_string(getattr(obj, label), expand=False))\n                for label in sorted(dir(obj))]\n\n    @contextlib.contextmanager\n    def patched_logging(self):\n        """"""\n        Context manager that patches ui_log.exception such that the test will\n        fail if it is called.\n        """"""\n        def fake_exception_log(*args, **kwargs):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 188, 'coloffset': 8, 'linematch': 'def fake_exception_log(*args, **kwargs):', 'context': '        """"""\n        Context manager that patches ui_log.exception such that the test will\n        fail if it is called.\n        """"""\n        def fake_exception_log(*args, **kwargs):\n            self.fail(""ui_log.exception was unexpectedly called"")\n\n        old_logger = ui_log.exception\n        ui_log.exception = fake_exception_log\n        try:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 183, 'coloffset': 4, 'linematch': 'def patched_logging(self):', 'context': '                 self.value_string(getattr(obj, label), expand=False))\n                for label in sorted(dir(obj))]\n\n    @contextlib.contextmanager\n    def patched_logging(self):\n        """"""\n        Context manager that patches ui_log.exception such that the test will\n        fail if it is called.\n        """"""\n        def fake_exception_log(*args, **kwargs):', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 184, 'coloffset': 8, 'linematch': '""""""', 'context': '                for label in sorted(dir(obj))]\n\n    @contextlib.contextmanager\n    def patched_logging(self):\n        """"""\n        Context manager that patches ui_log.exception such that the test will\n        fail if it is called.\n        """"""\n        def fake_exception_log(*args, **kwargs):\n            self.fail(""ui_log.exception was unexpectedly called"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 188, 'coloffset': 8, 'linematch': 'def fake_exception_log(*args, **kwargs):', 'context': '        """"""\n        Context manager that patches ui_log.exception such that the test will\n        fail if it is called.\n        """"""\n        def fake_exception_log(*args, **kwargs):\n            self.fail(""ui_log.exception was unexpectedly called"")\n\n        old_logger = ui_log.exception\n        ui_log.exception = fake_exception_log\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 189, 'coloffset': 12, 'linematch': 'self.fail(""ui_log.exception was unexpectedly called"")', 'context': '        Context manager that patches ui_log.exception such that the test will\n        fail if it is called.\n        """"""\n        def fake_exception_log(*args, **kwargs):\n            self.fail(""ui_log.exception was unexpectedly called"")\n\n        old_logger = ui_log.exception\n        ui_log.exception = fake_exception_log\n        try:\n            yield', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 191, 'coloffset': 8, 'linematch': 'old_logger = ui_log.exception', 'context': '        """"""\n        def fake_exception_log(*args, **kwargs):\n            self.fail(""ui_log.exception was unexpectedly called"")\n\n        old_logger = ui_log.exception\n        ui_log.exception = fake_exception_log\n        try:\n            yield\n        finally:\n            ui_log.exception = old_logger', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 192, 'coloffset': 8, 'linematch': 'ui_log.exception = fake_exception_log', 'context': '        def fake_exception_log(*args, **kwargs):\n            self.fail(""ui_log.exception was unexpectedly called"")\n\n        old_logger = ui_log.exception\n        ui_log.exception = fake_exception_log\n        try:\n            yield\n        finally:\n            ui_log.exception = old_logger\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 193, 'coloffset': 8, 'linematch': 'try:', 'context': '            self.fail(""ui_log.exception was unexpectedly called"")\n\n        old_logger = ui_log.exception\n        ui_log.exception = fake_exception_log\n        try:\n            yield\n        finally:\n            ui_log.exception = old_logger\n\n    def assert_walks_contents(self, container, label=""xs""):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3583', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': []}, {'name': 'Mutant #3584', 'line': 192, 'description': ['        self.show_detail = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -189,7 +189,7 @@\n         # Do not globalize: cyclic import\n         from pudb.debugger import CONFIG\n \n-        self.show_detail = False\n+        self.show_detail = None\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3585', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': []}, {'name': 'Mutant #3586', 'line': 193, 'description': ['        self.display_type = CONFIG[""stringifier""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -190,7 +190,7 @@\n         from pudb.debugger import CONFIG\n \n         self.show_detail = False\n-        self.display_type = CONFIG[""stringifier""]\n+        self.display_type = None\n         self.highlighted = False\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3587', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = True\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3588', 'line': 194, 'description': ['        self.highlighted = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -191,7 +191,7 @@\n \n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n-        self.highlighted = False\n+        self.highlighted = None\n         self.repeated_at_top = False\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3589', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = True\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3590', 'line': 195, 'description': ['        self.repeated_at_top = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -192,7 +192,7 @@\n         self.show_detail = False\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n-        self.repeated_at_top = False\n+        self.repeated_at_top = None\n         self.access_level = CONFIG[""default_variables_access_level""]\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3591', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': []}, {'name': 'Mutant #3592', 'line': 196, 'description': ['        self.access_level = CONFIG[""default_variables_access_level""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -193,7 +193,7 @@\n         self.display_type = CONFIG[""stringifier""]\n         self.highlighted = False\n         self.repeated_at_top = False\n-        self.access_level = CONFIG[""default_variables_access_level""]\n+        self.access_level = None\n         self.show_methods = False\n         self.wrap = CONFIG[""wrap_variables""]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5241', 'line': 189, 'description': ['            self.fail(""ui_log.exception was unexpectedly called"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -186,7 +186,7 @@\n         fail if it is called.\n         """"""\n         def fake_exception_log(*args, **kwargs):\n-            self.fail(""ui_log.exception was unexpectedly called"")\n+            self.fail(""XXui_log.exception was unexpectedly calledXX"")\n \n         old_logger = ui_log.exception\n         ui_log.exception = fake_exception_log\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5242', 'line': 191, 'description': ['        old_logger = ui_log.exception'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -188,7 +188,7 @@\n         def fake_exception_log(*args, **kwargs):\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n-        old_logger = ui_log.exception\n+        old_logger = None\n         ui_log.exception = fake_exception_log\n         try:\n             yield\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5243', 'line': 192, 'description': ['        ui_log.exception = fake_exception_log'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -189,7 +189,7 @@\n             self.fail(""ui_log.exception was unexpectedly called"")\n \n         old_logger = ui_log.exception\n-        ui_log.exception = fake_exception_log\n+        ui_log.exception = None\n         try:\n             yield\n         finally:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5244', 'line': 196, 'description': ['            ui_log.exception = old_logger'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -193,7 +193,7 @@\n         try:\n             yield\n         finally:\n-            ui_log.exception = old_logger\n+            ui_log.exception = None\n \n     def assert_walks_contents(self, container, label=""xs""):\n         expand_paths = {label}\n', 'type': 'failure', 'message': 'bad_survived'}]}]",21.428571428571427,['ANNOT001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,run_with_timeout,53-65,"[{'lineno': 53, 'coloffset': 0, 'linematch': 'def run_with_timeout(code, time, globals=None):', 'context': 'def timeout(signum, frame, time):\n    raise TimeOutError(""Timed out after %d seconds"" % time)\n\n\ndef run_with_timeout(code, time, globals=None):\n    """"""\n    Evaluate ``code``, timing out after ``time`` seconds.\n\n    In Python 2.5 and lower, ``time`` is rounded up to the nearest integer.\n    The return value is whatever ``code`` returns.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 54, 'coloffset': 4, 'linematch': '""""""', 'context': '    raise TimeOutError(""Timed out after %d seconds"" % time)\n\n\ndef run_with_timeout(code, time, globals=None):\n    """"""\n    Evaluate ``code``, timing out after ``time`` seconds.\n\n    In Python 2.5 and lower, ``time`` is rounded up to the nearest integer.\n    The return value is whatever ``code`` returns.\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'signal.signal(signal.SIGALRM, lambda s, f: timeout(s, f, time))', 'context': '    In Python 2.5 and lower, ``time`` is rounded up to the nearest integer.\n    The return value is whatever ``code`` returns.\n    """"""\n    # Set the signal handler and a ``time``-second alarm\n    signal.signal(signal.SIGALRM, lambda s, f: timeout(s, f, time))\n    signal.setitimer(signal.ITIMER_REAL, time)\n    r = eval(code, globals)\n    signal.alarm(0)          # Disable the alarm\n    return r\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 62, 'coloffset': 4, 'linematch': 'signal.setitimer(signal.ITIMER_REAL, time)', 'context': '    The return value is whatever ``code`` returns.\n    """"""\n    # Set the signal handler and a ``time``-second alarm\n    signal.signal(signal.SIGALRM, lambda s, f: timeout(s, f, time))\n    signal.setitimer(signal.ITIMER_REAL, time)\n    r = eval(code, globals)\n    signal.alarm(0)          # Disable the alarm\n    return r\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 63, 'coloffset': 4, 'linematch': 'r = eval(code, globals)', 'context': '    """"""\n    # Set the signal handler and a ``time``-second alarm\n    signal.signal(signal.SIGALRM, lambda s, f: timeout(s, f, time))\n    signal.setitimer(signal.ITIMER_REAL, time)\n    r = eval(code, globals)\n    signal.alarm(0)          # Disable the alarm\n    return r\n\n\ndef pudb_stringifier(obj):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 64, 'coloffset': 4, 'linematch': 'signal.alarm(0)          # Disable the alarm', 'context': '    # Set the signal handler and a ``time``-second alarm\n    signal.signal(signal.SIGALRM, lambda s, f: timeout(s, f, time))\n    signal.setitimer(signal.ITIMER_REAL, time)\n    r = eval(code, globals)\n    signal.alarm(0)          # Disable the alarm\n    return r\n\n\ndef pudb_stringifier(obj):\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 65, 'coloffset': 4, 'linematch': 'return r', 'context': '    signal.signal(signal.SIGALRM, lambda s, f: timeout(s, f, time))\n    signal.setitimer(signal.ITIMER_REAL, time)\n    r = eval(code, globals)\n    signal.alarm(0)          # Disable the alarm\n    return r\n\n\ndef pudb_stringifier(obj):\n    """"""\n    This is the custom stringifier.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3543', 'line': 55, 'description': ['        if cls is PudbCollection:'], 'failure': []}, {'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3546', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3547', 'line': 59, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3548', 'line': 65, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}, {'name': 'Mutant #5173', 'line': 55, 'description': ['        self.paths_to_expand = paths_to_expand'], 'failure': []}, {'name': 'Mutant #5174', 'line': 59, 'description': ['            id_path, read_only)'], 'failure': []}, {'name': 'Mutant #5175', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5176', 'line': 60, 'description': ['        iinfo.access_level = ""all""'], 'failure': []}, {'name': 'Mutant #5177', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5178', 'line': 61, 'description': ['        iinfo.display_type = ""repr""'], 'failure': []}, {'name': 'Mutant #5179', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5180', 'line': 62, 'description': ['        iinfo.show_methods = True'], 'failure': []}, {'name': 'Mutant #5181', 'line': 64, 'description': ['        if id_path in self.paths_to_expand:'], 'failure': []}, {'name': 'Mutant #5182', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5183', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,pudb_stringifier,68-78,"[{'lineno': 68, 'coloffset': 0, 'linematch': 'def pudb_stringifier(obj):', 'context': '    signal.alarm(0)          # Disable the alarm\n    return r\n\n\ndef pudb_stringifier(obj):\n    """"""\n    This is the custom stringifier.\n\n    It returns str(obj), unless it take more than a second to compute,\n    in which case it falls back to type(obj).', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 69, 'coloffset': 4, 'linematch': '""""""', 'context': '    return r\n\n\ndef pudb_stringifier(obj):\n    """"""\n    This is the custom stringifier.\n\n    It returns str(obj), unless it take more than a second to compute,\n    in which case it falls back to type(obj).\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 75, 'coloffset': 4, 'linematch': 'try:', 'context': '\n    It returns str(obj), unless it take more than a second to compute,\n    in which case it falls back to type(obj).\n    """"""\n    try:\n        return run_with_timeout(""str(obj)"", 0.5, {""obj"": obj})\n    except TimeOutError:\n        return (type(obj), ""(str too slow to compute)"")\n\n# Example usage', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3550', 'line': 76, 'description': ['            ui_log.error(""Object {l!r} appears to be a collection, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -73,7 +73,7 @@\n             for count, entry in enumerate(collection):\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a collection, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a collection, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5184', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = 43\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5185', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = None\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5187', 'line': 76, 'description': ['    @property'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -73,7 +73,6 @@\n     def bar(self):\n         return True\n \n-    @property\n     def red(self):\n         return ""red""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,__str__,89-91,"[{'lineno': 89, 'coloffset': 4, 'linematch': 'def __str__(self):', 'context': '        return ""This was fast to compute.""\n\n\nclass SlowString(object):\n    def __str__(self):\n        time.sleep(10)  # Return the string value after ten seconds\n        return ""This was slow to compute.""\n\n\nfast = FastString()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 237, 'coloffset': 4, 'linematch': 'def __str__(self):', 'context': '            self.wrap = CONFIG[""wrap_variables""]\n        else:\n            self.wrap = iinfo.wrap\n\n    def __str__(self):\n        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n                .format(\n                    value_str=self.value_str,\n                    nesting_level=self.nesting_level,\n                    id_path=self.id_path,', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 237, 'coloffset': 4, 'linematch': 'def __str__(self):', 'context': '            self.wrap = CONFIG[""wrap_variables""]\n        else:\n            self.wrap = iinfo.wrap\n\n    def __str__(self):\n        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n                .format(\n                    value_str=self.value_str,\n                    nesting_level=self.nesting_level,\n                    id_path=self.id_path,', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 90, 'coloffset': 8, 'linematch': 'time.sleep(10)  # Return the string value after ten seconds', 'context': '\n\nclass SlowString(object):\n    def __str__(self):\n        time.sleep(10)  # Return the string value after ten seconds\n        return ""This was slow to compute.""\n\n\nfast = FastString()\nslow = SlowString()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 91, 'coloffset': 8, 'linematch': 'return ""This was slow to compute.""', 'context': '\nclass SlowString(object):\n    def __str__(self):\n        time.sleep(10)  # Return the string value after ten seconds\n        return ""This was slow to compute.""\n\n\nfast = FastString()\nslow = SlowString()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 238, 'coloffset': 8, 'linematch': 'return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""', 'context': '        else:\n            self.wrap = iinfo.wrap\n\n    def __str__(self):\n        return (""VariableWidget: {value_str}, level {nesting_level}, at {id_path}""\n                .format(\n                    value_str=self.value_str,\n                    nesting_level=self.nesting_level,\n                    id_path=self.id_path,\n                ))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3555', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3556', 'line': 91, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",66.66666666666666,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,get_palette,263-317,"[{'lineno': 263, 'coloffset': 0, 'linematch': 'def get_palette(may_use_fancy_formats: bool, theme: str = ""classic"") -> list:', 'context': '\n\n# {{{ get palette\n\ndef get_palette(may_use_fancy_formats: bool, theme: str = ""classic"") -> list:\n    """"""\n    Load the requested theme and return a list containing all palette entries\n    needed to highlight the debugger UI, including syntax highlighting.\n    """"""\n    reset_inheritance_overrides()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 308, 'coloffset': 26, 'linematch': 'for style_name in set(INHERITANCE_MAP.keys()).union(BASE_STYLES.keys()):', 'context': '            return None\n        # }}}\n\n    # Apply style inheritance\n    for style_name in set(INHERITANCE_MAP.keys()).union(BASE_STYLES.keys()):\n        set_style(palette_dict, style_name, inheritance_overrides)\n\n    palette_list = [\n        astuple(entry)\n        for entry in palette_dict.values()', 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 308, 'coloffset': 56, 'linematch': 'for style_name in set(INHERITANCE_MAP.keys()).union(BASE_STYLES.keys()):', 'context': '            return None\n        # }}}\n\n    # Apply style inheritance\n    for style_name in set(INHERITANCE_MAP.keys()).union(BASE_STYLES.keys()):\n        set_style(palette_dict, style_name, inheritance_overrides)\n\n    palette_list = [\n        astuple(entry)\n        for entry in palette_dict.values()', 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 263, 'coloffset': 0, 'linematch': 'def get_palette(may_use_fancy_formats: bool, theme: str = ""classic"") -> list:', 'context': '\n\n# {{{ get palette\n\ndef get_palette(may_use_fancy_formats: bool, theme: str = ""classic"") -> list:\n    """"""\n    Load the requested theme and return a list containing all palette entries\n    needed to highlight the debugger UI, including syntax highlighting.\n    """"""\n    reset_inheritance_overrides()', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 264, 'coloffset': 4, 'linematch': '""""""', 'context': '\n# {{{ get palette\n\ndef get_palette(may_use_fancy_formats: bool, theme: str = ""classic"") -> list:\n    """"""\n    Load the requested theme and return a list containing all palette entries\n    needed to highlight the debugger UI, including syntax highlighting.\n    """"""\n    reset_inheritance_overrides()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 268, 'coloffset': 4, 'linematch': 'reset_inheritance_overrides()', 'context': '    """"""\n    Load the requested theme and return a list containing all palette entries\n    needed to highlight the debugger UI, including syntax highlighting.\n    """"""\n    reset_inheritance_overrides()\n\n    try:\n        palette_dict = THEMES[theme]\n    except KeyError:\n        # {{{ custom', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 270, 'coloffset': 4, 'linematch': 'try:', 'context': '    needed to highlight the debugger UI, including syntax highlighting.\n    """"""\n    reset_inheritance_overrides()\n\n    try:\n        palette_dict = THEMES[theme]\n    except KeyError:\n        # {{{ custom\n        try:\n            # {{{ base styles', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 308, 'coloffset': 4, 'linematch': 'for style_name in set(INHERITANCE_MAP.keys()).union(BASE_STYLES.keys()):', 'context': '            return None\n        # }}}\n\n    # Apply style inheritance\n    for style_name in set(INHERITANCE_MAP.keys()).union(BASE_STYLES.keys()):\n        set_style(palette_dict, style_name, inheritance_overrides)\n\n    palette_list = [\n        astuple(entry)\n        for entry in palette_dict.values()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 311, 'coloffset': 4, 'linematch': 'palette_list = [', 'context': '    # Apply style inheritance\n    for style_name in set(INHERITANCE_MAP.keys()).union(BASE_STYLES.keys()):\n        set_style(palette_dict, style_name, inheritance_overrides)\n\n    palette_list = [\n        astuple(entry)\n        for entry in palette_dict.values()\n        if isinstance(entry, PaletteEntry)\n    ]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 317, 'coloffset': 4, 'linematch': 'return palette_list', 'context': '        for entry in palette_dict.values()\n        if isinstance(entry, PaletteEntry)\n    ]\n\n    return palette_list\n\n# }}}\n\n# vim: foldmethod=marker', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 263, 'coloffset': 0, 'linematch': 'def get_palette(may_use_fancy_formats: bool, theme: str = ""classic"") -> list:', 'context': '\n\n# {{{ get palette\n\ndef get_palette(may_use_fancy_formats: bool, theme: str = ""classic"") -> list:\n    """"""\n    Load the requested theme and return a list containing all palette entries\n    needed to highlight the debugger UI, including syntax highlighting.\n    """"""\n    reset_inheritance_overrides()', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3659', 'line': 267, 'description': ['    def rows(self, size: Tuple[int], focus: bool = False) -> int:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -264,7 +264,7 @@\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n-    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n+    def rows(self, size: Tuple[int], focus: bool = True) -> int:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3660', 'line': 274, 'description': ['            return len(self._get_wrapped_lines(size[0]))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -271,7 +271,7 @@\n         :return: The number of rows required for this widget\n         """"""\n         if self.wrap:\n-            return len(self._get_wrapped_lines(size[0]))\n+            return len(self._get_wrapped_lines(size[1]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3666', 'line': 281, 'description': ['    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -278,7 +278,7 @@\n         else:\n             return 1\n \n-    def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n+    def render(self, size: Tuple[int], focus: bool = True) -> urwid.Canvas:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3667', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = size[1]\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3668', 'line': 290, 'description': ['        maxcol = size[0]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -287,7 +287,7 @@\n         """"""\n         from pudb.ui_tools import make_canvas\n \n-        maxcol = size[0]\n+        maxcol = None\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3669', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""XXfocused XX""+self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3670', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""-self.attr_prefix+"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3671', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix-"" ""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3672', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = ""focused ""+self.attr_prefix+""XX XX""\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3673', 'line': 292, 'description': ['            apfx = ""focused ""+self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -289,7 +289,7 @@\n \n         maxcol = size[0]\n         if focus:\n-            apfx = ""focused ""+self.attr_prefix+"" ""\n+            apfx = None\n         else:\n             apfx = self.attr_prefix+"" ""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3674', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix-"" ""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3675', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = self.attr_prefix+""XX XX""\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3676', 'line': 294, 'description': ['            apfx = self.attr_prefix+"" ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -291,7 +291,7 @@\n         if focus:\n             apfx = ""focused ""+self.attr_prefix+"" ""\n         else:\n-            apfx = self.attr_prefix+"" ""\n+            apfx = None\n \n         var_label = self.var_label or """"\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3677', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3678', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3679', 'line': 296, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -293,7 +293,7 @@\n         else:\n             apfx = self.attr_prefix+"" ""\n \n-        var_label = self.var_label or """"\n+        var_label = None\n \n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3680', 'line': 299, 'description': ['            text = self._get_wrapped_lines(maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -296,7 +296,7 @@\n         var_label = self.var_label or """"\n \n         if self.wrap:\n-            text = self._get_wrapped_lines(maxcol)\n+            text = None\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3681', 'line': 302, 'description': ['                    text_width(var_label[maxcol:]), maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -298,8 +298,7 @@\n         if self.wrap:\n             text = self._get_wrapped_lines(maxcol)\n \n-            extralabel_full, extralabel_rem = divmod(\n-                    text_width(var_label[maxcol:]), maxcol)\n+            extralabel_full, extralabel_rem = None\n             totallen = sum(text_width(i) for i in text)\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3682', 'line': 303, 'description': ['            totallen = sum(text_width(i) for i in text)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -300,7 +300,7 @@\n \n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n-            totallen = sum(text_width(i) for i in text)\n+            totallen = None\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3683', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    - (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3684', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) - 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3685', 'line': 307, 'description': ['                    + (len(self.prefix) + 2)  # Padding of subsequent lines'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -304,7 +304,7 @@\n             labellen = (\n                     len(self.prefix)  # Padding of first line\n \n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n+                    + (len(self.prefix) + 3)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3686', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    / (extralabel_full + bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3687', 'line': 308, 'description': ['                    * (extralabel_full + bool(extralabel_rem))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -305,7 +305,7 @@\n                     len(self.prefix)  # Padding of first line\n \n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n+                    * (extralabel_full - bool(extralabel_rem))\n \n                     + text_width(var_label)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3688', 'line': 310, 'description': ['                    + text_width(var_label)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -307,7 +307,7 @@\n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n-                    + text_width(var_label)\n+                    - text_width(var_label)\n \n                     + 1  # for "":""\n                     )\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3689', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    - 1  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3690', 'line': 312, 'description': ['                    + 1  # for "":""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -309,7 +309,7 @@\n \n                     + text_width(var_label)\n \n-                    + 1  # for "":""\n+                    + 2  # for "":""\n                     )\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3691', 'line': 313, 'description': ['                    )'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -301,16 +301,7 @@\n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n             totallen = sum(text_width(i) for i in text)\n-            labellen = (\n-                    len(self.prefix)  # Padding of first line\n-\n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n-\n-                    + text_width(var_label)\n-\n-                    + 1  # for "":""\n-                    )\n+            labellen = None\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3692', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx-""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3693', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""XXlabelXX"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3694', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx-""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3695', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""XXvalueXX"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3696', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen + labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3697', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = None\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5298', 'line': 267, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -264,7 +264,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5299', 'line': 268, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -265,7 +265,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for label, value in enumerate(values):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5300', 'line': 270, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}, {'name': 'Mutant #5303', 'line': 289, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -286,7 +286,7 @@\n         """"""\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5304', 'line': 290, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -287,7 +287,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5305', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5306', 'line': 291, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -288,7 +288,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5307', 'line': 292, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -289,7 +289,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5308', 'line': 293, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5309', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5310', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5311', 'line': 294, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -291,7 +291,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5312', 'line': 297, 'description': ['            """",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -294,7 +294,7 @@\n             complex(1.3, -1),\n \n             # strings\n-            """",\n+            ""XXXX"",\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5313', 'line': 298, 'description': ['            ""a"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -295,7 +295,7 @@\n \n             # strings\n             """",\n-            ""a"",\n+            ""XXaXX"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n             ""♫"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5314', 'line': 299, 'description': ['            ""foo bar"",'], 'failure': []}, {'name': 'Mutant #5315', 'line': 301, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -298,7 +298,7 @@\n             ""a"",\n             ""foo bar"",\n             # ""  lots\\tof\\nspaces\\r "",  # long, hits continuation item\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5316', 'line': 304, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -301,7 +301,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5317', 'line': 305, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -302,7 +302,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for value in values:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5318', 'line': 307, 'description': ['        ]'], 'failure': []}, {'name': 'Mutant #5319', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5320', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5321', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5322', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5323', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5324', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5325', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}]",9.195402298850574,['ANNOT001' 'KF001' 'FLV001' 'CML001' 'MRET001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//Call/func/Attribute[@attr=""keys""]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 1, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_socket_client,216-220,"[{'lineno': 216, 'coloffset': 4, 'linematch': 'def get_socket_client(self, host, port, search_limit):', 'context': '                raise ValueError(CONN_REFUSED.format(self=self)) from exc\n            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):\n        _sock, this_port = self.get_avail_port(host, port, search_limit)\n        _sock.setblocking(1)\n        _sock.listen(1)\n        return _sock, (host, this_port)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 217, 'coloffset': 8, 'linematch': '_sock, this_port = self.get_avail_port(host, port, search_limit)', 'context': '            raise exc\n        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):\n        _sock, this_port = self.get_avail_port(host, port, search_limit)\n        _sock.setblocking(1)\n        _sock.listen(1)\n        return _sock, (host, this_port)\n\n    def get_avail_port(self, host, port, search_limit=100, skew=+0):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 218, 'coloffset': 8, 'linematch': '_sock.setblocking(1)', 'context': '        return _sock, _sock.getpeername()\n\n    def get_socket_client(self, host, port, search_limit):\n        _sock, this_port = self.get_avail_port(host, port, search_limit)\n        _sock.setblocking(1)\n        _sock.listen(1)\n        return _sock, (host, this_port)\n\n    def get_avail_port(self, host, port, search_limit=100, skew=+0):\n        this_port = None', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 219, 'coloffset': 8, 'linematch': '_sock.listen(1)', 'context': '\n    def get_socket_client(self, host, port, search_limit):\n        _sock, this_port = self.get_avail_port(host, port, search_limit)\n        _sock.setblocking(1)\n        _sock.listen(1)\n        return _sock, (host, this_port)\n\n    def get_avail_port(self, host, port, search_limit=100, skew=+0):\n        this_port = None\n        for i in range(search_limit):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 220, 'coloffset': 8, 'linematch': 'return _sock, (host, this_port)', 'context': '    def get_socket_client(self, host, port, search_limit):\n        _sock, this_port = self.get_avail_port(host, port, search_limit)\n        _sock.setblocking(1)\n        _sock.listen(1)\n        return _sock, (host, this_port)\n\n    def get_avail_port(self, host, port, search_limit=100, skew=+0):\n        this_port = None\n        for i in range(search_limit):\n            _sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3599', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -213,7 +213,7 @@\n # {{{ widget\n \n class VariableWidget(urwid.FlowWidget):\n-    PREFIX = ""| ""\n+    PREFIX = ""XX| XX""\n \n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3600', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': []}, {'name': 'Mutant #5262', 'line': 216, 'description': ['            expected.extend([(""[]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5263', 'line': 218, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}, {'name': 'Mutant #5264', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5265', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5266', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}, {'name': 'Mutant #5267', 'line': 219, 'description': ['            self.class_counts[""collections""] += 1'], 'failure': []}]",87.5,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,say,239-240,"[{'lineno': 239, 'coloffset': 4, 'linematch': 'def say(self, m):', 'context': '                return _sock, this_port\n        else:\n            raise Exception(NO_AVAILABLE_PORT.format(self=self))\n\n    def say(self, m):\n        print(m, file=self.out)\n\n    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 240, 'coloffset': 8, 'linematch': 'print(m, file=self.out)', 'context': '        else:\n            raise Exception(NO_AVAILABLE_PORT.format(self=self))\n\n    def say(self, m):\n        print(m, file=self.out)\n\n    def close_remote_session(self):\n        self.stdin, self.stdout = sys.stdin, sys.stdout = self._prev_handles\n        self._handle.close()\n        self._client.close()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5277', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5278', 'line': 239, 'description': ['            ""collections"": 0,'], 'failure': []}, {'name': 'Mutant #5279', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}, {'name': 'Mutant #5280', 'line': 240, 'description': ['            ""other"": 0,'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,run_bpython_shell,114-118,"[{'lineno': 114, 'coloffset': 0, 'linematch': 'def run_bpython_shell(globals, locals):', 'context': '    if have_readline:\n        readline.write_history_file(hist_file)\n\n\ndef run_bpython_shell(globals, locals):\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    import bpython\n    bpython.embed(args=[], locals_=ns)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 115, 'coloffset': 4, 'linematch': 'ns = SetPropagatingDict([locals, globals], locals)', 'context': '        readline.write_history_file(hist_file)\n\n\ndef run_bpython_shell(globals, locals):\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    import bpython\n    bpython.embed(args=[], locals_=ns)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 117, 'coloffset': 4, 'linematch': 'import bpython', 'context': '\ndef run_bpython_shell(globals, locals):\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    import bpython\n    bpython.embed(args=[], locals_=ns)\n\n\n# {{{ ipython\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 118, 'coloffset': 4, 'linematch': 'bpython.embed(args=[], locals_=ns)', 'context': 'def run_bpython_shell(globals, locals):\n    ns = SetPropagatingDict([locals, globals], locals)\n\n    import bpython\n    bpython.embed(args=[], locals_=ns)\n\n\n# {{{ ipython\n\ndef have_ipython():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5202', 'line': 114, 'description': ['        ""__iter__"",'], 'failure': []}, {'name': 'Mutant #5203', 'line': 115, 'description': ['        ""__len__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -112,7 +112,7 @@\n         ""__contains__"",\n         ""__getitem__"",\n         ""__iter__"",\n-        ""__len__"",\n+        ""XX__len__XX"",\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5204', 'line': 116, 'description': ['        ""__reversed__"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -113,7 +113,7 @@\n         ""__getitem__"",\n         ""__iter__"",\n         ""__len__"",\n-        ""__reversed__"",\n+        ""XX__reversed__XX"",\n         ""count"",\n         ""get"",\n         ""index"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5205', 'line': 117, 'description': ['        ""count"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -114,7 +114,7 @@\n         ""__iter__"",\n         ""__len__"",\n         ""__reversed__"",\n-        ""count"",\n+        ""XXcountXX"",\n         ""get"",\n         ""index"",\n         ""items"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5206', 'line': 118, 'description': ['        ""get"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -115,7 +115,7 @@\n         ""__len__"",\n         ""__reversed__"",\n         ""count"",\n-        ""get"",\n+        ""XXgetXX"",\n         ""index"",\n         ""items"",\n         ""keys"",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",20.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,have_ipython,123-141,"[{'lineno': 123, 'coloffset': 0, 'linematch': 'def have_ipython():', 'context': '\n\n# {{{ ipython\n\ndef have_ipython():\n    # IPython has started being obnoxious on import, only import\n    # if absolutely needed.\n\n    # https://github.com/ipython/ipython/issues/9435\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 129, 'coloffset': 4, 'linematch': 'try:', 'context': ""    # if absolutely needed.\n\n    # https://github.com/ipython/ipython/issues/9435\n\n    try:\n        import IPython\n        # Access a property to verify module exists in case\n        # there's a demand loader wrapping module imports\n        # See https://github.com/inducer/pudb/issues/177\n        IPython.core  # noqa: B018"", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3572', 'line': 132, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3574', 'line': 139, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5215', 'line': 132, 'description': ['                    self.__internal_dict__ = dict(iterable)'], 'failure': []}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5219', 'line': 140, 'description': ['                func = method_factory(method)'], 'failure': []}]",77.77777777777779,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_update_ipython_ns,168-186,"[{'lineno': 168, 'coloffset': 0, 'linematch': 'def _update_ipython_ns(shell, globals, locals):', 'context': '    IPShell(argv=[], user_ns=ns, user_global_ns=globals) \\\n            .mainloop(banner=banner)\n\n\ndef _update_ipython_ns(shell, globals, locals):\n    """"""Update the IPython 0.11 namespace at every visit""""""\n\n    shell.user_ns = locals.copy()\n\n    try:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 169, 'coloffset': 4, 'linematch': '""""""Update the IPython 0.11 namespace at every visit""""""', 'context': '            .mainloop(banner=banner)\n\n\ndef _update_ipython_ns(shell, globals, locals):\n    """"""Update the IPython 0.11 namespace at every visit""""""\n\n    shell.user_ns = locals.copy()\n\n    try:\n        shell.user_global_ns = globals', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 171, 'coloffset': 4, 'linematch': 'shell.user_ns = locals.copy()', 'context': '\ndef _update_ipython_ns(shell, globals, locals):\n    """"""Update the IPython 0.11 namespace at every visit""""""\n\n    shell.user_ns = locals.copy()\n\n    try:\n        shell.user_global_ns = globals\n    except AttributeError:\n        class DummyMod:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 173, 'coloffset': 4, 'linematch': 'try:', 'context': '    """"""Update the IPython 0.11 namespace at every visit""""""\n\n    shell.user_ns = locals.copy()\n\n    try:\n        shell.user_global_ns = globals\n    except AttributeError:\n        class DummyMod:\n            """"""A dummy module used for IPython\'s interactive namespace.""""""\n            pass', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 184, 'coloffset': 4, 'linematch': 'shell.init_history()', 'context': '        user_module = DummyMod()\n        user_module.__dict__ = globals\n        shell.user_module = user_module\n\n    shell.init_history()\n    shell.init_user_ns()\n    shell.init_completer()\n\n\ndef run_ipython_shell_v11(globals, locals):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 185, 'coloffset': 4, 'linematch': 'shell.init_user_ns()', 'context': '        user_module.__dict__ = globals\n        shell.user_module = user_module\n\n    shell.init_history()\n    shell.init_user_ns()\n    shell.init_completer()\n\n\ndef run_ipython_shell_v11(globals, locals):\n    """"""IPython shell from IPython version 0.11""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 186, 'coloffset': 4, 'linematch': 'shell.init_completer()', 'context': '        shell.user_module = user_module\n\n    shell.init_history()\n    shell.init_user_ns()\n    shell.init_completer()\n\n\ndef run_ipython_shell_v11(globals, locals):\n    """"""IPython shell from IPython version 0.11""""""\n    if SHELL_FIRST_TIME:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3581', 'line': 175, 'description': ['        self.id_path_to_iinfo = {}'], 'failure': []}, {'name': 'Mutant #3582', 'line': 176, 'description': ['        self.watches = []'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -173,7 +173,7 @@\n class FrameVarInfo:\n     def __init__(self):\n         self.id_path_to_iinfo = {}\n-        self.watches = []\n+        self.watches = None\n \n     def get_inspect_info(self, id_path, read_only):\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5237', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5238', 'line': 178, 'description': ['        return [(""."" + str(label),'], 'failure': []}, {'name': 'Mutant #5239', 'line': 179, 'description': ['                 self.value_string(getattr(obj, label), expand=False))'], 'failure': []}, {'name': 'Mutant #5240', 'line': 182, 'description': ['    @contextlib.contextmanager'], 'failure': []}]",83.33333333333334,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,run_ipython_kernel,250-258,"[{'lineno': 250, 'coloffset': 0, 'linematch': 'def run_ipython_kernel(globals, locals):', 'context': '    else:\n        return run_ipython_shell_v11(globals, locals)\n\n\ndef run_ipython_kernel(globals, locals):\n    from IPython import embed_kernel\n\n    class DummyMod:\n        pass\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 251, 'coloffset': 4, 'linematch': 'from IPython import embed_kernel', 'context': '        return run_ipython_shell_v11(globals, locals)\n\n\ndef run_ipython_kernel(globals, locals):\n    from IPython import embed_kernel\n\n    class DummyMod:\n        pass\n\n    user_module = DummyMod()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 253, 'coloffset': 4, 'linematch': 'class DummyMod:', 'context': '\ndef run_ipython_kernel(globals, locals):\n    from IPython import embed_kernel\n\n    class DummyMod:\n        pass\n\n    user_module = DummyMod()\n    user_module.__dict__ = globals\n    embed_kernel(module=user_module, local_ns=locals)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 256, 'coloffset': 4, 'linematch': 'user_module = DummyMod()', 'context': '\n    class DummyMod:\n        pass\n\n    user_module = DummyMod()\n    user_module.__dict__ = globals\n    embed_kernel(module=user_module, local_ns=locals)\n\n# }}}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 257, 'coloffset': 4, 'linematch': 'user_module.__dict__ = globals', 'context': '    class DummyMod:\n        pass\n\n    user_module = DummyMod()\n    user_module.__dict__ = globals\n    embed_kernel(module=user_module, local_ns=locals)\n\n# }}}\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 258, 'coloffset': 4, 'linematch': 'embed_kernel(module=user_module, local_ns=locals)', 'context': '        pass\n\n    user_module = DummyMod()\n    user_module.__dict__ = globals\n    embed_kernel(module=user_module, local_ns=locals)\n\n# }}}\n\n\ndef get_ptpython_history_file():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3622', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol = len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3623', 'line': 254, 'description': ['        maxcol -= len(self.prefix)  # self.prefix is padding'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -251,7 +251,7 @@\n         :return: list of string lines, including prefixes, wrapped to fit in\n             the available space\n         """"""\n-        maxcol -= len(self.prefix)  # self.prefix is padding\n+        maxcol += len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3624', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label or ""XXXX""\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3625', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = self.var_label and """"\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3626', 'line': 255, 'description': ['        var_label = self.var_label or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -252,7 +252,7 @@\n             the available space\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n-        var_label = self.var_label or """"\n+        var_label = None\n         value_str = self.value_str or """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3630', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label - "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3631', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + ""XX: XX"" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3632', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + "": "" - value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3633', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = None\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5284', 'line': 252, 'description': ['            0,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -249,7 +249,7 @@\n         self.walker = BasicValueWalker(FrameVarInfoForTesting())\n         values = [\n             # numbers\n-            0,\n+            1,\n             1,\n             -1234567890412345243,\n             float(4.2),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5285', 'line': 253, 'description': ['            1,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -250,7 +250,7 @@\n         values = [\n             # numbers\n             0,\n-            1,\n+            2,\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5286', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            +1234567890412345243,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5287', 'line': 254, 'description': ['            -1234567890412345243,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -251,7 +251,7 @@\n             # numbers\n             0,\n             1,\n-            -1234567890412345243,\n+            -1234567890412345244,\n             float(4.2),\n             float(""inf""),\n             complex(1.3, -1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5288', 'line': 255, 'description': ['            float(4.2),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -252,7 +252,7 @@\n             0,\n             1,\n             -1234567890412345243,\n-            float(4.2),\n+            float(5.2),\n             float(""inf""),\n             complex(1.3, -1),\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5290', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5291', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5292', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",4.761904761904762,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_ptpython_history_file,263-272,"[{'lineno': 263, 'coloffset': 0, 'linematch': 'def get_ptpython_history_file():', 'context': '\n# }}}\n\n\ndef get_ptpython_history_file():\n    from argparse import ArgumentParser\n\n    from ptpython.entry_points.run_ptpython import (  # pylint: disable=import-error\n        get_config_and_history_file,\n    )', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 264, 'coloffset': 4, 'linematch': 'from argparse import ArgumentParser', 'context': '# }}}\n\n\ndef get_ptpython_history_file():\n    from argparse import ArgumentParser\n\n    from ptpython.entry_points.run_ptpython import (  # pylint: disable=import-error\n        get_config_and_history_file,\n    )\n    parser = ArgumentParser()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 266, 'coloffset': 4, 'linematch': 'from ptpython.entry_points.run_ptpython import (  # pylint: disable=import-error', 'context': '\ndef get_ptpython_history_file():\n    from argparse import ArgumentParser\n\n    from ptpython.entry_points.run_ptpython import (  # pylint: disable=import-error\n        get_config_and_history_file,\n    )\n    parser = ArgumentParser()\n    parser.add_argument(""--history_file"")\n    parser.add_argument(""--config_file"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 269, 'coloffset': 4, 'linematch': 'parser = ArgumentParser()', 'context': '\n    from ptpython.entry_points.run_ptpython import (  # pylint: disable=import-error\n        get_config_and_history_file,\n    )\n    parser = ArgumentParser()\n    parser.add_argument(""--history_file"")\n    parser.add_argument(""--config_file"")\n    return get_config_and_history_file(parser.parse_args([]))[1]\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 270, 'coloffset': 4, 'linematch': 'parser.add_argument(""--history_file"")', 'context': '    from ptpython.entry_points.run_ptpython import (  # pylint: disable=import-error\n        get_config_and_history_file,\n    )\n    parser = ArgumentParser()\n    parser.add_argument(""--history_file"")\n    parser.add_argument(""--config_file"")\n    return get_config_and_history_file(parser.parse_args([]))[1]\n\n\ndef run_ptpython_shell(globals, locals):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 271, 'coloffset': 4, 'linematch': 'parser.add_argument(""--config_file"")', 'context': '        get_config_and_history_file,\n    )\n    parser = ArgumentParser()\n    parser.add_argument(""--history_file"")\n    parser.add_argument(""--config_file"")\n    return get_config_and_history_file(parser.parse_args([]))[1]\n\n\ndef run_ptpython_shell(globals, locals):\n    # Use the default ptpython history', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 272, 'coloffset': 4, 'linematch': 'return get_config_and_history_file(parser.parse_args([]))[1]', 'context': '    )\n    parser = ArgumentParser()\n    parser.add_argument(""--history_file"")\n    parser.add_argument(""--config_file"")\n    return get_config_and_history_file(parser.parse_args([]))[1]\n\n\ndef run_ptpython_shell(globals, locals):\n    # Use the default ptpython history\n    history_filename = get_ptpython_history_file()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3641', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol + 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3642', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 3)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3643', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)/i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3644', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i - maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3645', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol + 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3646', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 3)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3647', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)/i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3648', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i - 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3649', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 3*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3650', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2/maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3651', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol + 2]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3652', 'line': 263, 'description': ['        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,7 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n+        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 3]\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3653', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -261,7 +261,7 @@\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+            for i in range(fulllines - bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3654', 'line': 264, 'description': ['            for i in range(fulllines + bool(rest))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -260,8 +260,7 @@\n         if not alltext[maxcol:]:\n             return [firstline]\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n-        restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n-            for i in range(fulllines + bool(rest))]\n+        restlines = None\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3655', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] - [self.prefix + ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3656', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix - ""  "" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3657', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""XX  XX"" + i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3658', 'line': 265, 'description': ['        return [firstline] + [self.prefix + ""  "" + i for i in restlines]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -262,7 +262,7 @@\n         fulllines, rest = divmod(text_width(alltext) - maxcol, maxcol - 2)\n         restlines = [alltext[(maxcol - 2)*i + maxcol:(maxcol - 2)*i + 2*maxcol - 2]\n             for i in range(fulllines + bool(rest))]\n-        return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n+        return [firstline] + [self.prefix + ""  "" - i for i in restlines]\n \n     def rows(self, size: Tuple[int], focus: bool = False) -> int:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3659', 'line': 267, 'description': ['    def rows(self, size: Tuple[int], focus: bool = False) -> int:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -264,7 +264,7 @@\n             for i in range(fulllines + bool(rest))]\n         return [firstline] + [self.prefix + ""  "" + i for i in restlines]\n \n-    def rows(self, size: Tuple[int], focus: bool = False) -> int:\n+    def rows(self, size: Tuple[int], focus: bool = True) -> int:\n         """"""\n         :param size: (maxcol,) the number of columns available to this widget\n         :param focus: True if this widget or one of its children is in focus\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5296', 'line': 263, 'description': ['            ""  lots\\tof\\nspaces\\r "",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -260,7 +260,7 @@\n             """",\n             ""a"",\n             ""foo bar"",\n-            ""  lots\\tof\\nspaces\\r "",\n+            ""XX  lots\\tof\\nspaces\\r XX"",\n             ""♫"",\n \n             # other\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5297', 'line': 264, 'description': ['            ""♫"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -261,7 +261,7 @@\n             ""a"",\n             ""foo bar"",\n             ""  lots\\tof\\nspaces\\r "",\n-            ""♫"",\n+            ""XX♫XX"",\n \n             # other\n             False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5298', 'line': 267, 'description': ['            False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -264,7 +264,7 @@\n             ""♫"",\n \n             # other\n-            False,\n+            True,\n             True,\n             None,\n         ]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5299', 'line': 268, 'description': ['            True,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -265,7 +265,7 @@\n \n             # other\n             False,\n-            True,\n+            False,\n             None,\n         ]\n         for label, value in enumerate(values):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5300', 'line': 270, 'description': ['        ]'], 'failure': []}]",4.166666666666666,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,run_ptpython_shell,275-280,"[{'lineno': 275, 'coloffset': 0, 'linematch': 'def run_ptpython_shell(globals, locals):', 'context': '    parser.add_argument(""--config_file"")\n    return get_config_and_history_file(parser.parse_args([]))[1]\n\n\ndef run_ptpython_shell(globals, locals):\n    # Use the default ptpython history\n    history_filename = get_ptpython_history_file()\n    ptpython_embed(globals=globals.copy(), locals=locals.copy(),\n                   history_filename=history_filename,\n                   configure=run_config)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 277, 'coloffset': 4, 'linematch': 'history_filename = get_ptpython_history_file()', 'context': '\n\ndef run_ptpython_shell(globals, locals):\n    # Use the default ptpython history\n    history_filename = get_ptpython_history_file()\n    ptpython_embed(globals=globals.copy(), locals=locals.copy(),\n                   history_filename=history_filename,\n                   configure=run_config)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 278, 'coloffset': 4, 'linematch': 'ptpython_embed(globals=globals.copy(), locals=locals.copy(),', 'context': '\ndef run_ptpython_shell(globals, locals):\n    # Use the default ptpython history\n    history_filename = get_ptpython_history_file()\n    ptpython_embed(globals=globals.copy(), locals=locals.copy(),\n                   history_filename=history_filename,\n                   configure=run_config)\n\n\ndef run_ptipython_shell(globals, locals):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3661', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[1])) > 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3662', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) >= 1:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3663', 'line': 276, 'description': ['        if len(self._get_wrapped_lines(size[0])) > 1:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -273,7 +273,7 @@\n         if self.wrap:\n             return len(self._get_wrapped_lines(size[0]))\n \n-        if len(self._get_wrapped_lines(size[0])) > 1:\n+        if len(self._get_wrapped_lines(size[0])) > 2:\n             return 2\n         else:\n             return 1\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3664', 'line': 277, 'description': ['            return 2'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -274,7 +274,7 @@\n             return len(self._get_wrapped_lines(size[0]))\n \n         if len(self._get_wrapped_lines(size[0])) > 1:\n-            return 2\n+            return 3\n         else:\n             return 1\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3665', 'line': 279, 'description': ['            return 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -276,7 +276,7 @@\n         if len(self._get_wrapped_lines(size[0])) > 1:\n             return 2\n         else:\n-            return 1\n+            return 2\n \n     def render(self, size: Tuple[int], focus: bool = False) -> urwid.Canvas:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5301', 'line': 277, 'description': ['        expected = [(str(_label), repr(x)) for _label, x in enumerate(values)]'], 'failure': []}, {'name': 'Mutant #5302', 'line': 278, 'description': ['        received = self.walked_values()'], 'failure': []}]",28.57142857142857,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,__setitem__,52-54,"[{'lineno': 52, 'coloffset': 4, 'linematch': 'def __setitem__(self, key, value):', 'context': '            self.update(s)\n\n        self.target_dict = target_dict\n\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        self.target_dict[key] = value\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 53, 'coloffset': 8, 'linematch': 'dict.__setitem__(self, key, value)', 'context': '\n        self.target_dict = target_dict\n\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        self.target_dict[key] = value\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)\n        del self.target_dict[key]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 54, 'coloffset': 8, 'linematch': 'self.target_dict[key] = value', 'context': '        self.target_dict = target_dict\n\n    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        self.target_dict[key] = value\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)\n        del self.target_dict[key]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3542', 'line': 53, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5171', 'line': 53, 'description': ['        if paths_to_expand is None:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,__delitem__,56-58,"[{'lineno': 56, 'coloffset': 4, 'linematch': 'def __delitem__(self, key):', 'context': '    def __setitem__(self, key, value):\n        dict.__setitem__(self, key, value)\n        self.target_dict[key] = value\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)\n        del self.target_dict[key]\n\n# }}}\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 57, 'coloffset': 8, 'linematch': 'dict.__delitem__(self, key)', 'context': '        dict.__setitem__(self, key, value)\n        self.target_dict[key] = value\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)\n        del self.target_dict[key]\n\n# }}}\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 58, 'coloffset': 8, 'linematch': 'del self.target_dict[key]', 'context': '        self.target_dict[key] = value\n\n    def __delitem__(self, key):\n        dict.__delitem__(self, key)\n        del self.target_dict[key]\n\n# }}}\n\n\ncustom_shell_dict = {}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3544', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3545', 'line': 58, 'description': ['                    any(""__contains__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_tty_override,63-65,"[{'lineno': 63, 'coloffset': 0, 'linematch': 'def _tty_override():', 'context': '\nbuiltins.__dict__[""pu""] = PudbShortcuts()\n\n\ndef _tty_override():\n    import os\n    return os.environ.get(""PUDB_TTY"")\n\n\ndef _open_tty(tty_path):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 64, 'coloffset': 4, 'linematch': 'import os', 'context': 'builtins.__dict__[""pu""] = PudbShortcuts()\n\n\ndef _tty_override():\n    import os\n    return os.environ.get(""PUDB_TTY"")\n\n\ndef _open_tty(tty_path):\n    import io', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 65, 'coloffset': 4, 'linematch': 'return os.environ.get(""PUDB_TTY"")', 'context': '\n\ndef _tty_override():\n    import os\n    return os.environ.get(""PUDB_TTY"")\n\n\ndef _open_tty(tty_path):\n    import io\n    import os', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3548', 'line': 65, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5181', 'line': 64, 'description': ['        if id_path in self.paths_to_expand:'], 'failure': []}, {'name': 'Mutant #5182', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}, {'name': 'Mutant #5183', 'line': 65, 'description': ['            iinfo.show_detail = True'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_open_tty,68-74,"[{'lineno': 68, 'coloffset': 0, 'linematch': 'def _open_tty(tty_path):', 'context': '    import os\n    return os.environ.get(""PUDB_TTY"")\n\n\ndef _open_tty(tty_path):\n    import io\n    import os\n    tty_file = io.TextIOWrapper(open(tty_path, ""r+b"", buffering=0))\n    term_size = os.get_terminal_size(tty_file.fileno())\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 69, 'coloffset': 4, 'linematch': 'import io', 'context': '    return os.environ.get(""PUDB_TTY"")\n\n\ndef _open_tty(tty_path):\n    import io\n    import os\n    tty_file = io.TextIOWrapper(open(tty_path, ""r+b"", buffering=0))\n    term_size = os.get_terminal_size(tty_file.fileno())\n\n    return tty_file, term_size', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 70, 'coloffset': 4, 'linematch': 'import os', 'context': '\n\ndef _open_tty(tty_path):\n    import io\n    import os\n    tty_file = io.TextIOWrapper(open(tty_path, ""r+b"", buffering=0))\n    term_size = os.get_terminal_size(tty_file.fileno())\n\n    return tty_file, term_size\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 71, 'coloffset': 4, 'linematch': 'tty_file = io.TextIOWrapper(open(tty_path, ""r+b"", buffering=0))', 'context': '\ndef _open_tty(tty_path):\n    import io\n    import os\n    tty_file = io.TextIOWrapper(open(tty_path, ""r+b"", buffering=0))\n    term_size = os.get_terminal_size(tty_file.fileno())\n\n    return tty_file, term_size\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 72, 'coloffset': 4, 'linematch': 'term_size = os.get_terminal_size(tty_file.fileno())', 'context': 'def _open_tty(tty_path):\n    import io\n    import os\n    tty_file = io.TextIOWrapper(open(tty_path, ""r+b"", buffering=0))\n    term_size = os.get_terminal_size(tty_file.fileno())\n\n    return tty_file, term_size\n\n\ndef _get_debugger(**kwargs):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 74, 'coloffset': 4, 'linematch': 'return tty_file, term_size', 'context': '    import os\n    tty_file = io.TextIOWrapper(open(tty_path, ""r+b"", buffering=0))\n    term_size = os.get_terminal_size(tty_file.fileno())\n\n    return tty_file, term_size\n\n\ndef _get_debugger(**kwargs):\n    from pudb.debugger import Debugger\n    if not Debugger._current_debugger:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5184', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = 43\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5185', 'line': 71, 'description': ['        self.x = 42'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -68,7 +68,7 @@\n \n class Reasonable:\n     def __init__(self):\n-        self.x = 42\n+        self.x = None\n \n     def bar(self):\n         return True\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,_have_debugger,96-102,"[{'lineno': 96, 'coloffset': 0, 'linematch': 'def _have_debugger():', 'context': '    else:\n        return Debugger._current_debugger[0]\n\n\ndef _have_debugger():\n    try:\n        from pudb.debugger import Debugger\n        return bool(Debugger._current_debugger)\n    except ImportError:\n        # Import cycles may happen if function is called during early startup', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 97, 'coloffset': 4, 'linematch': 'try:', 'context': '        return Debugger._current_debugger[0]\n\n\ndef _have_debugger():\n    try:\n        from pudb.debugger import Debugger\n        return bool(Debugger._current_debugger)\n    except ImportError:\n        # Import cycles may happen if function is called during early startup\n        return False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3559', 'line': 98, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5195', 'line': 97, 'description': ['        func = getattr(self.__internal_dict__, method_name)'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,runmodule,110-112,"[{'lineno': 110, 'coloffset': 0, 'linematch': 'def runmodule(*args, **kwargs):', 'context': 'DEFAULT_SIGNAL = signal.SIGINT\ndel signal\n\n\ndef runmodule(*args, **kwargs):\n    kwargs[""run_as_module""] = True\n    runscript(*args, **kwargs)\n\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 111, 'coloffset': 4, 'linematch': 'kwargs[""run_as_module""] = True', 'context': 'del signal\n\n\ndef runmodule(*args, **kwargs):\n    kwargs[""run_as_module""] = True\n    runscript(*args, **kwargs)\n\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,\n              _continue_at_start=False, run_as_module=False):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 112, 'coloffset': 4, 'linematch': 'runscript(*args, **kwargs)', 'context': '\n\ndef runmodule(*args, **kwargs):\n    kwargs[""run_as_module""] = True\n    runscript(*args, **kwargs)\n\n\ndef runscript(mainpyfile, args=None, pre_run="""", steal_output=False,\n              _continue_at_start=False, run_as_module=False):\n    dbg = _get_debugger(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3562', 'line': 110, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -107,7 +107,7 @@\n                 yield str(count), entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a sequence, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5200', 'line': 112, 'description': ['        ""__contains__"",'], 'failure': []}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,runstatement,224-225,"[{'lineno': 224, 'coloffset': 0, 'linematch': 'def runstatement(statement, globals=None, locals=None):', 'context': '\n    sys.path = prev_sys_path\n\n\ndef runstatement(statement, globals=None, locals=None):\n    return _get_debugger().run(statement, globals, locals)\n\n\ndef runeval(expression, globals=None, locals=None):\n    return _get_debugger().runeval(expression, globals, locals)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 559, 'coloffset': 4, 'linematch': 'def runstatement(self, statement, globals=None, locals=None):', 'context': '        self._wait_for_mainpyfile = True\n\n        self.run(code)\n\n    def runstatement(self, statement, globals=None, locals=None):\n        try:\n            return self.run(statement, globals, locals)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 559, 'coloffset': 4, 'linematch': 'def runstatement(self, statement, globals=None, locals=None):', 'context': '        self._wait_for_mainpyfile = True\n\n        self.run(code)\n\n    def runstatement(self, statement, globals=None, locals=None):\n        try:\n            return self.run(statement, globals, locals)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 225, 'coloffset': 4, 'linematch': 'return _get_debugger().run(statement, globals, locals)', 'context': '    sys.path = prev_sys_path\n\n\ndef runstatement(statement, globals=None, locals=None):\n    return _get_debugger().run(statement, globals, locals)\n\n\ndef runeval(expression, globals=None, locals=None):\n    return _get_debugger().runeval(expression, globals, locals)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 560, 'coloffset': 8, 'linematch': 'try:', 'context': '\n        self.run(code)\n\n    def runstatement(self, statement, globals=None, locals=None):\n        try:\n            return self.run(statement, globals, locals)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())\n            raise', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3609', 'line': 224, 'description': ['        self.var_label = var_label'], 'failure': []}, {'name': 'Mutant #3610', 'line': 225, 'description': ['        self.value_str = value_str'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,runeval,228-229,"[{'lineno': 228, 'coloffset': 0, 'linematch': 'def runeval(expression, globals=None, locals=None):', 'context': 'def runstatement(statement, globals=None, locals=None):\n    return _get_debugger().run(statement, globals, locals)\n\n\ndef runeval(expression, globals=None, locals=None):\n    return _get_debugger().runeval(expression, globals, locals)\n\n\ndef runcall(*args, **kwargs):\n    return _get_debugger().runcall(*args, **kwargs)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 567, 'coloffset': 4, 'linematch': 'def runeval(self, expression, globals=None, locals=None):', 'context': '            self.post_mortem = True\n            self.interaction(None, sys.exc_info())\n            raise\n\n    def runeval(self, expression, globals=None, locals=None):\n        try:\n            return super().runeval(expression, globals, locals)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 567, 'coloffset': 4, 'linematch': 'def runeval(self, expression, globals=None, locals=None):', 'context': '            self.post_mortem = True\n            self.interaction(None, sys.exc_info())\n            raise\n\n    def runeval(self, expression, globals=None, locals=None):\n        try:\n            return super().runeval(expression, globals, locals)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 229, 'coloffset': 4, 'linematch': 'return _get_debugger().runeval(expression, globals, locals)', 'context': '    return _get_debugger().run(statement, globals, locals)\n\n\ndef runeval(expression, globals=None, locals=None):\n    return _get_debugger().runeval(expression, globals, locals)\n\n\ndef runcall(*args, **kwargs):\n    return _get_debugger().runcall(*args, **kwargs)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 568, 'coloffset': 8, 'linematch': 'try:', 'context': '            self.interaction(None, sys.exc_info())\n            raise\n\n    def runeval(self, expression, globals=None, locals=None):\n        try:\n            return super().runeval(expression, globals, locals)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())\n            raise', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3615', 'line': 228, 'description': ['        self.watch_expr = watch_expr'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -225,7 +225,7 @@\n         self.value_str = value_str\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n-        self.watch_expr = watch_expr\n+        self.watch_expr = None\n         if iinfo is None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3616', 'line': 229, 'description': ['        if iinfo is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -226,7 +226,7 @@\n         self.id_path = id_path\n         self.attr_prefix = attr_prefix or ""var""\n         self.watch_expr = watch_expr\n-        if iinfo is None:\n+        if iinfo is not None:\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,runcall,232-233,"[{'lineno': 232, 'coloffset': 0, 'linematch': 'def runcall(*args, **kwargs):', 'context': 'def runeval(expression, globals=None, locals=None):\n    return _get_debugger().runeval(expression, globals, locals)\n\n\ndef runcall(*args, **kwargs):\n    return _get_debugger().runcall(*args, **kwargs)\n\n\ndef set_trace(paused=True):\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 575, 'coloffset': 4, 'linematch': 'def runcall(self, *args, **kwargs):', 'context': '            self.post_mortem = True\n            self.interaction(None, sys.exc_info())\n            raise\n\n    def runcall(self, *args, **kwargs):\n        try:\n            return super().runcall(*args, **kwargs)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 575, 'coloffset': 4, 'linematch': 'def runcall(self, *args, **kwargs):', 'context': '            self.post_mortem = True\n            self.interaction(None, sys.exc_info())\n            raise\n\n    def runcall(self, *args, **kwargs):\n        try:\n            return super().runcall(*args, **kwargs)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 233, 'coloffset': 4, 'linematch': 'return _get_debugger().runcall(*args, **kwargs)', 'context': '    return _get_debugger().runeval(expression, globals, locals)\n\n\ndef runcall(*args, **kwargs):\n    return _get_debugger().runcall(*args, **kwargs)\n\n\ndef set_trace(paused=True):\n    """"""\n    Start the debugger', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 576, 'coloffset': 8, 'linematch': 'try:', 'context': '            self.interaction(None, sys.exc_info())\n            raise\n\n    def runcall(self, *args, **kwargs):\n        try:\n            return super().runcall(*args, **kwargs)\n        except Exception:\n            self.post_mortem = True\n            self.interaction(None, sys.exc_info())\n            raise', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3617', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = CONFIG[""XXwrap_variablesXX""]\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3618', 'line': 233, 'description': ['            self.wrap = CONFIG[""wrap_variables""]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -230,7 +230,7 @@\n             # Do not globalize: cyclic import\n             from pudb.debugger import CONFIG\n \n-            self.wrap = CONFIG[""wrap_variables""]\n+            self.wrap = None\n         else:\n             self.wrap = iinfo.wrap\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,_interrupt_handler,256-258,"[{'lineno': 256, 'coloffset': 0, 'linematch': 'def _interrupt_handler(signum, frame):', 'context': '\nstart = set_trace\n\n\ndef _interrupt_handler(signum, frame):\n    from pudb import _get_debugger\n    _get_debugger().set_trace(frame, as_breakpoint=False)\n\n\ndef set_interrupt_handler(interrupt_signal=None):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 257, 'coloffset': 4, 'linematch': 'from pudb import _get_debugger', 'context': 'start = set_trace\n\n\ndef _interrupt_handler(signum, frame):\n    from pudb import _get_debugger\n    _get_debugger().set_trace(frame, as_breakpoint=False)\n\n\ndef set_interrupt_handler(interrupt_signal=None):\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 258, 'coloffset': 4, 'linematch': '_get_debugger().set_trace(frame, as_breakpoint=False)', 'context': '\n\ndef _interrupt_handler(signum, frame):\n    from pudb import _get_debugger\n    _get_debugger().set_trace(frame, as_breakpoint=False)\n\n\ndef set_interrupt_handler(interrupt_signal=None):\n    """"""\n    Set up an interrupt handler, to activate PuDB when Python receives the', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3627', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str or ""XXXX""\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3628', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = self.value_str and """"\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3629', 'line': 256, 'description': ['        value_str = self.value_str or """"'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -253,7 +253,7 @@\n         """"""\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n-        value_str = self.value_str or """"\n+        value_str = None\n         alltext = var_label + "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3630', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label - "": "" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3631', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + ""XX: XX"" + value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3632', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = var_label + "": "" - value_str\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3633', 'line': 257, 'description': ['        alltext = var_label + "": "" + value_str'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -254,7 +254,7 @@\n         maxcol -= len(self.prefix)  # self.prefix is padding\n         var_label = self.var_label or """"\n         value_str = self.value_str or """"\n-        alltext = var_label + "": "" + value_str\n+        alltext = None\n         # The first line is not indented\n         firstline = self.prefix + alltext[:maxcol]\n         if not alltext[maxcol:]:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5289', 'line': 256, 'description': ['            float(""inf""),'], 'failure': []}, {'name': 'Mutant #5290', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(2.3, -1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5291', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, +1),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5292', 'line': 257, 'description': ['            complex(1.3, -1),'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -254,7 +254,7 @@\n             -1234567890412345243,\n             float(4.2),\n             float(""inf""),\n-            complex(1.3, -1),\n+            complex(1.3, -2),\n \n             # strings\n             """",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",9.090909090909092,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,__del__,216-218,"[{'lineno': 216, 'coloffset': 4, 'linematch': 'def __del__(self):', 'context': '\n        # Okay, now we have a debugger\n        self._current_debugger.append(self)\n\n    def __del__(self):\n        assert self._current_debugger == [self]\n        self._current_debugger.pop()\n\n    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 216, 'coloffset': 4, 'linematch': 'def __del__(self):', 'context': '\n        # Okay, now we have a debugger\n        self._current_debugger.append(self)\n\n    def __del__(self):\n        assert self._current_debugger == [self]\n        self._current_debugger.pop()\n\n    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 217, 'coloffset': 8, 'linematch': 'assert self._current_debugger == [self]', 'context': '        # Okay, now we have a debugger\n        self._current_debugger.append(self)\n\n    def __del__(self):\n        assert self._current_debugger == [self]\n        self._current_debugger.pop()\n\n    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See\n    # https://github.com/inducer/pudb/pull/90.', 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 217, 'coloffset': 8, 'linematch': 'assert self._current_debugger == [self]', 'context': '        # Okay, now we have a debugger\n        self._current_debugger.append(self)\n\n    def __del__(self):\n        assert self._current_debugger == [self]\n        self._current_debugger.pop()\n\n    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See\n    # https://github.com/inducer/pudb/pull/90.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 218, 'coloffset': 8, 'linematch': 'self._current_debugger.pop()', 'context': '        self._current_debugger.append(self)\n\n    def __del__(self):\n        assert self._current_debugger == [self]\n        self._current_debugger.pop()\n\n    # These (dispatch_line and set_continue) are copied from bdb with the\n    # patch from https://bugs.python.org/issue16482 applied. See\n    # https://github.com/inducer/pudb/pull/90.\n    def dispatch_line(self, frame):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3599', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -213,7 +213,7 @@\n # {{{ widget\n \n class VariableWidget(urwid.FlowWidget):\n-    PREFIX = ""| ""\n+    PREFIX = ""XX| XX""\n \n     def __init__(self, parent, var_label, value_str, id_path,\n             attr_prefix=None, watch_expr=None, iinfo=None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3600', 'line': 216, 'description': ['    PREFIX = ""| ""'], 'failure': []}, {'name': 'Mutant #5262', 'line': 216, 'description': ['            expected.extend([(""[]"", repr(entry))'], 'failure': []}, {'name': 'Mutant #5263', 'line': 218, 'description': ['                            or [self.EMPTY_ITEM])'], 'failure': []}]",75.0,['ANNOT001' 'C002' 'NOA001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/Assert'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 1, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,enter_post_mortem,310-311,"[{'lineno': 310, 'coloffset': 4, 'linematch': 'def enter_post_mortem(self, exc_tuple):', 'context': '            for lineno in bp_lst\n            for bp in self.get_breaks(fn, lineno)\n            if not bp.temporary])\n\n    def enter_post_mortem(self, exc_tuple):\n        self.post_mortem = True\n\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 310, 'coloffset': 4, 'linematch': 'def enter_post_mortem(self, exc_tuple):', 'context': '            for lineno in bp_lst\n            for bp in self.get_breaks(fn, lineno)\n            if not bp.temporary])\n\n    def enter_post_mortem(self, exc_tuple):\n        self.post_mortem = True\n\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 311, 'coloffset': 8, 'linematch': 'self.post_mortem = True', 'context': '            for bp in self.get_breaks(fn, lineno)\n            if not bp.temporary])\n\n    def enter_post_mortem(self, exc_tuple):\n        self.post_mortem = True\n\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3688', 'line': 310, 'description': ['                    + text_width(var_label)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -307,7 +307,7 @@\n                     + (len(self.prefix) + 2)  # Padding of subsequent lines\n                     * (extralabel_full + bool(extralabel_rem))\n \n-                    + text_width(var_label)\n+                    - text_width(var_label)\n \n                     + 1  # for "":""\n                     )\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,setup_state,313-322,"[{'lineno': 313, 'coloffset': 4, 'linematch': 'def setup_state(self):', 'context': '\n    def enter_post_mortem(self, exc_tuple):\n        self.post_mortem = True\n\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 313, 'coloffset': 4, 'linematch': 'def setup_state(self):', 'context': '\n    def enter_post_mortem(self, exc_tuple):\n        self.post_mortem = True\n\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 314, 'coloffset': 8, 'linematch': 'self.bottom_frame = None', 'context': '    def enter_post_mortem(self, exc_tuple):\n        self.post_mortem = True\n\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None\n        self.post_mortem = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 315, 'coloffset': 8, 'linematch': 'self.mainpyfile = """"', 'context': '        self.post_mortem = True\n\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None\n        self.post_mortem = False\n        # Mapping of (filename, lineno) to bool. If True, will stop on the', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 316, 'coloffset': 8, 'linematch': 'self._wait_for_mainpyfile = False', 'context': '\n    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None\n        self.post_mortem = False\n        # Mapping of (filename, lineno) to bool. If True, will stop on the\n        # set_trace() call at that location.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 317, 'coloffset': 8, 'linematch': 'self._continue_at_start = self._continue_at_start__setting', 'context': '    def setup_state(self):\n        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None\n        self.post_mortem = False\n        # Mapping of (filename, lineno) to bool. If True, will stop on the\n        # set_trace() call at that location.\n        self.set_traces = {}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 318, 'coloffset': 8, 'linematch': 'self.current_bp = None', 'context': '        self.bottom_frame = None\n        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None\n        self.post_mortem = False\n        # Mapping of (filename, lineno) to bool. If True, will stop on the\n        # set_trace() call at that location.\n        self.set_traces = {}\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 319, 'coloffset': 8, 'linematch': 'self.post_mortem = False', 'context': '        self.mainpyfile = """"\n        self._wait_for_mainpyfile = False\n        self._continue_at_start = self._continue_at_start__setting\n        self.current_bp = None\n        self.post_mortem = False\n        # Mapping of (filename, lineno) to bool. If True, will stop on the\n        # set_trace() call at that location.\n        self.set_traces = {}\n\n    def restart(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 322, 'coloffset': 8, 'linematch': 'self.set_traces = {}', 'context': '        self.current_bp = None\n        self.post_mortem = False\n        # Mapping of (filename, lineno) to bool. If True, will stop on the\n        # set_trace() call at that location.\n        self.set_traces = {}\n\n    def restart(self):\n        from linecache import checkcache\n        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3691', 'line': 313, 'description': ['                    )'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -301,16 +301,7 @@\n             extralabel_full, extralabel_rem = divmod(\n                     text_width(var_label[maxcol:]), maxcol)\n             totallen = sum(text_width(i) for i in text)\n-            labellen = (\n-                    len(self.prefix)  # Padding of first line\n-\n-                    + (len(self.prefix) + 2)  # Padding of subsequent lines\n-                    * (extralabel_full + bool(extralabel_rem))\n-\n-                    + text_width(var_label)\n-\n-                    + 1  # for "":""\n-                    )\n+            labellen = None\n \n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3692', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx-""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3693', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""XXlabelXX"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3694', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx-""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3695', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""XXvalueXX"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3696', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen + labellen)]\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3697', 'line': 315, 'description': ['            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -312,7 +312,7 @@\n                     + 1  # for "":""\n                     )\n \n-            _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n+            _attr = None\n             from urwid.util import rle_subseg\n \n             fullcols, rem = divmod(totallen, maxcol)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3698', 'line': 318, 'description': ['            fullcols, rem = divmod(totallen, maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -315,7 +315,7 @@\n             _attr = [(apfx+""label"", labellen), (apfx+""value"", totallen - labellen)]\n             from urwid.util import rle_subseg\n \n-            fullcols, rem = divmod(totallen, maxcol)\n+            fullcols, rem = None\n \n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3699', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i/maxcol, (i + 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3700', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i - 1)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3701', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 2)*maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3702', 'line': 320, 'description': ['            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,7 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n+            attr = [rle_subseg(_attr, i*maxcol, (i + 1)/maxcol)\n                 for i in range(fullcols + bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3703', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -318,7 +318,7 @@\n             fullcols, rem = divmod(totallen, maxcol)\n \n             attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+                for i in range(fullcols - bool(rem))]\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3704', 'line': 321, 'description': ['                for i in range(fullcols + bool(rem))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -317,8 +317,7 @@\n \n             fullcols, rem = divmod(totallen, maxcol)\n \n-            attr = [rle_subseg(_attr, i*maxcol, (i + 1)*maxcol)\n-                for i in range(fullcols + bool(rem))]\n+            attr = None\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5319', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5320', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5321', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5322', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5323', 'line': 313, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -310,7 +310,7 @@\n \n     def test_set(self):\n         self.assert_walks_contents({\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         })\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5324', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5325', 'line': 315, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5326', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5327', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5328', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5329', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5330', 'line': 319, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -316,7 +316,7 @@\n \n     def test_frozenset(self):\n         self.assert_walks_contents(frozenset([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ]))\n         self.assert_class_counts_equal({""collections"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5331', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}, {'name': 'Mutant #5332', 'line': 321, 'description': ['        self.assert_class_counts_equal({""collections"": 1})'], 'failure': []}]",14.285714285714285,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,restart,324-328,"[{'lineno': 324, 'coloffset': 4, 'linematch': 'def restart(self):', 'context': '        # Mapping of (filename, lineno) to bool. If True, will stop on the\n        # set_trace() call at that location.\n        self.set_traces = {}\n\n    def restart(self):\n        from linecache import checkcache\n        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 324, 'coloffset': 4, 'linematch': 'def restart(self):', 'context': '        # Mapping of (filename, lineno) to bool. If True, will stop on the\n        # set_trace() call at that location.\n        self.set_traces = {}\n\n    def restart(self):\n        from linecache import checkcache\n        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 325, 'coloffset': 8, 'linematch': 'from linecache import checkcache', 'context': '        # set_trace() call at that location.\n        self.set_traces = {}\n\n    def restart(self):\n        from linecache import checkcache\n        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n\n    def do_clear(self, arg):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 326, 'coloffset': 8, 'linematch': 'checkcache()', 'context': '        self.set_traces = {}\n\n    def restart(self):\n        from linecache import checkcache\n        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 327, 'coloffset': 8, 'linematch': 'self.ui.set_source_code_provider(NullSourceCodeProvider())', 'context': '\n    def restart(self):\n        from linecache import checkcache\n        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 328, 'coloffset': 8, 'linematch': 'self.setup_state()', 'context': '    def restart(self):\n        from linecache import checkcache\n        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3707', 'line': 325, 'description': ['        lprefix = len(self.prefix)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -322,7 +322,7 @@\n \n             return make_canvas(text, attr, maxcol, apfx+""value"")\n \n-        lprefix = len(self.prefix)\n+        lprefix = None\n \n         if self.value_str is not None:\n             if self.var_label is not None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3708', 'line': 327, 'description': ['        if self.value_str is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -324,7 +324,7 @@\n \n         lprefix = len(self.prefix)\n \n-        if self.value_str is not None:\n+        if self.value_str is  None:\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3709', 'line': 328, 'description': ['            if self.var_label is not None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -325,7 +325,7 @@\n         lprefix = len(self.prefix)\n \n         if self.value_str is not None:\n-            if self.var_label is not None:\n+            if self.var_label is  None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5333', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            1:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5334', 'line': 325, 'description': ['            0:                   42,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -322,7 +322,7 @@\n \n     def test_dict(self):\n         self.assert_walks_contents({\n-            0:                   42,\n+            0:                   43,\n             ""a"":                 ""foo"",\n             """": None,\n             True: False,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5335', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""XXaXX"":                 ""foo"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5336', 'line': 326, 'description': ['            ""a"":                 ""foo"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -323,7 +323,7 @@\n     def test_dict(self):\n         self.assert_walks_contents({\n             0:                   42,\n-            ""a"":                 ""foo"",\n+            ""a"":                 ""XXfooXX"",\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5337', 'line': 327, 'description': ['            """": None,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -324,7 +324,7 @@\n         self.assert_walks_contents({\n             0:                   42,\n             ""a"":                 ""foo"",\n-            """": None,\n+            ""XXXX"": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5338', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            False: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5339', 'line': 328, 'description': ['            True: False,'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -325,7 +325,7 @@\n             0:                   42,\n             ""a"":                 ""foo"",\n             """": None,\n-            True: False,\n+            True: True,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n             (1, 2, ""c"", ()):     ""tuple"",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,do_clear,330-331,"[{'lineno': 330, 'coloffset': 4, 'linematch': 'def do_clear(self, arg):', 'context': '        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 330, 'coloffset': 4, 'linematch': 'def do_clear(self, arg):', 'context': '        checkcache()\n        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 331, 'coloffset': 8, 'linematch': 'self.clear_bpbynumber(int(arg))', 'context': '        self.ui.set_source_code_provider(NullSourceCodeProvider())\n        self.setup_state()\n\n    def do_clear(self, arg):\n        self.clear_bpbynumber(int(arg))\n\n    def set_frame_index(self, index):\n        self.curindex = index\n        if index < 0 or index >= len(self.stack):\n            return', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3712', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix - self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3713', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label - "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3714', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label + ""XX:XX"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5342', 'line': 330, 'description': ['            ():                  ""empty tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -327,7 +327,7 @@\n             """": None,\n             True: False,\n             frozenset(range(3)): ""abc"",\n-            ():                  ""empty tuple"",\n+            ():                  ""XXempty tupleXX"",\n             (1, 2, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5343', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (2, 2, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5344', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 3, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5345', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""XXcXX"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5346', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""c"", ()):     ""XXtupleXX"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_stack_situation_id,440-441,"[{'lineno': 440, 'coloffset': 4, 'linematch': 'def get_stack_situation_id(self):', 'context': '\n        self.ui.call_with_ui(self.ui.interaction, exc_tuple,\n                show_exc_dialog=show_exc_dialog)\n\n    def get_stack_situation_id(self):\n        return str(id(self.stack[self.curindex][0].f_code))\n\n    def user_call(self, frame, argument_list):\n        """"""This method is called when there is the remote possibility\n        that we ever need to stop in this function.""""""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 440, 'coloffset': 4, 'linematch': 'def get_stack_situation_id(self):', 'context': '\n        self.ui.call_with_ui(self.ui.interaction, exc_tuple,\n                show_exc_dialog=show_exc_dialog)\n\n    def get_stack_situation_id(self):\n        return str(id(self.stack[self.curindex][0].f_code))\n\n    def user_call(self, frame, argument_list):\n        """"""This method is called when there is the remote possibility\n        that we ever need to stop in this function.""""""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 441, 'coloffset': 8, 'linematch': 'return str(id(self.stack[self.curindex][0].f_code))', 'context': '        self.ui.call_with_ui(self.ui.interaction, exc_tuple,\n                show_exc_dialog=show_exc_dialog)\n\n    def get_stack_situation_id(self):\n        return str(id(self.stack[self.curindex][0].f_code))\n\n    def user_call(self, frame, argument_list):\n        """"""This method is called when there is the remote possibility\n        that we ever need to stop in this function.""""""\n        if self._wait_for_mainpyfile:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3788', 'line': 440, 'description': ['            return f""{type(value).__name__} ({obj_len})""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -437,7 +437,7 @@\n         except TypeError:\n             pass\n         else:\n-            return f""{type(value).__name__} ({obj_len})""\n+            return f""XX{type(value).__name__} ({obj_len})XX""\n \n     return str(type(value).__name__)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,_runscript,505-535,"[{'lineno': 505, 'coloffset': 4, 'linematch': 'def _runscript(self, filename):', 'context': '            self.interaction(frame, exc_tuple)\n\n    # {{{ entrypoints\n\n    def _runscript(self, filename):\n        # Provide separation from current __main__, which is likely\n        # pudb.__main__ run.  Preserving its namespace is not important, and\n        # having the script share it ensures that, e.g., pickle can find\n        # types defined there:\n        # https://github.com/inducer/pudb/issues/331', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 505, 'coloffset': 4, 'linematch': 'def _runscript(self, filename):', 'context': '            self.interaction(frame, exc_tuple)\n\n    # {{{ entrypoints\n\n    def _runscript(self, filename):\n        # Provide separation from current __main__, which is likely\n        # pudb.__main__ run.  Preserving its namespace is not important, and\n        # having the script share it ensures that, e.g., pickle can find\n        # types defined there:\n        # https://github.com/inducer/pudb/issues/331', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 512, 'coloffset': 8, 'linematch': 'import __main__', 'context': '        # having the script share it ensures that, e.g., pickle can find\n        # types defined there:\n        # https://github.com/inducer/pudb/issues/331\n\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({\n            ""__name__"": ""__main__"",\n            ""__file__"": filename,\n            ""__builtins__"": __builtins__,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 513, 'coloffset': 8, 'linematch': '__main__.__dict__.clear()', 'context': '        # types defined there:\n        # https://github.com/inducer/pudb/issues/331\n\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({\n            ""__name__"": ""__main__"",\n            ""__file__"": filename,\n            ""__builtins__"": __builtins__,\n            })', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 514, 'coloffset': 8, 'linematch': '__main__.__dict__.update({', 'context': '        # https://github.com/inducer/pudb/issues/331\n\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({\n            ""__name__"": ""__main__"",\n            ""__file__"": filename,\n            ""__builtins__"": __builtins__,\n            })\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 525, 'coloffset': 8, 'linematch': 'self._wait_for_mainpyfile = True', 'context': '        # BEFORE debugger even reaches user\'s code (and the exact sequence of\n        # events depends on python version). So we take special measures to\n        # avoid stopping before we reach the main script (see user_line and\n        # user_call for details).\n        self._wait_for_mainpyfile = True\n        self.mainpyfile = self.canonic(filename)\n        statement = \'exec(compile(open(""{}"").read(), ""{}"", ""exec""))\'.format(\n                filename, filename)\n\n        # Set up an interrupt handler', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 526, 'coloffset': 8, 'linematch': 'self.mainpyfile = self.canonic(filename)', 'context': '        # events depends on python version). So we take special measures to\n        # avoid stopping before we reach the main script (see user_line and\n        # user_call for details).\n        self._wait_for_mainpyfile = True\n        self.mainpyfile = self.canonic(filename)\n        statement = \'exec(compile(open(""{}"").read(), ""{}"", ""exec""))\'.format(\n                filename, filename)\n\n        # Set up an interrupt handler\n        from pudb import set_interrupt_handler', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 527, 'coloffset': 8, 'linematch': 'statement = \'exec(compile(open(""{}"").read(), ""{}"", ""exec""))\'.format(', 'context': '        # avoid stopping before we reach the main script (see user_line and\n        # user_call for details).\n        self._wait_for_mainpyfile = True\n        self.mainpyfile = self.canonic(filename)\n        statement = \'exec(compile(open(""{}"").read(), ""{}"", ""exec""))\'.format(\n                filename, filename)\n\n        # Set up an interrupt handler\n        from pudb import set_interrupt_handler\n        set_interrupt_handler()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 531, 'coloffset': 8, 'linematch': 'from pudb import set_interrupt_handler', 'context': '        statement = \'exec(compile(open(""{}"").read(), ""{}"", ""exec""))\'.format(\n                filename, filename)\n\n        # Set up an interrupt handler\n        from pudb import set_interrupt_handler\n        set_interrupt_handler()\n\n        # Implicitly runs in the namespace of __main__.\n        self.run(statement)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 532, 'coloffset': 8, 'linematch': 'set_interrupt_handler()', 'context': '                filename, filename)\n\n        # Set up an interrupt handler\n        from pudb import set_interrupt_handler\n        set_interrupt_handler()\n\n        # Implicitly runs in the namespace of __main__.\n        self.run(statement)\n\n    def _runmodule(self, module_name):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 535, 'coloffset': 8, 'linematch': 'self.run(statement)', 'context': '        from pudb import set_interrupt_handler\n        set_interrupt_handler()\n\n        # Implicitly runs in the namespace of __main__.\n        self.run(statement)\n\n    def _runmodule(self, module_name):\n        # This is basically stolen from the pdb._runmodule from CPython 3.8\n        # https://github.com/python/cpython/blob/a1d3be4623c8ec7069bd34ccdce336be9cdeb644/Lib/pdb.py#L1530\n        import runpy', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3816', 'line': 509, 'description': ['    EMPTY_LABEL = ""<empty>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -506,7 +506,7 @@\n # {{{ tree walking\n \n class ValueWalker(ABC):\n-    EMPTY_LABEL = ""<empty>""\n+    EMPTY_LABEL = ""XX<empty>XX""\n     CONTINUATION_LABEL = ""[...]""\n \n     def __init__(self, frame_var_info):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3817', 'line': 509, 'description': ['    EMPTY_LABEL = ""<empty>""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -506,7 +506,7 @@\n # {{{ tree walking\n \n class ValueWalker(ABC):\n-    EMPTY_LABEL = ""<empty>""\n+    EMPTY_LABEL = None\n     CONTINUATION_LABEL = ""[...]""\n \n     def __init__(self, frame_var_info):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3818', 'line': 510, 'description': ['    CONTINUATION_LABEL = ""[...]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -507,7 +507,7 @@\n \n class ValueWalker(ABC):\n     EMPTY_LABEL = ""<empty>""\n-    CONTINUATION_LABEL = ""[...]""\n+    CONTINUATION_LABEL = ""XX[...]XX""\n \n     def __init__(self, frame_var_info):\n         self.frame_var_info = frame_var_info\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3819', 'line': 510, 'description': ['    CONTINUATION_LABEL = ""[...]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -507,7 +507,7 @@\n \n class ValueWalker(ABC):\n     EMPTY_LABEL = ""<empty>""\n-    CONTINUATION_LABEL = ""[...]""\n+    CONTINUATION_LABEL = None\n \n     def __init__(self, frame_var_info):\n         self.frame_var_info = frame_var_info\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3820', 'line': 513, 'description': ['        self.frame_var_info = frame_var_info'], 'failure': []}, {'name': 'Mutant #3821', 'line': 515, 'description': ['    @abstractmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -512,7 +512,6 @@\n     def __init__(self, frame_var_info):\n         self.frame_var_info = frame_var_info\n \n-    @abstractmethod\n     def add_item(self, parent, var_label, value_str, id_path, attr_prefix=None):\n         pass\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3822', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = ""XX%s.cont-%dXX"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3823', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = ""%s.cont-%d"" / (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3824', 'line': 528, 'description': ['        cont_id_path = ""%s.cont-%d"" % (id_path, count)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -525,7 +525,7 @@\n             container should be added. If no continuation item was added,\n             continue adding entries from the container.\n         """"""\n-        cont_id_path = ""%s.cont-%d"" % (id_path, count)\n+        cont_id_path = None\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3825', 'line': 529, 'description': ['        if not self.frame_var_info.get_inspect_info('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -526,7 +526,7 @@\n             continue adding entries from the container.\n         """"""\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n-        if not self.frame_var_info.get_inspect_info(\n+        if  self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n                 omitted = f""{length - count}""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3826', 'line': 530, 'description': ['                cont_id_path, read_only=True).show_detail:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -527,7 +527,7 @@\n         """"""\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n-                cont_id_path, read_only=True).show_detail:\n+                cont_id_path, read_only=False).show_detail:\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3827', 'line': 531, 'description': ['            if length > 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -528,7 +528,7 @@\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n-            if length > 0:\n+            if length >= 0:\n                 omitted = f""{length - count}""\n             else:\n                 omitted = ""some""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3828', 'line': 531, 'description': ['            if length > 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -528,7 +528,7 @@\n         cont_id_path = ""%s.cont-%d"" % (id_path, count)\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n-            if length > 0:\n+            if length > 1:\n                 omitted = f""{length - count}""\n             else:\n                 omitted = ""some""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3829', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = f""{length + count}""\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3830', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = f""XX{length - count}XX""\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3831', 'line': 532, 'description': ['                omitted = f""{length - count}""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -529,7 +529,7 @@\n         if not self.frame_var_info.get_inspect_info(\n                 cont_id_path, read_only=True).show_detail:\n             if length > 0:\n-                omitted = f""{length - count}""\n+                omitted = None\n             else:\n                 omitted = ""some""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3832', 'line': 534, 'description': ['                omitted = ""some""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -531,7 +531,7 @@\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n-                omitted = ""some""\n+                omitted = ""XXsomeXX""\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3833', 'line': 534, 'description': ['                omitted = ""some""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -531,7 +531,7 @@\n             if length > 0:\n                 omitted = f""{length - count}""\n             else:\n-                omitted = ""some""\n+                omitted = None\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n', 'type': 'failure', 'message': 'bad_survived'}]}]",5.555555555555555,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,_runmodule,537-557,"[{'lineno': 537, 'coloffset': 4, 'linematch': 'def _runmodule(self, module_name):', 'context': '\n        # Implicitly runs in the namespace of __main__.\n        self.run(statement)\n\n    def _runmodule(self, module_name):\n        # This is basically stolen from the pdb._runmodule from CPython 3.8\n        # https://github.com/python/cpython/blob/a1d3be4623c8ec7069bd34ccdce336be9cdeb644/Lib/pdb.py#L1530\n        import runpy\n        _mod_name, mod_spec, code = runpy._get_module_details(module_name)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 537, 'coloffset': 4, 'linematch': 'def _runmodule(self, module_name):', 'context': '\n        # Implicitly runs in the namespace of __main__.\n        self.run(statement)\n\n    def _runmodule(self, module_name):\n        # This is basically stolen from the pdb._runmodule from CPython 3.8\n        # https://github.com/python/cpython/blob/a1d3be4623c8ec7069bd34ccdce336be9cdeb644/Lib/pdb.py#L1530\n        import runpy\n        _mod_name, mod_spec, code = runpy._get_module_details(module_name)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 540, 'coloffset': 8, 'linematch': 'import runpy', 'context': '\n    def _runmodule(self, module_name):\n        # This is basically stolen from the pdb._runmodule from CPython 3.8\n        # https://github.com/python/cpython/blob/a1d3be4623c8ec7069bd34ccdce336be9cdeb644/Lib/pdb.py#L1530\n        import runpy\n        _mod_name, mod_spec, code = runpy._get_module_details(module_name)\n\n        self.mainpyfile = self.canonic(code.co_filename)\n        import __main__\n        __main__.__dict__.clear()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 541, 'coloffset': 8, 'linematch': '_mod_name, mod_spec, code = runpy._get_module_details(module_name)', 'context': '    def _runmodule(self, module_name):\n        # This is basically stolen from the pdb._runmodule from CPython 3.8\n        # https://github.com/python/cpython/blob/a1d3be4623c8ec7069bd34ccdce336be9cdeb644/Lib/pdb.py#L1530\n        import runpy\n        _mod_name, mod_spec, code = runpy._get_module_details(module_name)\n\n        self.mainpyfile = self.canonic(code.co_filename)\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 543, 'coloffset': 8, 'linematch': 'self.mainpyfile = self.canonic(code.co_filename)', 'context': '        # https://github.com/python/cpython/blob/a1d3be4623c8ec7069bd34ccdce336be9cdeb644/Lib/pdb.py#L1530\n        import runpy\n        _mod_name, mod_spec, code = runpy._get_module_details(module_name)\n\n        self.mainpyfile = self.canonic(code.co_filename)\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({\n            ""__name__"": ""__main__"",\n            ""__file__"": self.mainpyfile,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 544, 'coloffset': 8, 'linematch': 'import __main__', 'context': '        import runpy\n        _mod_name, mod_spec, code = runpy._get_module_details(module_name)\n\n        self.mainpyfile = self.canonic(code.co_filename)\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({\n            ""__name__"": ""__main__"",\n            ""__file__"": self.mainpyfile,\n            ""__spec__"": mod_spec,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 545, 'coloffset': 8, 'linematch': '__main__.__dict__.clear()', 'context': '        _mod_name, mod_spec, code = runpy._get_module_details(module_name)\n\n        self.mainpyfile = self.canonic(code.co_filename)\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({\n            ""__name__"": ""__main__"",\n            ""__file__"": self.mainpyfile,\n            ""__spec__"": mod_spec,\n            ""__builtins__"": __builtins__,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 546, 'coloffset': 8, 'linematch': '__main__.__dict__.update({', 'context': '\n        self.mainpyfile = self.canonic(code.co_filename)\n        import __main__\n        __main__.__dict__.clear()\n        __main__.__dict__.update({\n            ""__name__"": ""__main__"",\n            ""__file__"": self.mainpyfile,\n            ""__spec__"": mod_spec,\n            ""__builtins__"": __builtins__,\n            ""__package__"": mod_spec.parent,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 555, 'coloffset': 8, 'linematch': 'self._wait_for_mainpyfile = True', 'context': '            ""__package__"": mod_spec.parent,\n            ""__loader__"": mod_spec.loader,\n        })\n\n        self._wait_for_mainpyfile = True\n\n        self.run(code)\n\n    def runstatement(self, statement, globals=None, locals=None):\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 557, 'coloffset': 8, 'linematch': 'self.run(code)', 'context': '        })\n\n        self._wait_for_mainpyfile = True\n\n        self.run(code)\n\n    def runstatement(self, statement, globals=None, locals=None):\n        try:\n            return self.run(statement, globals, locals)\n        except Exception:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3835', 'line': 538, 'description': ['            return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -535,7 +535,7 @@\n             self.add_item(parent, self.CONTINUATION_LABEL,\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n-            return True\n+            return False\n         return False\n \n     def walk_container(self, parent: VariableWidget, label: str,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3836', 'line': 539, 'description': ['        return False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -536,7 +536,7 @@\n                           f""<{omitted} items omitted, expand to see more>"",\n                           id_path=cont_id_path)\n             return True\n-        return False\n+        return True\n \n     def walk_container(self, parent: VariableWidget, label: str,\n                        value, id_path: str = None):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3837', 'line': 545, 'description': ['                                 if isinstance(value, cls))'], 'failure': []}, {'name': 'Mutant #3838', 'line': 548, 'description': ['            return False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -545,7 +545,7 @@\n                                  if isinstance(value, cls))\n         except StopIteration:\n             # Not recognized as a container\n-            return False\n+            return True\n \n         is_empty = True\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3839', 'line': 550, 'description': ['        is_empty = True'], 'failure': []}, {'name': 'Mutant #3840', 'line': 550, 'description': ['        is_empty = True'], 'failure': []}, {'name': 'Mutant #3841', 'line': 553, 'description': ['            is_empty = False'], 'failure': []}, {'name': 'Mutant #3842', 'line': 553, 'description': ['            is_empty = False'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -550,7 +550,7 @@\n         is_empty = True\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n-            is_empty = False\n+            is_empty = None\n             if count > 0 and count % 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3843', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3844', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 1 and count % 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3845', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 0 and count / 10 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3846', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -551,7 +551,7 @@\n         for count, (entry_label, entry, id_path_ext) in enumerate(\n                 container_cls.entries(value, label)):\n             is_empty = False\n-            if count > 0 and count % 10 == 0:\n+            if count > 0 and count % 11 == 0:\n                 try:\n                     length = container_cls.length(value)\n                 except Exception:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3847', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3848', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3849', 'line': 554, 'description': ['            if count > 0 and count % 10 == 0:'], 'failure': []}, {'name': 'Mutant #3850', 'line': 556, 'description': ['                    length = container_cls.length(value)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -553,7 +553,7 @@\n             is_empty = False\n             if count > 0 and count % 10 == 0:\n                 try:\n-                    length = container_cls.length(value)\n+                    length = None\n                 except Exception:\n                     length = -1\n                 if self.add_continuation_item(parent, id_path, count, length):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,signal_init,622-627,"[{'lineno': 622, 'coloffset': 4, 'linematch': 'def signal_init(self):', 'context': '\nclass ThreadsafeScreenMixin:\n    """"""A Screen subclass that doesn\'t crash when running from a non-main thread.""""""\n\n    def signal_init(self):\n        """"""Initialize signal handler, ignoring errors silently.""""""\n        try:\n            super().signal_init()\n        except ValueError:\n            pass', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 622, 'coloffset': 4, 'linematch': 'def signal_init(self):', 'context': '\nclass ThreadsafeScreenMixin:\n    """"""A Screen subclass that doesn\'t crash when running from a non-main thread.""""""\n\n    def signal_init(self):\n        """"""Initialize signal handler, ignoring errors silently.""""""\n        try:\n            super().signal_init()\n        except ValueError:\n            pass', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 623, 'coloffset': 8, 'linematch': '""""""Initialize signal handler, ignoring errors silently.""""""', 'context': 'class ThreadsafeScreenMixin:\n    """"""A Screen subclass that doesn\'t crash when running from a non-main thread.""""""\n\n    def signal_init(self):\n        """"""Initialize signal handler, ignoring errors silently.""""""\n        try:\n            super().signal_init()\n        except ValueError:\n            pass\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 624, 'coloffset': 8, 'linematch': 'try:', 'context': '    """"""A Screen subclass that doesn\'t crash when running from a non-main thread.""""""\n\n    def signal_init(self):\n        """"""Initialize signal handler, ignoring errors silently.""""""\n        try:\n            super().signal_init()\n        except ValueError:\n            pass\n\n    def signal_restore(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3901', 'line': 624, 'description': ['            id_path, attr_prefix)'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,__eq__,748-752,"[{'lineno': 748, 'coloffset': 4, 'linematch': 'def __eq__(self, other):', 'context': '    def __init__(self, func_name, code):\n        self.function_name = func_name\n        self.code = code\n\n    def __eq__(self, other):\n        return (\n                type(self) is type(other)\n                and self.function_name == other.function_name\n                and self.code is other.code)\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 748, 'coloffset': 4, 'linematch': 'def __eq__(self, other):', 'context': '    def __init__(self, func_name, code):\n        self.function_name = func_name\n        self.code = code\n\n    def __eq__(self, other):\n        return (\n                type(self) is type(other)\n                and self.function_name == other.function_name\n                and self.code is other.code)\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 749, 'coloffset': 8, 'linematch': 'return (', 'context': '        self.function_name = func_name\n        self.code = code\n\n    def __eq__(self, other):\n        return (\n                type(self) is type(other)\n                and self.function_name == other.function_name\n                and self.code is other.code)\n\n    def identifier(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3962', 'line': 750, 'description': ['        result = (watch_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -747,7 +747,7 @@\n     result = tmv_walker.main_widget_list\n \n     if watch_widget_list:\n-        result = (watch_widget_list + [SEPARATOR] + result)\n+        result = (watch_widget_list - [SEPARATOR] + result)\n \n     if tmv_walker.top_widget_list:\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3963', 'line': 750, 'description': ['        result = (watch_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -747,7 +747,7 @@\n     result = tmv_walker.main_widget_list\n \n     if watch_widget_list:\n-        result = (watch_widget_list + [SEPARATOR] + result)\n+        result = (watch_widget_list + [SEPARATOR] - result)\n \n     if tmv_walker.top_widget_list:\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3964', 'line': 750, 'description': ['        result = (watch_widget_list + [SEPARATOR] + result)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -747,7 +747,7 @@\n     result = tmv_walker.main_widget_list\n \n     if watch_widget_list:\n-        result = (watch_widget_list + [SEPARATOR] + result)\n+        result = None\n \n     if tmv_walker.top_widget_list:\n         result = (tmv_walker.top_widget_list + [SEPARATOR] + result)\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_lines,763-767,"[{'lineno': 763, 'coloffset': 4, 'linematch': 'def get_lines(self, debugger_ui):', 'context': '\n    def clear_cache(self):\n        pass\n\n    def get_lines(self, debugger_ui):\n        from pudb.source_view import format_source\n\n        lines = self.code.splitlines(True)\n        return format_source(debugger_ui, list(decode_lines(lines)), set())\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 763, 'coloffset': 4, 'linematch': 'def get_lines(self, debugger_ui):', 'context': '\n    def clear_cache(self):\n        pass\n\n    def get_lines(self, debugger_ui):\n        from pudb.source_view import format_source\n\n        lines = self.code.splitlines(True)\n        return format_source(debugger_ui, list(decode_lines(lines)), set())\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 764, 'coloffset': 8, 'linematch': 'from pudb.source_view import format_source', 'context': '    def clear_cache(self):\n        pass\n\n    def get_lines(self, debugger_ui):\n        from pudb.source_view import format_source\n\n        lines = self.code.splitlines(True)\n        return format_source(debugger_ui, list(decode_lines(lines)), set())\n\n# }}}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 766, 'coloffset': 8, 'linematch': 'lines = self.code.splitlines(True)', 'context': '\n    def get_lines(self, debugger_ui):\n        from pudb.source_view import format_source\n\n        lines = self.code.splitlines(True)\n        return format_source(debugger_ui, list(decode_lines(lines)), set())\n\n# }}}\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 767, 'coloffset': 8, 'linematch': 'return format_source(debugger_ui, list(decode_lines(lines)), set())', 'context': '    def get_lines(self, debugger_ui):\n        from pudb.source_view import format_source\n\n        lines = self.code.splitlines(True)\n        return format_source(debugger_ui, list(decode_lines(lines)), set())\n\n# }}}\n\n\nclass StoppedScreen:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3970', 'line': 763, 'description': ['        self.frame_var_info = {}'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -760,7 +760,7 @@\n \n class FrameVarInfoKeeper:\n     def __init__(self):\n-        self.frame_var_info = {}\n+        self.frame_var_info = None\n \n     def get_frame_var_info(self, read_only, ssid=None):\n         if ssid is None:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3971', 'line': 766, 'description': ['        if ssid is None:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -763,7 +763,7 @@\n         self.frame_var_info = {}\n \n     def get_frame_var_info(self, read_only, ssid=None):\n-        if ssid is None:\n+        if ssid is not None:\n             # self.debugger set by subclass\n             ssid = self.debugger.get_stack_situation_id()  # noqa: E501 # pylint: disable=no-member\n         if read_only:\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,selectable,43-44,"[{'lineno': 43, 'coloffset': 4, 'linematch': 'def selectable(self):', 'context': '        self.has_breakpoint = has_breakpoint\n        self.is_current = False\n        self.highlight = False\n\n    def selectable(self):\n        return True\n\n    def set_current(self, is_current):\n        self.is_current = is_current\n        self._invalidate()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 196, 'coloffset': 4, 'linematch': 'def selectable(self):', 'context': '        self.line = breakpoint.line  # Starts at 1\n        self.enabled = breakpoint.enabled\n        self.hits = breakpoint.hits\n\n    def selectable(self):\n        return True\n\n    def rows(self, size, focus=False):\n        return 1\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 245, 'coloffset': 4, 'linematch': 'def selectable(self):', 'context': '                    nesting_level=self.nesting_level,\n                    id_path=self.id_path,\n                ))\n\n    def selectable(self):\n        return True\n\n    def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n        """"""\n        :param maxcol: the number of columns available to this widget', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 43, 'coloffset': 4, 'linematch': 'def selectable(self):', 'context': '        self.has_breakpoint = has_breakpoint\n        self.is_current = False\n        self.highlight = False\n\n    def selectable(self):\n        return True\n\n    def set_current(self, is_current):\n        self.is_current = is_current\n        self._invalidate()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 245, 'coloffset': 4, 'linematch': 'def selectable(self):', 'context': '                    nesting_level=self.nesting_level,\n                    id_path=self.id_path,\n                ))\n\n    def selectable(self):\n        return True\n\n    def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n        """"""\n        :param maxcol: the number of columns available to this widget', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 44, 'coloffset': 8, 'linematch': 'return True', 'context': '        self.is_current = False\n        self.highlight = False\n\n    def selectable(self):\n        return True\n\n    def set_current(self, is_current):\n        self.is_current = is_current\n        self._invalidate()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 197, 'coloffset': 8, 'linematch': 'return True', 'context': '        self.enabled = breakpoint.enabled\n        self.hits = breakpoint.hits\n\n    def selectable(self):\n        return True\n\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 246, 'coloffset': 8, 'linematch': 'return True', 'context': '                    id_path=self.id_path,\n                ))\n\n    def selectable(self):\n        return True\n\n    def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n        """"""\n        :param maxcol: the number of columns available to this widget\n        :return: list of string lines, including prefixes, wrapped to fit in', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5169', 'line': 44, 'description': ['            strifier = get_stringifier(iinfo)'], 'failure': []}]",33.33333333333333,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,set_current,46-48,"[{'lineno': 46, 'coloffset': 4, 'linematch': 'def set_current(self, is_current):', 'context': '\n    def selectable(self):\n        return True\n\n    def set_current(self, is_current):\n        self.is_current = is_current\n        self._invalidate()\n\n    def set_highlight(self, highlight):\n        self.highlight = highlight', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 46, 'coloffset': 4, 'linematch': 'def set_current(self, is_current):', 'context': '\n    def selectable(self):\n        return True\n\n    def set_current(self, is_current):\n        self.is_current = is_current\n        self._invalidate()\n\n    def set_highlight(self, highlight):\n        self.highlight = highlight', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 47, 'coloffset': 8, 'linematch': 'self.is_current = is_current', 'context': '    def selectable(self):\n        return True\n\n    def set_current(self, is_current):\n        self.is_current = is_current\n        self._invalidate()\n\n    def set_highlight(self, highlight):\n        self.highlight = highlight\n        self._invalidate()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 48, 'coloffset': 8, 'linematch': 'self._invalidate()', 'context': '        return True\n\n    def set_current(self, is_current):\n        self.is_current = is_current\n        self._invalidate()\n\n    def set_highlight(self, highlight):\n        self.highlight = highlight\n        self._invalidate()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5170', 'line': 46, 'description': ['            s = strifier(value)'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,set_breakpoint,54-56,"[{'lineno': 54, 'coloffset': 4, 'linematch': 'def set_breakpoint(self, has_breakpoint):', 'context': '    def set_highlight(self, highlight):\n        self.highlight = highlight\n        self._invalidate()\n\n    def set_breakpoint(self, has_breakpoint):\n        self.has_breakpoint = has_breakpoint\n        self._invalidate()\n\n    def rows(self, size, focus=False):\n        return 1', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 54, 'coloffset': 4, 'linematch': 'def set_breakpoint(self, has_breakpoint):', 'context': '    def set_highlight(self, highlight):\n        self.highlight = highlight\n        self._invalidate()\n\n    def set_breakpoint(self, has_breakpoint):\n        self.has_breakpoint = has_breakpoint\n        self._invalidate()\n\n    def rows(self, size, focus=False):\n        return 1', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 55, 'coloffset': 8, 'linematch': 'self.has_breakpoint = has_breakpoint', 'context': '        self.highlight = highlight\n        self._invalidate()\n\n    def set_breakpoint(self, has_breakpoint):\n        self.has_breakpoint = has_breakpoint\n        self._invalidate()\n\n    def rows(self, size, focus=False):\n        return 1\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 56, 'coloffset': 8, 'linematch': 'self._invalidate()', 'context': '        self._invalidate()\n\n    def set_breakpoint(self, has_breakpoint):\n        self.has_breakpoint = has_breakpoint\n        self._invalidate()\n\n    def rows(self, size, focus=False):\n        return 1\n\n    def render(self, size, focus=False):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3543', 'line': 55, 'description': ['        if cls is PudbCollection:'], 'failure': []}, {'name': 'Mutant #5172', 'line': 54, 'description': ['            paths_to_expand = set()'], 'failure': []}, {'name': 'Mutant #5173', 'line': 55, 'description': ['        self.paths_to_expand = paths_to_expand'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,format_source,359-367,"[{'lineno': 359, 'coloffset': 4, 'linematch': 'def format_source(debugger_ui, lines, breakpoints):', 'context': '\n            if self.current_line:\n                self.shipout_line()\n\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)\n        highlight(\n            """".join(line.expandtabs(TABSTOP) for line in lines),\n            PythonLexer(stripnl=False),', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 359, 'coloffset': 4, 'linematch': 'def format_source(debugger_ui, lines, breakpoints):', 'context': '\n            if self.current_line:\n                self.shipout_line()\n\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)\n        highlight(\n            """".join(line.expandtabs(TABSTOP) for line in lines),\n            PythonLexer(stripnl=False),', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 359, 'coloffset': 4, 'linematch': 'def format_source(debugger_ui, lines, breakpoints):', 'context': '\n            if self.current_line:\n                self.shipout_line()\n\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)\n        highlight(\n            """".join(line.expandtabs(TABSTOP) for line in lines),\n            PythonLexer(stripnl=False),', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 360, 'coloffset': 8, 'linematch': 'lineno_format = ""%%%dd "" % (len(str(len(lines))))', 'context': '            if self.current_line:\n                self.shipout_line()\n\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)\n        highlight(\n            """".join(line.expandtabs(TABSTOP) for line in lines),\n            PythonLexer(stripnl=False),\n            formatter,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 361, 'coloffset': 8, 'linematch': 'formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)', 'context': '                self.shipout_line()\n\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)\n        highlight(\n            """".join(line.expandtabs(TABSTOP) for line in lines),\n            PythonLexer(stripnl=False),\n            formatter,\n        )', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 362, 'coloffset': 8, 'linematch': 'highlight(', 'context': '\n    def format_source(debugger_ui, lines, breakpoints):\n        lineno_format = ""%%%dd "" % (len(str(len(lines))))\n        formatter = UrwidFormatter(debugger_ui, lineno_format, breakpoints)\n        highlight(\n            """".join(line.expandtabs(TABSTOP) for line in lines),\n            PythonLexer(stripnl=False),\n            formatter,\n        )\n        return formatter.result', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 367, 'coloffset': 8, 'linematch': 'return formatter.result', 'context': '            """".join(line.expandtabs(TABSTOP) for line in lines),\n            PythonLexer(stripnl=False),\n            formatter,\n        )\n        return formatter.result', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3756', 'line': 361, 'description': ['            if text_width(text[i]) > maxcol:'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -358,7 +358,7 @@\n         # encoding = urwid.util.detected_encoding\n \n         for i in range(len(text)):\n-            if text_width(text[i]) > maxcol:\n+            if text_width(text[i]) >= maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3757', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol+3] + ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3758', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol-4] + ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3759', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol-3] - ""...""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3760', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = text[i][:maxcol-3] + ""XX...XX""\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3761', 'line': 362, 'description': ['                text[i] = text[i][:maxcol-3] + ""...""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -359,7 +359,7 @@\n \n         for i in range(len(text)):\n             if text_width(text[i]) > maxcol:\n-                text[i] = text[i][:maxcol-3] + ""...""\n+                text[i] = None\n \n         return make_canvas(text, attr, maxcol, apfx+""value"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3762', 'line': 364, 'description': ['        return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -361,7 +361,7 @@\n             if text_width(text[i]) > maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n-        return make_canvas(text, attr, maxcol, apfx+""value"")\n+        return make_canvas(text, attr, maxcol, apfx-""value"")\n \n     def keypress(self, size, key):\n         return key\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3763', 'line': 364, 'description': ['        return make_canvas(text, attr, maxcol, apfx+""value"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -361,7 +361,7 @@\n             if text_width(text[i]) > maxcol:\n                 text[i] = text[i][:maxcol-3] + ""...""\n \n-        return make_canvas(text, attr, maxcol, apfx+""value"")\n+        return make_canvas(text, attr, maxcol, apfx+""XXvalueXX"")\n \n     def keypress(self, size, key):\n         return key\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5374', 'line': 359, 'description': ['            ""sequences"": 256,'], 'failure': []}, {'name': 'Mutant #5375', 'line': 359, 'description': ['            ""sequences"": 256,'], 'failure': []}, {'name': 'Mutant #5376', 'line': 360, 'description': ['            ""collections"": 256,'], 'failure': []}, {'name': 'Mutant #5377', 'line': 360, 'description': ['            ""collections"": 256,'], 'failure': []}, {'name': 'Mutant #5378', 'line': 361, 'description': ['            ""other"": 1280,'], 'failure': []}, {'name': 'Mutant #5379', 'line': 361, 'description': ['            ""other"": 1280,'], 'failure': []}, {'name': 'Mutant #5380', 'line': 364, 'description': ['        walked_total = (self.class_counts[""mappings""]'], 'failure': []}, {'name': 'Mutant #5381', 'line': 365, 'description': ['                        + self.class_counts[""sequences""]'], 'failure': []}, {'name': 'Mutant #5382', 'line': 365, 'description': ['                        + self.class_counts[""sequences""]'], 'failure': []}, {'name': 'Mutant #5383', 'line': 366, 'description': ['                        + self.class_counts[""collections""]'], 'failure': []}, {'name': 'Mutant #5384', 'line': 366, 'description': ['                        + self.class_counts[""collections""]'], 'failure': []}, {'name': 'Mutant #5385', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}, {'name': 'Mutant #5386', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}, {'name': 'Mutant #5387', 'line': 367, 'description': ['                        + self.class_counts[""other""])'], 'failure': []}]",63.63636363636363,['ANNOT001' 'FLV001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,shipout_line,331-342,"[{'lineno': 331, 'coloffset': 8, 'linematch': 'def shipout_line(self):', 'context': '\n            self.current_line += s\n            self.current_attr.append((attr, len(s)))\n\n        def shipout_line(self):\n            self.result.append(\n                SourceLine(\n                    self.debugger_ui,\n                    self.current_line,\n                    self.lineno_format % self.lineno,', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 331, 'coloffset': 8, 'linematch': 'def shipout_line(self):', 'context': '\n            self.current_line += s\n            self.current_attr.append((attr, len(s)))\n\n        def shipout_line(self):\n            self.result.append(\n                SourceLine(\n                    self.debugger_ui,\n                    self.current_line,\n                    self.lineno_format % self.lineno,', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 332, 'coloffset': 12, 'linematch': 'self.result.append(', 'context': '            self.current_line += s\n            self.current_attr.append((attr, len(s)))\n\n        def shipout_line(self):\n            self.result.append(\n                SourceLine(\n                    self.debugger_ui,\n                    self.current_line,\n                    self.lineno_format % self.lineno,\n                    self.current_attr,', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 340, 'coloffset': 12, 'linematch': 'self.current_line = """"', 'context': '                    self.lineno_format % self.lineno,\n                    self.current_attr,\n                    has_breakpoint=self.lineno in self.breakpoints,\n                ))\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 341, 'coloffset': 12, 'linematch': 'self.current_attr = []', 'context': '                    self.current_attr,\n                    has_breakpoint=self.lineno in self.breakpoints,\n                ))\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 342, 'coloffset': 12, 'linematch': 'self.lineno += 1', 'context': '                    has_breakpoint=self.lineno in self.breakpoints,\n                ))\n            self.current_line = """"\n            self.current_attr = []\n            self.lineno += 1\n\n        def format(self, tokensource, outfile):\n            for ttype, value in tokensource:\n                while True:\n                    newline_pos = value.find(""\\n"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3712', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix - self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3713', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label - "":"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3714', 'line': 331, 'description': ['                    text = [self.prefix + self.var_label + "":"",'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,7 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n+                    text = [self.prefix + self.var_label + ""XX:XX"",\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3715', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix-""  "" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3716', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""XX  XX"" + self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3717', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -329,7 +329,7 @@\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n                     text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                            self.prefix+""  "" - self.value_str]\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3718', 'line': 332, 'description': ['                            self.prefix+""  "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -328,8 +328,7 @@\n             if self.var_label is not None:\n                 if len(self._get_wrapped_lines(maxcol)) > 1:\n                     # label too long? generate separate value line\n-                    text = [self.prefix + self.var_label + "":"",\n-                            self.prefix+""  "" + self.value_str]\n+                    text = None\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3719', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx-""label"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3720', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""XXlabelXX"", lprefix+text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3721', 'line': 335, 'description': ['                        [(apfx+""label"", lprefix+text_width(self.var_label))],'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -332,7 +332,7 @@\n                             self.prefix+""  "" + self.value_str]\n \n                     attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n+                        [(apfx+""label"", lprefix-text_width(self.var_label))],\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3722', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx-""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3723', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""XXvalueXX"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3724', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix-3+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3725', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+4+text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3726', 'line': 336, 'description': ['                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -333,7 +333,7 @@\n \n                     attr = [\n                         [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n+                        [(apfx+""value"", lprefix+3-text_width(self.value_str))]\n                         ]\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3727', 'line': 337, 'description': ['                        ]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -331,10 +331,7 @@\n                     text = [self.prefix + self.var_label + "":"",\n                             self.prefix+""  "" + self.value_str]\n \n-                    attr = [\n-                        [(apfx+""label"", lprefix+text_width(self.var_label))],\n-                        [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n-                        ]\n+                    attr = None\n                 else:\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3728', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix - self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3729', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label - "": "" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3730', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + ""XX: XX"" + self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3731', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = [self.prefix + self.var_label + "": "" - self.value_str]\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3732', 'line': 339, 'description': ['                    text = [self.prefix + self.var_label + "": "" + self.value_str]'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -336,7 +336,7 @@\n                         [(apfx+""value"", lprefix+3+text_width(self.value_str))]\n                         ]\n                 else:\n-                    text = [self.prefix + self.var_label + "": "" + self.value_str]\n+                    text = None\n \n                     attr = [[\n                             (apfx+""label"", lprefix+text_width(self.var_label)+1),\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3733', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx-""label"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3734', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""XXlabelXX"", lprefix+text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3735', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix-text_width(self.var_label)+1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3736', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)-1),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3737', 'line': 342, 'description': ['                            (apfx+""label"", lprefix+text_width(self.var_label)+1),'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -339,7 +339,7 @@\n                     text = [self.prefix + self.var_label + "": "" + self.value_str]\n \n                     attr = [[\n-                            (apfx+""label"", lprefix+text_width(self.var_label)+1),\n+                            (apfx+""label"", lprefix+text_width(self.var_label)+2),\n                             (apfx+""value"", text_width(self.value_str)+1),\n                             ]]\n             else:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5343', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (2, 2, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5344', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 3, ""c"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5345', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""XXcXX"", ()):     ""tuple"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5346', 'line': 331, 'description': ['            (1, 2, ""c"", ()):     ""tuple"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -328,7 +328,7 @@\n             True: False,\n             frozenset(range(3)): ""abc"",\n             ():                  ""empty tuple"",\n-            (1, 2, ""c"", ()):     ""tuple"",\n+            (1, 2, ""c"", ()):     ""XXtupleXX"",\n         })\n         self.assert_class_counts_equal({""mappings"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5347', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5348', 'line': 333, 'description': ['        self.assert_class_counts_equal({""mappings"": 1})'], 'failure': []}, {'name': 'Mutant #5349', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            43, ""foo"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5350', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""XXfooXX"", None, False, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5351', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, True, (), (""a"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5352', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""XXaXX"", ""tuple"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5353', 'line': 337, 'description': ['            42, ""foo"", None, False, (), (""a"", ""tuple"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -334,7 +334,7 @@\n \n     def test_list(self):\n         self.assert_walks_contents([\n-            42, ""foo"", None, False, (), (""a"", ""tuple"")\n+            42, ""foo"", None, False, (), (""a"", ""XXtupleXX"")\n         ])\n         self.assert_class_counts_equal({""sequences"": 1})\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5354', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}, {'name': 'Mutant #5355', 'line': 339, 'description': ['        self.assert_class_counts_equal({""sequences"": 1})'], 'failure': []}]",10.256410256410255,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,make_hotkey_markup,74-83,"[{'lineno': 74, 'coloffset': 0, 'linematch': 'def make_hotkey_markup(s):', 'context': '            processed_cs,\n            maxcol=maxcol)\n\n\ndef make_hotkey_markup(s):\n    import re\n    match = re.match(r""^([^_]*)_(.)(.*)$"", s)\n    assert match is not None\n\n    return [', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 77, 'coloffset': 4, 'linematch': 'assert match is not None', 'context': '\ndef make_hotkey_markup(s):\n    import re\n    match = re.match(r""^([^_]*)_(.)(.*)$"", s)\n    assert match is not None\n\n    return [\n            (None, match.group(1)),\n            (""hotkey"", match.group(2)),\n            (None, match.group(3)),', 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 75, 'coloffset': 4, 'linematch': 'import re', 'context': '            maxcol=maxcol)\n\n\ndef make_hotkey_markup(s):\n    import re\n    match = re.match(r""^([^_]*)_(.)(.*)$"", s)\n    assert match is not None\n\n    return [\n            (None, match.group(1)),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 76, 'coloffset': 4, 'linematch': 'match = re.match(r""^([^_]*)_(.)(.*)$"", s)', 'context': '\n\ndef make_hotkey_markup(s):\n    import re\n    match = re.match(r""^([^_]*)_(.)(.*)$"", s)\n    assert match is not None\n\n    return [\n            (None, match.group(1)),\n            (""hotkey"", match.group(2)),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 77, 'coloffset': 4, 'linematch': 'assert match is not None', 'context': '\ndef make_hotkey_markup(s):\n    import re\n    match = re.match(r""^([^_]*)_(.)(.*)$"", s)\n    assert match is not None\n\n    return [\n            (None, match.group(1)),\n            (""hotkey"", match.group(2)),\n            (None, match.group(3)),', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 79, 'coloffset': 4, 'linematch': 'return [', 'context': '    import re\n    match = re.match(r""^([^_]*)_(.)(.*)$"", s)\n    assert match is not None\n\n    return [\n            (None, match.group(1)),\n            (""hotkey"", match.group(2)),\n            (None, match.group(3)),\n            ]\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3550', 'line': 76, 'description': ['            ui_log.error(""Object {l!r} appears to be a collection, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -73,7 +73,7 @@\n             for count, entry in enumerate(collection):\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a collection, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a collection, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3552', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -77,7 +77,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, collection):\n         return len(collection)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5187', 'line': 76, 'description': ['    @property'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -73,7 +73,6 @@\n     def bar(self):\n         return True\n \n-    @property\n     def red(self):\n         return ""red""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5189', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -77,7 +77,6 @@\n     def red(self):\n         return ""red""\n \n-    @classmethod\n     def blue(cls):\n         return ""blue""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'NOA001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/Assert'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 1, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,labelled_value,86-89,"[{'lineno': 86, 'coloffset': 0, 'linematch': 'def labelled_value(label, value):', 'context': '            (None, match.group(3)),\n            ]\n\n\ndef labelled_value(label, value):\n    return urwid.AttrMap(urwid.Text([\n        (""label"", label), str(value)]),\n        ""fixed value"", ""fixed value"")\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 87, 'coloffset': 4, 'linematch': 'return urwid.AttrMap(urwid.Text([', 'context': '            ]\n\n\ndef labelled_value(label, value):\n    return urwid.AttrMap(urwid.Text([\n        (""label"", label), str(value)]),\n        ""fixed value"", ""fixed value"")\n\n\ndef find_widget_in_container(container, widget) -> int:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,listen,118-119,"[{'lineno': 118, 'coloffset': 4, 'linematch': 'def listen(self, mask, handler):', 'context': '        urwid.WidgetWrap.__init__(self, w)\n        self.event_listeners = []\n        self.is_preemptive = is_preemptive\n\n    def listen(self, mask, handler):\n        self.event_listeners.append((mask, handler))\n\n    def keypress(self, size, key):\n        result = key\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 119, 'coloffset': 8, 'linematch': 'self.event_listeners.append((mask, handler))', 'context': '        self.event_listeners = []\n        self.is_preemptive = is_preemptive\n\n    def listen(self, mask, handler):\n        self.event_listeners.append((mask, handler))\n\n    def keypress(self, size, key):\n        result = key\n\n        if self.is_preemptive:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3564', 'line': 119, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5206', 'line': 118, 'description': ['        ""get"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -115,7 +115,7 @@\n         ""__len__"",\n         ""__reversed__"",\n         ""count"",\n-        ""get"",\n+        ""XXgetXX"",\n         ""index"",\n         ""items"",\n         ""keys"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5207', 'line': 119, 'description': ['        ""index"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -116,7 +116,7 @@\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n-        ""index"",\n+        ""XXindexXX"",\n         ""items"",\n         ""keys"",\n         ""values"",\n', 'type': 'failure', 'message': 'bad_survived'}]}]",33.33333333333333,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,cancel_search,242-244,"[{'lineno': 242, 'coloffset': 4, 'linematch': 'def cancel_search(self):', 'context': '        if self.highlight_line is not None:\n            self.highlight_line.set_highlight(False)\n            self.highlight_line = None\n\n    def cancel_search(self):\n        self.cancel_highlight()\n        self.hide_search_ui()\n\n    def hide_search_ui(self):\n        self.search_box = None', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 243, 'coloffset': 8, 'linematch': 'self.cancel_highlight()', 'context': '            self.highlight_line.set_highlight(False)\n            self.highlight_line = None\n\n    def cancel_search(self):\n        self.cancel_highlight()\n        self.hide_search_ui()\n\n    def hide_search_ui(self):\n        self.search_box = None\n        del self.ui.lhs_col.contents[0]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 244, 'coloffset': 8, 'linematch': 'self.hide_search_ui()', 'context': '            self.highlight_line = None\n\n    def cancel_search(self):\n        self.cancel_highlight()\n        self.hide_search_ui()\n\n    def hide_search_ui(self):\n        self.search_box = None\n        del self.ui.lhs_col.contents[0]\n        self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5282', 'line': 242, 'description': ['        if seen is not None:'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,hide_search_ui,246-249,"[{'lineno': 246, 'coloffset': 4, 'linematch': 'def hide_search_ui(self):', 'context': '    def cancel_search(self):\n        self.cancel_highlight()\n        self.hide_search_ui()\n\n    def hide_search_ui(self):\n        self.search_box = None\n        del self.ui.lhs_col.contents[0]\n        self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])\n\n    def open_search_ui(self):', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 247, 'coloffset': 8, 'linematch': 'self.search_box = None', 'context': '        self.cancel_highlight()\n        self.hide_search_ui()\n\n    def hide_search_ui(self):\n        self.search_box = None\n        del self.ui.lhs_col.contents[0]\n        self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])\n\n    def open_search_ui(self):\n        lhs_col = self.ui.lhs_col', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 248, 'coloffset': 8, 'linematch': 'del self.ui.lhs_col.contents[0]', 'context': '        self.hide_search_ui()\n\n    def hide_search_ui(self):\n        self.search_box = None\n        del self.ui.lhs_col.contents[0]\n        self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])\n\n    def open_search_ui(self):\n        lhs_col = self.ui.lhs_col\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 249, 'coloffset': 8, 'linematch': 'self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])', 'context': '\n    def hide_search_ui(self):\n        self.search_box = None\n        del self.ui.lhs_col.contents[0]\n        self.ui.lhs_col.set_focus(self.ui.lhs_col.widget_list[0])\n\n    def open_search_ui(self):\n        lhs_col = self.ui.lhs_col\n\n        if self.search_box is None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3621', 'line': 246, 'description': ['        return True'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -243,7 +243,7 @@\n                 ))\n \n     def selectable(self):\n-        return True\n+        return False\n \n     def _get_wrapped_lines(self, maxcol: int) -> List[str]:\n         """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5283', 'line': 249, 'description': ['        self.walker = BasicValueWalker(FrameVarInfoForTesting())'], 'failure': []}]",50.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,setlogfile,39-45,"[{'lineno': 39, 'coloffset': 0, 'linematch': 'def setlogfile(destfile):', 'context': 'def getlogfile():\n    return logfile[0]\n\n\ndef setlogfile(destfile):\n    logfile[0] = destfile\n    with open(destfile, ""a"") as openfile:\n        openfile.write(\n            ""\\n*** Pudb session error log started at {date} ***\\n"".format(\n                date=datetime.now()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 39, 'coloffset': 0, 'linematch': 'def setlogfile(destfile):', 'context': 'def getlogfile():\n    return logfile[0]\n\n\ndef setlogfile(destfile):\n    logfile[0] = destfile\n    with open(destfile, ""a"") as openfile:\n        openfile.write(\n            ""\\n*** Pudb session error log started at {date} ***\\n"".format(\n                date=datetime.now()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 40, 'coloffset': 4, 'linematch': 'logfile[0] = destfile', 'context': '    return logfile[0]\n\n\ndef setlogfile(destfile):\n    logfile[0] = destfile\n    with open(destfile, ""a"") as openfile:\n        openfile.write(\n            ""\\n*** Pudb session error log started at {date} ***\\n"".format(\n                date=datetime.now()\n            ))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 41, 'coloffset': 4, 'linematch': 'with open(destfile, ""a"") as openfile:', 'context': '\n\ndef setlogfile(destfile):\n    logfile[0] = destfile\n    with open(destfile, ""a"") as openfile:\n        openfile.write(\n            ""\\n*** Pudb session error log started at {date} ***\\n"".format(\n                date=datetime.now()\n            ))\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3538', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = 2\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3539', 'line': 43, 'description': ['    HAVE_NUMPY = 1'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -40,7 +40,7 @@\n \n try:\n     import numpy\n-    HAVE_NUMPY = 1\n+    HAVE_NUMPY = None\n except ImportError:\n     HAVE_NUMPY = 0\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3540', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = 1\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3541', 'line': 45, 'description': ['    HAVE_NUMPY = 0'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -42,7 +42,7 @@\n     import numpy\n     HAVE_NUMPY = 1\n except ImportError:\n-    HAVE_NUMPY = 0\n+    HAVE_NUMPY = None\n \n # }}}\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5166', 'line': 39, 'description': ['            ] + numpy_values:'], 'failure': []}, {'name': 'Mutant #5167', 'line': 41, 'description': ['            iinfo = InspectInfo()'], 'failure': []}, {'name': 'Mutant #5168', 'line': 42, 'description': ['            iinfo.display_type = display_type'], 'failure': []}, {'name': 'Mutant #5169', 'line': 44, 'description': ['            strifier = get_stringifier(iinfo)'], 'failure': []}]",50.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,_init_loggers,73-90,"[{'lineno': 73, 'coloffset': 0, 'linematch': 'def _init_loggers():', 'context': '        finally:\n            self.release()\n\n\ndef _init_loggers():\n    ui_handler = TerminalOrStreamHandler()\n    ui_formatter = logging.Formatter(\n        fmt=""*** Pudb UI Exception Encountered: %(message)s ***\\n""\n    )\n    ui_handler.setFormatter(ui_formatter)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 73, 'coloffset': 0, 'linematch': 'def _init_loggers():', 'context': '        finally:\n            self.release()\n\n\ndef _init_loggers():\n    ui_handler = TerminalOrStreamHandler()\n    ui_formatter = logging.Formatter(\n        fmt=""*** Pudb UI Exception Encountered: %(message)s ***\\n""\n    )\n    ui_handler.setFormatter(ui_formatter)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 74, 'coloffset': 4, 'linematch': 'ui_handler = TerminalOrStreamHandler()', 'context': '            self.release()\n\n\ndef _init_loggers():\n    ui_handler = TerminalOrStreamHandler()\n    ui_formatter = logging.Formatter(\n        fmt=""*** Pudb UI Exception Encountered: %(message)s ***\\n""\n    )\n    ui_handler.setFormatter(ui_formatter)\n    ui_log = logging.getLogger(""ui"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 75, 'coloffset': 4, 'linematch': 'ui_formatter = logging.Formatter(', 'context': '\n\ndef _init_loggers():\n    ui_handler = TerminalOrStreamHandler()\n    ui_formatter = logging.Formatter(\n        fmt=""*** Pudb UI Exception Encountered: %(message)s ***\\n""\n    )\n    ui_handler.setFormatter(ui_formatter)\n    ui_log = logging.getLogger(""ui"")\n    ui_log.addHandler(ui_handler)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 78, 'coloffset': 4, 'linematch': 'ui_handler.setFormatter(ui_formatter)', 'context': '    ui_handler = TerminalOrStreamHandler()\n    ui_formatter = logging.Formatter(\n        fmt=""*** Pudb UI Exception Encountered: %(message)s ***\\n""\n    )\n    ui_handler.setFormatter(ui_formatter)\n    ui_log = logging.getLogger(""ui"")\n    ui_log.addHandler(ui_handler)\n\n    settings_handler = TerminalOrStreamHandler()\n    settings_formatter = logging.Formatter(', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 79, 'coloffset': 4, 'linematch': 'ui_log = logging.getLogger(""ui"")', 'context': '    ui_formatter = logging.Formatter(\n        fmt=""*** Pudb UI Exception Encountered: %(message)s ***\\n""\n    )\n    ui_handler.setFormatter(ui_formatter)\n    ui_log = logging.getLogger(""ui"")\n    ui_log.addHandler(ui_handler)\n\n    settings_handler = TerminalOrStreamHandler()\n    settings_formatter = logging.Formatter(\n        fmt=""*** Pudb Settings Exception Encountered: %(message)s ***\\n""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 80, 'coloffset': 4, 'linematch': 'ui_log.addHandler(ui_handler)', 'context': '        fmt=""*** Pudb UI Exception Encountered: %(message)s ***\\n""\n    )\n    ui_handler.setFormatter(ui_formatter)\n    ui_log = logging.getLogger(""ui"")\n    ui_log.addHandler(ui_handler)\n\n    settings_handler = TerminalOrStreamHandler()\n    settings_formatter = logging.Formatter(\n        fmt=""*** Pudb Settings Exception Encountered: %(message)s ***\\n""\n    )', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 82, 'coloffset': 4, 'linematch': 'settings_handler = TerminalOrStreamHandler()', 'context': '    ui_handler.setFormatter(ui_formatter)\n    ui_log = logging.getLogger(""ui"")\n    ui_log.addHandler(ui_handler)\n\n    settings_handler = TerminalOrStreamHandler()\n    settings_formatter = logging.Formatter(\n        fmt=""*** Pudb Settings Exception Encountered: %(message)s ***\\n""\n    )\n    settings_handler.setFormatter(settings_formatter)\n    settings_log = logging.getLogger(""settings"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 83, 'coloffset': 4, 'linematch': 'settings_formatter = logging.Formatter(', 'context': '    ui_log = logging.getLogger(""ui"")\n    ui_log.addHandler(ui_handler)\n\n    settings_handler = TerminalOrStreamHandler()\n    settings_formatter = logging.Formatter(\n        fmt=""*** Pudb Settings Exception Encountered: %(message)s ***\\n""\n    )\n    settings_handler.setFormatter(settings_formatter)\n    settings_log = logging.getLogger(""settings"")\n    settings_log.addHandler(settings_handler)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 86, 'coloffset': 4, 'linematch': 'settings_handler.setFormatter(settings_formatter)', 'context': '    settings_handler = TerminalOrStreamHandler()\n    settings_formatter = logging.Formatter(\n        fmt=""*** Pudb Settings Exception Encountered: %(message)s ***\\n""\n    )\n    settings_handler.setFormatter(settings_formatter)\n    settings_log = logging.getLogger(""settings"")\n    settings_log.addHandler(settings_handler)\n\n    return ui_log, settings_log\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 87, 'coloffset': 4, 'linematch': 'settings_log = logging.getLogger(""settings"")', 'context': '    settings_formatter = logging.Formatter(\n        fmt=""*** Pudb Settings Exception Encountered: %(message)s ***\\n""\n    )\n    settings_handler.setFormatter(settings_formatter)\n    settings_log = logging.getLogger(""settings"")\n    settings_log.addHandler(settings_handler)\n\n    return ui_log, settings_log\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 88, 'coloffset': 4, 'linematch': 'settings_log.addHandler(settings_handler)', 'context': '        fmt=""*** Pudb Settings Exception Encountered: %(message)s ***\\n""\n    )\n    settings_handler.setFormatter(settings_formatter)\n    settings_log = logging.getLogger(""settings"")\n    settings_log.addHandler(settings_handler)\n\n    return ui_log, settings_log\n\n\nui_log, settings_log = _init_loggers()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 90, 'coloffset': 4, 'linematch': 'return ui_log, settings_log', 'context': '    settings_handler.setFormatter(settings_formatter)\n    settings_log = logging.getLogger(""settings"")\n    settings_log.addHandler(settings_handler)\n\n    return ui_log, settings_log\n\n\nui_log, settings_log = _init_loggers()\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3549', 'line': 74, 'description': ['                yield None, entry, f""[{count:d}]""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -71,7 +71,7 @@\n         assert isinstance(collection, cls)\n         try:\n             for count, entry in enumerate(collection):\n-                yield None, entry, f""[{count:d}]""\n+                yield None, entry, f""XX[{count:d}]XX""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3550', 'line': 76, 'description': ['            ui_log.error(""Object {l!r} appears to be a collection, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -73,7 +73,7 @@\n             for count, entry in enumerate(collection):\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a collection, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a collection, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3551', 'line': 77, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -74,7 +74,7 @@\n                 yield None, entry, f""[{count:d}]""\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a collection, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3552', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -77,7 +77,6 @@\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n-    @classmethod\n     def length(cls, collection):\n         return len(collection)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3553', 'line': 86, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3554', 'line': 88, 'description': ['        if cls is PudbSequence:'], 'failure': []}, {'name': 'Mutant #5186', 'line': 74, 'description': ['        return True'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -71,7 +71,7 @@\n         self.x = 42\n \n     def bar(self):\n-        return True\n+        return False\n \n     @property\n     def red(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5187', 'line': 76, 'description': ['    @property'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -73,7 +73,6 @@\n     def bar(self):\n         return True\n \n-    @property\n     def red(self):\n         return ""red""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5188', 'line': 78, 'description': ['        return ""red""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -75,7 +75,7 @@\n \n     @property\n     def red(self):\n-        return ""red""\n+        return ""XXredXX""\n \n     @classmethod\n     def blue(cls):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5189', 'line': 80, 'description': ['    @classmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -77,7 +77,6 @@\n     def red(self):\n         return ""red""\n \n-    @classmethod\n     def blue(cls):\n         return ""blue""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5190', 'line': 82, 'description': ['        return ""blue""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -79,7 +79,7 @@\n \n     @classmethod\n     def blue(cls):\n-        return ""blue""\n+        return ""XXblueXX""\n \n     @staticmethod\n     def green():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5191', 'line': 84, 'description': ['    @staticmethod'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -81,7 +81,6 @@\n     def blue(cls):\n         return ""blue""\n \n-    @staticmethod\n     def green():\n         return ""green""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5192', 'line': 86, 'description': ['        return ""green""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -83,7 +83,7 @@\n \n     @staticmethod\n     def green():\n-        return ""green""\n+        return ""XXgreenXX""\n \n     def _private(self):\n         return ""shh""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5193', 'line': 89, 'description': ['        return ""shh""'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -86,7 +86,7 @@\n         return ""green""\n \n     def _private(self):\n-        return ""shh""\n+        return ""XXshhXX""\n \n     def __magicsomething__(self):\n         return ""amazing""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",14.285714285714285,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,get_executable_lines_for_codes_recursive,117-131,"[{'lineno': 117, 'coloffset': 0, 'linematch': 'def get_executable_lines_for_codes_recursive(codes):', 'context': '            lineno += line_incr\n            yield lineno\n\n\ndef get_executable_lines_for_codes_recursive(codes):\n    codes = codes[:]\n\n    from types import CodeType\n\n    execable_lines = set()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 117, 'coloffset': 0, 'linematch': 'def get_executable_lines_for_codes_recursive(codes):', 'context': '            lineno += line_incr\n            yield lineno\n\n\ndef get_executable_lines_for_codes_recursive(codes):\n    codes = codes[:]\n\n    from types import CodeType\n\n    execable_lines = set()', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 117, 'coloffset': 0, 'linematch': 'def get_executable_lines_for_codes_recursive(codes):', 'context': '            lineno += line_incr\n            yield lineno\n\n\ndef get_executable_lines_for_codes_recursive(codes):\n    codes = codes[:]\n\n    from types import CodeType\n\n    execable_lines = set()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 118, 'coloffset': 4, 'linematch': 'codes = codes[:]', 'context': '            yield lineno\n\n\ndef get_executable_lines_for_codes_recursive(codes):\n    codes = codes[:]\n\n    from types import CodeType\n\n    execable_lines = set()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 120, 'coloffset': 4, 'linematch': 'from types import CodeType', 'context': '\ndef get_executable_lines_for_codes_recursive(codes):\n    codes = codes[:]\n\n    from types import CodeType\n\n    execable_lines = set()\n\n    while codes:\n        code = codes.pop()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 122, 'coloffset': 4, 'linematch': 'execable_lines = set()', 'context': '    codes = codes[:]\n\n    from types import CodeType\n\n    execable_lines = set()\n\n    while codes:\n        code = codes.pop()\n        execable_lines |= set(generate_executable_lines_for_code(code))\n        codes.extend(const', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 124, 'coloffset': 4, 'linematch': 'while codes:', 'context': '    from types import CodeType\n\n    execable_lines = set()\n\n    while codes:\n        code = codes.pop()\n        execable_lines |= set(generate_executable_lines_for_code(code))\n        codes.extend(const\n                for const in code.co_consts\n                if isinstance(const, CodeType))', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 131, 'coloffset': 4, 'linematch': 'return execable_lines', 'context': '        codes.extend(const\n                for const in code.co_consts\n                if isinstance(const, CodeType))\n\n    return execable_lines\n\n\ndef get_executable_lines_for_file(filename):\n    # inspired by rpdb2\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3564', 'line': 119, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #3565', 'line': 121, 'description': ['        if cls is PudbMapping:'], 'failure': []}, {'name': 'Mutant #3566', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3567', 'line': 124, 'description': ['                    any(""__getitem__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3568', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3569', 'line': 125, 'description': ['                    any(""__iter__"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3570', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #3571', 'line': 126, 'description': ['                    any(""keys"" in b.__dict__ for b in c.__mro__),'], 'failure': []}, {'name': 'Mutant #5205', 'line': 117, 'description': ['        ""count"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -114,7 +114,7 @@\n         ""__iter__"",\n         ""__len__"",\n         ""__reversed__"",\n-        ""count"",\n+        ""XXcountXX"",\n         ""get"",\n         ""index"",\n         ""items"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5206', 'line': 118, 'description': ['        ""get"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -115,7 +115,7 @@\n         ""__len__"",\n         ""__reversed__"",\n         ""count"",\n-        ""get"",\n+        ""XXgetXX"",\n         ""index"",\n         ""items"",\n         ""keys"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5207', 'line': 119, 'description': ['        ""index"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -116,7 +116,7 @@\n         ""__reversed__"",\n         ""count"",\n         ""get"",\n-        ""index"",\n+        ""XXindexXX"",\n         ""items"",\n         ""keys"",\n         ""values"",\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5208', 'line': 120, 'description': ['        ""items"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -117,7 +117,7 @@\n         ""count"",\n         ""get"",\n         ""index"",\n-        ""items"",\n+        ""XXitemsXX"",\n         ""keys"",\n         ""values"",\n     }\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5209', 'line': 121, 'description': ['        ""keys"",'], 'failure': []}, {'name': 'Mutant #5210', 'line': 122, 'description': ['        ""values"",'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -119,7 +119,7 @@\n         ""index"",\n         ""items"",\n         ""keys"",\n-        ""values"",\n+        ""XXvaluesXX"",\n     }\n \n     # Deliberately starting from 0\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5211', 'line': 123, 'description': ['    }'], 'failure': []}, {'name': 'Mutant #5212', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5213', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': []}, {'name': 'Mutant #5214', 'line': 126, 'description': ['    for r in range(0, len(methods) + 1):'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -123,7 +123,7 @@\n     }\n \n     # Deliberately starting from 0\n-    for r in range(0, len(methods) + 1):\n+    for r in range(0, len(methods) + 2):\n         for selected_methods in sorted(\n                 map(sorted, itertools.combinations(methods, r))):\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",66.66666666666666,['ANNOT001' 'FLV001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,get_executable_lines_for_file,134-140,"[{'lineno': 134, 'coloffset': 0, 'linematch': 'def get_executable_lines_for_file(filename):', 'context': '\n    return execable_lines\n\n\ndef get_executable_lines_for_file(filename):\n    # inspired by rpdb2\n\n    from linecache import getlines\n    codes = [compile("""".join(getlines(filename)), filename, ""exec"", dont_inherit=1)]\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 134, 'coloffset': 0, 'linematch': 'def get_executable_lines_for_file(filename):', 'context': '\n    return execable_lines\n\n\ndef get_executable_lines_for_file(filename):\n    # inspired by rpdb2\n\n    from linecache import getlines\n    codes = [compile("""".join(getlines(filename)), filename, ""exec"", dont_inherit=1)]\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 137, 'coloffset': 4, 'linematch': 'from linecache import getlines', 'context': '\ndef get_executable_lines_for_file(filename):\n    # inspired by rpdb2\n\n    from linecache import getlines\n    codes = [compile("""".join(getlines(filename)), filename, ""exec"", dont_inherit=1)]\n\n    return get_executable_lines_for_codes_recursive(codes)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 138, 'coloffset': 4, 'linematch': 'codes = [compile("""".join(getlines(filename)), filename, ""exec"", dont_inherit=1)]', 'context': 'def get_executable_lines_for_file(filename):\n    # inspired by rpdb2\n\n    from linecache import getlines\n    codes = [compile("""".join(getlines(filename)), filename, ""exec"", dont_inherit=1)]\n\n    return get_executable_lines_for_codes_recursive(codes)\n\n\ndef get_breakpoint_invalid_reason(filename, lineno):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 140, 'coloffset': 4, 'linematch': 'return get_executable_lines_for_codes_recursive(codes)', 'context': '\n    from linecache import getlines\n    codes = [compile("""".join(getlines(filename)), filename, ""exec"", dont_inherit=1)]\n\n    return get_executable_lines_for_codes_recursive(codes)\n\n\ndef get_breakpoint_invalid_reason(filename, lineno):\n    # simple logic stolen from pdb\n    import linecache', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3574', 'line': 139, 'description': ['    @classmethod'], 'failure': []}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5219', 'line': 140, 'description': ['                func = method_factory(method)'], 'failure': []}]",50.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,get_str_safe_types,385-393,"[{'lineno': 385, 'coloffset': 0, 'linematch': 'def get_str_safe_types():', 'context': '\n\n# {{{ safe types\n\ndef get_str_safe_types():\n    import types\n\n    return tuple(getattr(types, s) for s in\n        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 385, 'coloffset': 0, 'linematch': 'def get_str_safe_types():', 'context': '\n\n# {{{ safe types\n\ndef get_str_safe_types():\n    import types\n\n    return tuple(getattr(types, s) for s in\n        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""', 'pattern': './/FunctionDef[body//comprehension/target/Name]', 'check_id': 'FLV001', 'check_name': 'function-uses-loop-variable'}, {'lineno': 385, 'coloffset': 0, 'linematch': 'def get_str_safe_types():', 'context': '\n\n# {{{ safe types\n\ndef get_str_safe_types():\n    import types\n\n    return tuple(getattr(types, s) for s in\n        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 386, 'coloffset': 4, 'linematch': 'import types', 'context': '\n# {{{ safe types\n\ndef get_str_safe_types():\n    import types\n\n    return tuple(getattr(types, s) for s in\n        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n        ""LambdaType MemberDescriptorType MethodType ModuleType ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 388, 'coloffset': 4, 'linematch': 'return tuple(getattr(types, s) for s in', 'context': '\ndef get_str_safe_types():\n    import types\n\n    return tuple(getattr(types, s) for s in\n        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n        ""LambdaType MemberDescriptorType MethodType ModuleType ""\n        ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n        if hasattr(types, s)) + (WatchEvalError,)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3765', 'line': 389, 'description': ['        ""BuiltinFunctionType BuiltinMethodType  ClassType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -386,7 +386,7 @@\n     import types\n \n     return tuple(getattr(types, s) for s in\n-        ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n+        ""XXBuiltinFunctionType BuiltinMethodType  ClassType XX""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3766', 'line': 390, 'description': ['        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -387,7 +387,7 @@\n \n     return tuple(getattr(types, s) for s in\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n-        ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n+        ""XXCodeType FileType FrameType FunctionType GetSetDescriptorType XX""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3767', 'line': 391, 'description': ['        ""LambdaType MemberDescriptorType MethodType ModuleType ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -388,7 +388,7 @@\n     return tuple(getattr(types, s) for s in\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n-        ""LambdaType MemberDescriptorType MethodType ModuleType ""\n+        ""XXLambdaType MemberDescriptorType MethodType ModuleType XX""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3768', 'line': 392, 'description': ['        ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -389,7 +389,7 @@\n         ""BuiltinFunctionType BuiltinMethodType  ClassType ""\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n-        ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n+        ""XXSliceType TypeType TracebackType UnboundMethodType XRangeTypeXX"".split()\n         if hasattr(types, s)) + (WatchEvalError,)\n \n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3769', 'line': 393, 'description': ['        if hasattr(types, s)) + (WatchEvalError,)'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -390,7 +390,7 @@\n         ""CodeType FileType FrameType FunctionType GetSetDescriptorType ""\n         ""LambdaType MemberDescriptorType MethodType ModuleType ""\n         ""SliceType TypeType TracebackType UnboundMethodType XRangeType"".split()\n-        if hasattr(types, s)) + (WatchEvalError,)\n+        if hasattr(types, s)) - (WatchEvalError,)\n \n \n STR_SAFE_TYPES = get_str_safe_types()\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5388', 'line': 388, 'description': ['        self.assert_walks_contents(Reasonable, label=""Reasonable"")'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -385,7 +385,7 @@\n         """"""\n         Are the class objects themselves expandable?\n         """"""\n-        self.assert_walks_contents(Reasonable, label=""Reasonable"")\n+        self.assert_walks_contents(Reasonable, label=""XXReasonableXX"")\n         self.assert_class_counts_equal({""other"": 1})\n \n     def test_maybe_unreasonable_classes(self):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5389', 'line': 389, 'description': ['        self.assert_class_counts_equal({""other"": 1})'], 'failure': []}, {'name': 'Mutant #5390', 'line': 389, 'description': ['        self.assert_class_counts_equal({""other"": 1})'], 'failure': []}]",25.0,['ANNOT001' 'FLV001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[body//comprehension/target/Name]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 1, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,id_stringifier,449-450,"[{'lineno': 449, 'coloffset': 0, 'linematch': 'def id_stringifier(obj):', 'context': 'def type_stringifier(value):\n    return str(type(value).__name__)\n\n\ndef id_stringifier(obj):\n    return ""{id:#x}"".format(id=id(obj))\n\n\ndef error_stringifier(_):\n    return ""ERROR: Invalid custom stringifier file.""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 449, 'coloffset': 0, 'linematch': 'def id_stringifier(obj):', 'context': 'def type_stringifier(value):\n    return str(type(value).__name__)\n\n\ndef id_stringifier(obj):\n    return ""{id:#x}"".format(id=id(obj))\n\n\ndef error_stringifier(_):\n    return ""ERROR: Invalid custom stringifier file.""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 450, 'coloffset': 4, 'linematch': 'return ""{id:#x}"".format(id=id(obj))', 'context': '    return str(type(value).__name__)\n\n\ndef id_stringifier(obj):\n    return ""{id:#x}"".format(id=id(obj))\n\n\ndef error_stringifier(_):\n    return ""ERROR: Invalid custom stringifier file.""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3789', 'line': 450, 'description': ['    return ""{id:#x}"".format(id=id(obj))'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -447,7 +447,7 @@\n \n \n def id_stringifier(obj):\n-    return ""{id:#x}"".format(id=id(obj))\n+    return ""XX{id:#x}XX"".format(id=id(obj))\n \n \n def error_stringifier(_):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,error_stringifier,453-454,"[{'lineno': 453, 'coloffset': 0, 'linematch': 'def error_stringifier(_):', 'context': 'def id_stringifier(obj):\n    return ""{id:#x}"".format(id=id(obj))\n\n\ndef error_stringifier(_):\n    return ""ERROR: Invalid custom stringifier file.""\n\n\ncustom_stringifier_dict = {}\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 453, 'coloffset': 0, 'linematch': 'def error_stringifier(_):', 'context': 'def id_stringifier(obj):\n    return ""{id:#x}"".format(id=id(obj))\n\n\ndef error_stringifier(_):\n    return ""ERROR: Invalid custom stringifier file.""\n\n\ncustom_stringifier_dict = {}\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 454, 'coloffset': 4, 'linematch': 'return ""ERROR: Invalid custom stringifier file.""', 'context': '    return ""{id:#x}"".format(id=id(obj))\n\n\ndef error_stringifier(_):\n    return ""ERROR: Invalid custom stringifier file.""\n\n\ncustom_stringifier_dict = {}\n\nSTRINGIFIERS = {', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3790', 'line': 454, 'description': ['    return ""ERROR: Invalid custom stringifier file.""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -451,7 +451,7 @@\n \n \n def error_stringifier(_):\n-    return ""ERROR: Invalid custom stringifier file.""\n+    return ""XXERROR: Invalid custom stringifier file.XX""\n \n \n custom_stringifier_dict = {}\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,_safe_key_repr,133-137,"[{'lineno': 133, 'coloffset': 4, 'linematch': 'def _safe_key_repr(cls, key):', 'context': '                pass\n        return NotImplemented\n\n    @classmethod\n    def _safe_key_repr(cls, key):\n        try:\n            return repr(key)\n        except Exception:\n            return f""!! repr error on key with id: {id(key):#x} !!""\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 133, 'coloffset': 4, 'linematch': 'def _safe_key_repr(cls, key):', 'context': '                pass\n        return NotImplemented\n\n    @classmethod\n    def _safe_key_repr(cls, key):\n        try:\n            return repr(key)\n        except Exception:\n            return f""!! repr error on key with id: {id(key):#x} !!""\n', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 134, 'coloffset': 8, 'linematch': 'try:', 'context': '        return NotImplemented\n\n    @classmethod\n    def _safe_key_repr(cls, key):\n        try:\n            return repr(key)\n        except Exception:\n            return f""!! repr error on key with id: {id(key):#x} !!""\n\n    @classmethod', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3573', 'line': 137, 'description': ['            return f""!! repr error on key with id: {id(key):#x} !!""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -134,7 +134,7 @@\n         try:\n             return repr(key)\n         except Exception:\n-            return f""!! repr error on key with id: {id(key):#x} !!""\n+            return f""XX!! repr error on key with id: {id(key):#x} !!XX""\n \n     @classmethod\n     def entries(cls, mapping, label: str):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5216', 'line': 134, 'description': ['                @classmethod'], 'failure': []}, {'name': 'Mutant #5217', 'line': 136, 'description': ['                    return ""ContainerlikeClass:{}"".format('], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -133,7 +133,7 @@\n \n                 @classmethod\n                 def name(cls):\n-                    return ""ContainerlikeClass:{}"".format(\n+                    return ""XXContainerlikeClass:{}XX"".format(\n                             "":"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5218', 'line': 137, 'description': ['                            "":"".join(selected_methods))  # noqa: B023'], 'failure': [{'inner': '--- test/test_var_view.py\n+++ test/test_var_view.py\n@@ -134,7 +134,7 @@\n                 @classmethod\n                 def name(cls):\n                     return ""ContainerlikeClass:{}"".format(\n-                            "":"".join(selected_methods))  # noqa: B023\n+                            ""XX:XX"".join(selected_methods))  # noqa: B023\n \n             for method in selected_methods:\n                 func = method_factory(method)\n', 'type': 'failure', 'message': 'bad_survived'}]}]",25.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
pudb_output.json,entries,140-153,"[{'lineno': 140, 'coloffset': 4, 'linematch': 'def entries(cls, mapping, label: str):', 'context': '        except Exception:\n            return f""!! repr error on key with id: {id(key):#x} !!""\n\n    @classmethod\n    def entries(cls, mapping, label: str):\n        """"""\n        :yield: ``(label, entry, id_path_ext)`` tuples for each entry in the\n        mapping.\n        """"""\n        assert isinstance(mapping, cls)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 147, 'coloffset': 23, 'linematch': 'for key in mapping.keys():', 'context': '        mapping.\n        """"""\n        assert isinstance(mapping, cls)\n        try:\n            for key in mapping.keys():\n                key_repr = cls._safe_key_repr(key)\n                yield (key_repr, mapping[key], f""[{key_repr}]"")\n        except Exception as error:\n            ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                         ""not behave like one: {m}"".format(', 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 140, 'coloffset': 4, 'linematch': 'def entries(cls, mapping, label: str):', 'context': '        except Exception:\n            return f""!! repr error on key with id: {id(key):#x} !!""\n\n    @classmethod\n    def entries(cls, mapping, label: str):\n        """"""\n        :yield: ``(label, entry, id_path_ext)`` tuples for each entry in the\n        mapping.\n        """"""\n        assert isinstance(mapping, cls)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 145, 'coloffset': 8, 'linematch': 'assert isinstance(mapping, cls)', 'context': '        """"""\n        :yield: ``(label, entry, id_path_ext)`` tuples for each entry in the\n        mapping.\n        """"""\n        assert isinstance(mapping, cls)\n        try:\n            for key in mapping.keys():\n                key_repr = cls._safe_key_repr(key)\n                yield (key_repr, mapping[key], f""[{key_repr}]"")\n        except Exception as error:', 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 141, 'coloffset': 8, 'linematch': '""""""', 'context': '            return f""!! repr error on key with id: {id(key):#x} !!""\n\n    @classmethod\n    def entries(cls, mapping, label: str):\n        """"""\n        :yield: ``(label, entry, id_path_ext)`` tuples for each entry in the\n        mapping.\n        """"""\n        assert isinstance(mapping, cls)\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 145, 'coloffset': 8, 'linematch': 'assert isinstance(mapping, cls)', 'context': '        """"""\n        :yield: ``(label, entry, id_path_ext)`` tuples for each entry in the\n        mapping.\n        """"""\n        assert isinstance(mapping, cls)\n        try:\n            for key in mapping.keys():\n                key_repr = cls._safe_key_repr(key)\n                yield (key_repr, mapping[key], f""[{key_repr}]"")\n        except Exception as error:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 146, 'coloffset': 8, 'linematch': 'try:', 'context': '        :yield: ``(label, entry, id_path_ext)`` tuples for each entry in the\n        mapping.\n        """"""\n        assert isinstance(mapping, cls)\n        try:\n            for key in mapping.keys():\n                key_repr = cls._safe_key_repr(key)\n                yield (key_repr, mapping[key], f""[{key_repr}]"")\n        except Exception as error:\n            ui_log.error(""Object {l!r} appears to be a mapping, but does ""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #3575', 'line': 148, 'description': ['                key_repr = cls._safe_key_repr(key)'], 'failure': []}, {'name': 'Mutant #3576', 'line': 149, 'description': ['                yield (key_repr, mapping[key], f""[{key_repr}]"")'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -146,7 +146,7 @@\n         try:\n             for key in mapping.keys():\n                 key_repr = cls._safe_key_repr(key)\n-                yield (key_repr, mapping[key], f""[{key_repr}]"")\n+                yield (key_repr, mapping[key], f""XX[{key_repr}]XX"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n                          ""not behave like one: {m}"".format(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3577', 'line': 151, 'description': ['            ui_log.error(""Object {l!r} appears to be a mapping, but does ""'], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -148,7 +148,7 @@\n                 key_repr = cls._safe_key_repr(key)\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n-            ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n+            ui_log.error(""XXObject {l!r} appears to be a mapping, but does XX""\n                          ""not behave like one: {m}"".format(\n                              l=label, m=error))\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #3578', 'line': 152, 'description': ['                         ""not behave like one: {m}"".format('], 'failure': [{'inner': '--- pudb/var_view.py\n+++ pudb/var_view.py\n@@ -149,7 +149,7 @@\n                 yield (key_repr, mapping[key], f""[{key_repr}]"")\n         except Exception as error:\n             ui_log.error(""Object {l!r} appears to be a mapping, but does ""\n-                         ""not behave like one: {m}"".format(\n+                         ""XXnot behave like one: {m}XX"".format(\n                              l=label, m=error))\n \n     @classmethod\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #5219', 'line': 140, 'description': ['                func = method_factory(method)'], 'failure': []}, {'name': 'Mutant #5220', 'line': 151, 'description': ['    EMPTY_ITEM = (ValueWalker.EMPTY_LABEL, None)'], 'failure': []}, {'name': 'Mutant #5221', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}, {'name': 'Mutant #5222', 'line': 152, 'description': ['    MOD_STR = "" [all+()]""'], 'failure': []}]",62.5,['ANNOT001' 'KF001' 'C002' 'NOA001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//Call/func/Attribute[@attr=""keys""]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/Assert'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 1, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 1, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pudb_output.json,length,156-157,"[{'lineno': 156, 'coloffset': 4, 'linematch': 'def length(cls, mapping):', 'context': '                         ""not behave like one: {m}"".format(\n                             l=label, m=error))\n\n    @classmethod\n    def length(cls, mapping):\n        return len(mapping.keys())\n\n\n# Order is important here- A mapping without keys could be viewed as a\n# sequence, and they\'re both collections.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 157, 'coloffset': 19, 'linematch': 'return len(mapping.keys())', 'context': ""                             l=label, m=error))\n\n    @classmethod\n    def length(cls, mapping):\n        return len(mapping.keys())\n\n\n# Order is important here- A mapping without keys could be viewed as a\n# sequence, and they're both collections.\nCONTAINER_CLASSES = ("", 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 156, 'coloffset': 4, 'linematch': 'def length(cls, mapping):', 'context': '                         ""not behave like one: {m}"".format(\n                             l=label, m=error))\n\n    @classmethod\n    def length(cls, mapping):\n        return len(mapping.keys())\n\n\n# Order is important here- A mapping without keys could be viewed as a\n# sequence, and they\'re both collections.', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 157, 'coloffset': 8, 'linematch': 'return len(mapping.keys())', 'context': ""                             l=label, m=error))\n\n    @classmethod\n    def length(cls, mapping):\n        return len(mapping.keys())\n\n\n# Order is important here- A mapping without keys could be viewed as a\n# sequence, and they're both collections.\nCONTAINER_CLASSES = ("", 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #5224', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}, {'name': 'Mutant #5225', 'line': 157, 'description': ['            ""mappings"": 0,'], 'failure': []}]",100.0,['ANNOT001' 'KF001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//Call/func/Attribute[@attr=""keys""]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 1, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
poetryize_output.json,poetry,14-82,"[{'lineno': 27, 'coloffset': 8, 'linematch': 'if not os.path.exists(requirement_file):', 'context': '    `pyproject.toml` file for Poetry. The resulting Poetry project file\n    includes the necessary dependencies and metadata.\n    """"""\n    try:\n        if not os.path.exists(requirement_file):\n            typer.echo(\n                f""Error: The specified requirements file \'{requirement_file}\' does not exist or no \'{requirement_file}\' found in current path""  # noqa\n            )\n            raise typer.Abort()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 34, 'coloffset': 8, 'linematch': 'if not os.path.exists(""./pyproject.toml""):', 'context': '            )\n            raise typer.Abort()\n\n        # Initialize Poetry if it doesn\'t yet have a pyproject.toml file\n        if not os.path.exists(""./pyproject.toml""):\n            os.system(""poetry init"")\n\n        with open(requirement_file, encoding=""utf-8"") as fh:\n            requirements = fh.read()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 66, 'coloffset': 16, 'linematch': 'if len(line.split("" "")) == 1:', 'context': '                    poetry_match = match\n                poetry_line = f""{package}:{poetry_match}{version}""\n                req_list.append(poetry_line)\n            except ValueError:\n                if len(line.split("" "")) == 1:\n                    req_list.append(line)\n                else:\n                    typer.echo(\n                        f""Skipping Dependency There seems to be a problem with the \'{line}\' dependency provided.""  # noqa\n                    )', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 66, 'coloffset': 19, 'linematch': 'if len(line.split("" "")) == 1:', 'context': '                    poetry_match = match\n                poetry_line = f""{package}:{poetry_match}{version}""\n                req_list.append(poetry_line)\n            except ValueError:\n                if len(line.split("" "")) == 1:\n                    req_list.append(line)\n                else:\n                    typer.echo(\n                        f""Skipping Dependency There seems to be a problem with the \'{line}\' dependency provided.""  # noqa\n                    )', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 14, 'coloffset': 0, 'linematch': 'def poetry(', 'context': 'app = typer.Typer()\n\n\n@app.command()\ndef poetry(\n    requirement_file: Annotated[\n        str, typer.Argument(help=""Enter the requirements file name or path: "")\n    ] = ""requirements.txt""\n):\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 34, 'coloffset': 8, 'linematch': 'if not os.path.exists(""./pyproject.toml""):', 'context': '            )\n            raise typer.Abort()\n\n        # Initialize Poetry if it doesn\'t yet have a pyproject.toml file\n        if not os.path.exists(""./pyproject.toml""):\n            os.system(""poetry init"")\n\n        with open(requirement_file, encoding=""utf-8"") as fh:\n            requirements = fh.read()\n', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 14, 'coloffset': 0, 'linematch': 'def poetry(', 'context': 'app = typer.Typer()\n\n\n@app.command()\ndef poetry(\n    requirement_file: Annotated[\n        str, typer.Argument(help=""Enter the requirements file name or path: "")\n    ] = ""requirements.txt""\n):\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 19, 'coloffset': 4, 'linematch': '""""""', 'context': '    requirement_file: Annotated[\n        str, typer.Argument(help=""Enter the requirements file name or path: "")\n    ] = ""requirements.txt""\n):\n    """"""\n    Switch From Using Pip to Poetry package manager on your project, Easily\n    This CLI app converts Pip requirements to Poetry projects.\n    It parses a Pip requirements file and generates the corresponding\n    `pyproject.toml` file for Poetry. The resulting Poetry project file\n    includes the necessary dependencies and metadata.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 26, 'coloffset': 4, 'linematch': 'try:', 'context': '    It parses a Pip requirements file and generates the corresponding\n    `pyproject.toml` file for Poetry. The resulting Poetry project file\n    includes the necessary dependencies and metadata.\n    """"""\n    try:\n        if not os.path.exists(requirement_file):\n            typer.echo(\n                f""Error: The specified requirements file \'{requirement_file}\' does not exist or no \'{requirement_file}\' found in current path""  # noqa\n            )\n            raise typer.Abort()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 14, 'coloffset': 0, 'linematch': 'def poetry(', 'context': 'app = typer.Typer()\n\n\n@app.command()\ndef poetry(\n    requirement_file: Annotated[\n        str, typer.Argument(help=""Enter the requirements file name or path: "")\n    ] = ""requirements.txt""\n):\n    """"""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 14, 'coloffset': 0, 'linematch': 'def poetry(', 'context': 'app = typer.Typer()\n\n\n@app.command()\ndef poetry(\n    requirement_file: Annotated[\n        str, typer.Argument(help=""Enter the requirements file name or path: "")\n    ] = ""requirements.txt""\n):\n    """"""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #3', 'line': 17, 'description': ['    ] = ""requirements.txt""'], 'failure': []}, {'name': 'Mutant #4', 'line': 27, 'description': ['        if not os.path.exists(requirement_file):'], 'failure': []}, {'name': 'Mutant #5', 'line': 29, 'description': ['                f""Error: The specified requirements file \'{requirement_file}\' does not exist or no \'{requirement_file}\' found in current path""  # noqa'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -26,7 +26,7 @@\n     try:\n         if not os.path.exists(requirement_file):\n             typer.echo(\n-                f""Error: The specified requirements file \'{requirement_file}\' does not exist or no \'{requirement_file}\' found in current path""  # noqa\n+                f""XXError: The specified requirements file \'{requirement_file}\' does not exist or no \'{requirement_file}\' found in current pathXX""  # noqa\n             )\n             raise typer.Abort()\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #6', 'line': 34, 'description': ['        if not os.path.exists(""./pyproject.toml""):'], 'failure': []}, {'name': 'Mutant #7', 'line': 34, 'description': ['        if not os.path.exists(""./pyproject.toml""):'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -31,7 +31,7 @@\n             raise typer.Abort()\n \n         # Initialize Poetry if it doesn\'t yet have a pyproject.toml file\n-        if not os.path.exists(""./pyproject.toml""):\n+        if not os.path.exists(""XX./pyproject.tomlXX""):\n             os.system(""poetry init"")\n \n         with open(requirement_file, encoding=""utf-8"") as fh:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #8', 'line': 35, 'description': ['            os.system(""poetry init"")'], 'failure': []}, {'name': 'Mutant #9', 'line': 37, 'description': ['        with open(requirement_file, encoding=""utf-8"") as fh:'], 'failure': []}, {'name': 'Mutant #10', 'line': 38, 'description': ['            requirements = fh.read()'], 'failure': []}, {'name': 'Mutant #11', 'line': 41, 'description': ['            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -38,7 +38,7 @@\n             requirements = fh.read()\n \n         no_comments = re.sub(\n-            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n+            ""XX^#.*$XX"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n             ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #12', 'line': 41, 'description': ['            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -38,7 +38,7 @@\n             requirements = fh.read()\n \n         no_comments = re.sub(\n-            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n+            ""^#.*$"", ""XXXX"", requirements, 0, re.IGNORECASE | re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n             ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #13', 'line': 41, 'description': ['            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -38,7 +38,7 @@\n             requirements = fh.read()\n \n         no_comments = re.sub(\n-            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n+            ""^#.*$"", """", requirements, 1, re.IGNORECASE | re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n             ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #14', 'line': 41, 'description': ['            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -38,7 +38,7 @@\n             requirements = fh.read()\n \n         no_comments = re.sub(\n-            ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n+            ""^#.*$"", """", requirements, 0, re.IGNORECASE & re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n             ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #15', 'line': 42, 'description': ['        )  # noqa'], 'failure': []}, {'name': 'Mutant #16', 'line': 44, 'description': ['            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -41,7 +41,7 @@\n             ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n-            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n+            ""XX\\n+XX"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n         ).strip()\n \n         pip_poetry_map = {"">"": ""^"", ""="": """"}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #17', 'line': 44, 'description': ['            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -41,7 +41,7 @@\n             ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n-            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n+            ""\\n+"", ""XX\\nXX"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n         ).strip()\n \n         pip_poetry_map = {"">"": ""^"", ""="": """"}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #18', 'line': 44, 'description': ['            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -41,7 +41,7 @@\n             ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n-            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n+            ""\\n+"", ""\\n"", no_comments, 1, re.IGNORECASE | re.MULTILINE\n         ).strip()\n \n         pip_poetry_map = {"">"": ""^"", ""="": """"}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #19', 'line': 44, 'description': ['            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -41,7 +41,7 @@\n             ""^#.*$"", """", requirements, 0, re.IGNORECASE | re.MULTILINE\n         )  # noqa\n         bare_requirements = re.sub(\n-            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n+            ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE & re.MULTILINE\n         ).strip()\n \n         pip_poetry_map = {"">"": ""^"", ""="": """"}\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #20', 'line': 45, 'description': ['        ).strip()'], 'failure': []}, {'name': 'Mutant #21', 'line': 47, 'description': ['        pip_poetry_map = {"">"": ""^"", ""="": """"}'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -44,7 +44,7 @@\n             ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n         ).strip()\n \n-        pip_poetry_map = {"">"": ""^"", ""="": """"}\n+        pip_poetry_map = {""XX>XX"": ""^"", ""="": """"}\n \n         req_list = list()\n         for line in bare_requirements.splitlines():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #22', 'line': 47, 'description': ['        pip_poetry_map = {"">"": ""^"", ""="": """"}'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -44,7 +44,7 @@\n             ""\\n+"", ""\\n"", no_comments, 0, re.IGNORECASE | re.MULTILINE\n         ).strip()\n \n-        pip_poetry_map = {"">"": ""^"", ""="": """"}\n+        pip_poetry_map = {"">"": ""XX^XX"", ""="": """"}\n \n         req_list = list()\n         for line in bare_requirements.splitlines():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #23', 'line': 47, 'description': ['        pip_poetry_map = {"">"": ""^"", ""="": """"}'], 'failure': []}, {'name': 'Mutant #24', 'line': 47, 'description': ['        pip_poetry_map = {"">"": ""^"", ""="": """"}'], 'failure': []}, {'name': 'Mutant #25', 'line': 47, 'description': ['        pip_poetry_map = {"">"": ""^"", ""="": """"}'], 'failure': []}, {'name': 'Mutant #26', 'line': 49, 'description': ['        req_list = list()'], 'failure': []}, {'name': 'Mutant #27', 'line': 53, 'description': ['                    r""^(.*?)\\s*([~>=<])=\\s*v?([0-9\\.\\*]+)"",'], 'failure': []}, {'name': 'Mutant #28', 'line': 54, 'description': ['                    r""\\1,\\2,\\3"",'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -51,7 +51,7 @@\n             try:\n                 package, match, version = re.sub(\n                     r""^(.*?)\\s*([~>=<])=\\s*v?([0-9\\.\\*]+)"",\n-                    r""\\1,\\2,\\3"",\n+                    r""XX\\1,\\2,\\3XX"",\n                     line,\n                     0,\n                     re.IGNORECASE | re.MULTILINE,\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #29', 'line': 56, 'description': ['                    0,'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -53,7 +53,7 @@\n                     r""^(.*?)\\s*([~>=<])=\\s*v?([0-9\\.\\*]+)"",\n                     r""\\1,\\2,\\3"",\n                     line,\n-                    0,\n+                    1,\n                     re.IGNORECASE | re.MULTILINE,\n                 ).split("","")\n                 try:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #30', 'line': 57, 'description': ['                    re.IGNORECASE | re.MULTILINE,'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -54,7 +54,7 @@\n                     r""\\1,\\2,\\3"",\n                     line,\n                     0,\n-                    re.IGNORECASE | re.MULTILINE,\n+                    re.IGNORECASE & re.MULTILINE,\n                 ).split("","")\n                 try:\n                     poetry_match = pip_poetry_map.get(match, match)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #31', 'line': 58, 'description': ['                ).split("","")'], 'failure': []}, {'name': 'Mutant #32', 'line': 58, 'description': ['                ).split("","")'], 'failure': []}, {'name': 'Mutant #33', 'line': 60, 'description': ['                    poetry_match = pip_poetry_map.get(match, match)'], 'failure': []}, {'name': 'Mutant #34', 'line': 62, 'description': ['                    poetry_match = match'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -59,7 +59,7 @@\n                 try:\n                     poetry_match = pip_poetry_map.get(match, match)\n                 except KeyError:\n-                    poetry_match = match\n+                    poetry_match = None\n                 poetry_line = f""{package}:{poetry_match}{version}""\n                 req_list.append(poetry_line)\n             except ValueError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #35', 'line': 63, 'description': ['                poetry_line = f""{package}:{poetry_match}{version}""'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -60,7 +60,7 @@\n                     poetry_match = pip_poetry_map.get(match, match)\n                 except KeyError:\n                     poetry_match = match\n-                poetry_line = f""{package}:{poetry_match}{version}""\n+                poetry_line = f""XX{package}:{poetry_match}{version}XX""\n                 req_list.append(poetry_line)\n             except ValueError:\n                 if len(line.split("" "")) == 1:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #36', 'line': 63, 'description': ['                poetry_line = f""{package}:{poetry_match}{version}""'], 'failure': []}, {'name': 'Mutant #37', 'line': 66, 'description': ['                if len(line.split("" "")) == 1:'], 'failure': []}, {'name': 'Mutant #38', 'line': 66, 'description': ['                if len(line.split("" "")) == 1:'], 'failure': []}, {'name': 'Mutant #39', 'line': 66, 'description': ['                if len(line.split("" "")) == 1:'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -63,7 +63,7 @@\n                 poetry_line = f""{package}:{poetry_match}{version}""\n                 req_list.append(poetry_line)\n             except ValueError:\n-                if len(line.split("" "")) == 1:\n+                if len(line.split("" "")) == 2:\n                     req_list.append(line)\n                 else:\n                     typer.echo(\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #40', 'line': 70, 'description': ['                        f""Skipping Dependency There seems to be a problem with the \'{line}\' dependency provided.""  # noqa'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -67,7 +67,7 @@\n                     req_list.append(line)\n                 else:\n                     typer.echo(\n-                        f""Skipping Dependency There seems to be a problem with the \'{line}\' dependency provided.""  # noqa\n+                        f""XXSkipping Dependency There seems to be a problem with the \'{line}\' dependency provided.XX""  # noqa\n                     )\n \n         for req in req_list:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #41', 'line': 75, 'description': ['            os.system(f""poetry add {req}"")'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -72,7 +72,7 @@\n \n         for req in req_list:\n             typer.echo(req)\n-            os.system(f""poetry add {req}"")\n+            os.system(f""XXpoetry add {req}XX"")\n \n         typer.echo(""Done! 🎉"")\n     except ValueError:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #42', 'line': 77, 'description': ['        typer.echo(""Done! 🎉"")'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -74,7 +74,7 @@\n             typer.echo(req)\n             os.system(f""poetry add {req}"")\n \n-        typer.echo(""Done! 🎉"")\n+        typer.echo(""XXDone! 🎉XX"")\n     except ValueError:\n         typer.echo(\n             f""❌ Error 😥: There seems to be a problem with the \'{requirement_file}\' provided.""  # noqa\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #43', 'line': 80, 'description': ['            f""❌ Error 😥: There seems to be a problem with the \'{requirement_file}\' provided.""  # noqa'], 'failure': [{'inner': '--- poetryize/poetryize.py\n+++ poetryize/poetryize.py\n@@ -77,7 +77,7 @@\n         typer.echo(""Done! 🎉"")\n     except ValueError:\n         typer.echo(\n-            f""❌ Error 😥: There seems to be a problem with the \'{requirement_file}\' provided.""  # noqa\n+            f""XX❌ Error 😥: There seems to be a problem with the \'{requirement_file}\' provided.XX""  # noqa\n         )\n         raise typer.Abort()  # noqa\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #47', 'line': 16, 'description': ['        requirements_file_content = ""requests==2.25.1\\nflask==1.1.2""'], 'failure': [{'inner': '--- tests/test_poetryize.py\n+++ tests/test_poetryize.py\n@@ -13,7 +13,7 @@\n     """"""\n     with runner.isolated_filesystem():\n         # Create a sample requirements.txt file\n-        requirements_file_content = ""requests==2.25.1\\nflask==1.1.2""\n+        requirements_file_content = ""XXrequests==2.25.1\\nflask==1.1.2XX""\n         with open(""requirements.txt"", ""w"") as requirements_file:\n             requirements_file.write(requirements_file_content)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #48', 'line': 16, 'description': ['        requirements_file_content = ""requests==2.25.1\\nflask==1.1.2""'], 'failure': []}, {'name': 'Mutant #49', 'line': 17, 'description': ['        with open(""requirements.txt"", ""w"") as requirements_file:'], 'failure': []}, {'name': 'Mutant #50', 'line': 17, 'description': ['        with open(""requirements.txt"", ""w"") as requirements_file:'], 'failure': []}, {'name': 'Mutant #51', 'line': 21, 'description': ['        result = runner.invoke(app, [""requirements.txt""])'], 'failure': []}, {'name': 'Mutant #52', 'line': 21, 'description': ['        result = runner.invoke(app, [""requirements.txt""])'], 'failure': []}, {'name': 'Mutant #53', 'line': 24, 'description': ['        assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #54', 'line': 24, 'description': ['        assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #55', 'line': 27, 'description': ['        assert ""requests:2.25.1"" in result.stdout'], 'failure': []}, {'name': 'Mutant #56', 'line': 27, 'description': ['        assert ""requests:2.25.1"" in result.stdout'], 'failure': []}, {'name': 'Mutant #57', 'line': 28, 'description': ['        assert ""flask:1.1.2"" in result.stdout'], 'failure': []}, {'name': 'Mutant #58', 'line': 28, 'description': ['        assert ""flask:1.1.2"" in result.stdout'], 'failure': []}, {'name': 'Mutant #59', 'line': 31, 'description': ['        assert os.path.exists(""pyproject.toml"")'], 'failure': []}, {'name': 'Mutant #60', 'line': 40, 'description': ['        result = runner.invoke(app, [""nonexistent_file.txt""])'], 'failure': []}, {'name': 'Mutant #61', 'line': 40, 'description': ['        result = runner.invoke(app, [""nonexistent_file.txt""])'], 'failure': []}, {'name': 'Mutant #62', 'line': 43, 'description': ['        assert result.exit_code != 0'], 'failure': []}, {'name': 'Mutant #63', 'line': 43, 'description': ['        assert result.exit_code != 0'], 'failure': []}, {'name': 'Mutant #64', 'line': 47, 'description': ['            ""Error: The specified requirements file \'nonexistent_file.txt\' does not exist or no \'nonexistent_file.txt\' found in current path""  # noqa'], 'failure': []}, {'name': 'Mutant #65', 'line': 48, 'description': ['            in result.stdout'], 'failure': []}, {'name': 'Mutant #66', 'line': 57, 'description': ['        requirements_file_content = ""requests==2.25.1\\nflask==1.1.2""'], 'failure': [{'inner': '--- tests/test_poetryize.py\n+++ tests/test_poetryize.py\n@@ -54,7 +54,7 @@\n     tests if the CLI command works with requirement file in path without specifying a requirements file # noqa\n     """"""\n     with runner.isolated_filesystem():\n-        requirements_file_content = ""requests==2.25.1\\nflask==1.1.2""\n+        requirements_file_content = ""XXrequests==2.25.1\\nflask==1.1.2XX""\n         with open(""requirements.txt"", ""w"") as requirements_file:\n             requirements_file.write(requirements_file_content)\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #67', 'line': 57, 'description': ['        requirements_file_content = ""requests==2.25.1\\nflask==1.1.2""'], 'failure': []}, {'name': 'Mutant #68', 'line': 58, 'description': ['        with open(""requirements.txt"", ""w"") as requirements_file:'], 'failure': []}, {'name': 'Mutant #69', 'line': 58, 'description': ['        with open(""requirements.txt"", ""w"") as requirements_file:'], 'failure': []}, {'name': 'Mutant #70', 'line': 62, 'description': ['        result = runner.invoke(app, [])'], 'failure': []}, {'name': 'Mutant #71', 'line': 65, 'description': ['        assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #72', 'line': 65, 'description': ['        assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #73', 'line': 68, 'description': ['        assert ""requests:2.25.1"" in result.stdout'], 'failure': []}, {'name': 'Mutant #74', 'line': 68, 'description': ['        assert ""requests:2.25.1"" in result.stdout'], 'failure': []}, {'name': 'Mutant #75', 'line': 69, 'description': ['        assert ""flask:1.1.2"" in result.stdout'], 'failure': []}, {'name': 'Mutant #76', 'line': 69, 'description': ['        assert ""flask:1.1.2"" in result.stdout'], 'failure': []}, {'name': 'Mutant #77', 'line': 72, 'description': ['        assert os.path.exists(""pyproject.toml"")'], 'failure': []}, {'name': 'Mutant #78', 'line': 81, 'description': ['        requirements_file_content = ""thoth is welcome""  # noqa'], 'failure': []}, {'name': 'Mutant #79', 'line': 81, 'description': ['        requirements_file_content = ""thoth is welcome""  # noqa'], 'failure': []}, {'name': 'Mutant #80', 'line': 82, 'description': ['        with open(""requirements.txt"", ""w"") as requirements_file:'], 'failure': []}, {'name': 'Mutant #81', 'line': 82, 'description': ['        with open(""requirements.txt"", ""w"") as requirements_file:'], 'failure': []}]",68.42105263157895,['CL001' 'BOOL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
playground_output.json,__init__,5-6,"[{'lineno': 5, 'coloffset': 4, 'linematch': 'def __init__(self, name, speed=0) -> None:', 'context': 'from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f""{self.name} hides!"")\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2, 'coloffset': 4, 'linematch': 'def __init__(self, name, speed=0) -> None:', 'context': 'class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f""{self.name} is happy :)""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 6, 'coloffset': 8, 'linematch': 'super().__init__(name, speed=speed)', 'context': '\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f""{self.name} hides!"")\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 3, 'coloffset': 8, 'linematch': 'self.name = name', 'context': 'class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f""{self.name} is happy :)""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 4, 'coloffset': 8, 'linematch': 'self.speed = speed', 'context': 'class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f""{self.name} is happy :)""\n\n    def run(self, speed):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #203', 'line': 5, 'description': ['    assert isinstance(__version__, str), ""The version value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), ""The version value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe version value is invalid!XX""\n \n \n def test_authors():\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
playground_output.json,hide,8-9,"[{'lineno': 8, 'coloffset': 4, 'linematch': 'def hide(self):', 'context': 'class Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f""{self.name} hides!"")\n\n\nif __name__ == ""__main__"":\n    my_rabbit = Rabbit(""Alen"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 9, 'coloffset': 8, 'linematch': 'print(f""{self.name} hides!"")', 'context': '    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f""{self.name} hides!"")\n\n\nif __name__ == ""__main__"":\n    my_rabbit = Rabbit(""Alen"")\n    print(my_rabbit)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #204', 'line': 9, 'description': ['    assert isinstance(__version__, str), ""The authors value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -6,5 +6,5 @@\n \n \n def test_authors():\n-    assert isinstance(__version__, str), ""The authors value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe authors value is invalid!XX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
playground_output.json,run,9-11,"[{'lineno': 9, 'coloffset': 4, 'linematch': 'def run(self, speed):', 'context': '\n    def __str__(self):\n        return f""{self.name} is happy :)""\n\n    def run(self, speed):\n        self.speed = speed\n        print(f""{self.name} runs with speed {self.speed}."")\n\n    def stop(self):\n        self.speed = 0', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 10, 'coloffset': 8, 'linematch': 'self.speed = speed', 'context': '    def __str__(self):\n        return f""{self.name} is happy :)""\n\n    def run(self, speed):\n        self.speed = speed\n        print(f""{self.name} runs with speed {self.speed}."")\n\n    def stop(self):\n        self.speed = 0\n        print(f""{self.name} stands still."")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 11, 'coloffset': 8, 'linematch': 'print(f""{self.name} runs with speed {self.speed}."")', 'context': '        return f""{self.name} is happy :)""\n\n    def run(self, speed):\n        self.speed = speed\n        print(f""{self.name} runs with speed {self.speed}."")\n\n    def stop(self):\n        self.speed = 0\n        print(f""{self.name} stands still."")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #204', 'line': 9, 'description': ['    assert isinstance(__version__, str), ""The authors value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -6,5 +6,5 @@\n \n \n def test_authors():\n-    assert isinstance(__version__, str), ""The authors value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe authors value is invalid!XX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
playground_output.json,increment_by,4-8,"[{'lineno': 4, 'coloffset': 0, 'linematch': 'def increment_by(num: int) -> Callable:', 'context': 'from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 5, 'coloffset': 4, 'linematch': 'def incrementer(num_two: int) -> int:', 'context': 'from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 4, 'coloffset': 0, 'linematch': 'def increment_by(num: int) -> Callable:', 'context': 'from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 5, 'coloffset': 4, 'linematch': 'def incrementer(num_two: int) -> int:', 'context': 'from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 6, 'coloffset': 8, 'linematch': 'return num_two + num', 'context': '\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n\nincrement_by_ten = increment_by(10)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 8, 'coloffset': 4, 'linematch': 'return incrementer', 'context': 'def increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n\nincrement_by_ten = increment_by(10)\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #203', 'line': 5, 'description': ['    assert isinstance(__version__, str), ""The version value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), ""The version value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe version value is invalid!XX""\n \n \n def test_authors():\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
playground_output.json,make_multiplier_of,4-8,"[{'lineno': 4, 'coloffset': 0, 'linematch': 'def make_multiplier_of(num_one: int) -> Callable:', 'context': 'from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 5, 'coloffset': 4, 'linematch': 'def multiplier(num_two: int) -> int:', 'context': 'from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 4, 'coloffset': 0, 'linematch': 'def make_multiplier_of(num_one: int) -> Callable:', 'context': 'from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 5, 'coloffset': 4, 'linematch': 'def multiplier(num_two: int) -> int:', 'context': 'from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 6, 'coloffset': 8, 'linematch': 'return num_two * num_one', 'context': '\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n\nmultiply_three = make_multiplier_of(3)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 8, 'coloffset': 4, 'linematch': 'return multiplier', 'context': 'def make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n\nmultiply_three = make_multiplier_of(3)\n\nmultiply_five = make_multiplier_of(5)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #203', 'line': 5, 'description': ['    assert isinstance(__version__, str), ""The version value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), ""The version value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe version value is invalid!XX""\n \n \n def test_authors():\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
playground_output.json,return_msg,4-8,"[{'lineno': 4, 'coloffset': 0, 'linematch': 'def return_msg(msg: str = ""Hello"") -> Callable:', 'context': 'from typing import Callable\n\n\ndef return_msg(msg: str = ""Hello"") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 5, 'coloffset': 4, 'linematch': 'def returner() -> str:', 'context': 'from typing import Callable\n\n\ndef return_msg(msg: str = ""Hello"") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 4, 'coloffset': 0, 'linematch': 'def return_msg(msg: str = ""Hello"") -> Callable:', 'context': 'from typing import Callable\n\n\ndef return_msg(msg: str = ""Hello"") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n', 'pattern': './/FunctionDef//FunctionDef/ancestor::*', 'check_id': 'F001', 'check_name': 'nested-depth'}, {'lineno': 5, 'coloffset': 4, 'linematch': 'def returner() -> str:', 'context': 'from typing import Callable\n\n\ndef return_msg(msg: str = ""Hello"") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 6, 'coloffset': 8, 'linematch': 'return msg', 'context': '\n\ndef return_msg(msg: str = ""Hello"") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n\nsay_cheese = return_msg(""cheese"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 8, 'coloffset': 4, 'linematch': 'return returner', 'context': 'def return_msg(msg: str = ""Hello"") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n\nsay_cheese = return_msg(""cheese"")\n\nsay_hello = return_msg()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #203', 'line': 5, 'description': ['    assert isinstance(__version__, str), ""The version value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), ""The version value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe version value is invalid!XX""\n \n \n def test_authors():\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'F001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//FunctionDef/ancestor::*'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 1, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
playground_output.json,read_all_lines,5-10,"[{'lineno': 5, 'coloffset': 0, 'linematch': 'def read_all_lines(file_path: str):', 'context': 'import json\nimport os\n\n\ndef read_all_lines(file_path: str):\n    """"""\n    Parse a CSV file and return a list of dictionaries.\n    """"""\n    with open(file_path, ""r"", encoding=""UTF-8"") as file:\n        return file.read().splitlines()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 6, 'coloffset': 4, 'linematch': '""""""', 'context': 'import os\n\n\ndef read_all_lines(file_path: str):\n    """"""\n    Parse a CSV file and return a list of dictionaries.\n    """"""\n    with open(file_path, ""r"", encoding=""UTF-8"") as file:\n        return file.read().splitlines()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 9, 'coloffset': 4, 'linematch': 'with open(file_path, ""r"", encoding=""UTF-8"") as file:', 'context': 'def read_all_lines(file_path: str):\n    """"""\n    Parse a CSV file and return a list of dictionaries.\n    """"""\n    with open(file_path, ""r"", encoding=""UTF-8"") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #203', 'line': 5, 'description': ['    assert isinstance(__version__, str), ""The version value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), ""The version value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe version value is invalid!XX""\n \n \n def test_authors():\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #204', 'line': 9, 'description': ['    assert isinstance(__version__, str), ""The authors value is invalid!""'], 'failure': [{'inner': '--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -6,5 +6,5 @@\n \n \n def test_authors():\n-    assert isinstance(__version__, str), ""The authors value is invalid!""\n+    assert isinstance(__version__, str), ""XXThe authors value is invalid!XX""\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
code_output.json,callback,20-27,"[{'lineno': 24, 'coloffset': 4, 'linematch': 'if ctx.invoked_subcommand is None:', 'context': 'def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):\n    """"""\n    CLI to handle your projects and Editors smartly\n    """"""\n    if ctx.invoked_subcommand is None:\n        typer.echo(""Hi, Welcome to Code Opener CLI 😀"")\n        command = typer.style(""copen --help"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to get help with commands\')\n    \n@app.command()', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 24, 'coloffset': 7, 'linematch': 'if ctx.invoked_subcommand is None:', 'context': 'def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):\n    """"""\n    CLI to handle your projects and Editors smartly\n    """"""\n    if ctx.invoked_subcommand is None:\n        typer.echo(""Hi, Welcome to Code Opener CLI 😀"")\n        command = typer.style(""copen --help"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to get help with commands\')\n    \n@app.command()', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 20, 'coloffset': 0, 'linematch': 'def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):', 'context': '        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):\n    """"""\n    CLI to handle your projects and Editors smartly\n    """"""\n    if ctx.invoked_subcommand is None:\n        typer.echo(""Hi, Welcome to Code Opener CLI 😀"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 20, 'coloffset': 0, 'linematch': 'def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):', 'context': '        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):\n    """"""\n    CLI to handle your projects and Editors smartly\n    """"""\n    if ctx.invoked_subcommand is None:\n        typer.echo(""Hi, Welcome to Code Opener CLI 😀"")', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 21, 'coloffset': 4, 'linematch': '""""""', 'context': '\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):\n    """"""\n    CLI to handle your projects and Editors smartly\n    """"""\n    if ctx.invoked_subcommand is None:\n        typer.echo(""Hi, Welcome to Code Opener CLI 😀"")\n        command = typer.style(""copen --help"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 24, 'coloffset': 4, 'linematch': 'if ctx.invoked_subcommand is None:', 'context': 'def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, ""--version"", callback=version_callback)):\n    """"""\n    CLI to handle your projects and Editors smartly\n    """"""\n    if ctx.invoked_subcommand is None:\n        typer.echo(""Hi, Welcome to Code Opener CLI 😀"")\n        command = typer.style(""copen --help"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to get help with commands\')\n    \n@app.command()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #128', 'line': 20, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)""], 'failure': []}, {'name': 'Mutant #129', 'line': 21, 'description': ['    result = runner.invoke(app, [""see""])'], 'failure': []}, {'name': 'Mutant #130', 'line': 21, 'description': ['    result = runner.invoke(app, [""see""])'], 'failure': []}, {'name': 'Mutant #131', 'line': 22, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #132', 'line': 22, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #133', 'line': 23, 'description': ['    assert ""Seems like you have not added any project yet!!!"" in result.stdout '], 'failure': []}, {'name': 'Mutant #134', 'line': 23, 'description': ['    assert ""Seems like you have not added any project yet!!!"" in result.stdout '], 'failure': []}]",100.0,['CL001' 'BOOL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,add,30-46,"[{'lineno': 38, 'coloffset': 8, 'linematch': ""if project_item['project_name']==project_name:"", 'context': '    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            echo_text = typer.style(""Project with this name already present!"",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            ', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 30, 'coloffset': 0, 'linematch': 'def add(project_name:str =  typer.Option(...,""--project-name"",""-pn"",prompt=True,metavar=""Name by which you like to call this project 🥺"")):', 'context': '        command = typer.style(""copen --help"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to get help with commands\')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,""--project-name"",""-pn"",prompt=True,metavar=""Name by which you like to call this project 🥺"")):\n    """"""\n    Add a project with PROJECT_NAME\n    """"""\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 30, 'coloffset': 0, 'linematch': 'def add(project_name:str =  typer.Option(...,""--project-name"",""-pn"",prompt=True,metavar=""Name by which you like to call this project 🥺"")):', 'context': '        command = typer.style(""copen --help"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to get help with commands\')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,""--project-name"",""-pn"",prompt=True,metavar=""Name by which you like to call this project 🥺"")):\n    """"""\n    Add a project with PROJECT_NAME\n    """"""\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 31, 'coloffset': 4, 'linematch': '""""""', 'context': '        typer.echo(\'Use \' +command + \' to get help with commands\')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,""--project-name"",""-pn"",prompt=True,metavar=""Name by which you like to call this project 🥺"")):\n    """"""\n    Add a project with PROJECT_NAME\n    """"""\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    ', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 34, 'coloffset': 4, 'linematch': 'path = os.getcwd()', 'context': 'def add(project_name:str =  typer.Option(...,""--project-name"",""-pn"",prompt=True,metavar=""Name by which you like to call this project 🥺"")):\n    """"""\n    Add a project with PROJECT_NAME\n    """"""\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            echo_text = typer.style(""Project with this name already present!"",', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 35, 'coloffset': 4, 'linematch': 'current_config = JsonDataOperations.read()', 'context': '    """"""\n    Add a project with PROJECT_NAME\n    """"""\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            echo_text = typer.style(""Project with this name already present!"",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 37, 'coloffset': 4, 'linematch': ""for project_item in current_config['projects']:"", 'context': '    """"""\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            echo_text = typer.style(""Project with this name already present!"",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 44, 'coloffset': 4, 'linematch': ""current_config['projects'].append({'project_name':project_name, 'path':path})"", 'context': '             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            \n    current_config[\'projects\'].append({\'project_name\':project_name, \'path\':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(""Project added successfully!!"", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 45, 'coloffset': 4, 'linematch': 'JsonDataOperations.update(current_config)', 'context': '            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            \n    current_config[\'projects\'].append({\'project_name\':project_name, \'path\':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(""Project added successfully!!"", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 46, 'coloffset': 4, 'linematch': 'typer.secho(""Project added successfully!!"", fg=typer.colors.BRIGHT_GREEN)', 'context': '            raise typer.Exit(code=1)\n            \n    current_config[\'projects\'].append({\'project_name\':project_name, \'path\':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(""Project added successfully!!"", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    """"""\n    See list of all projects that are added', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #135', 'line': 33, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)""], 'failure': []}, {'name': 'Mutant #136', 'line': 34, 'description': ['    result = runner.invoke(app, [""see""])'], 'failure': []}, {'name': 'Mutant #137', 'line': 34, 'description': ['    result = runner.invoke(app, [""see""])'], 'failure': []}, {'name': 'Mutant #138', 'line': 35, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #139', 'line': 35, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #140', 'line': 36, 'description': ['    assert ""Project Name"" in result.stdout'], 'failure': []}, {'name': 'Mutant #141', 'line': 36, 'description': ['    assert ""Project Name"" in result.stdout'], 'failure': []}, {'name': 'Mutant #142', 'line': 37, 'description': ['    assert ""abc"" in result.stdout '], 'failure': []}, {'name': 'Mutant #143', 'line': 37, 'description': ['    assert ""abc"" in result.stdout '], 'failure': []}, {'name': 'Mutant #144', 'line': 38, 'description': ['    assert ""Seems like you have not added any project yet!!!"" not in result.stdout '], 'failure': [{'inner': '--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -35,7 +35,7 @@\n     assert result.exit_code == 0\n     assert ""Project Name"" in result.stdout\n     assert ""abc"" in result.stdout \n-    assert ""Seems like you have not added any project yet!!!"" not in result.stdout \n+    assert ""XXSeems like you have not added any project yet!!!XX"" not in result.stdout \n \n def test_add_new_project(monkeypatch, config_with_project):\n     """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 38, 'description': ['    assert ""Seems like you have not added any project yet!!!"" not in result.stdout '], 'failure': []}]",90.9090909090909,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,see,49-65,"[{'lineno': 54, 'coloffset': 4, 'linematch': ""if len(current_config['projects'])==0:"", 'context': '    """"""\n    See list of all projects that are added\n    """"""\n    current_config = JsonDataOperations.read()\n    if len(current_config[\'projects\'])==0:\n        typer.echo(\'Seems like you have not added any project yet!!!\')\n        command = typer.style(""copen add"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to add new project\')\n        raise typer.Exit()\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 49, 'coloffset': 0, 'linematch': 'def see():', 'context': '    JsonDataOperations.update(current_config)\n    typer.secho(""Project added successfully!!"", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    """"""\n    See list of all projects that are added\n    """"""\n    current_config = JsonDataOperations.read()\n    if len(current_config[\'projects\'])==0:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 49, 'coloffset': 0, 'linematch': 'def see():', 'context': '    JsonDataOperations.update(current_config)\n    typer.secho(""Project added successfully!!"", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    """"""\n    See list of all projects that are added\n    """"""\n    current_config = JsonDataOperations.read()\n    if len(current_config[\'projects\'])==0:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 50, 'coloffset': 4, 'linematch': '""""""', 'context': '    typer.secho(""Project added successfully!!"", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    """"""\n    See list of all projects that are added\n    """"""\n    current_config = JsonDataOperations.read()\n    if len(current_config[\'projects\'])==0:\n        typer.echo(\'Seems like you have not added any project yet!!!\')', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 53, 'coloffset': 4, 'linematch': 'current_config = JsonDataOperations.read()', 'context': 'def see():\n    """"""\n    See list of all projects that are added\n    """"""\n    current_config = JsonDataOperations.read()\n    if len(current_config[\'projects\'])==0:\n        typer.echo(\'Seems like you have not added any project yet!!!\')\n        command = typer.style(""copen add"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to add new project\')\n        raise typer.Exit()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 54, 'coloffset': 4, 'linematch': ""if len(current_config['projects'])==0:"", 'context': '    """"""\n    See list of all projects that are added\n    """"""\n    current_config = JsonDataOperations.read()\n    if len(current_config[\'projects\'])==0:\n        typer.echo(\'Seems like you have not added any project yet!!!\')\n        command = typer.style(""copen add"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to add new project\')\n        raise typer.Exit()\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 60, 'coloffset': 4, 'linematch': 'col = typer.style(""Project Name"",fg=typer.colors.CYAN, bold=True)', 'context': '        command = typer.style(""copen add"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to add new project\')\n        raise typer.Exit()\n\n    col = typer.style(""Project Name"",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(""======================="")\n    for project_item in current_config[\'projects\']:\n        typer.echo(project_item[\'project_name\'])\n    typer.echo(""======================="")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 61, 'coloffset': 4, 'linematch': 'typer.echo(col)', 'context': '        typer.echo(\'Use \' +command + \' to add new project\')\n        raise typer.Exit()\n\n    col = typer.style(""Project Name"",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(""======================="")\n    for project_item in current_config[\'projects\']:\n        typer.echo(project_item[\'project_name\'])\n    typer.echo(""======================="")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 62, 'coloffset': 4, 'linematch': 'typer.echo(""======================="")', 'context': '        raise typer.Exit()\n\n    col = typer.style(""Project Name"",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(""======================="")\n    for project_item in current_config[\'projects\']:\n        typer.echo(project_item[\'project_name\'])\n    typer.echo(""======================="")\n\n@app.command()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 63, 'coloffset': 4, 'linematch': ""for project_item in current_config['projects']:"", 'context': '\n    col = typer.style(""Project Name"",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(""======================="")\n    for project_item in current_config[\'projects\']:\n        typer.echo(project_item[\'project_name\'])\n    typer.echo(""======================="")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 65, 'coloffset': 4, 'linematch': 'typer.echo(""======================="")', 'context': '    typer.echo(col)\n    typer.echo(""======================="")\n    for project_item in current_config[\'projects\']:\n        typer.echo(project_item[\'project_name\'])\n    typer.echo(""======================="")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Opens a Project with PROJECT_NAME', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #146', 'line': 50, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)""], 'failure': []}, {'name': 'Mutant #147', 'line': 51, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)""], 'failure': []}, {'name': 'Mutant #148', 'line': 53, 'description': ['    result = runner.invoke(app, [""add""],input=""test-name"")'], 'failure': []}, {'name': 'Mutant #149', 'line': 53, 'description': ['    result = runner.invoke(app, [""add""],input=""test-name"")'], 'failure': [{'inner': '--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -50,7 +50,7 @@\n     monkeypatch.setattr(JsonDataOperations, \'read\', mock_read)\n     monkeypatch.setattr(JsonDataOperations, \'update\', mock_update)\n \n-    result = runner.invoke(app, [""add""],input=""test-name"")\n+    result = runner.invoke(app, [""add""],input=""XXtest-nameXX"")\n     assert result.exit_code == 0\n     assert ""Project added successfully!!"" in result.stdout\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 53, 'description': ['    result = runner.invoke(app, [""add""],input=""test-name"")'], 'failure': []}, {'name': 'Mutant #151', 'line': 54, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #152', 'line': 54, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #153', 'line': 55, 'description': ['    assert ""Project added successfully!!"" in result.stdout'], 'failure': []}, {'name': 'Mutant #154', 'line': 55, 'description': ['    assert ""Project added successfully!!"" in result.stdout'], 'failure': []}]",88.88888888888889,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,open,68-89,"[{'lineno': 83, 'coloffset': 4, 'linematch': 'if found == False:', 'context': '            os.system(current_config[\'default_editor\'])\n            found = True\n            break\n\n    if found == False:\n        echo_text = project_name + "": Project Not Found!""\n        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n        typer.echo(not_found,  err=True)\n        command = typer.style(""copen add"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to add new project\')', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 75, 'coloffset': 8, 'linematch': ""if project_item['project_name']==project_name:"", 'context': '    """"""\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            found = typer.style(""Project Found!"", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item[\'path\'])\n            os.system(current_config[\'default_editor\'])\n            found = True', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 68, 'coloffset': 0, 'linematch': 'def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):', 'context': '        typer.echo(project_item[\'project_name\'])\n    typer.echo(""======================="")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Opens a Project with PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    found = False', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 68, 'coloffset': 0, 'linematch': 'def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):', 'context': '        typer.echo(project_item[\'project_name\'])\n    typer.echo(""======================="")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Opens a Project with PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    found = False', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 69, 'coloffset': 4, 'linematch': '""""""', 'context': '    typer.echo(""======================="")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Opens a Project with PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config[\'projects\']:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 72, 'coloffset': 4, 'linematch': 'current_config = JsonDataOperations.read()', 'context': 'def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Opens a Project with PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            found = typer.style(""Project Found!"", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 73, 'coloffset': 4, 'linematch': 'found = False', 'context': '    """"""\n    Opens a Project with PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            found = typer.style(""Project Found!"", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item[\'path\'])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 74, 'coloffset': 4, 'linematch': ""for project_item in current_config['projects']:"", 'context': '    Opens a Project with PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config[\'projects\']:\n        if project_item[\'project_name\']==project_name:\n            found = typer.style(""Project Found!"", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item[\'path\'])\n            os.system(current_config[\'default_editor\'])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 83, 'coloffset': 4, 'linematch': 'if found == False:', 'context': '            os.system(current_config[\'default_editor\'])\n            found = True\n            break\n\n    if found == False:\n        echo_text = project_name + "": Project Not Found!""\n        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n        typer.echo(not_found,  err=True)\n        command = typer.style(""copen add"", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo(\'Use \' +command + \' to add new project\')', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #156', 'line': 68, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)""], 'failure': []}, {'name': 'Mutant #157', 'line': 70, 'description': ['    result = runner.invoke(app, [""add""],input=""abc"")'], 'failure': []}, {'name': 'Mutant #158', 'line': 70, 'description': ['    result = runner.invoke(app, [""add""],input=""abc"")'], 'failure': []}, {'name': 'Mutant #159', 'line': 70, 'description': ['    result = runner.invoke(app, [""add""],input=""abc"")'], 'failure': []}, {'name': 'Mutant #160', 'line': 71, 'description': ['    assert result.exit_code == 1'], 'failure': []}, {'name': 'Mutant #161', 'line': 71, 'description': ['    assert result.exit_code == 1'], 'failure': []}, {'name': 'Mutant #162', 'line': 72, 'description': ['    assert ""Project with this name already present!"" in result.stdout'], 'failure': []}, {'name': 'Mutant #163', 'line': 72, 'description': ['    assert ""Project with this name already present!"" in result.stdout'], 'failure': []}, {'name': 'Mutant #164', 'line': 81, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)""], 'failure': []}, {'name': 'Mutant #165', 'line': 82, 'description': ['    result = runner.invoke(app, [""open"", ""test_project""])'], 'failure': []}, {'name': 'Mutant #166', 'line': 82, 'description': ['    result = runner.invoke(app, [""open"", ""test_project""])'], 'failure': [{'inner': '--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -79,7 +79,7 @@\n         return config_with_project\n     \n     monkeypatch.setattr(JsonDataOperations, \'read\', mock_read)\n-    result = runner.invoke(app, [""open"", ""test_project""])\n+    result = runner.invoke(app, [""open"", ""XXtest_projectXX""])\n     assert result.exit_code == 0\n     assert ""Project Not Found!"" in result.stdout\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #167', 'line': 82, 'description': ['    result = runner.invoke(app, [""open"", ""test_project""])'], 'failure': []}, {'name': 'Mutant #168', 'line': 83, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #169', 'line': 83, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #170', 'line': 84, 'description': ['    assert ""Project Not Found!"" in result.stdout'], 'failure': []}, {'name': 'Mutant #171', 'line': 84, 'description': ['    assert ""Project Not Found!"" in result.stdout'], 'failure': []}]",93.75,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,remove,92-112,"[{'lineno': 107, 'coloffset': 4, 'linematch': 'if found==False:', 'context': '            found = True\n            JsonDataOperations.update(current_config)\n            break\n\n    if found==False:\n        echo_text = typer.style(""Project with this name is not present!"",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n        typer.echo(echo_text, err=True)\n    else:\n        typer.secho(\'Removed Successfully!\',fg= typer.colors.BRIGHT_GREEN)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 101, 'coloffset': 8, 'linematch': ""if project_item['project_name']==project_name:"", 'context': ""    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 101, 'coloffset': 11, 'linematch': ""if project_item['project_name']==project_name:"", 'context': ""    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"", 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 101, 'coloffset': 11, 'linematch': ""if project_item['project_name']==project_name:"", 'context': ""    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"", 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 101, 'coloffset': 11, 'linematch': ""if project_item['project_name']==project_name:"", 'context': ""    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"", 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 101, 'coloffset': 11, 'linematch': ""if project_item['project_name']==project_name:"", 'context': ""    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"", 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 101, 'coloffset': 11, 'linematch': ""if project_item['project_name']==project_name:"", 'context': ""    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"", 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 101, 'coloffset': 11, 'linematch': ""if project_item['project_name']==project_name:"", 'context': ""    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"", 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 92, 'coloffset': 0, 'linematch': 'def remove(project_name:str = typer.Option(...,""--project-name"",""-pn"",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=""Project Name which you used while adding 🥺"")):', 'context': '        typer.echo(\'Use \' +command + \' to add new project\')\n        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,""--project-name"",""-pn"",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Removes a project with specified PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    index = -1', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 92, 'coloffset': 0, 'linematch': 'def remove(project_name:str = typer.Option(...,""--project-name"",""-pn"",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=""Project Name which you used while adding 🥺"")):', 'context': '        typer.echo(\'Use \' +command + \' to add new project\')\n        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,""--project-name"",""-pn"",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Removes a project with specified PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    index = -1', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 93, 'coloffset': 4, 'linematch': '""""""', 'context': '        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,""--project-name"",""-pn"",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Removes a project with specified PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 96, 'coloffset': 4, 'linematch': 'current_config = JsonDataOperations.read()', 'context': 'def remove(project_name:str = typer.Option(...,""--project-name"",""-pn"",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=""Project Name which you used while adding 🥺"")):\n    """"""\n    Removes a project with specified PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config[\'projects\']:\n        index += 1\n        if project_item[\'project_name\']==project_name:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 97, 'coloffset': 4, 'linematch': 'index = -1', 'context': '    """"""\n    Removes a project with specified PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config[\'projects\']:\n        index += 1\n        if project_item[\'project_name\']==project_name:\n            current_config[\'projects\'].pop(index)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 98, 'coloffset': 4, 'linematch': 'found = False', 'context': '    Removes a project with specified PROJECT_NAME\n    """"""\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config[\'projects\']:\n        index += 1\n        if project_item[\'project_name\']==project_name:\n            current_config[\'projects\'].pop(index)\n            found = True', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 99, 'coloffset': 4, 'linematch': ""for project_item in current_config['projects']:"", 'context': '    """"""\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config[\'projects\']:\n        index += 1\n        if project_item[\'project_name\']==project_name:\n            current_config[\'projects\'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 107, 'coloffset': 4, 'linematch': 'if found==False:', 'context': '            found = True\n            JsonDataOperations.update(current_config)\n            break\n\n    if found==False:\n        echo_text = typer.style(""Project with this name is not present!"",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n        typer.echo(echo_text, err=True)\n    else:\n        typer.secho(\'Removed Successfully!\',fg= typer.colors.BRIGHT_GREEN)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #172', 'line': 99, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)""], 'failure': []}, {'name': 'Mutant #173', 'line': 100, 'description': [""    monkeypatch.setattr(os, 'system', mock_os_sytem)""], 'failure': []}, {'name': 'Mutant #174', 'line': 101, 'description': [""    monkeypatch.setattr(os, 'chdir', mock_os_chdir)""], 'failure': []}, {'name': 'Mutant #175', 'line': 103, 'description': ['    result = runner.invoke(app, [""open"", ""abc""])'], 'failure': []}, {'name': 'Mutant #176', 'line': 103, 'description': ['    result = runner.invoke(app, [""open"", ""abc""])'], 'failure': []}, {'name': 'Mutant #177', 'line': 103, 'description': ['    result = runner.invoke(app, [""open"", ""abc""])'], 'failure': []}, {'name': 'Mutant #178', 'line': 104, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #179', 'line': 104, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #180', 'line': 105, 'description': ['    assert ""Project Not Found!"" not in result.stdout'], 'failure': [{'inner': '--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -102,7 +102,7 @@\n \n     result = runner.invoke(app, [""open"", ""abc""])\n     assert result.exit_code == 0\n-    assert ""Project Not Found!"" not in result.stdout\n+    assert ""XXProject Not Found!XX"" not in result.stdout\n     assert ""Project Found!"" in result.stdout\n \n def test_remove_not_present_project(monkeypatch, config_with_project):\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #181', 'line': 105, 'description': ['    assert ""Project Not Found!"" not in result.stdout'], 'failure': []}, {'name': 'Mutant #182', 'line': 106, 'description': ['    assert ""Project Found!"" in result.stdout'], 'failure': []}, {'name': 'Mutant #183', 'line': 106, 'description': ['    assert ""Project Found!"" in result.stdout'], 'failure': []}]",91.66666666666666,['CL001' 'BOOL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,list_projects,42-51,"[{'lineno': 49, 'coloffset': 12, 'linematch': ""if project_item['project_name'].startswith(incomplete):"", 'context': '        """"""\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config[\'projects\']:\n            if project_item[\'project_name\'].startswith(incomplete):\n                project_name_list.append(project_item[\'project_name\'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 42, 'coloffset': 4, 'linematch': 'def list_projects(cls,incomplete: str):', 'context': '    editor_list = [\'VSCode\',\'Sublime Text\']\n\n\n    @classmethod\n    def list_projects(cls,incomplete: str):\n        """"""\n        Provides autocomplete for list of projects\n        """"""\n        current_config = JsonDataOperations.read()\n        project_name_list = []', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 43, 'coloffset': 8, 'linematch': '""""""', 'context': '\n\n    @classmethod\n    def list_projects(cls,incomplete: str):\n        """"""\n        Provides autocomplete for list of projects\n        """"""\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config[\'projects\']:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 46, 'coloffset': 8, 'linematch': 'current_config = JsonDataOperations.read()', 'context': '    def list_projects(cls,incomplete: str):\n        """"""\n        Provides autocomplete for list of projects\n        """"""\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config[\'projects\']:\n            if project_item[\'project_name\'].startswith(incomplete):\n                project_name_list.append(project_item[\'project_name\'])\n        return project_name_list', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 47, 'coloffset': 8, 'linematch': 'project_name_list = []', 'context': '        """"""\n        Provides autocomplete for list of projects\n        """"""\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config[\'projects\']:\n            if project_item[\'project_name\'].startswith(incomplete):\n                project_name_list.append(project_item[\'project_name\'])\n        return project_name_list\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 48, 'coloffset': 8, 'linematch': ""for project_item in current_config['projects']:"", 'context': '        Provides autocomplete for list of projects\n        """"""\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config[\'projects\']:\n            if project_item[\'project_name\'].startswith(incomplete):\n                project_name_list.append(project_item[\'project_name\'])\n        return project_name_list\n\n    @classmethod', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 51, 'coloffset': 8, 'linematch': 'return project_name_list', 'context': '        project_name_list = []\n        for project_item in current_config[\'projects\']:\n            if project_item[\'project_name\'].startswith(incomplete):\n                project_name_list.append(project_item[\'project_name\'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        """"""\n        Provides autocomplete for list of editors', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #146', 'line': 50, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)""], 'failure': []}, {'name': 'Mutant #147', 'line': 51, 'description': [""    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)""], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,list_of_editors,54-62,"[{'lineno': 60, 'coloffset': 12, 'linematch': 'if editor.startswith(incomplete):', 'context': '        Provides autocomplete for list of editors\n        """"""\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 54, 'coloffset': 4, 'linematch': 'def list_of_editors(cls,incomplete:str):', 'context': '                project_name_list.append(project_item[\'project_name\'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        """"""\n        Provides autocomplete for list of editors\n        """"""\n        editors_matched = []\n        for editor in cls.editor_list:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 55, 'coloffset': 8, 'linematch': '""""""', 'context': '        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        """"""\n        Provides autocomplete for list of editors\n        """"""\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 58, 'coloffset': 8, 'linematch': 'editors_matched = []', 'context': '    def list_of_editors(cls,incomplete:str):\n        """"""\n        Provides autocomplete for list of editors\n        """"""\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 59, 'coloffset': 8, 'linematch': 'for editor in cls.editor_list:', 'context': '        """"""\n        Provides autocomplete for list of editors\n        """"""\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 62, 'coloffset': 8, 'linematch': 'return editor', 'context': '        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #151', 'line': 54, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #152', 'line': 54, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #153', 'line': 55, 'description': ['    assert ""Project added successfully!!"" in result.stdout'], 'failure': []}, {'name': 'Mutant #154', 'line': 55, 'description': ['    assert ""Project added successfully!!"" in result.stdout'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,config_with_no_project,11-12,"[{'lineno': 11, 'coloffset': 0, 'linematch': 'def config_with_no_project():', 'context': 'def config_with_project():\n    return {""default_editor"": ""code ."", ""projects"": [{\'project_name\':\'abc\',\'path\':\'/abc/def/test\'}]}\n\n@pytest.fixture(scope=""package"")\ndef config_with_no_project():\n    return {""default_editor"": ""code ."", ""projects"": []}', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 12, 'coloffset': 4, 'linematch': 'return {""default_editor"": ""code ."", ""projects"": []}', 'context': '    return {""default_editor"": ""code ."", ""projects"": [{\'project_name\':\'abc\',\'path\':\'/abc/def/test\'}]}\n\n@pytest.fixture(scope=""package"")\ndef config_with_no_project():\n    return {""default_editor"": ""code ."", ""projects"": []}', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #127', 'line': 11, 'description': ['runner = CliRunner()'], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
code_output.json,read,21-28,"[{'lineno': 21, 'coloffset': 4, 'linematch': 'def read(cls):', 'context': '        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, \'w\') as outfile:\n            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        """""" \n        Reads the setting.json file\n        """"""\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 22, 'coloffset': 8, 'linematch': '"""""" ', 'context': '            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        """""" \n        Reads the setting.json file\n        """"""\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 25, 'coloffset': 8, 'linematch': 'f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)', 'context': '    def read(cls):\n        """""" \n        Reads the setting.json file\n        """"""\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 26, 'coloffset': 8, 'linematch': 'data = json.load(f)', 'context': '        """""" \n        Reads the setting.json file\n        """"""\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 27, 'coloffset': 8, 'linematch': 'f.close()', 'context': '        Reads the setting.json file\n        """"""\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 28, 'coloffset': 8, 'linematch': 'return data', 'context': '        """"""\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:\n    """"""\n    This class is used for providing autocomplete suggestions', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #129', 'line': 21, 'description': ['    result = runner.invoke(app, [""see""])'], 'failure': []}, {'name': 'Mutant #130', 'line': 21, 'description': ['    result = runner.invoke(app, [""see""])'], 'failure': []}, {'name': 'Mutant #131', 'line': 22, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #132', 'line': 22, 'description': ['    assert result.exit_code == 0'], 'failure': []}, {'name': 'Mutant #133', 'line': 23, 'description': ['    assert ""Seems like you have not added any project yet!!!"" in result.stdout '], 'failure': []}, {'name': 'Mutant #134', 'line': 23, 'description': ['    assert ""Seems like you have not added any project yet!!!"" in result.stdout '], 'failure': []}]",100.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,calculate_area,4-22,"[{'lineno': 14, 'coloffset': 4, 'linematch': 'if shape == ""rectangle"":', 'context': '        - No exception type (EXC)\n        - Missing type annotation (ANNOT)\n        - Unused Variables (UNUSED)\n    """"""\n    if shape == ""rectangle"":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == ""circle"":\n            radius = dimensions[0]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 18, 'coloffset': 8, 'linematch': 'if shape == ""circle"":', 'context': '    if shape == ""rectangle"":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == ""circle"":\n            radius = dimensions[0]\n            return 3.14 * dimensions[0] ** 2\n        else:\n            raise ValueError(""Unsupported shape"")\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 4, 'coloffset': 0, 'linematch': 'def calculate_area(shape,dimensions):', 'context': '"""""" Config Checks Project. """"""\nfrom typing import Tuple\n\ndef calculate_area(shape,dimensions):\n    """"""This function calculates the area of a shape based on its dimensions.\n\n    Contains Patterns:\n        - Double Nested If (DNI)\n        - Magic Number (MN)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 18, 'coloffset': 8, 'linematch': 'if shape == ""circle"":', 'context': '    if shape == ""rectangle"":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == ""circle"":\n            radius = dimensions[0]\n            return 3.14 * dimensions[0] ** 2\n        else:\n            raise ValueError(""Unsupported shape"")\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 4, 'coloffset': 0, 'linematch': 'def calculate_area(shape,dimensions):', 'context': '"""""" Config Checks Project. """"""\nfrom typing import Tuple\n\ndef calculate_area(shape,dimensions):\n    """"""This function calculates the area of a shape based on its dimensions.\n\n    Contains Patterns:\n        - Double Nested If (DNI)\n        - Magic Number (MN)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 5, 'coloffset': 4, 'linematch': '""""""This function calculates the area of a shape based on its dimensions.', 'context': '"""""" Config Checks Project. """"""\nfrom typing import Tuple\n\ndef calculate_area(shape,dimensions):\n    """"""This function calculates the area of a shape based on its dimensions.\n\n    Contains Patterns:\n        - Double Nested If (DNI)\n        - Magic Number (MN)\n        - No exception type (EXC)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 14, 'coloffset': 4, 'linematch': 'if shape == ""rectangle"":', 'context': '        - No exception type (EXC)\n        - Missing type annotation (ANNOT)\n        - Unused Variables (UNUSED)\n    """"""\n    if shape == ""rectangle"":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == ""circle"":\n            radius = dimensions[0]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #1', 'line': 14, 'description': ['    if shape == ""rectangle"":'], 'failure': []}, {'name': 'Mutant #2', 'line': 14, 'description': ['    if shape == ""rectangle"":'], 'failure': []}, {'name': 'Mutant #3', 'line': 15, 'description': ['        area = dimensions[0] * dimensions[1]'], 'failure': []}, {'name': 'Mutant #4', 'line': 15, 'description': ['        area = dimensions[0] * dimensions[1]'], 'failure': []}, {'name': 'Mutant #5', 'line': 15, 'description': ['        area = dimensions[0] * dimensions[1]'], 'failure': []}, {'name': 'Mutant #6', 'line': 15, 'description': ['        area = dimensions[0] * dimensions[1]'], 'failure': []}, {'name': 'Mutant #7', 'line': 18, 'description': ['        if shape == ""circle"":'], 'failure': []}, {'name': 'Mutant #8', 'line': 18, 'description': ['        if shape == ""circle"":'], 'failure': []}, {'name': 'Mutant #9', 'line': 19, 'description': ['            radius = dimensions[0]'], 'failure': []}, {'name': 'Mutant #10', 'line': 19, 'description': ['            radius = dimensions[0]'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -16,7 +16,7 @@\n         return area\n     else:\n         if shape == ""circle"":\n-            radius = dimensions[0]\n+            radius = None\n             return 3.14 * dimensions[0] ** 2\n         else:\n             raise ValueError(""Unsupported shape"")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #11', 'line': 20, 'description': ['            return 3.14 * dimensions[0] ** 2'], 'failure': []}, {'name': 'Mutant #12', 'line': 20, 'description': ['            return 3.14 * dimensions[0] ** 2'], 'failure': []}, {'name': 'Mutant #13', 'line': 20, 'description': ['            return 3.14 * dimensions[0] ** 2'], 'failure': []}, {'name': 'Mutant #14', 'line': 20, 'description': ['            return 3.14 * dimensions[0] ** 2'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -17,7 +17,7 @@\n     else:\n         if shape == ""circle"":\n             radius = dimensions[0]\n-            return 3.14 * dimensions[0] ** 2\n+            return 3.14 * dimensions[0] * 2\n         else:\n             raise ValueError(""Unsupported shape"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #15', 'line': 20, 'description': ['            return 3.14 * dimensions[0] ** 2'], 'failure': []}, {'name': 'Mutant #16', 'line': 22, 'description': ['            raise ValueError(""Unsupported shape"")'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -19,7 +19,7 @@\n             radius = dimensions[0]\n             return 3.14 * dimensions[0] ** 2\n         else:\n-            raise ValueError(""Unsupported shape"")\n+            raise ValueError(""XXUnsupported shapeXX"")\n \n class User:\n     """"""This class represents a user with a name and email address.\n', 'type': 'failure', 'message': 'bad_survived'}]}]",81.25,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,check_none,36-44,"[{'lineno': 42, 'coloffset': 4, 'linematch': 'if value is not None:', 'context': '\n    Contains Pattern:\n        - none comparision (NONE)\n    """"""\n    if value is not None:\n        return False\n    return True\n\n# TODO: Not passing check id: \'EXC001\', name: \'no-exception-type\', pattern: \'.//FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]\'\ndef handle_file(filename):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def check_none(value):', 'context': '        self.email = email\n        return\n\n# TODO: Not passing pattern check id: \'NONE001\', name: \'none-comparison\'\ndef check_none(value):\n    """"""This function checks if a value is None.\n\n    Contains Pattern:\n        - none comparision (NONE)\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 36, 'coloffset': 0, 'linematch': 'def check_none(value):', 'context': '        self.email = email\n        return\n\n# TODO: Not passing pattern check id: \'NONE001\', name: \'none-comparison\'\ndef check_none(value):\n    """"""This function checks if a value is None.\n\n    Contains Pattern:\n        - none comparision (NONE)\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 37, 'coloffset': 4, 'linematch': '""""""This function checks if a value is None.', 'context': '        return\n\n# TODO: Not passing pattern check id: \'NONE001\', name: \'none-comparison\'\ndef check_none(value):\n    """"""This function checks if a value is None.\n\n    Contains Pattern:\n        - none comparision (NONE)\n    """"""\n    if value is not None:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 42, 'coloffset': 4, 'linematch': 'if value is not None:', 'context': '\n    Contains Pattern:\n        - none comparision (NONE)\n    """"""\n    if value is not None:\n        return False\n    return True\n\n# TODO: Not passing check id: \'EXC001\', name: \'no-exception-type\', pattern: \'.//FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]\'\ndef handle_file(filename):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 44, 'coloffset': 4, 'linematch': 'return True', 'context': '        - none comparision (NONE)\n    """"""\n    if value is not None:\n        return False\n    return True\n\n# TODO: Not passing check id: \'EXC001\', name: \'no-exception-type\', pattern: \'.//FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]\'\ndef handle_file(filename):\n    """"""\n    This function attempts to read a file but does not handle specific exception', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #322', 'line': 42, 'description': ['    if value is not None:'], 'failure': []}, {'name': 'Mutant #323', 'line': 43, 'description': ['        return False'], 'failure': []}, {'name': 'Mutant #324', 'line': 44, 'description': ['    return True'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,is_valid,60-70,"[{'lineno': 67, 'coloffset': 4, 'linematch': 'if value is True:', 'context': '\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    """"""\n    if value is True:\n        return ""true value""\n    else:\n        return ""false value""\n\n# TODO: not passing check id: \'MVKL001\', name: \'multi-value-key-literal\', pattern: \'.//FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 67, 'coloffset': 7, 'linematch': 'if value is True:', 'context': '\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    """"""\n    if value is True:\n        return ""true value""\n    else:\n        return ""false value""\n\n# TODO: not passing check id: \'MVKL001\', name: \'multi-value-key-literal\', pattern: \'.//FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 60, 'coloffset': 0, 'linematch': 'def is_valid(value):', 'context': '            data = f.read()\n    except IOError as e:\n        print(f""Error reading file: {e}"")\n\ndef is_valid(value):\n    """"""\n    This function checks if a value is true.\n\n    Contains Patterns:\n        - Boolean Comparison (BOOL)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 60, 'coloffset': 0, 'linematch': 'def is_valid(value):', 'context': '            data = f.read()\n    except IOError as e:\n        print(f""Error reading file: {e}"")\n\ndef is_valid(value):\n    """"""\n    This function checks if a value is true.\n\n    Contains Patterns:\n        - Boolean Comparison (BOOL)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 61, 'coloffset': 4, 'linematch': '""""""', 'context': '    except IOError as e:\n        print(f""Error reading file: {e}"")\n\ndef is_valid(value):\n    """"""\n    This function checks if a value is true.\n\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 67, 'coloffset': 4, 'linematch': 'if value is True:', 'context': '\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    """"""\n    if value is True:\n        return ""true value""\n    else:\n        return ""false value""\n\n# TODO: not passing check id: \'MVKL001\', name: \'multi-value-key-literal\', pattern: \'.//FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #23', 'line': 67, 'description': ['    if value is True:'], 'failure': []}, {'name': 'Mutant #24', 'line': 67, 'description': ['    if value is True:'], 'failure': []}, {'name': 'Mutant #25', 'line': 68, 'description': ['        return ""true value""'], 'failure': []}, {'name': 'Mutant #26', 'line': 70, 'description': ['        return ""false value""'], 'failure': []}]",100.0,['CL001' 'BOOL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,get_user_data,73-85,"[{'lineno': 82, 'coloffset': 4, 'linematch': 'if ""name"" in user_data.keys():', 'context': '        - Key Function (KFUN)\n        - Single Nested If (SNI)\n        - Multi-value key literal (MVKL)\n    """"""\n    if ""name"" in user_data.keys():\n        return user_data[""name""]\n    else:\n        return None\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 73, 'coloffset': 0, 'linematch': 'def get_user_data(user_data):', 'context': '    else:\n        return ""false value""\n\n# TODO: not passing check id: \'MVKL001\', name: \'multi-value-key-literal\', pattern: \'.//FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]\ndef get_user_data(user_data):\n    """"""\n    This function retrieves a user\'s name from a dictionary using the keys() function\n\n    Contains Patterns:\n        - Key Function (KFUN)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 82, 'coloffset': 17, 'linematch': 'if ""name"" in user_data.keys():', 'context': '        - Key Function (KFUN)\n        - Single Nested If (SNI)\n        - Multi-value key literal (MVKL)\n    """"""\n    if ""name"" in user_data.keys():\n        return user_data[""name""]\n    else:\n        return None\n\n', 'pattern': './/FunctionDef//Call/func/Attribute[@attr=""keys""]', 'check_id': 'KF001', 'check_name': 'key-function'}, {'lineno': 73, 'coloffset': 0, 'linematch': 'def get_user_data(user_data):', 'context': '    else:\n        return ""false value""\n\n# TODO: not passing check id: \'MVKL001\', name: \'multi-value-key-literal\', pattern: \'.//FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]\ndef get_user_data(user_data):\n    """"""\n    This function retrieves a user\'s name from a dictionary using the keys() function\n\n    Contains Patterns:\n        - Key Function (KFUN)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 74, 'coloffset': 4, 'linematch': '""""""', 'context': '        return ""false value""\n\n# TODO: not passing check id: \'MVKL001\', name: \'multi-value-key-literal\', pattern: \'.//FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]\ndef get_user_data(user_data):\n    """"""\n    This function retrieves a user\'s name from a dictionary using the keys() function\n\n    Contains Patterns:\n        - Key Function (KFUN)\n        - Single Nested If (SNI)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 82, 'coloffset': 4, 'linematch': 'if ""name"" in user_data.keys():', 'context': '        - Key Function (KFUN)\n        - Single Nested If (SNI)\n        - Multi-value key literal (MVKL)\n    """"""\n    if ""name"" in user_data.keys():\n        return user_data[""name""]\n    else:\n        return None\n\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #34', 'line': 83, 'description': ['        return user_data[""name""]'], 'failure': []}, {'name': 'Mutant #305', 'line': 82, 'description': ['    if ""name"" in user_data.keys():'], 'failure': []}, {'name': 'Mutant #306', 'line': 82, 'description': ['    if ""name"" in user_data.keys():'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'KF001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//Call/func/Attribute[@attr=""keys""]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 1, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,handle_request,132-142,"[{'lineno': 134, 'coloffset': 4, 'linematch': 'if method == ""GET"":', 'context': '    nested_function_2()\n\ndef handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""\n        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 136, 'coloffset': 4, 'linematch': 'elif method == ""POST"":', 'context': 'def handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""\n        else:\n            return ""Processing POST request without data""\n    else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 137, 'coloffset': 8, 'linematch': 'if data is not None:', 'context': '    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""\n        else:\n            return ""Processing POST request without data""\n    else:\n        return ""Unsupported method""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 137, 'coloffset': 8, 'linematch': 'if data is not None:', 'context': '    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""\n        else:\n            return ""Processing POST request without data""\n    else:\n        return ""Unsupported method""', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 132, 'coloffset': 0, 'linematch': 'def handle_request(method, data):', 'context': '        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 136, 'coloffset': 4, 'linematch': 'elif method == ""POST"":', 'context': 'def handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""\n        else:\n            return ""Processing POST request without data""\n    else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 137, 'coloffset': 8, 'linematch': 'if data is not None:', 'context': '    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""\n        else:\n            return ""Processing POST request without data""\n    else:\n        return ""Unsupported method""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 132, 'coloffset': 0, 'linematch': 'def handle_request(method, data):', 'context': '        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 133, 'coloffset': 4, 'linematch': '""""""Function with multiple conditions (COND) and count method lines (CML)""""""', 'context': '            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 134, 'coloffset': 4, 'linematch': 'if method == ""GET"":', 'context': '    nested_function_2()\n\ndef handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:\n            return ""Processing POST request with data""\n        else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 132, 'coloffset': 0, 'linematch': 'def handle_request(method, data):', 'context': '        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    """"""Function with multiple conditions (COND) and count method lines (CML)""""""\n    if method == ""GET"":\n        return ""Processing GET request""\n    elif method == ""POST"":\n        if data is not None:', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #47', 'line': 134, 'description': ['    if method == ""GET"":'], 'failure': []}, {'name': 'Mutant #48', 'line': 134, 'description': ['    if method == ""GET"":'], 'failure': []}, {'name': 'Mutant #49', 'line': 135, 'description': ['        return ""Processing GET request""'], 'failure': []}, {'name': 'Mutant #50', 'line': 136, 'description': ['    elif method == ""POST"":'], 'failure': []}, {'name': 'Mutant #51', 'line': 136, 'description': ['    elif method == ""POST"":'], 'failure': []}, {'name': 'Mutant #52', 'line': 137, 'description': ['        if data is not None:'], 'failure': []}, {'name': 'Mutant #53', 'line': 138, 'description': ['            return ""Processing POST request with data""'], 'failure': []}, {'name': 'Mutant #54', 'line': 140, 'description': ['            return ""Processing POST request without data""'], 'failure': []}, {'name': 'Mutant #55', 'line': 142, 'description': ['        return ""Unsupported method""'], 'failure': []}]",100.0,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,filter_data,145-152,"[{'lineno': 148, 'coloffset': 4, 'linematch': 'if condition:', 'context': '# TODO: not passing check id: \'CL002\', name: \'nested-condition-loops\', pattern: \'.//FunctionDef//if//For\'\ndef filter_data(data, condition):\n    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 150, 'coloffset': 12, 'linematch': 'if item is not None:', 'context': '    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 150, 'coloffset': 12, 'linematch': 'if item is not None:', 'context': '    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 145, 'coloffset': 0, 'linematch': 'def filter_data(data, condition):', 'context': '    else:\n        return ""Unsupported method""\n\n# TODO: not passing check id: \'CL002\', name: \'nested-condition-loops\', pattern: \'.//FunctionDef//if//For\'\ndef filter_data(data, condition):\n    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 150, 'coloffset': 12, 'linematch': 'if item is not None:', 'context': '    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 145, 'coloffset': 0, 'linematch': 'def filter_data(data, condition):', 'context': '    else:\n        return ""Unsupported method""\n\n# TODO: not passing check id: \'CL002\', name: \'nested-condition-loops\', pattern: \'.//FunctionDef//if//For\'\ndef filter_data(data, condition):\n    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 146, 'coloffset': 4, 'linematch': '""""""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""', 'context': '        return ""Unsupported method""\n\n# TODO: not passing check id: \'CL002\', name: \'nested-condition-loops\', pattern: \'.//FunctionDef//if//For\'\ndef filter_data(data, condition):\n    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 147, 'coloffset': 4, 'linematch': 'filtered_data = []', 'context': '\n# TODO: not passing check id: \'CL002\', name: \'nested-condition-loops\', pattern: \'.//FunctionDef//if//For\'\ndef filter_data(data, condition):\n    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 148, 'coloffset': 4, 'linematch': 'if condition:', 'context': '# TODO: not passing check id: \'CL002\', name: \'nested-condition-loops\', pattern: \'.//FunctionDef//if//For\'\ndef filter_data(data, condition):\n    """"""Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}""""""\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 152, 'coloffset': 4, 'linematch': 'return filtered_data', 'context': '    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""\n    This function classifies a number as positive, negative, or zero.\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #56', 'line': 147, 'description': ['    filtered_data = []'], 'failure': []}, {'name': 'Mutant #309', 'line': 150, 'description': ['            if item is not None:'], 'failure': []}]",100.0,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,classify_number,154-170,"[{'lineno': 161, 'coloffset': 4, 'linematch': 'if number > 0:', 'context': '\n    Contains Patterns:\n    - Nested condition (IFIF)\n    """"""\n    if number > 0:\n        if number > 100:\n            return ""Large positive number""\n        else:\n            return ""Positive number""\n    else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 162, 'coloffset': 8, 'linematch': 'if number > 100:', 'context': '    Contains Patterns:\n    - Nested condition (IFIF)\n    """"""\n    if number > 0:\n        if number > 100:\n            return ""Large positive number""\n        else:\n            return ""Positive number""\n    else:\n        if number < 0:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 167, 'coloffset': 8, 'linematch': 'if number < 0:', 'context': '            return ""Large positive number""\n        else:\n            return ""Positive number""\n    else:\n        if number < 0:\n            return ""Negative number""\n        else:\n            return ""Zero""\n\ndef calculate_factorial(n, start=1):', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 162, 'coloffset': 8, 'linematch': 'if number > 100:', 'context': '    Contains Patterns:\n    - Nested condition (IFIF)\n    """"""\n    if number > 0:\n        if number > 100:\n            return ""Large positive number""\n        else:\n            return ""Positive number""\n    else:\n        if number < 0:', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 154, 'coloffset': 0, 'linematch': 'def classify_number(number):', 'context': '            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 162, 'coloffset': 8, 'linematch': 'if number > 100:', 'context': '    Contains Patterns:\n    - Nested condition (IFIF)\n    """"""\n    if number > 0:\n        if number > 100:\n            return ""Large positive number""\n        else:\n            return ""Positive number""\n    else:\n        if number < 0:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 167, 'coloffset': 8, 'linematch': 'if number < 0:', 'context': '            return ""Large positive number""\n        else:\n            return ""Positive number""\n    else:\n        if number < 0:\n            return ""Negative number""\n        else:\n            return ""Zero""\n\ndef calculate_factorial(n, start=1):', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 154, 'coloffset': 0, 'linematch': 'def classify_number(number):', 'context': '            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 155, 'coloffset': 4, 'linematch': '""""""', 'context': '                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 161, 'coloffset': 4, 'linematch': 'if number > 0:', 'context': '\n    Contains Patterns:\n    - Nested condition (IFIF)\n    """"""\n    if number > 0:\n        if number > 100:\n            return ""Large positive number""\n        else:\n            return ""Positive number""\n    else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 154, 'coloffset': 0, 'linematch': 'def classify_number(number):', 'context': '            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    """"""\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #58', 'line': 161, 'description': ['    if number > 0:'], 'failure': []}, {'name': 'Mutant #59', 'line': 161, 'description': ['    if number > 0:'], 'failure': []}, {'name': 'Mutant #60', 'line': 162, 'description': ['        if number > 100:'], 'failure': []}, {'name': 'Mutant #61', 'line': 162, 'description': ['        if number > 100:'], 'failure': []}, {'name': 'Mutant #62', 'line': 163, 'description': ['            return ""Large positive number""'], 'failure': []}, {'name': 'Mutant #63', 'line': 165, 'description': ['            return ""Positive number""'], 'failure': []}, {'name': 'Mutant #64', 'line': 167, 'description': ['        if number < 0:'], 'failure': []}, {'name': 'Mutant #65', 'line': 167, 'description': ['        if number < 0:'], 'failure': []}, {'name': 'Mutant #66', 'line': 168, 'description': ['            return ""Negative number""'], 'failure': []}, {'name': 'Mutant #67', 'line': 170, 'description': ['            return ""Zero""'], 'failure': []}]",100.0,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,calculate_factorial,172-184,"[{'lineno': 178, 'coloffset': 4, 'linematch': 'if n < 0:', 'context': '    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    """"""\n    if n < 0:\n        raise ValueError(""Factorial is not defined for negative numbers"")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 172, 'coloffset': 0, 'linematch': 'def calculate_factorial(n, start=1):', 'context': '            return ""Negative number""\n        else:\n            return ""Zero""\n\ndef calculate_factorial(n, start=1):\n    """"""\n    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 172, 'coloffset': 0, 'linematch': 'def calculate_factorial(n, start=1):', 'context': '            return ""Negative number""\n        else:\n            return ""Zero""\n\ndef calculate_factorial(n, start=1):\n    """"""\n    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 181, 'coloffset': 4, 'linematch': 'for i in range(start, n + 1):', 'context': '    """"""\n    if n < 0:\n        raise ValueError(""Factorial is not defined for negative numbers"")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):', 'pattern': './/FunctionDef//For[.//For]', 'check_id': 'F001', 'check_name': 'nested-loop-conditions-ff'}, {'lineno': 173, 'coloffset': 4, 'linematch': '""""""', 'context': '        else:\n            return ""Zero""\n\ndef calculate_factorial(n, start=1):\n    """"""\n    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    """"""\n    if n < 0:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 178, 'coloffset': 4, 'linematch': 'if n < 0:', 'context': '    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    """"""\n    if n < 0:\n        raise ValueError(""Factorial is not defined for negative numbers"")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 180, 'coloffset': 4, 'linematch': 'factorial = 1', 'context': '    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    """"""\n    if n < 0:\n        raise ValueError(""Factorial is not defined for negative numbers"")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 181, 'coloffset': 4, 'linematch': 'for i in range(start, n + 1):', 'context': '    """"""\n    if n < 0:\n        raise ValueError(""Factorial is not defined for negative numbers"")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 184, 'coloffset': 4, 'linematch': 'return factorial', 'context': '    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    """"""\n    This function validates user input for name and email. (Simple example)\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #68', 'line': 172, 'description': ['def calculate_factorial(n, start=1):'], 'failure': []}, {'name': 'Mutant #69', 'line': 178, 'description': ['    if n < 0:'], 'failure': []}, {'name': 'Mutant #70', 'line': 178, 'description': ['    if n < 0:'], 'failure': []}, {'name': 'Mutant #71', 'line': 179, 'description': ['        raise ValueError(""Factorial is not defined for negative numbers"")'], 'failure': []}, {'name': 'Mutant #72', 'line': 180, 'description': ['    factorial = 1'], 'failure': []}, {'name': 'Mutant #73', 'line': 180, 'description': ['    factorial = 1'], 'failure': []}, {'name': 'Mutant #74', 'line': 181, 'description': ['    for i in range(start, n + 1):'], 'failure': []}, {'name': 'Mutant #75', 'line': 181, 'description': ['    for i in range(start, n + 1):'], 'failure': []}, {'name': 'Mutant #79', 'line': 183, 'description': ['            factorial *= j'], 'failure': []}, {'name': 'Mutant #80', 'line': 183, 'description': ['            factorial *= j'], 'failure': []}, {'name': 'Mutant #329', 'line': 182, 'description': ['        for j in range(2, i + 1):'], 'failure': []}, {'name': 'Mutant #330', 'line': 182, 'description': ['        for j in range(2, i + 1):'], 'failure': []}, {'name': 'Mutant #331', 'line': 182, 'description': ['        for j in range(2, i + 1):'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'F001' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef//For[.//For]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 1, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,calculate_grade,206-220,"[{'lineno': 212, 'coloffset': 4, 'linematch': 'if score >= 90:', 'context': '    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""\n    if score >= 90:\n        return ""A""\n    elif score >= 80:\n        return ""B""\n    else:\n        if score >= 70:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 214, 'coloffset': 4, 'linematch': 'elif score >= 80:', 'context': '    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""\n    if score >= 90:\n        return ""A""\n    elif score >= 80:\n        return ""B""\n    else:\n        if score >= 70:\n            return ""C""\n        else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 217, 'coloffset': 8, 'linematch': 'if score >= 70:', 'context': '        return ""A""\n    elif score >= 80:\n        return ""B""\n    else:\n        if score >= 70:\n            return ""C""\n        else:\n            return ""F""\n\n# TODO: id: \'COMPLEX001\', name: \'complex-expressions\', pattern: \'.//FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 206, 'coloffset': 0, 'linematch': 'def calculate_grade(score):', 'context': '    """"""\n    with open(filename, ""w"") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    """"""\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 214, 'coloffset': 4, 'linematch': 'elif score >= 80:', 'context': '    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""\n    if score >= 90:\n        return ""A""\n    elif score >= 80:\n        return ""B""\n    else:\n        if score >= 70:\n            return ""C""\n        else:', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 217, 'coloffset': 8, 'linematch': 'if score >= 70:', 'context': '        return ""A""\n    elif score >= 80:\n        return ""B""\n    else:\n        if score >= 70:\n            return ""C""\n        else:\n            return ""F""\n\n# TODO: id: \'COMPLEX001\', name: \'complex-expressions\', pattern: \'.//FunctionDef//BinOp[count(descendant::BinOp) > 2]', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 206, 'coloffset': 0, 'linematch': 'def calculate_grade(score):', 'context': '    """"""\n    with open(filename, ""w"") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    """"""\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 207, 'coloffset': 4, 'linematch': '""""""', 'context': '    with open(filename, ""w"") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    """"""\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""\n    if score >= 90:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 212, 'coloffset': 4, 'linematch': 'if score >= 90:', 'context': '    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""\n    if score >= 90:\n        return ""A""\n    elif score >= 80:\n        return ""B""\n    else:\n        if score >= 70:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 206, 'coloffset': 0, 'linematch': 'def calculate_grade(score):', 'context': '    """"""\n    with open(filename, ""w"") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    """"""\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    """"""', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}]","[{'name': 'Mutant #88', 'line': 212, 'description': ['    if score >= 90:'], 'failure': []}, {'name': 'Mutant #89', 'line': 212, 'description': ['    if score >= 90:'], 'failure': []}, {'name': 'Mutant #90', 'line': 213, 'description': ['        return ""A""'], 'failure': []}, {'name': 'Mutant #91', 'line': 214, 'description': ['    elif score >= 80:'], 'failure': []}, {'name': 'Mutant #92', 'line': 214, 'description': ['    elif score >= 80:'], 'failure': []}, {'name': 'Mutant #93', 'line': 215, 'description': ['        return ""B""'], 'failure': []}, {'name': 'Mutant #94', 'line': 217, 'description': ['        if score >= 70:'], 'failure': []}, {'name': 'Mutant #95', 'line': 217, 'description': ['        if score >= 70:'], 'failure': []}, {'name': 'Mutant #96', 'line': 218, 'description': ['            return ""C""'], 'failure': []}, {'name': 'Mutant #97', 'line': 220, 'description': ['            return ""F""'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001' 'MRET001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,calculate_discount,223-233,"[{'lineno': 231, 'coloffset': 4, 'linematch': 'if loyalty_points > 100:', 'context': '    Contains Pattern: Complex Expressions (COMPLEX)\n    """"""\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 223, 'coloffset': 0, 'linematch': 'def calculate_discount(price, discount_rate, loyalty_points):', 'context': '        else:\n            return ""F""\n\n# TODO: id: \'COMPLEX001\', name: \'complex-expressions\', pattern: \'.//FunctionDef//BinOp[count(descendant::BinOp) > 2]\ndef calculate_discount(price, discount_rate, loyalty_points):\n    """"""\n    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 223, 'coloffset': 0, 'linematch': 'def calculate_discount(price, discount_rate, loyalty_points):', 'context': '        else:\n            return ""F""\n\n# TODO: id: \'COMPLEX001\', name: \'complex-expressions\', pattern: \'.//FunctionDef//BinOp[count(descendant::BinOp) > 2]\ndef calculate_discount(price, discount_rate, loyalty_points):\n    """"""\n    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 224, 'coloffset': 4, 'linematch': '""""""', 'context': '            return ""F""\n\n# TODO: id: \'COMPLEX001\', name: \'complex-expressions\', pattern: \'.//FunctionDef//BinOp[count(descendant::BinOp) > 2]\ndef calculate_discount(price, discount_rate, loyalty_points):\n    """"""\n    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    """"""\n    discount = price * discount_rate', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 229, 'coloffset': 4, 'linematch': 'discount = price * discount_rate', 'context': '    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    """"""\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 230, 'coloffset': 4, 'linematch': 'final_price = price - discount - (discount * 0.1)', 'context': '\n    Contains Pattern: Complex Expressions (COMPLEX)\n    """"""\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 231, 'coloffset': 4, 'linematch': 'if loyalty_points > 100:', 'context': '    Contains Pattern: Complex Expressions (COMPLEX)\n    """"""\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 233, 'coloffset': 4, 'linematch': 'return final_price', 'context': '    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #98', 'line': 229, 'description': ['    discount = price * discount_rate'], 'failure': []}, {'name': 'Mutant #99', 'line': 229, 'description': ['    discount = price * discount_rate'], 'failure': []}, {'name': 'Mutant #100', 'line': 231, 'description': ['    if loyalty_points > 100:'], 'failure': []}, {'name': 'Mutant #101', 'line': 231, 'description': ['    if loyalty_points > 100:'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -228,7 +228,7 @@\n     """"""\n     discount = price * discount_rate\n     final_price = price - discount - (discount * 0.1)\n-    if loyalty_points > 100:\n+    if loyalty_points > 101:\n         final_price -= price * 0.05\n     return final_price\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #311', 'line': 230, 'description': ['    final_price = price - discount - (discount * 0.1)'], 'failure': []}, {'name': 'Mutant #312', 'line': 230, 'description': ['    final_price = price - discount - (discount * 0.1)'], 'failure': []}, {'name': 'Mutant #313', 'line': 230, 'description': ['    final_price = price - discount - (discount * 0.1)'], 'failure': []}, {'name': 'Mutant #314', 'line': 230, 'description': ['    final_price = price - discount - (discount * 0.1)'], 'failure': []}, {'name': 'Mutant #315', 'line': 230, 'description': ['    final_price = price - discount - (discount * 0.1)'], 'failure': []}, {'name': 'Mutant #316', 'line': 232, 'description': ['        final_price -= price * 0.05'], 'failure': []}, {'name': 'Mutant #317', 'line': 232, 'description': ['        final_price -= price * 0.05'], 'failure': []}, {'name': 'Mutant #318', 'line': 232, 'description': ['        final_price -= price * 0.05'], 'failure': []}, {'name': 'Mutant #319', 'line': 232, 'description': ['        final_price -= price * 0.05'], 'failure': []}]",92.3076923076923,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,overly_complex_function,237-272,"[{'lineno': 264, 'coloffset': 4, 'linematch': 'if len(filtered_data) > 0:', 'context': '            print(f""Item {item[\'id\']} does not meet the value thresholds"")\n        pass\n\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item[\'discounted_price\'] < 0:\n                item[\'discounted_price\'] = 0\n        global_variable += 1\n    else:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 250, 'coloffset': 8, 'linematch': ""if item['value1'] > threshold1 and item['value2'] < threshold2:"", 'context': '    """"""\n    filtered_data = []\n\n    for item in data:\n        if item[\'value1\'] > threshold1 and item[\'value2\'] < threshold2:\n            if item[\'price\'] > min_order_value:\n                discount = item[\'price\'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item[\'price\'] * 0.05 \n                item[\'discounted_price\'] = item[\'price\'] - discount', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 251, 'coloffset': 12, 'linematch': ""if item['price'] > min_order_value:"", 'context': ""    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)"", 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 253, 'coloffset': 16, 'linematch': 'if loyalty_points > 100:', 'context': '    for item in data:\n        if item[\'value1\'] > threshold1 and item[\'value2\'] < threshold2:\n            if item[\'price\'] > min_order_value:\n                discount = item[\'price\'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item[\'price\'] * 0.05 \n                item[\'discounted_price\'] = item[\'price\'] - discount\n                filtered_data.append(item)\n            else:\n                print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 266, 'coloffset': 12, 'linematch': ""if item['discounted_price'] < 0:"", 'context': '\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item[\'discounted_price\'] < 0:\n                item[\'discounted_price\'] = 0\n        global_variable += 1\n    else:\n        print(""No items met the filtering criteria."")\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 251, 'coloffset': 12, 'linematch': ""if item['price'] > min_order_value:"", 'context': ""    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)"", 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 253, 'coloffset': 16, 'linematch': 'if loyalty_points > 100:', 'context': '    for item in data:\n        if item[\'value1\'] > threshold1 and item[\'value2\'] < threshold2:\n            if item[\'price\'] > min_order_value:\n                discount = item[\'price\'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item[\'price\'] * 0.05 \n                item[\'discounted_price\'] = item[\'price\'] - discount\n                filtered_data.append(item)\n            else:\n                print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 266, 'coloffset': 12, 'linematch': ""if item['discounted_price'] < 0:"", 'context': '\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item[\'discounted_price\'] < 0:\n                item[\'discounted_price\'] = 0\n        global_variable += 1\n    else:\n        print(""No items met the filtering criteria."")\n', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 237, 'coloffset': 0, 'linematch': 'def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):', 'context': '    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    """"""\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 266, 'coloffset': 12, 'linematch': ""if item['discounted_price'] < 0:"", 'context': '\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item[\'discounted_price\'] < 0:\n                item[\'discounted_price\'] = 0\n        global_variable += 1\n    else:\n        print(""No items met the filtering criteria."")\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 251, 'coloffset': 12, 'linematch': ""if item['price'] > min_order_value:"", 'context': ""    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)"", 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 253, 'coloffset': 16, 'linematch': 'if loyalty_points > 100:', 'context': '    for item in data:\n        if item[\'value1\'] > threshold1 and item[\'value2\'] < threshold2:\n            if item[\'price\'] > min_order_value:\n                discount = item[\'price\'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item[\'price\'] * 0.05 \n                item[\'discounted_price\'] = item[\'price\'] - discount\n                filtered_data.append(item)\n            else:\n                print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 237, 'coloffset': 0, 'linematch': 'def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):', 'context': '    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    """"""\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals.', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 238, 'coloffset': 4, 'linematch': '""""""', 'context': '\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    """"""\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals.\n        - Long Parameter List (LPL): Has 7 parameters.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 247, 'coloffset': 4, 'linematch': 'filtered_data = []', 'context': '        - Long Parameter List (LPL): Has 7 parameters.\n        - Deeply Nested Control Structures (DNCS): Uses nested ifs and fors.\n        - Magic Numbers: Uses hardcoded values (thresholds, discount rate).\n    """"""\n    filtered_data = []\n\n    for item in data:\n        if item[\'value1\'] > threshold1 and item[\'value2\'] < threshold2:\n            if item[\'price\'] > min_order_value:\n                discount = item[\'price\'] * discount_rate', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 249, 'coloffset': 4, 'linematch': 'for item in data:', 'context': '        - Magic Numbers: Uses hardcoded values (thresholds, discount rate).\n    """"""\n    filtered_data = []\n\n    for item in data:\n        if item[\'value1\'] > threshold1 and item[\'value2\'] < threshold2:\n            if item[\'price\'] > min_order_value:\n                discount = item[\'price\'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item[\'price\'] * 0.05 ', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 264, 'coloffset': 4, 'linematch': 'if len(filtered_data) > 0:', 'context': '            print(f""Item {item[\'id\']} does not meet the value thresholds"")\n        pass\n\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item[\'discounted_price\'] < 0:\n                item[\'discounted_price\'] = 0\n        global_variable += 1\n    else:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 272, 'coloffset': 4, 'linematch': 'return filtered_data', 'context': '        global_variable += 1\n    else:\n        print(""No items met the filtering criteria."")\n\n    return filtered_data\n\nclass Person:\n    """"""A complex class\n    Contains Patterns:\n        - God Object (GO): Has many responsibilities.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 237, 'coloffset': 0, 'linematch': 'def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):', 'context': '    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    """"""\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals.', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 237, 'coloffset': 0, 'linematch': 'def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):', 'context': '    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    """"""\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals.', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #111', 'line': 237, 'description': ['def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=11, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n     """"""\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #112', 'line': 237, 'description': ['def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=6, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n     """"""\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #113', 'line': 237, 'description': ['def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):'], 'failure': []}, {'name': 'Mutant #114', 'line': 237, 'description': ['def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=1, min_order_value=100, global_variable=1):\n     """"""\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #115', 'line': 237, 'description': ['def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=101, global_variable=1):\n     """"""\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #116', 'line': 237, 'description': ['def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=2):\n     """"""\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #117', 'line': 247, 'description': ['    filtered_data = []'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -244,7 +244,7 @@\n         - Deeply Nested Control Structures (DNCS): Uses nested ifs and fors.\n         - Magic Numbers: Uses hardcoded values (thresholds, discount rate).\n     """"""\n-    filtered_data = []\n+    filtered_data = None\n \n     for item in data:\n         if item[\'value1\'] > threshold1 and item[\'value2\'] < threshold2:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #118', 'line': 250, 'description': [""        if item['value1'] > threshold1 and item['value2'] < threshold2:""], 'failure': []}, {'name': 'Mutant #119', 'line': 250, 'description': [""        if item['value1'] > threshold1 and item['value2'] < threshold2:""], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -247,7 +247,7 @@\n     filtered_data = []\n \n     for item in data:\n-        if item['value1'] > threshold1 and item['value2'] < threshold2:\n+        if item['value1'] >= threshold1 and item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #120', 'line': 250, 'description': [""        if item['value1'] > threshold1 and item['value2'] < threshold2:""], 'failure': []}, {'name': 'Mutant #121', 'line': 250, 'description': [""        if item['value1'] > threshold1 and item['value2'] < threshold2:""], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -247,7 +247,7 @@\n     filtered_data = []\n \n     for item in data:\n-        if item['value1'] > threshold1 and item['value2'] < threshold2:\n+        if item['value1'] > threshold1 and item['value2'] <= threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #122', 'line': 250, 'description': [""        if item['value1'] > threshold1 and item['value2'] < threshold2:""], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -247,7 +247,7 @@\n     filtered_data = []\n \n     for item in data:\n-        if item['value1'] > threshold1 and item['value2'] < threshold2:\n+        if item['value1'] > threshold1 or item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #123', 'line': 251, 'description': [""            if item['price'] > min_order_value:""], 'failure': []}, {'name': 'Mutant #124', 'line': 251, 'description': [""            if item['price'] > min_order_value:""], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -248,7 +248,7 @@\n \n     for item in data:\n         if item['value1'] > threshold1 and item['value2'] < threshold2:\n-            if item['price'] > min_order_value:\n+            if item['price'] >= min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n                     discount += item['price'] * 0.05 \n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #125', 'line': 252, 'description': [""                discount = item['price'] * discount_rate""], 'failure': []}, {'name': 'Mutant #126', 'line': 252, 'description': [""                discount = item['price'] * discount_rate""], 'failure': []}, {'name': 'Mutant #127', 'line': 252, 'description': [""                discount = item['price'] * discount_rate""], 'failure': []}, {'name': 'Mutant #128', 'line': 253, 'description': ['                if loyalty_points > 100:'], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -250,7 +250,7 @@\n         if item['value1'] > threshold1 and item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n-                if loyalty_points > 100:\n+                if loyalty_points >= 100:\n                     discount += item['price'] * 0.05 \n                 item['discounted_price'] = item['price'] - discount\n                 filtered_data.append(item)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #129', 'line': 253, 'description': ['                if loyalty_points > 100:'], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -250,7 +250,7 @@\n         if item['value1'] > threshold1 and item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n-                if loyalty_points > 100:\n+                if loyalty_points > 101:\n                     discount += item['price'] * 0.05 \n                 item['discounted_price'] = item['price'] - discount\n                 filtered_data.append(item)\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #130', 'line': 254, 'description': [""                    discount += item['price'] * 0.05 ""], 'failure': []}, {'name': 'Mutant #131', 'line': 254, 'description': [""                    discount += item['price'] * 0.05 ""], 'failure': []}, {'name': 'Mutant #132', 'line': 254, 'description': [""                    discount += item['price'] * 0.05 ""], 'failure': []}, {'name': 'Mutant #133', 'line': 254, 'description': [""                    discount += item['price'] * 0.05 ""], 'failure': []}, {'name': 'Mutant #134', 'line': 254, 'description': [""                    discount += item['price'] * 0.05 ""], 'failure': []}, {'name': 'Mutant #135', 'line': 255, 'description': [""                item['discounted_price'] = item['price'] - discount""], 'failure': []}, {'name': 'Mutant #136', 'line': 255, 'description': [""                item['discounted_price'] = item['price'] - discount""], 'failure': []}, {'name': 'Mutant #137', 'line': 255, 'description': [""                item['discounted_price'] = item['price'] - discount""], 'failure': []}, {'name': 'Mutant #138', 'line': 255, 'description': [""                item['discounted_price'] = item['price'] - discount""], 'failure': []}, {'name': 'Mutant #139', 'line': 258, 'description': ['                print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -255,7 +255,7 @@\n                 item[\'discounted_price\'] = item[\'price\'] - discount\n                 filtered_data.append(item)\n             else:\n-                print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")\n+                print(f""Order value for item {item[\'XXidXX\']} is below minimum ({min_order_value})"")\n         else:\n             print(f""Item {item[\'id\']} does not meet the value thresholds"")\n         pass\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #140', 'line': 258, 'description': ['                print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -255,7 +255,7 @@\n                 item[\'discounted_price\'] = item[\'price\'] - discount\n                 filtered_data.append(item)\n             else:\n-                print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")\n+                print(f""XXOrder value for item {item[\'id\']} is below minimum ({min_order_value})XX"")\n         else:\n             print(f""Item {item[\'id\']} does not meet the value thresholds"")\n         pass\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #141', 'line': 260, 'description': ['            print(f""Item {item[\'id\']} does not meet the value thresholds"")'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -257,7 +257,7 @@\n             else:\n                 print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")\n         else:\n-            print(f""Item {item[\'id\']} does not meet the value thresholds"")\n+            print(f""Item {item[\'XXidXX\']} does not meet the value thresholds"")\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #142', 'line': 260, 'description': ['            print(f""Item {item[\'id\']} does not meet the value thresholds"")'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -257,7 +257,7 @@\n             else:\n                 print(f""Order value for item {item[\'id\']} is below minimum ({min_order_value})"")\n         else:\n-            print(f""Item {item[\'id\']} does not meet the value thresholds"")\n+            print(f""XXItem {item[\'id\']} does not meet the value thresholdsXX"")\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #143', 'line': 264, 'description': ['    if len(filtered_data) > 0:'], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -261,7 +261,7 @@\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n-    if len(filtered_data) > 0:\n+    if len(filtered_data) >= 0:\n         for item in filtered_data:\n             if item['discounted_price'] < 0:\n                 item['discounted_price'] = 0\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #144', 'line': 264, 'description': ['    if len(filtered_data) > 0:'], 'failure': [{'inner': ""--- src/main.py\n+++ src/main.py\n@@ -261,7 +261,7 @@\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n-    if len(filtered_data) > 0:\n+    if len(filtered_data) > 1:\n         for item in filtered_data:\n             if item['discounted_price'] < 0:\n                 item['discounted_price'] = 0\n"", 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #145', 'line': 266, 'description': [""            if item['discounted_price'] < 0:""], 'failure': []}, {'name': 'Mutant #146', 'line': 266, 'description': [""            if item['discounted_price'] < 0:""], 'failure': []}, {'name': 'Mutant #147', 'line': 266, 'description': [""            if item['discounted_price'] < 0:""], 'failure': []}, {'name': 'Mutant #148', 'line': 267, 'description': [""                item['discounted_price'] = 0""], 'failure': []}, {'name': 'Mutant #149', 'line': 267, 'description': [""                item['discounted_price'] = 0""], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -264,7 +264,7 @@\n     if len(filtered_data) > 0:\n         for item in filtered_data:\n             if item[\'discounted_price\'] < 0:\n-                item[\'discounted_price\'] = 0\n+                item[\'discounted_price\'] = 1\n         global_variable += 1\n     else:\n         print(""No items met the filtering criteria."")\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #150', 'line': 267, 'description': [""                item['discounted_price'] = 0""], 'failure': []}, {'name': 'Mutant #151', 'line': 268, 'description': ['        global_variable += 1'], 'failure': []}, {'name': 'Mutant #152', 'line': 268, 'description': ['        global_variable += 1'], 'failure': []}, {'name': 'Mutant #153', 'line': 268, 'description': ['        global_variable += 1'], 'failure': []}, {'name': 'Mutant #154', 'line': 270, 'description': ['        print(""No items met the filtering criteria."")'], 'failure': []}]",56.81818181818182,['CL001' 'CL002' 'ANNOT001' 'C002' 'CML001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,setName,290-298,"[{'lineno': 291, 'coloffset': 8, 'linematch': 'if not name:', 'context': '        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 295, 'coloffset': 12, 'linematch': 'if not char.isalpha() and not char.isspace():', 'context': '        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 290, 'coloffset': 4, 'linematch': 'def setName(self, name):', 'context': '        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 290, 'coloffset': 4, 'linematch': 'def setName(self, name):', 'context': '        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 291, 'coloffset': 8, 'linematch': 'if not name:', 'context': '        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 294, 'coloffset': 8, 'linematch': 'for char in name:', 'context': '    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 297, 'coloffset': 8, 'linematch': 'self.name = name', 'context': '        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(""Age cannot be negative"")\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 298, 'coloffset': 8, 'linematch': 'return self', 'context': '        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(""Age cannot be negative"")\n        try:\n            self.age = int(age)  # Potential for type conversion errors', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #164', 'line': 291, 'description': ['        if not name:'], 'failure': []}, {'name': 'Mutant #165', 'line': 292, 'description': ['            raise ValueError(""Name cannot be empty"")'], 'failure': []}, {'name': 'Mutant #166', 'line': 295, 'description': ['            if not char.isalpha() and not char.isspace():'], 'failure': []}, {'name': 'Mutant #167', 'line': 295, 'description': ['            if not char.isalpha() and not char.isspace():'], 'failure': []}, {'name': 'Mutant #168', 'line': 295, 'description': ['            if not char.isalpha() and not char.isspace():'], 'failure': []}, {'name': 'Mutant #169', 'line': 296, 'description': ['                raise ValueError(""Name can only contain letters and spaces"")'], 'failure': []}, {'name': 'Mutant #170', 'line': 297, 'description': ['        self.name = name'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,setAge,299-305,"[{'lineno': 300, 'coloffset': 8, 'linematch': 'if age < 0:', 'context': '                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(""Age cannot be negative"")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 299, 'coloffset': 4, 'linematch': 'def setAge(self, age):', 'context': '            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(""Age cannot be negative"")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 299, 'coloffset': 4, 'linematch': 'def setAge(self, age):', 'context': '            if not char.isalpha() and not char.isspace():\n                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(""Age cannot be negative"")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 300, 'coloffset': 8, 'linematch': 'if age < 0:', 'context': '                raise ValueError(""Name can only contain letters and spaces"")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(""Age cannot be negative"")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 302, 'coloffset': 8, 'linematch': 'try:', 'context': '        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(""Age cannot be negative"")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #171', 'line': 300, 'description': ['        if age < 0:'], 'failure': []}, {'name': 'Mutant #172', 'line': 300, 'description': ['        if age < 0:'], 'failure': []}, {'name': 'Mutant #173', 'line': 301, 'description': ['            raise ValueError(""Age cannot be negative"")'], 'failure': []}, {'name': 'Mutant #174', 'line': 303, 'description': ['            self.age = int(age)  # Potential for type conversion errors'], 'failure': []}]",100.0,['CL001' 'ANNOT001' 'C002' 'CML001'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,validate_ssn,319-333,"[{'lineno': 320, 'coloffset': 8, 'linematch': 'if not self.ssn:', 'context': '        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 322, 'coloffset': 8, 'linematch': 'if len(self.ssn) != 11:', 'context': '        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 325, 'coloffset': 8, 'linematch': 'if len(parts) != 3:', 'context': '            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 319, 'coloffset': 4, 'linematch': 'def validate_ssn(self):', 'context': '    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 322, 'coloffset': 8, 'linematch': 'if len(self.ssn) != 11:', 'context': '        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 325, 'coloffset': 8, 'linematch': 'if len(parts) != 3:', 'context': '            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])', 'pattern': './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else', 'check_id': 'F002', 'check_name': 'number-of-conditions-in-function'}, {'lineno': 319, 'coloffset': 4, 'linematch': 'def validate_ssn(self):', 'context': '    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 320, 'coloffset': 8, 'linematch': 'if not self.ssn:', 'context': '        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 322, 'coloffset': 8, 'linematch': 'if len(self.ssn) != 11:', 'context': '        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 324, 'coloffset': 8, 'linematch': 'parts = self.ssn.split(""-"")', 'context': '        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 325, 'coloffset': 8, 'linematch': 'if len(parts) != 3:', 'context': '            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 327, 'coloffset': 8, 'linematch': 'try:', 'context': '            return False\n        parts = self.ssn.split(""-"")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])\n        except ValueError:\n            return False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 333, 'coloffset': 8, 'linematch': 'return True', 'context': '            int(parts[1])\n            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 319, 'coloffset': 4, 'linematch': 'def validate_ssn(self):', 'context': '    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 319, 'coloffset': 4, 'linematch': 'def validate_ssn(self):', 'context': '    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 319, 'coloffset': 4, 'linematch': 'def validate_ssn(self):', 'context': '    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(""-"")', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #184', 'line': 320, 'description': ['        if not self.ssn:'], 'failure': []}, {'name': 'Mutant #185', 'line': 321, 'description': ['            return False'], 'failure': []}, {'name': 'Mutant #186', 'line': 322, 'description': ['        if len(self.ssn) != 11:'], 'failure': []}, {'name': 'Mutant #187', 'line': 322, 'description': ['        if len(self.ssn) != 11:'], 'failure': []}, {'name': 'Mutant #188', 'line': 323, 'description': ['            return False'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -320,7 +320,7 @@\n         if not self.ssn:\n             return False\n         if len(self.ssn) != 11:\n-            return False\n+            return True\n         parts = self.ssn.split(""-"")\n         if len(parts) != 3:\n             return False\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #189', 'line': 324, 'description': ['        parts = self.ssn.split(""-"")'], 'failure': []}, {'name': 'Mutant #190', 'line': 324, 'description': ['        parts = self.ssn.split(""-"")'], 'failure': []}, {'name': 'Mutant #191', 'line': 325, 'description': ['        if len(parts) != 3:'], 'failure': []}, {'name': 'Mutant #192', 'line': 325, 'description': ['        if len(parts) != 3:'], 'failure': []}, {'name': 'Mutant #193', 'line': 326, 'description': ['            return False'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -323,7 +323,7 @@\n             return False\n         parts = self.ssn.split(""-"")\n         if len(parts) != 3:\n-            return False\n+            return True\n         try:\n             int(parts[0])\n             int(parts[1])\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #194', 'line': 328, 'description': ['            int(parts[0])'], 'failure': []}, {'name': 'Mutant #195', 'line': 329, 'description': ['            int(parts[1])'], 'failure': []}, {'name': 'Mutant #196', 'line': 330, 'description': ['            int(parts[2])'], 'failure': []}, {'name': 'Mutant #197', 'line': 332, 'description': ['            return False'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -329,7 +329,7 @@\n             int(parts[1])\n             int(parts[2])\n         except ValueError:\n-            return False\n+            return True\n         return True\n     def odd_even(self,age):\n         if age >= 0:\n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #198', 'line': 333, 'description': ['        return True'], 'failure': []}]",80.0,['CL001' 'ANNOT001' 'F002' 'C002' 'CML001' 'MRET001' 'F030' 'P005'],"['.//FunctionDef/body//If'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 1, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,odd_even,334-389,"[{'lineno': 335, 'coloffset': 8, 'linematch': 'if age >= 0:', 'context': '        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 336, 'coloffset': 12, 'linematch': 'if age == 0:', 'context': '            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 338, 'coloffset': 12, 'linematch': 'elif age == 1:', 'context': '    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 340, 'coloffset': 12, 'linematch': 'elif age == 2:', 'context': '            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 342, 'coloffset': 12, 'linematch': 'elif age == 3:', 'context': '            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 344, 'coloffset': 12, 'linematch': 'elif age == 4:', 'context': '            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 346, 'coloffset': 12, 'linematch': 'elif age == 5:', 'context': '            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 348, 'coloffset': 12, 'linematch': 'elif age == 6:', 'context': '            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 350, 'coloffset': 12, 'linematch': 'elif age == 7:', 'context': '            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 352, 'coloffset': 12, 'linematch': 'elif age == 8:', 'context': '            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 354, 'coloffset': 12, 'linematch': 'elif age == 9:', 'context': '            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 356, 'coloffset': 12, 'linematch': 'elif age == 10:', 'context': '            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 358, 'coloffset': 12, 'linematch': 'elif age == 11:', 'context': '            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 360, 'coloffset': 12, 'linematch': 'elif age == 12:', 'context': '            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 362, 'coloffset': 12, 'linematch': 'elif age == 13:', 'context': '            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 364, 'coloffset': 12, 'linematch': 'elif age == 14:', 'context': '            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 366, 'coloffset': 12, 'linematch': 'elif age == 15:', 'context': '            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 368, 'coloffset': 12, 'linematch': 'elif age == 16:', 'context': '            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 370, 'coloffset': 12, 'linematch': 'elif age == 17:', 'context': '            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 372, 'coloffset': 12, 'linematch': 'elif age == 18:', 'context': '            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 374, 'coloffset': 12, 'linematch': 'elif age == 19:', 'context': '            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 376, 'coloffset': 12, 'linematch': 'elif age == 20:', 'context': '            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 378, 'coloffset': 12, 'linematch': 'elif age == 21:', 'context': '            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 380, 'coloffset': 12, 'linematch': 'elif age == 22:', 'context': '            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 382, 'coloffset': 12, 'linematch': 'elif age == 23:', 'context': '            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 384, 'coloffset': 12, 'linematch': 'elif age == 24:', 'context': '            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 386, 'coloffset': 12, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef/body//If', 'check_id': 'CL001', 'check_name': 'single-nested-if'}, {'lineno': 336, 'coloffset': 12, 'linematch': 'if age == 0:', 'context': '            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""', 'pattern': './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]', 'check_id': 'CL002', 'check_name': 'double-nested-if'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 386, 'coloffset': 17, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq', 'check_id': 'BOOL001', 'check_name': 'boolean-comparison'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'def odd_even(self,age):', 'context': '            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 336, 'coloffset': 12, 'linematch': 'if age == 0:', 'context': '            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 338, 'coloffset': 12, 'linematch': 'elif age == 1:', 'context': '    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 340, 'coloffset': 12, 'linematch': 'elif age == 2:', 'context': '            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 342, 'coloffset': 12, 'linematch': 'elif age == 3:', 'context': '            elif age == 1:\n                return ""odd""\n            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 344, 'coloffset': 12, 'linematch': 'elif age == 4:', 'context': '            elif age == 2:\n                return ""even""\n            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 346, 'coloffset': 12, 'linematch': 'elif age == 5:', 'context': '            elif age == 3:\n                return ""odd""\n            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 348, 'coloffset': 12, 'linematch': 'elif age == 6:', 'context': '            elif age == 4:\n                return ""even""\n            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 350, 'coloffset': 12, 'linematch': 'elif age == 7:', 'context': '            elif age == 5:\n                return ""odd""\n            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 352, 'coloffset': 12, 'linematch': 'elif age == 8:', 'context': '            elif age == 6:\n                return ""even""\n            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 354, 'coloffset': 12, 'linematch': 'elif age == 9:', 'context': '            elif age == 7:\n                return ""odd""\n            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 356, 'coloffset': 12, 'linematch': 'elif age == 10:', 'context': '            elif age == 8:\n                return ""even""\n            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 358, 'coloffset': 12, 'linematch': 'elif age == 11:', 'context': '            elif age == 9:\n                return ""odd""\n            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 360, 'coloffset': 12, 'linematch': 'elif age == 12:', 'context': '            elif age == 10:\n                return ""even""\n            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 362, 'coloffset': 12, 'linematch': 'elif age == 13:', 'context': '            elif age == 11:\n                return ""odd""\n            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 364, 'coloffset': 12, 'linematch': 'elif age == 14:', 'context': '            elif age == 12:\n                return ""even""\n            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 366, 'coloffset': 12, 'linematch': 'elif age == 15:', 'context': '            elif age == 13:\n                return ""odd""\n            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 368, 'coloffset': 12, 'linematch': 'elif age == 16:', 'context': '            elif age == 14:\n                return ""even""\n            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 370, 'coloffset': 12, 'linematch': 'elif age == 17:', 'context': '            elif age == 15:\n                return ""odd""\n            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 372, 'coloffset': 12, 'linematch': 'elif age == 18:', 'context': '            elif age == 16:\n                return ""even""\n            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 374, 'coloffset': 12, 'linematch': 'elif age == 19:', 'context': '            elif age == 17:\n                return ""odd""\n            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 376, 'coloffset': 12, 'linematch': 'elif age == 20:', 'context': '            elif age == 18:\n                return ""even""\n            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 378, 'coloffset': 12, 'linematch': 'elif age == 21:', 'context': '            elif age == 19:\n                return ""odd""\n            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 380, 'coloffset': 12, 'linematch': 'elif age == 22:', 'context': '            elif age == 20:\n                return ""even""\n            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 382, 'coloffset': 12, 'linematch': 'elif age == 23:', 'context': '            elif age == 21:\n                return ""odd""\n            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 384, 'coloffset': 12, 'linematch': 'elif age == 24:', 'context': '            elif age == 22:\n                return ""even""\n            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 386, 'coloffset': 12, 'linematch': 'elif age == 25:', 'context': '            elif age == 23:\n                return ""odd""\n            elif age == 24:\n                return ""even""\n            elif age == 25:\n                return ""odd""\n        else:\n            return ""Invalid age""\n\n', 'pattern': './/FunctionDef//If/descendant::If', 'check_id': 'CL001', 'check_name': 'nested-conditions'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'def odd_even(self,age):', 'context': '            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 335, 'coloffset': 8, 'linematch': 'if age >= 0:', 'context': '        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""\n            elif age == 2:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'def odd_even(self,age):', 'context': '            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""', 'pattern': './/FunctionDef[count(body//Return) > 2]', 'check_id': 'MRET001', 'check_name': 'multiple-returns-in-function'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'def odd_even(self,age):', 'context': '            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]', 'check_id': 'F027', 'check_name': 'high-cyclomatic-complexity'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'def odd_even(self,age):', 'context': '            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'F030', 'check_name': 'deeply-nested-control-structures'}, {'lineno': 334, 'coloffset': 4, 'linematch': 'def odd_even(self,age):', 'context': '            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return ""even""\n            elif age == 1:\n                return ""odd""', 'pattern': './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]', 'check_id': 'P005', 'check_name': 'long-scope-chaining'}]","[{'name': 'Mutant #199', 'line': 335, 'description': ['        if age >= 0:'], 'failure': []}, {'name': 'Mutant #200', 'line': 335, 'description': ['        if age >= 0:'], 'failure': []}, {'name': 'Mutant #201', 'line': 336, 'description': ['            if age == 0:'], 'failure': []}, {'name': 'Mutant #202', 'line': 336, 'description': ['            if age == 0:'], 'failure': []}, {'name': 'Mutant #203', 'line': 337, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #204', 'line': 338, 'description': ['            elif age == 1:'], 'failure': []}, {'name': 'Mutant #205', 'line': 338, 'description': ['            elif age == 1:'], 'failure': []}, {'name': 'Mutant #206', 'line': 339, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #207', 'line': 340, 'description': ['            elif age == 2:'], 'failure': []}, {'name': 'Mutant #208', 'line': 340, 'description': ['            elif age == 2:'], 'failure': []}, {'name': 'Mutant #209', 'line': 341, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #210', 'line': 342, 'description': ['            elif age == 3:'], 'failure': []}, {'name': 'Mutant #211', 'line': 342, 'description': ['            elif age == 3:'], 'failure': []}, {'name': 'Mutant #212', 'line': 343, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #213', 'line': 344, 'description': ['            elif age == 4:'], 'failure': []}, {'name': 'Mutant #214', 'line': 344, 'description': ['            elif age == 4:'], 'failure': []}, {'name': 'Mutant #215', 'line': 345, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #216', 'line': 346, 'description': ['            elif age == 5:'], 'failure': []}, {'name': 'Mutant #217', 'line': 346, 'description': ['            elif age == 5:'], 'failure': []}, {'name': 'Mutant #218', 'line': 347, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #219', 'line': 348, 'description': ['            elif age == 6:'], 'failure': []}, {'name': 'Mutant #220', 'line': 348, 'description': ['            elif age == 6:'], 'failure': []}, {'name': 'Mutant #221', 'line': 349, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #222', 'line': 350, 'description': ['            elif age == 7:'], 'failure': []}, {'name': 'Mutant #223', 'line': 350, 'description': ['            elif age == 7:'], 'failure': []}, {'name': 'Mutant #224', 'line': 351, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #225', 'line': 352, 'description': ['            elif age == 8:'], 'failure': []}, {'name': 'Mutant #226', 'line': 352, 'description': ['            elif age == 8:'], 'failure': []}, {'name': 'Mutant #227', 'line': 353, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #228', 'line': 354, 'description': ['            elif age == 9:'], 'failure': []}, {'name': 'Mutant #229', 'line': 354, 'description': ['            elif age == 9:'], 'failure': []}, {'name': 'Mutant #230', 'line': 355, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #231', 'line': 356, 'description': ['            elif age == 10:'], 'failure': []}, {'name': 'Mutant #232', 'line': 356, 'description': ['            elif age == 10:'], 'failure': []}, {'name': 'Mutant #233', 'line': 357, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #234', 'line': 358, 'description': ['            elif age == 11:'], 'failure': []}, {'name': 'Mutant #235', 'line': 358, 'description': ['            elif age == 11:'], 'failure': []}, {'name': 'Mutant #236', 'line': 359, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #237', 'line': 360, 'description': ['            elif age == 12:'], 'failure': []}, {'name': 'Mutant #238', 'line': 360, 'description': ['            elif age == 12:'], 'failure': []}, {'name': 'Mutant #239', 'line': 361, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #240', 'line': 362, 'description': ['            elif age == 13:'], 'failure': []}, {'name': 'Mutant #241', 'line': 362, 'description': ['            elif age == 13:'], 'failure': []}, {'name': 'Mutant #242', 'line': 363, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #243', 'line': 364, 'description': ['            elif age == 14:'], 'failure': []}, {'name': 'Mutant #244', 'line': 364, 'description': ['            elif age == 14:'], 'failure': []}, {'name': 'Mutant #245', 'line': 365, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #246', 'line': 366, 'description': ['            elif age == 15:'], 'failure': []}, {'name': 'Mutant #247', 'line': 366, 'description': ['            elif age == 15:'], 'failure': []}, {'name': 'Mutant #248', 'line': 367, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #249', 'line': 368, 'description': ['            elif age == 16:'], 'failure': []}, {'name': 'Mutant #250', 'line': 368, 'description': ['            elif age == 16:'], 'failure': []}, {'name': 'Mutant #251', 'line': 369, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #252', 'line': 370, 'description': ['            elif age == 17:'], 'failure': []}, {'name': 'Mutant #253', 'line': 370, 'description': ['            elif age == 17:'], 'failure': []}, {'name': 'Mutant #254', 'line': 371, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #255', 'line': 372, 'description': ['            elif age == 18:'], 'failure': []}, {'name': 'Mutant #256', 'line': 372, 'description': ['            elif age == 18:'], 'failure': []}, {'name': 'Mutant #257', 'line': 373, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #258', 'line': 374, 'description': ['            elif age == 19:'], 'failure': []}, {'name': 'Mutant #259', 'line': 374, 'description': ['            elif age == 19:'], 'failure': []}, {'name': 'Mutant #260', 'line': 375, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #261', 'line': 376, 'description': ['            elif age == 20:'], 'failure': []}, {'name': 'Mutant #262', 'line': 376, 'description': ['            elif age == 20:'], 'failure': []}, {'name': 'Mutant #263', 'line': 377, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #264', 'line': 378, 'description': ['            elif age == 21:'], 'failure': []}, {'name': 'Mutant #265', 'line': 378, 'description': ['            elif age == 21:'], 'failure': []}, {'name': 'Mutant #266', 'line': 379, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #267', 'line': 380, 'description': ['            elif age == 22:'], 'failure': []}, {'name': 'Mutant #268', 'line': 380, 'description': ['            elif age == 22:'], 'failure': []}, {'name': 'Mutant #269', 'line': 381, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #270', 'line': 382, 'description': ['            elif age == 23:'], 'failure': []}, {'name': 'Mutant #271', 'line': 382, 'description': ['            elif age == 23:'], 'failure': []}, {'name': 'Mutant #272', 'line': 383, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #273', 'line': 384, 'description': ['            elif age == 24:'], 'failure': []}, {'name': 'Mutant #274', 'line': 384, 'description': ['            elif age == 24:'], 'failure': []}, {'name': 'Mutant #275', 'line': 385, 'description': ['                return ""even""'], 'failure': []}, {'name': 'Mutant #276', 'line': 386, 'description': ['            elif age == 25:'], 'failure': []}, {'name': 'Mutant #277', 'line': 386, 'description': ['            elif age == 25:'], 'failure': []}, {'name': 'Mutant #278', 'line': 387, 'description': ['                return ""odd""'], 'failure': []}, {'name': 'Mutant #279', 'line': 389, 'description': ['            return ""Invalid age""'], 'failure': []}]",100.0,"['CL001' 'CL002' 'BOOL001' 'ANNOT001' 'C002' 'CML001' 'MRET001' 'F027'
 'F030' 'P005']","['.//FunctionDef/body//If'
 './/FunctionDef/body//If[ancestor::If and not(parent::orelse)]'
 './/FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq'
 './/FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef//If/descendant::If'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return'
 './/FunctionDef[count(body//Return) > 2]'
 './/FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]'
 './/FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]']","{'single-nested-if': 1, 'double-nested-if': 1, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 1, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 1, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 1, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 1, 'long-method-chaining': 0, 'deeply-nested-control-structures': 1, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,handle_file,47-58,"[{'lineno': 47, 'coloffset': 0, 'linematch': 'def handle_file(filename):', 'context': '        return False\n    return True\n\n# TODO: Not passing check id: \'EXC001\', name: \'no-exception-type\', pattern: \'.//FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]\'\ndef handle_file(filename):\n    """"""\n    This function attempts to read a file but does not handle specific exception\n\n    Contains Patterns:\n        - No Exception type (EXC)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 47, 'coloffset': 0, 'linematch': 'def handle_file(filename):', 'context': '        return False\n    return True\n\n# TODO: Not passing check id: \'EXC001\', name: \'no-exception-type\', pattern: \'.//FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]\'\ndef handle_file(filename):\n    """"""\n    This function attempts to read a file but does not handle specific exception\n\n    Contains Patterns:\n        - No Exception type (EXC)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 48, 'coloffset': 4, 'linematch': '""""""', 'context': '    return True\n\n# TODO: Not passing check id: \'EXC001\', name: \'no-exception-type\', pattern: \'.//FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]\'\ndef handle_file(filename):\n    """"""\n    This function attempts to read a file but does not handle specific exception\n\n    Contains Patterns:\n        - No Exception type (EXC)\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 54, 'coloffset': 4, 'linematch': 'try:', 'context': '\n    Contains Patterns:\n        - No Exception type (EXC)\n    """"""\n    try:\n        with open(filename) as f:\n            data = f.read()\n    except IOError as e:\n        print(f""Error reading file: {e}"")\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #21', 'line': 56, 'description': ['            data = f.read()'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -53,7 +53,7 @@\n     """"""\n     try:\n         with open(filename) as f:\n-            data = f.read()\n+            data = None\n     except IOError as e:\n         print(f""Error reading file: {e}"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}, {'name': 'Mutant #293', 'line': 58, 'description': ['        print(f""Error reading file: {e}"")'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -55,7 +55,7 @@\n         with open(filename) as f:\n             data = f.read()\n     except IOError as e:\n-        print(f""Error reading file: {e}"")\n+        print(f""XXError reading file: {e}XX"")\n \n def is_valid(value):\n     """"""\n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
dummy_project.json,validate_data,92-97,"[{'lineno': 92, 'coloffset': 0, 'linematch': 'def validate_data(data):', 'context': '# Multi-value key literal (MVKL)- outside function scope\nuser_data = {""name"": ""Alice"", ""name"":""Bob""}\n\n# TODO: not passing check id: \'AT001\', name: \'assert-tuple\', pattern: \'.//FunctionDef[./body/Assert/test/Tuple]\'\ndef validate_data(data):\n    """""" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    """"""\n    assert type(data) == tuple, ""Data must be a tuple""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 92, 'coloffset': 0, 'linematch': 'def validate_data(data):', 'context': '# Multi-value key literal (MVKL)- outside function scope\nuser_data = {""name"": ""Alice"", ""name"":""Bob""}\n\n# TODO: not passing check id: \'AT001\', name: \'assert-tuple\', pattern: \'.//FunctionDef[./body/Assert/test/Tuple]\'\ndef validate_data(data):\n    """""" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    """"""\n    assert type(data) == tuple, ""Data must be a tuple""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 97, 'coloffset': 4, 'linematch': 'assert type(data) == tuple, ""Data must be a tuple""', 'context': '    """""" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    """"""\n    assert type(data) == tuple, ""Data must be a tuple""\n\n# TODO: not passing check id: \'LVITOI001\', name: \'loop-variable-iterates-overrides-iterator\', pattern: \'.//FunctionDef/body/For[target/Name/@id = iter/Name/@id]\'\ndef modify_list(data):\n    """"""\n    This function modifies a list by overiding its elements.', 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 93, 'coloffset': 4, 'linematch': '"""""" Asserts on tuple.', 'context': 'user_data = {""name"": ""Alice"", ""name"":""Bob""}\n\n# TODO: not passing check id: \'AT001\', name: \'assert-tuple\', pattern: \'.//FunctionDef[./body/Assert/test/Tuple]\'\ndef validate_data(data):\n    """""" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    """"""\n    assert type(data) == tuple, ""Data must be a tuple""\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 97, 'coloffset': 4, 'linematch': 'assert type(data) == tuple, ""Data must be a tuple""', 'context': '    """""" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    """"""\n    assert type(data) == tuple, ""Data must be a tuple""\n\n# TODO: not passing check id: \'LVITOI001\', name: \'loop-variable-iterates-overrides-iterator\', pattern: \'.//FunctionDef/body/For[target/Name/@id = iter/Name/@id]\'\ndef modify_list(data):\n    """"""\n    This function modifies a list by overiding its elements.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #333', 'line': 97, 'description': ['    assert type(data) == tuple, ""Data must be a tuple""'], 'failure': []}, {'name': 'Mutant #334', 'line': 97, 'description': ['    assert type(data) == tuple, ""Data must be a tuple""'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -94,7 +94,7 @@\n         Contains Patterns:\n         - Assertion (AT)\n     """"""\n-    assert type(data) == tuple, ""Data must be a tuple""\n+    assert type(data) == tuple, ""XXData must be a tupleXX""\n \n # TODO: not passing check id: \'LVITOI001\', name: \'loop-variable-iterates-overrides-iterator\', pattern: \'.//FunctionDef/body/For[target/Name/@id = iter/Name/@id]\'\n def modify_list(data):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",50.0,['ANNOT001' 'C002' 'NOA001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/Assert'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 1, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,modify_list,100-111,"[{'lineno': 100, 'coloffset': 0, 'linematch': 'def modify_list(data):', 'context': '    """"""\n    assert type(data) == tuple, ""Data must be a tuple""\n\n# TODO: not passing check id: \'LVITOI001\', name: \'loop-variable-iterates-overrides-iterator\', pattern: \'.//FunctionDef/body/For[target/Name/@id = iter/Name/@id]\'\ndef modify_list(data):\n    """"""\n    This function modifies a list by overiding its elements.\n\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 100, 'coloffset': 0, 'linematch': 'def modify_list(data):', 'context': '    """"""\n    assert type(data) == tuple, ""Data must be a tuple""\n\n# TODO: not passing check id: \'LVITOI001\', name: \'loop-variable-iterates-overrides-iterator\', pattern: \'.//FunctionDef/body/For[target/Name/@id = iter/Name/@id]\'\ndef modify_list(data):\n    """"""\n    This function modifies a list by overiding its elements.\n\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 101, 'coloffset': 4, 'linematch': '""""""', 'context': '    assert type(data) == tuple, ""Data must be a tuple""\n\n# TODO: not passing check id: \'LVITOI001\', name: \'loop-variable-iterates-overrides-iterator\', pattern: \'.//FunctionDef/body/For[target/Name/@id = iter/Name/@id]\'\ndef modify_list(data):\n    """"""\n    This function modifies a list by overiding its elements.\n\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 107, 'coloffset': 4, 'linematch': 'modified_data = []', 'context': '\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)\n    """"""\n    modified_data = []\n    for item in data:\n        item = ""Modified""\n        modified_data.append(item)\n    return modified_data\n', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 108, 'coloffset': 4, 'linematch': 'for item in data:', 'context': '    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)\n    """"""\n    modified_data = []\n    for item in data:\n        item = ""Modified""\n        modified_data.append(item)\n    return modified_data\n\n# TODO: id: \'FLV001\', name: \'function-uses-loop-variable\', pattern: \'.//FunctionDef[body//comprehension/target/Name]\'', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 111, 'coloffset': 4, 'linematch': 'return modified_data', 'context': '    modified_data = []\n    for item in data:\n        item = ""Modified""\n        modified_data.append(item)\n    return modified_data\n\n# TODO: id: \'FLV001\', name: \'function-uses-loop-variable\', pattern: \'.//FunctionDef[body//comprehension/target/Name]\'\ndef calculate_sum(numbers):\n    """"""\n    This function calculate the sum of a integer list', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #41', 'line': 109, 'description': ['        item = ""Modified""'], 'failure': []}, {'name': 'Mutant #42', 'line': 109, 'description': ['        item = ""Modified""'], 'failure': []}, {'name': 'Mutant #328', 'line': 107, 'description': ['    modified_data = []'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,calculate_sum,114-123,"[{'lineno': 114, 'coloffset': 0, 'linematch': 'def calculate_sum(numbers):', 'context': '        modified_data.append(item)\n    return modified_data\n\n# TODO: id: \'FLV001\', name: \'function-uses-loop-variable\', pattern: \'.//FunctionDef[body//comprehension/target/Name]\'\ndef calculate_sum(numbers):\n    """"""\n    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)""""""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 114, 'coloffset': 0, 'linematch': 'def calculate_sum(numbers):', 'context': '        modified_data.append(item)\n    return modified_data\n\n# TODO: id: \'FLV001\', name: \'function-uses-loop-variable\', pattern: \'.//FunctionDef[body//comprehension/target/Name]\'\ndef calculate_sum(numbers):\n    """"""\n    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)""""""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 115, 'coloffset': 4, 'linematch': '""""""', 'context': '    return modified_data\n\n# TODO: id: \'FLV001\', name: \'function-uses-loop-variable\', pattern: \'.//FunctionDef[body//comprehension/target/Name]\'\ndef calculate_sum(numbers):\n    """"""\n    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)""""""\n    total = 0', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 120, 'coloffset': 4, 'linematch': 'total = 0', 'context': '    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)""""""\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 121, 'coloffset': 4, 'linematch': 'for num in numbers:', 'context': '\n    Contains Patterns:\n        - Function using loop variable (FLV)""""""\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():\n    """""" Function with nested depth (ND)""""""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 123, 'coloffset': 4, 'linematch': 'return total', 'context': '        - Function using loop variable (FLV)""""""\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():\n    """""" Function with nested depth (ND)""""""\n    def nested_function_2():\n        def nested_function_3():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #43', 'line': 120, 'description': ['    total = 0'], 'failure': []}, {'name': 'Mutant #44', 'line': 120, 'description': ['    total = 0'], 'failure': []}, {'name': 'Mutant #45', 'line': 122, 'description': ['        total += num'], 'failure': []}, {'name': 'Mutant #46', 'line': 122, 'description': ['        total += num'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,validate_user_input,186-194,"[{'lineno': 186, 'coloffset': 0, 'linematch': 'def validate_user_input(name, email):', 'context': '        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    """"""\n    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 186, 'coloffset': 0, 'linematch': 'def validate_user_input(name, email):', 'context': '        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    """"""\n    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 192, 'coloffset': 4, 'linematch': 'assert name.isalpha(), ""Name must only contain letters""', 'context': '    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    """"""\n    assert name.isalpha(), ""Name must only contain letters""\n    assert ""@"" in email, ""Email must contain an \'@\' symbol""\n    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):', 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 193, 'coloffset': 4, 'linematch': 'assert ""@"" in email, ""Email must contain an \'@\' symbol""', 'context': '\n    Contains Pattern: Number of Assertions (NOA)\n    """"""\n    assert name.isalpha(), ""Name must only contain letters""\n    assert ""@"" in email, ""Email must contain an \'@\' symbol""\n    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):\n    """"""', 'pattern': './/FunctionDef/body/Assert', 'check_id': 'NOA001', 'check_name': 'number-of-assertions'}, {'lineno': 187, 'coloffset': 4, 'linematch': '""""""', 'context': '            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    """"""\n    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    """"""\n    assert name.isalpha(), ""Name must only contain letters""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 192, 'coloffset': 4, 'linematch': 'assert name.isalpha(), ""Name must only contain letters""', 'context': '    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    """"""\n    assert name.isalpha(), ""Name must only contain letters""\n    assert ""@"" in email, ""Email must contain an \'@\' symbol""\n    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 193, 'coloffset': 4, 'linematch': 'assert ""@"" in email, ""Email must contain an \'@\' symbol""', 'context': '\n    Contains Pattern: Number of Assertions (NOA)\n    """"""\n    assert name.isalpha(), ""Name must only contain letters""\n    assert ""@"" in email, ""Email must contain an \'@\' symbol""\n    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 194, 'coloffset': 4, 'linematch': 'return True', 'context': '    Contains Pattern: Number of Assertions (NOA)\n    """"""\n    assert name.isalpha(), ""Name must only contain letters""\n    assert ""@"" in email, ""Email must contain an \'@\' symbol""\n    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):\n    """"""\n    This function writes data to a file without using a context manager.', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #81', 'line': 192, 'description': ['    assert name.isalpha(), ""Name must only contain letters""'], 'failure': []}, {'name': 'Mutant #82', 'line': 193, 'description': ['    assert ""@"" in email, ""Email must contain an \'@\' symbol""'], 'failure': []}, {'name': 'Mutant #83', 'line': 193, 'description': ['    assert ""@"" in email, ""Email must contain an \'@\' symbol""'], 'failure': []}, {'name': 'Mutant #84', 'line': 193, 'description': ['    assert ""@"" in email, ""Email must contain an \'@\' symbol""'], 'failure': []}, {'name': 'Mutant #85', 'line': 194, 'description': ['    return True'], 'failure': [{'inner': '--- src/main.py\n+++ src/main.py\n@@ -191,7 +191,7 @@\n     """"""\n     assert name.isalpha(), ""Name must only contain letters""\n     assert ""@"" in email, ""Email must contain an \'@\' symbol""\n-    return True\n+    return False\n \n # TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\n def write_to_file(filename, data):\n', 'type': 'failure', 'message': 'bad_survived'}]}]",80.0,['ANNOT001' 'C002' 'NOA001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/Assert'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 1, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,write_to_file,197-204,"[{'lineno': 197, 'coloffset': 0, 'linematch': 'def write_to_file(filename, data):', 'context': '    assert ""@"" in email, ""Email must contain an \'@\' symbol""\n    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):\n    """"""\n    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    """"""', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 197, 'coloffset': 0, 'linematch': 'def write_to_file(filename, data):', 'context': '    assert ""@"" in email, ""Email must contain an \'@\' symbol""\n    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):\n    """"""\n    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    """"""', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 198, 'coloffset': 4, 'linematch': '""""""', 'context': '    return True\n\n# TODO: not passing check id: \'DUCM001\', name: \'not-using-context-manager\', pattern: \'.//FunctionDef//*[starts-with(., ""with open"")]\'\ndef write_to_file(filename, data):\n    """"""\n    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    """"""\n    with open(filename, ""w"") as f:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 203, 'coloffset': 4, 'linematch': 'with open(filename, ""w"") as f:', 'context': '    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    """"""\n    with open(filename, ""w"") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    """"""\n    This function calculates a letter grade based on a score. (Simple example)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #310', 'line': 203, 'description': ['    with open(filename, ""w"") as f:'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,calculate_something,394-403,"[{'lineno': 394, 'coloffset': 0, 'linematch': 'def calculate_something(data):', 'context': '\n\nglobal_var = 0  # This is a global variable\n\ndef calculate_something(data):\n    """"""\n    This function demonstrates the use of a global variable.\n\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable \'global_var\'.', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 394, 'coloffset': 0, 'linematch': 'def calculate_something(data):', 'context': '\n\nglobal_var = 0  # This is a global variable\n\ndef calculate_something(data):\n    """"""\n    This function demonstrates the use of a global variable.\n\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable \'global_var\'.', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 395, 'coloffset': 4, 'linematch': '""""""', 'context': '\nglobal_var = 0  # This is a global variable\n\ndef calculate_something(data):\n    """"""\n    This function demonstrates the use of a global variable.\n\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable \'global_var\'.\n    """"""', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 401, 'coloffset': 4, 'linematch': ""result = data['field1'] * data['field2'] * 2"", 'context': '\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable \'global_var\'.\n    """"""\n    result = data[\'field1\'] * data[\'field2\'] * 2\n    global_var += 1  # Modifying global variable\n    return result + global_var', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 402, 'coloffset': 4, 'linematch': 'global_var += 1  # Modifying global variable', 'context': '    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable \'global_var\'.\n    """"""\n    result = data[\'field1\'] * data[\'field2\'] * 2\n    global_var += 1  # Modifying global variable\n    return result + global_var', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 403, 'coloffset': 4, 'linematch': 'return result + global_var', 'context': '        - Use of Global Variables (UGV): Uses a global variable \'global_var\'.\n    """"""\n    result = data[\'field1\'] * data[\'field2\'] * 2\n    global_var += 1  # Modifying global variable\n    return result + global_var', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #282', 'line': 401, 'description': [""    result = data['field1'] * data['field2'] * 2""], 'failure': []}, {'name': 'Mutant #283', 'line': 401, 'description': [""    result = data['field1'] * data['field2'] * 2""], 'failure': []}, {'name': 'Mutant #284', 'line': 401, 'description': [""    result = data['field1'] * data['field2'] * 2""], 'failure': []}, {'name': 'Mutant #285', 'line': 401, 'description': [""    result = data['field1'] * data['field2'] * 2""], 'failure': []}, {'name': 'Mutant #286', 'line': 401, 'description': [""    result = data['field1'] * data['field2'] * 2""], 'failure': []}, {'name': 'Mutant #287', 'line': 401, 'description': [""    result = data['field1'] * data['field2'] * 2""], 'failure': []}, {'name': 'Mutant #288', 'line': 402, 'description': ['    global_var += 1  # Modifying global variable'], 'failure': []}, {'name': 'Mutant #289', 'line': 402, 'description': ['    global_var += 1  # Modifying global variable'], 'failure': []}, {'name': 'Mutant #290', 'line': 402, 'description': ['    global_var += 1  # Modifying global variable'], 'failure': []}, {'name': 'Mutant #291', 'line': 403, 'description': ['    return result + global_var'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,__init__,284-289,"[{'lineno': 284, 'coloffset': 4, 'linematch': 'def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):', 'context': '        - Include empty catch block (ECB)\n        - Long Scope Chaining (LSC)\n        - Number of Conditions in Function (COND)\n    """"""\n    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 284, 'coloffset': 4, 'linematch': 'def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):', 'context': '        - Include empty catch block (ECB)\n        - Long Scope Chaining (LSC)\n        - Number of Conditions in Function (COND)\n    """"""\n    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 285, 'coloffset': 8, 'linematch': 'self.name = name', 'context': '        - Long Scope Chaining (LSC)\n        - Number of Conditions in Function (COND)\n    """"""\n    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 286, 'coloffset': 8, 'linematch': 'self.age = age', 'context': '        - Number of Conditions in Function (COND)\n    """"""\n    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 287, 'coloffset': 8, 'linematch': 'self.ssn = ssn', 'context': '    """"""\n    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 288, 'coloffset': 8, 'linematch': 'self.email = email', 'context': '    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 289, 'coloffset': 8, 'linematch': 'self.address = address', 'context': '        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(""Name cannot be empty"")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #155', 'line': 284, 'description': ['    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):'], 'failure': []}, {'name': 'Mutant #156', 'line': 284, 'description': ['    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):'], 'failure': []}, {'name': 'Mutant #157', 'line': 284, 'description': ['    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):'], 'failure': []}, {'name': 'Mutant #158', 'line': 284, 'description': ['    def __init__(self, name="""", age= 0, ssn=None, email="""", address = """"):'], 'failure': []}, {'name': 'Mutant #159', 'line': 285, 'description': ['        self.name = name'], 'failure': []}, {'name': 'Mutant #160', 'line': 286, 'description': ['        self.age = age'], 'failure': []}, {'name': 'Mutant #161', 'line': 287, 'description': ['        self.ssn = ssn'], 'failure': []}, {'name': 'Mutant #162', 'line': 288, 'description': ['        self.email = email'], 'failure': []}, {'name': 'Mutant #163', 'line': 289, 'description': ['        self.address = address'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,setSSN,306-308,"[{'lineno': 306, 'coloffset': 4, 'linematch': 'def setSSN(self, ssn):', 'context': '        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 306, 'coloffset': 4, 'linematch': 'def setSSN(self, ssn):', 'context': '        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 307, 'coloffset': 8, 'linematch': 'self.ssn = ssn', 'context': '            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 308, 'coloffset': 8, 'linematch': 'return self', 'context': '        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #175', 'line': 307, 'description': ['        self.ssn = ssn'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,setEmail,309-311,"[{'lineno': 309, 'coloffset': 4, 'linematch': 'def setEmail(self,email):', 'context': '            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 309, 'coloffset': 4, 'linematch': 'def setEmail(self,email):', 'context': '            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 310, 'coloffset': 8, 'linematch': 'self.email = email', 'context': '    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 311, 'coloffset': 8, 'linematch': 'return self', 'context': '        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #176', 'line': 310, 'description': ['        self.email = email'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,setAddress,312-314,"[{'lineno': 312, 'coloffset': 4, 'linematch': 'def setAddress(self,address):', 'context': '        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 312, 'coloffset': 4, 'linematch': 'def setAddress(self,address):', 'context': '        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 313, 'coloffset': 8, 'linematch': 'self.address = address', 'context': '    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 314, 'coloffset': 8, 'linematch': 'return self', 'context': '        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #177', 'line': 313, 'description': ['        self.address = address'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
dummy_project.json,create_person,315-318,"[{'lineno': 315, 'coloffset': 4, 'linematch': 'def create_person():', 'context': '        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 315, 'coloffset': 4, 'linematch': 'def create_person():', 'context': '        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:', 'pattern': './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]', 'check_id': 'C002', 'check_name': 'nested-loop-conditions'}, {'lineno': 316, 'coloffset': 8, 'linematch': 'p = Person()', 'context': '    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 317, 'coloffset': 8, 'linematch': 'p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")', 'context': '        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}, {'lineno': 318, 'coloffset': 8, 'linematch': 'return p', 'context': '        return self\n    def create_person():\n        p = Person()\n        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #178', 'line': 316, 'description': ['        p = Person()'], 'failure': []}, {'name': 'Mutant #179', 'line': 317, 'description': ['        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")'], 'failure': []}, {'name': 'Mutant #180', 'line': 317, 'description': ['        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")'], 'failure': []}, {'name': 'Mutant #181', 'line': 317, 'description': ['        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")'], 'failure': []}, {'name': 'Mutant #182', 'line': 317, 'description': ['        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")'], 'failure': []}, {'name': 'Mutant #183', 'line': 317, 'description': ['        p.setName(""John"").setAge(30).setSSN(""123-45-678"").setEmail(""johndoe@gmail.com"").setAddress(""123Street"")'], 'failure': []}]",100.0,['ANNOT001' 'C002' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 1, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",above average
pyCicd_output.json,main,1-2,"[{'lineno': 1, 'coloffset': 0, 'linematch': 'def main():', 'context': 'def main():\n    print(""Hello world!"")', 'pattern': './/FunctionDef[not(args/arg/annotation) or not(returns)]', 'check_id': 'ANNOT001', 'check_name': 'missing-annotations'}, {'lineno': 2, 'coloffset': 4, 'linematch': 'print(""Hello world!"")', 'context': 'def main():\n    print(""Hello world!"")', 'pattern': './/FunctionDef/body/* | .//FunctionDef/body/Return', 'check_id': 'CML001', 'check_name': 'count-method-lines'}]","[{'name': 'Mutant #1', 'line': 2, 'description': ['    print(""Hello world!"")'], 'failure': [{'inner': '--- application/__init__.py\n+++ application/__init__.py\n@@ -1,3 +1,3 @@\n def main():\n-    print(""Hello world!"")\n+    print(""XXHello world!XX"")\n \n', 'type': 'failure', 'message': 'bad_survived'}]}]",0.0,['ANNOT001' 'CML001'],"['.//FunctionDef[not(args/arg/annotation) or not(returns)]'
 './/FunctionDef/body/* | .//FunctionDef/body/Return']","{'single-nested-if': 0, 'double-nested-if': 0, 'explicit-return-in-init': 0, 'none-comparison': 0, 'no-exception-type': 0, 'boolean-comparison': 0, 'missing-annotations': 1, 'key-function': 0, 'multi-value-key-literal': 0, 'assert-tuple': 0, 'loop-variable-iterates-overrides-iterator': 0, 'function-uses-loop-variable': 0, 'nested-depth': 0, 'number-of-conditions-in-function': 0, 'nested-conditions': 0, 'nested-condition-loops': 0, 'nested-loop-conditions': 0, 'nested-loop-conditions-ff': 0, 'number-of-assertions': 0, 'count-test-method-lines': 0, 'count-method-lines': 1, 'test-methods-invoking-method': 0, 'not-using-context-manager': 0, 'multiple-returns-in-function': 0, 'complex-expressions': 0, 'unused-variables': 0, 'method-too-long': 0, 'high-cyclomatic-complexity': 0, 'long-method-chaining': 0, 'deeply-nested-control-structures': 0, 'god-function': 0, 'empty-catch-block': 0, 'magic-numbers': 0, 'use-of-global-variables': 0, 'large-class': 0, 'long-parameter-list': 0}",below average
