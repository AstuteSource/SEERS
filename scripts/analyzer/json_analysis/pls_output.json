[
  {
    "function_name": "center_print",
    "function_scope": "60-73",
    "patterns": [
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "if isinstance(text, Rule):",
        "context": "        style (str, optional): styling of the object. Defaults to None.\n    \"\"\"\n    width = get_terminal_full_width() if wrap else get_terminal_full_width()\n\n    if isinstance(text, Rule):\n        console.print(text, style=style, width=width)\n    else:\n        console.print(Align.center(text, style=style, width=width))\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 60,
        "coloffset": 0,
        "linematch": "def center_print(",
        "context": "def get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2\n\n\ndef center_print(\n    text, style: Union[str, None] = None, wrap: bool = False\n) -> None:\n    \"\"\"Print text with center alignment.\n    Args:\n        text (Union[str, Rule, Table]): object to center align",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 60,
        "coloffset": 0,
        "linematch": "def center_print(",
        "context": "def get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2\n\n\ndef center_print(\n    text, style: Union[str, None] = None, wrap: bool = False\n) -> None:\n    \"\"\"Print text with center alignment.\n    Args:\n        text (Union[str, Rule, Table]): object to center align",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 63,
        "coloffset": 4,
        "linematch": "\"\"\"Print text with center alignment.",
        "context": "\ndef center_print(\n    text, style: Union[str, None] = None, wrap: bool = False\n) -> None:\n    \"\"\"Print text with center alignment.\n    Args:\n        text (Union[str, Rule, Table]): object to center align\n        style (str, optional): styling of the object. Defaults to None.\n    \"\"\"\n    width = get_terminal_full_width() if wrap else get_terminal_full_width()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 68,
        "coloffset": 4,
        "linematch": "width = get_terminal_full_width() if wrap else get_terminal_full_width()",
        "context": "    Args:\n        text (Union[str, Rule, Table]): object to center align\n        style (str, optional): styling of the object. Defaults to None.\n    \"\"\"\n    width = get_terminal_full_width() if wrap else get_terminal_full_width()\n\n    if isinstance(text, Rule):\n        console.print(text, style=style, width=width)\n    else:\n        console.print(Align.center(text, style=style, width=width))",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "if isinstance(text, Rule):",
        "context": "        style (str, optional): styling of the object. Defaults to None.\n    \"\"\"\n    width = get_terminal_full_width() if wrap else get_terminal_full_width()\n\n    if isinstance(text, Rule):\n        console.print(text, style=style, width=width)\n    else:\n        console.print(Align.center(text, style=style, width=width))\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #60",
        "line": 61,
        "description": [
          "    text, style: Union[str, None] = None, wrap: bool = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -58,7 +58,7 @@\n \n \n def center_print(\n-    text, style: Union[str, None] = None, wrap: bool = False\n+    text, style: Union[str, None] = None, wrap: bool = True\n ) -> None:\n     \"\"\"Print text with center alignment.\n     Args:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #61",
        "line": 68,
        "description": [
          "    width = get_terminal_full_width() if wrap else get_terminal_full_width()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -65,7 +65,7 @@\n         text (Union[str, Rule, Table]): object to center align\n         style (str, optional): styling of the object. Defaults to None.\n     \"\"\"\n-    width = get_terminal_full_width() if wrap else get_terminal_full_width()\n+    width = None\n \n     if isinstance(text, Rule):\n         console.print(text, style=style, width=width)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "print_tasks_progress",
    "function_scope": "87-101",
    "patterns": [
      {
        "lineno": 88,
        "coloffset": 4,
        "linematch": "if Settings().show_tasks_progress():",
        "context": "        return Align.center(super().get_renderable())\n\n\ndef print_tasks_progress() -> None:\n    if Settings().show_tasks_progress():\n        with CenteredProgress(\n            BarColumn(\n                bar_width=get_terminal_center_width(),\n                style=background_bar_style,\n                complete_style=complete_bar_style,",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 87,
        "coloffset": 0,
        "linematch": "def print_tasks_progress() -> None:",
        "context": "    def get_renderable(self) -> RenderableType:\n        return Align.center(super().get_renderable())\n\n\ndef print_tasks_progress() -> None:\n    if Settings().show_tasks_progress():\n        with CenteredProgress(\n            BarColumn(\n                bar_width=get_terminal_center_width(),\n                style=background_bar_style,",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 87,
        "coloffset": 0,
        "linematch": "def print_tasks_progress() -> None:",
        "context": "    def get_renderable(self) -> RenderableType:\n        return Align.center(super().get_renderable())\n\n\ndef print_tasks_progress() -> None:\n    if Settings().show_tasks_progress():\n        with CenteredProgress(\n            BarColumn(\n                bar_width=get_terminal_center_width(),\n                style=background_bar_style,",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 88,
        "coloffset": 4,
        "linematch": "if Settings().show_tasks_progress():",
        "context": "        return Align.center(super().get_renderable())\n\n\ndef print_tasks_progress() -> None:\n    if Settings().show_tasks_progress():\n        with CenteredProgress(\n            BarColumn(\n                bar_width=get_terminal_center_width(),\n                style=background_bar_style,\n                complete_style=complete_bar_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #63",
        "line": 98,
        "description": [
          "            qty_done = Settings().count_tasks_done()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #64",
        "line": 99,
        "description": [
          "            qty_undone = Settings().count_tasks_undone()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #65",
        "line": 100,
        "description": [
          "            task1 = progress.add_task('Progress', total=qty_done + qty_undone)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -97,7 +97,7 @@\n         ) as progress:\n             qty_done = Settings().count_tasks_done()\n             qty_undone = Settings().count_tasks_undone()\n-            task1 = progress.add_task('Progress', total=qty_done + qty_undone)\n+            task1 = progress.add_task('XXProgressXX', total=qty_done + qty_undone)\n             progress.update(task1, advance=qty_done)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #66",
        "line": 100,
        "description": [
          "            task1 = progress.add_task('Progress', total=qty_done + qty_undone)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -97,7 +97,7 @@\n         ) as progress:\n             qty_done = Settings().count_tasks_done()\n             qty_undone = Settings().count_tasks_undone()\n-            task1 = progress.add_task('Progress', total=qty_done + qty_undone)\n+            task1 = progress.add_task('Progress', total=qty_done - qty_undone)\n             progress.update(task1, advance=qty_done)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #67",
        "line": 100,
        "description": [
          "            task1 = progress.add_task('Progress', total=qty_done + qty_undone)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 60.0
  },
  {
    "function_name": "showtasks",
    "function_scope": "136-164",
    "patterns": [
      {
        "lineno": 161,
        "coloffset": 4,
        "linematch": "if Settings().all_tasks_done():",
        "context": "\n        task_table.add_row(task_id, task_name, task_status)\n    center_print(task_table)\n\n    if Settings().all_tasks_done():\n        print_no_pending_tasks()\n\n    print_tasks_progress()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 149,
        "coloffset": 8,
        "linematch": "if task['done']:",
        "context": "    task_table.add_column('TASK')\n    task_table.add_column('STATUS', justify='center')\n\n    for index, task in enumerate(Settings().get_tasks()):\n        if task['done']:\n            task_name = f'[{task_done_style}][s]{task[\"name\"]}[/][/]'\n            task_status = '[#bbf2b3]\u2713[/]'\n            task_id = f'[{task_done_style}][s]{str(index + 1)}[/][/]'\n        else:\n            task_name = f'[{task_pending_style}]{task[\"name\"]}[/]'",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 136,
        "coloffset": 0,
        "linematch": "def showtasks() -> None:",
        "context": "\n\n@app.command('tasks', short_help='Show all Tasks :open_book:')\n@app.command(short_help='[s]Show all Tasks :open_book:[/]', deprecated=True)\ndef showtasks() -> None:\n    \"\"\"Show all Tasks :open_book:\"\"\"\n    task_table = Table(\n        header_style=table_header_style,\n        style=table_header_style,\n        box=box.SIMPLE_HEAVY,",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 136,
        "coloffset": 0,
        "linematch": "def showtasks() -> None:",
        "context": "\n\n@app.command('tasks', short_help='Show all Tasks :open_book:')\n@app.command(short_help='[s]Show all Tasks :open_book:[/]', deprecated=True)\ndef showtasks() -> None:\n    \"\"\"Show all Tasks :open_book:\"\"\"\n    task_table = Table(\n        header_style=table_header_style,\n        style=table_header_style,\n        box=box.SIMPLE_HEAVY,",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 137,
        "coloffset": 4,
        "linematch": "\"\"\"Show all Tasks :open_book:\"\"\"",
        "context": "\n@app.command('tasks', short_help='Show all Tasks :open_book:')\n@app.command(short_help='[s]Show all Tasks :open_book:[/]', deprecated=True)\ndef showtasks() -> None:\n    \"\"\"Show all Tasks :open_book:\"\"\"\n    task_table = Table(\n        header_style=table_header_style,\n        style=table_header_style,\n        box=box.SIMPLE_HEAVY,\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 138,
        "coloffset": 4,
        "linematch": "task_table = Table(",
        "context": "@app.command('tasks', short_help='Show all Tasks :open_book:')\n@app.command(short_help='[s]Show all Tasks :open_book:[/]', deprecated=True)\ndef showtasks() -> None:\n    \"\"\"Show all Tasks :open_book:\"\"\"\n    task_table = Table(\n        header_style=table_header_style,\n        style=table_header_style,\n        box=box.SIMPLE_HEAVY,\n    )\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 144,
        "coloffset": 4,
        "linematch": "task_table.add_column('ID', justify='center')",
        "context": "        style=table_header_style,\n        box=box.SIMPLE_HEAVY,\n    )\n\n    task_table.add_column('ID', justify='center')\n    task_table.add_column('TASK')\n    task_table.add_column('STATUS', justify='center')\n\n    for index, task in enumerate(Settings().get_tasks()):\n        if task['done']:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 145,
        "coloffset": 4,
        "linematch": "task_table.add_column('TASK')",
        "context": "        box=box.SIMPLE_HEAVY,\n    )\n\n    task_table.add_column('ID', justify='center')\n    task_table.add_column('TASK')\n    task_table.add_column('STATUS', justify='center')\n\n    for index, task in enumerate(Settings().get_tasks()):\n        if task['done']:\n            task_name = f'[{task_done_style}][s]{task[\"name\"]}[/][/]'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 146,
        "coloffset": 4,
        "linematch": "task_table.add_column('STATUS', justify='center')",
        "context": "    )\n\n    task_table.add_column('ID', justify='center')\n    task_table.add_column('TASK')\n    task_table.add_column('STATUS', justify='center')\n\n    for index, task in enumerate(Settings().get_tasks()):\n        if task['done']:\n            task_name = f'[{task_done_style}][s]{task[\"name\"]}[/][/]'\n            task_status = '[#bbf2b3]\u2713[/]'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 148,
        "coloffset": 4,
        "linematch": "for index, task in enumerate(Settings().get_tasks()):",
        "context": "    task_table.add_column('ID', justify='center')\n    task_table.add_column('TASK')\n    task_table.add_column('STATUS', justify='center')\n\n    for index, task in enumerate(Settings().get_tasks()):\n        if task['done']:\n            task_name = f'[{task_done_style}][s]{task[\"name\"]}[/][/]'\n            task_status = '[#bbf2b3]\u2713[/]'\n            task_id = f'[{task_done_style}][s]{str(index + 1)}[/][/]'\n        else:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 159,
        "coloffset": 4,
        "linematch": "center_print(task_table)",
        "context": "            task_status = f'[{task_pending_style}]\u25cb[/]'\n            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'\n\n        task_table.add_row(task_id, task_name, task_status)\n    center_print(task_table)\n\n    if Settings().all_tasks_done():\n        print_no_pending_tasks()\n\n    print_tasks_progress()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 161,
        "coloffset": 4,
        "linematch": "if Settings().all_tasks_done():",
        "context": "\n        task_table.add_row(task_id, task_name, task_status)\n    center_print(task_table)\n\n    if Settings().all_tasks_done():\n        print_no_pending_tasks()\n\n    print_tasks_progress()\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 164,
        "coloffset": 4,
        "linematch": "print_tasks_progress()",
        "context": "\n    if Settings().all_tasks_done():\n        print_no_pending_tasks()\n\n    print_tasks_progress()\n\n\ndef print_tasks(force_print: bool = False) -> None:\n    center_print(' ')\n    if not Settings().all_tasks_done() or force_print:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #90",
        "line": 142,
        "description": [
          "    )"
        ],
        "failure": []
      },
      {
        "name": "Mutant #91",
        "line": 144,
        "description": [
          "    task_table.add_column('ID', justify='center')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #92",
        "line": 144,
        "description": [
          "    task_table.add_column('ID', justify='center')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -141,7 +141,7 @@\n         box=box.SIMPLE_HEAVY,\n     )\n \n-    task_table.add_column('ID', justify='center')\n+    task_table.add_column('ID', justify='XXcenterXX')\n     task_table.add_column('TASK')\n     task_table.add_column('STATUS', justify='center')\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #93",
        "line": 145,
        "description": [
          "    task_table.add_column('TASK')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #94",
        "line": 146,
        "description": [
          "    task_table.add_column('STATUS', justify='center')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #95",
        "line": 146,
        "description": [
          "    task_table.add_column('STATUS', justify='center')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #96",
        "line": 149,
        "description": [
          "        if task['done']:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #97",
        "line": 150,
        "description": [
          "            task_name = f'[{task_done_style}][s]{task[\"name\"]}[/][/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #98",
        "line": 150,
        "description": [
          "            task_name = f'[{task_done_style}][s]{task[\"name\"]}[/][/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #99",
        "line": 150,
        "description": [
          "            task_name = f'[{task_done_style}][s]{task[\"name\"]}[/][/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #100",
        "line": 151,
        "description": [
          "            task_status = '[#bbf2b3]\u2713[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #101",
        "line": 151,
        "description": [
          "            task_status = '[#bbf2b3]\u2713[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #102",
        "line": 152,
        "description": [
          "            task_id = f'[{task_done_style}][s]{str(index + 1)}[/][/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #103",
        "line": 152,
        "description": [
          "            task_id = f'[{task_done_style}][s]{str(index + 1)}[/][/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #104",
        "line": 152,
        "description": [
          "            task_id = f'[{task_done_style}][s]{str(index + 1)}[/][/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #105",
        "line": 152,
        "description": [
          "            task_id = f'[{task_done_style}][s]{str(index + 1)}[/][/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #106",
        "line": 154,
        "description": [
          "            task_name = f'[{task_pending_style}]{task[\"name\"]}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #107",
        "line": 154,
        "description": [
          "            task_name = f'[{task_pending_style}]{task[\"name\"]}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #108",
        "line": 154,
        "description": [
          "            task_name = f'[{task_pending_style}]{task[\"name\"]}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #109",
        "line": 155,
        "description": [
          "            task_status = f'[{task_pending_style}]\u25cb[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #110",
        "line": 155,
        "description": [
          "            task_status = f'[{task_pending_style}]\u25cb[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #111",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #112",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #113",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #114",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #115",
        "line": 159,
        "description": [
          "    center_print(task_table)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 96.15384615384616
  },
  {
    "function_name": "print_tasks",
    "function_scope": "167-173",
    "patterns": [
      {
        "lineno": 169,
        "coloffset": 4,
        "linematch": "if not Settings().all_tasks_done() or force_print:",
        "context": "\n\ndef print_tasks(force_print: bool = False) -> None:\n    center_print(' ')\n    if not Settings().all_tasks_done() or force_print:\n        showtasks()\n    else:\n        print_no_pending_tasks()\n        print_tasks_progress()\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 167,
        "coloffset": 0,
        "linematch": "def print_tasks(force_print: bool = False) -> None:",
        "context": "\n    print_tasks_progress()\n\n\ndef print_tasks(force_print: bool = False) -> None:\n    center_print(' ')\n    if not Settings().all_tasks_done() or force_print:\n        showtasks()\n    else:\n        print_no_pending_tasks()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 167,
        "coloffset": 0,
        "linematch": "def print_tasks(force_print: bool = False) -> None:",
        "context": "\n    print_tasks_progress()\n\n\ndef print_tasks(force_print: bool = False) -> None:\n    center_print(' ')\n    if not Settings().all_tasks_done() or force_print:\n        showtasks()\n    else:\n        print_no_pending_tasks()",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 168,
        "coloffset": 4,
        "linematch": "center_print(' ')",
        "context": "    print_tasks_progress()\n\n\ndef print_tasks(force_print: bool = False) -> None:\n    center_print(' ')\n    if not Settings().all_tasks_done() or force_print:\n        showtasks()\n    else:\n        print_no_pending_tasks()\n        print_tasks_progress()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 169,
        "coloffset": 4,
        "linematch": "if not Settings().all_tasks_done() or force_print:",
        "context": "\n\ndef print_tasks(force_print: bool = False) -> None:\n    center_print(' ')\n    if not Settings().all_tasks_done() or force_print:\n        showtasks()\n    else:\n        print_no_pending_tasks()\n        print_tasks_progress()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #116",
        "line": 167,
        "description": [
          "def print_tasks(force_print: bool = False) -> None:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -164,7 +164,7 @@\n     print_tasks_progress()\n \n \n-def print_tasks(force_print: bool = False) -> None:\n+def print_tasks(force_print: bool = True) -> None:\n     center_print(' ')\n     if not Settings().all_tasks_done() or force_print:\n         showtasks()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #117",
        "line": 168,
        "description": [
          "    center_print(' ')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -165,7 +165,7 @@\n \n \n def print_tasks(force_print: bool = False) -> None:\n-    center_print(' ')\n+    center_print('XX XX')\n     if not Settings().all_tasks_done() or force_print:\n         showtasks()\n     else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #118",
        "line": 169,
        "description": [
          "    if not Settings().all_tasks_done() or force_print:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #119",
        "line": 169,
        "description": [
          "    if not Settings().all_tasks_done() or force_print:"
        ],
        "failure": []
      }
    ],
    "mutation_score": 50.0
  },
  {
    "function_name": "done",
    "function_scope": "191-238",
    "patterns": [
      {
        "lineno": 195,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "def done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as done',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 205,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to mark as done?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 215,
        "coloffset": 4,
        "linematch": "if settings['tasks'][task_id]['done']:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if settings['tasks'][task_id]['done']:\n        center_print(\n            Rule(\n                'No Updates Made, Task Already Done', style=warning_line_style\n            ),\n            style=warning_text_style,",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 225,
        "coloffset": 4,
        "linematch": "if Settings().all_tasks_done():",
        "context": "        )\n        print_tasks()\n        return\n\n    if Settings().all_tasks_done():\n        center_print(\n            Rule('All tasks are already completed!', style=update_line_style),\n            style=update_text_style,\n        )\n        return",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 191,
        "coloffset": 0,
        "linematch": "def done(taks_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 205,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to mark as done?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 215,
        "coloffset": 4,
        "linematch": "if settings['tasks'][task_id]['done']:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if settings['tasks'][task_id]['done']:\n        center_print(\n            Rule(\n                'No Updates Made, Task Already Done', style=warning_line_style\n            ),\n            style=warning_text_style,",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 225,
        "coloffset": 4,
        "linematch": "if Settings().all_tasks_done():",
        "context": "        )\n        print_tasks()\n        return\n\n    if Settings().all_tasks_done():\n        center_print(\n            Rule('All tasks are already completed!', style=update_line_style),\n            style=update_text_style,\n        )\n        return",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 191,
        "coloffset": 0,
        "linematch": "def done(taks_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 192,
        "coloffset": 4,
        "linematch": "\"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"",
        "context": "\n\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 193,
        "coloffset": 4,
        "linematch": "task_id = taks_id - 1",
        "context": "\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as done',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 194,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as done',\n                style=error_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 195,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "def done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as done',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 205,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to mark as done?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 215,
        "coloffset": 4,
        "linematch": "if settings['tasks'][task_id]['done']:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if settings['tasks'][task_id]['done']:\n        center_print(\n            Rule(\n                'No Updates Made, Task Already Done', style=warning_line_style\n            ),\n            style=warning_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 225,
        "coloffset": 4,
        "linematch": "if Settings().all_tasks_done():",
        "context": "        )\n        print_tasks()\n        return\n\n    if Settings().all_tasks_done():\n        center_print(\n            Rule('All tasks are already completed!', style=update_line_style),\n            style=update_text_style,\n        )\n        return",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 232,
        "coloffset": 4,
        "linematch": "settings['tasks'][task_id]['done'] = True",
        "context": "            style=update_text_style,\n        )\n        return\n\n    settings['tasks'][task_id]['done'] = True\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Updated Task List', style=update_line_style),\n        style=update_text_style,\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 233,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "        )\n        return\n\n    settings['tasks'][task_id]['done'] = True\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Updated Task List', style=update_line_style),\n        style=update_text_style,\n    )\n    print_tasks()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 234,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "        return\n\n    settings['tasks'][task_id]['done'] = True\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Updated Task List', style=update_line_style),\n        style=update_text_style,\n    )\n    print_tasks()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 238,
        "coloffset": 4,
        "linematch": "print_tasks()",
        "context": "    center_print(\n        Rule('Updated Task List', style=update_line_style),\n        style=update_text_style,\n    )\n    print_tasks()\n\n\n@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 191,
        "coloffset": 0,
        "linematch": "def done(taks_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(",
        "pattern": ".//FunctionDef[count(body//Return) > 2]",
        "check_id": "MRET001",
        "check_name": "multiple-returns-in-function"
      },
      {
        "lineno": 191,
        "coloffset": 0,
        "linematch": "def done(taks_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "F030",
        "check_name": "deeply-nested-control-structures"
      },
      {
        "lineno": 191,
        "coloffset": 0,
        "linematch": "def done(taks_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n    task_id = taks_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "P005",
        "check_name": "long-scope-chaining"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #129",
        "line": 193,
        "description": [
          "    task_id = taks_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -190,7 +190,7 @@\n @app.command()\n def done(taks_id: int) -> None:\n     \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n-    task_id = taks_id - 1\n+    task_id = taks_id + 1\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #130",
        "line": 193,
        "description": [
          "    task_id = taks_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -190,7 +190,7 @@\n @app.command()\n def done(taks_id: int) -> None:\n     \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n-    task_id = taks_id - 1\n+    task_id = taks_id - 2\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #131",
        "line": 193,
        "description": [
          "    task_id = taks_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -190,7 +190,7 @@\n @app.command()\n def done(taks_id: int) -> None:\n     \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n-    task_id = taks_id - 1\n+    task_id = None\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #132",
        "line": 194,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -191,7 +191,7 @@\n def done(taks_id: int) -> None:\n     \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n     task_id = taks_id - 1\n-    settings = Settings().get_settings()\n+    settings = None\n     if not settings['tasks']:\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #133",
        "line": 195,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -192,7 +192,7 @@\n     \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n     task_id = taks_id - 1\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if  settings['tasks']:\n         center_print(\n             Rule(\n                 'Sorry, There are no tasks to mark as done',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #134",
        "line": 195,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -192,7 +192,7 @@\n     \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"\n     task_id = taks_id - 1\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if not settings['XXtasksXX']:\n         center_print(\n             Rule(\n                 'Sorry, There are no tasks to mark as done',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #135",
        "line": 198,
        "description": [
          "                'Sorry, There are no tasks to mark as done',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -195,7 +195,7 @@\n     if not settings['tasks']:\n         center_print(\n             Rule(\n-                'Sorry, There are no tasks to mark as done',\n+                'XXSorry, There are no tasks to mark as doneXX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #136",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if  0 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #137",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 1 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #138",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 < task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #139",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id <= len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #140",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id < len(settings['XXtasksXX']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #141",
        "line": 208,
        "description": [
          "                'Are you sure you gave me the correct ID to mark as done?',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -205,7 +205,7 @@\n     if not 0 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n-                'Are you sure you gave me the correct ID to mark as done?',\n+                'XXAre you sure you gave me the correct ID to mark as done?XX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #142",
        "line": 215,
        "description": [
          "    if settings['tasks'][task_id]['done']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -212,7 +212,7 @@\n         )\n         return\n \n-    if settings['tasks'][task_id]['done']:\n+    if settings['XXtasksXX'][task_id]['done']:\n         center_print(\n             Rule(\n                 'No Updates Made, Task Already Done', style=warning_line_style\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #143",
        "line": 215,
        "description": [
          "    if settings['tasks'][task_id]['done']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -212,7 +212,7 @@\n         )\n         return\n \n-    if settings['tasks'][task_id]['done']:\n+    if settings['tasks'][task_id]['XXdoneXX']:\n         center_print(\n             Rule(\n                 'No Updates Made, Task Already Done', style=warning_line_style\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #144",
        "line": 218,
        "description": [
          "                'No Updates Made, Task Already Done', style=warning_line_style"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -215,7 +215,7 @@\n     if settings['tasks'][task_id]['done']:\n         center_print(\n             Rule(\n-                'No Updates Made, Task Already Done', style=warning_line_style\n+                'XXNo Updates Made, Task Already DoneXX', style=warning_line_style\n             ),\n             style=warning_text_style,\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #145",
        "line": 227,
        "description": [
          "            Rule('All tasks are already completed!', style=update_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -224,7 +224,7 @@\n \n     if Settings().all_tasks_done():\n         center_print(\n-            Rule('All tasks are already completed!', style=update_line_style),\n+            Rule('XXAll tasks are already completed!XX', style=update_line_style),\n             style=update_text_style,\n         )\n         return\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #146",
        "line": 232,
        "description": [
          "    settings['tasks'][task_id]['done'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -229,7 +229,7 @@\n         )\n         return\n \n-    settings['tasks'][task_id]['done'] = True\n+    settings['XXtasksXX'][task_id]['done'] = True\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #147",
        "line": 232,
        "description": [
          "    settings['tasks'][task_id]['done'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -229,7 +229,7 @@\n         )\n         return\n \n-    settings['tasks'][task_id]['done'] = True\n+    settings['tasks'][task_id]['XXdoneXX'] = True\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #148",
        "line": 232,
        "description": [
          "    settings['tasks'][task_id]['done'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -229,7 +229,7 @@\n         )\n         return\n \n-    settings['tasks'][task_id]['done'] = True\n+    settings['tasks'][task_id]['done'] = False\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #149",
        "line": 232,
        "description": [
          "    settings['tasks'][task_id]['done'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -229,7 +229,7 @@\n         )\n         return\n \n-    settings['tasks'][task_id]['done'] = True\n+    settings['tasks'][task_id]['done'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #150",
        "line": 235,
        "description": [
          "        Rule('Updated Task List', style=update_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -232,7 +232,7 @@\n     settings['tasks'][task_id]['done'] = True\n     Settings().write_settings(settings)\n     center_print(\n-        Rule('Updated Task List', style=update_line_style),\n+        Rule('XXUpdated Task ListXX', style=update_line_style),\n         style=update_text_style,\n     )\n     print_tasks()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "undone",
    "function_scope": "242-281",
    "patterns": [
      {
        "lineno": 245,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as undone',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 255,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to mark as undone?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 265,
        "coloffset": 4,
        "linematch": "if not settings['tasks'][task_id]['done']:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not settings['tasks'][task_id]['done']:\n        center_print(\n            Rule(\n                'No Updates Made, Task Still Pending', style=warning_line_style\n            ),\n            style=warning_text_style,",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 242,
        "coloffset": 0,
        "linematch": "def undone(task_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 255,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to mark as undone?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 265,
        "coloffset": 4,
        "linematch": "if not settings['tasks'][task_id]['done']:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not settings['tasks'][task_id]['done']:\n        center_print(\n            Rule(\n                'No Updates Made, Task Still Pending', style=warning_line_style\n            ),\n            style=warning_text_style,",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 242,
        "coloffset": 0,
        "linematch": "def undone(task_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 243,
        "coloffset": 4,
        "linematch": "task_id = task_id - 1",
        "context": "\n\n@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as undone',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 244,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "\n@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as undone',\n                style=error_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 245,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks to mark as undone',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 255,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to mark as undone?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 265,
        "coloffset": 4,
        "linematch": "if not settings['tasks'][task_id]['done']:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not settings['tasks'][task_id]['done']:\n        center_print(\n            Rule(\n                'No Updates Made, Task Still Pending', style=warning_line_style\n            ),\n            style=warning_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 275,
        "coloffset": 4,
        "linematch": "settings['tasks'][task_id]['done'] = False",
        "context": "        )\n        print_tasks()\n        return\n\n    settings['tasks'][task_id]['done'] = False\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Updated Task List', style=update_text_style),\n        style=update_text_style,\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 276,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "        print_tasks()\n        return\n\n    settings['tasks'][task_id]['done'] = False\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Updated Task List', style=update_text_style),\n        style=update_text_style,\n    )\n    print_tasks()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 277,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "        return\n\n    settings['tasks'][task_id]['done'] = False\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Updated Task List', style=update_text_style),\n        style=update_text_style,\n    )\n    print_tasks()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 281,
        "coloffset": 4,
        "linematch": "print_tasks()",
        "context": "    center_print(\n        Rule('Updated Task List', style=update_text_style),\n        style=update_text_style,\n    )\n    print_tasks()\n\n\n@app.command('del', short_help='[bright_red]Delete[/] a Task')\n@app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\ndef delete(task_id: int) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 242,
        "coloffset": 0,
        "linematch": "def undone(task_id: int) -> None:",
        "context": "    print_tasks()\n\n\n@app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\ndef undone(task_id: int) -> None:\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[count(body//Return) > 2]",
        "check_id": "MRET001",
        "check_name": "multiple-returns-in-function"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #153",
        "line": 243,
        "description": [
          "    task_id = task_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -240,7 +240,7 @@\n \n @app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\n def undone(task_id: int) -> None:\n-    task_id = task_id - 1\n+    task_id = task_id + 1\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #154",
        "line": 243,
        "description": [
          "    task_id = task_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -240,7 +240,7 @@\n \n @app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\n def undone(task_id: int) -> None:\n-    task_id = task_id - 1\n+    task_id = task_id - 2\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #155",
        "line": 243,
        "description": [
          "    task_id = task_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -240,7 +240,7 @@\n \n @app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\n def undone(task_id: int) -> None:\n-    task_id = task_id - 1\n+    task_id = None\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #156",
        "line": 244,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -241,7 +241,7 @@\n @app.command(short_help=f'Mark a task as [{task_pending_style}]undone \u25cb[/]')\n def undone(task_id: int) -> None:\n     task_id = task_id - 1\n-    settings = Settings().get_settings()\n+    settings = None\n     if not settings['tasks']:\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #157",
        "line": 245,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -242,7 +242,7 @@\n def undone(task_id: int) -> None:\n     task_id = task_id - 1\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if  settings['tasks']:\n         center_print(\n             Rule(\n                 'Sorry, There are no tasks to mark as undone',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #158",
        "line": 245,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -242,7 +242,7 @@\n def undone(task_id: int) -> None:\n     task_id = task_id - 1\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if not settings['XXtasksXX']:\n         center_print(\n             Rule(\n                 'Sorry, There are no tasks to mark as undone',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #159",
        "line": 248,
        "description": [
          "                'Sorry, There are no tasks to mark as undone',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -245,7 +245,7 @@\n     if not settings['tasks']:\n         center_print(\n             Rule(\n-                'Sorry, There are no tasks to mark as undone',\n+                'XXSorry, There are no tasks to mark as undoneXX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #160",
        "line": 255,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -252,7 +252,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if  0 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as undone?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #161",
        "line": 255,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -252,7 +252,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 1 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as undone?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #162",
        "line": 255,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -252,7 +252,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 < task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as undone?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #163",
        "line": 255,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -252,7 +252,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id <= len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as undone?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #164",
        "line": 255,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -252,7 +252,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id < len(settings['XXtasksXX']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as undone?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #165",
        "line": 258,
        "description": [
          "                'Are you sure you gave me the correct ID to mark as undone?',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -255,7 +255,7 @@\n     if not 0 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n-                'Are you sure you gave me the correct ID to mark as undone?',\n+                'XXAre you sure you gave me the correct ID to mark as undone?XX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #166",
        "line": 265,
        "description": [
          "    if not settings['tasks'][task_id]['done']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -262,7 +262,7 @@\n         )\n         return\n \n-    if not settings['tasks'][task_id]['done']:\n+    if  settings['tasks'][task_id]['done']:\n         center_print(\n             Rule(\n                 'No Updates Made, Task Still Pending', style=warning_line_style\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #167",
        "line": 265,
        "description": [
          "    if not settings['tasks'][task_id]['done']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -262,7 +262,7 @@\n         )\n         return\n \n-    if not settings['tasks'][task_id]['done']:\n+    if not settings['XXtasksXX'][task_id]['done']:\n         center_print(\n             Rule(\n                 'No Updates Made, Task Still Pending', style=warning_line_style\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #168",
        "line": 265,
        "description": [
          "    if not settings['tasks'][task_id]['done']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -262,7 +262,7 @@\n         )\n         return\n \n-    if not settings['tasks'][task_id]['done']:\n+    if not settings['tasks'][task_id]['XXdoneXX']:\n         center_print(\n             Rule(\n                 'No Updates Made, Task Still Pending', style=warning_line_style\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #169",
        "line": 268,
        "description": [
          "                'No Updates Made, Task Still Pending', style=warning_line_style"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -265,7 +265,7 @@\n     if not settings['tasks'][task_id]['done']:\n         center_print(\n             Rule(\n-                'No Updates Made, Task Still Pending', style=warning_line_style\n+                'XXNo Updates Made, Task Still PendingXX', style=warning_line_style\n             ),\n             style=warning_text_style,\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #170",
        "line": 275,
        "description": [
          "    settings['tasks'][task_id]['done'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -272,7 +272,7 @@\n         print_tasks()\n         return\n \n-    settings['tasks'][task_id]['done'] = False\n+    settings['XXtasksXX'][task_id]['done'] = False\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_text_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #171",
        "line": 275,
        "description": [
          "    settings['tasks'][task_id]['done'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -272,7 +272,7 @@\n         print_tasks()\n         return\n \n-    settings['tasks'][task_id]['done'] = False\n+    settings['tasks'][task_id]['XXdoneXX'] = False\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_text_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #172",
        "line": 275,
        "description": [
          "    settings['tasks'][task_id]['done'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -272,7 +272,7 @@\n         print_tasks()\n         return\n \n-    settings['tasks'][task_id]['done'] = False\n+    settings['tasks'][task_id]['done'] = True\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_text_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #173",
        "line": 275,
        "description": [
          "    settings['tasks'][task_id]['done'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -272,7 +272,7 @@\n         print_tasks()\n         return\n \n-    settings['tasks'][task_id]['done'] = False\n+    settings['tasks'][task_id]['done'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Updated Task List', style=update_text_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #174",
        "line": 278,
        "description": [
          "        Rule('Updated Task List', style=update_text_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -275,7 +275,7 @@\n     settings['tasks'][task_id]['done'] = False\n     Settings().write_settings(settings)\n     center_print(\n-        Rule('Updated Task List', style=update_text_style),\n+        Rule('XXUpdated Task ListXX', style=update_text_style),\n         style=update_text_style,\n     )\n     print_tasks()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "delete",
    "function_scope": "286-320",
    "patterns": [
      {
        "lineno": 290,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "def delete(task_id: int) -> None:\n    \"\"\"[bright_red]Delete[/] a Task\"\"\"\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks left to delete',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 300,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to delete?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 286,
        "coloffset": 0,
        "linematch": "def delete(task_id: int) -> None:",
        "context": "\n\n@app.command('del', short_help='[bright_red]Delete[/] a Task')\n@app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\ndef delete(task_id: int) -> None:\n    \"\"\"[bright_red]Delete[/] a Task\"\"\"\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 300,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to delete?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 286,
        "coloffset": 0,
        "linematch": "def delete(task_id: int) -> None:",
        "context": "\n\n@app.command('del', short_help='[bright_red]Delete[/] a Task')\n@app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\ndef delete(task_id: int) -> None:\n    \"\"\"[bright_red]Delete[/] a Task\"\"\"\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 287,
        "coloffset": 4,
        "linematch": "\"\"\"[bright_red]Delete[/] a Task\"\"\"",
        "context": "\n@app.command('del', short_help='[bright_red]Delete[/] a Task')\n@app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\ndef delete(task_id: int) -> None:\n    \"\"\"[bright_red]Delete[/] a Task\"\"\"\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 288,
        "coloffset": 4,
        "linematch": "task_id = task_id - 1",
        "context": "@app.command('del', short_help='[bright_red]Delete[/] a Task')\n@app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\ndef delete(task_id: int) -> None:\n    \"\"\"[bright_red]Delete[/] a Task\"\"\"\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks left to delete',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 289,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "@app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\ndef delete(task_id: int) -> None:\n    \"\"\"[bright_red]Delete[/] a Task\"\"\"\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks left to delete',\n                style=error_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 290,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "def delete(task_id: int) -> None:\n    \"\"\"[bright_red]Delete[/] a Task\"\"\"\n    task_id = task_id - 1\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, There are no tasks left to delete',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 300,
        "coloffset": 4,
        "linematch": "if not 0 <= task_id < len(settings['tasks']):",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if not 0 <= task_id < len(settings['tasks']):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to delete?',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 310,
        "coloffset": 4,
        "linematch": "deleted_task = settings['tasks'][task_id]",
        "context": "            style=error_text_style,\n        )\n        return\n\n    deleted_task = settings['tasks'][task_id]\n    del settings['tasks'][task_id]\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            f'Deleted \"{deleted_task[\"name\"]}\"',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 311,
        "coloffset": 4,
        "linematch": "del settings['tasks'][task_id]",
        "context": "        )\n        return\n\n    deleted_task = settings['tasks'][task_id]\n    del settings['tasks'][task_id]\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            f'Deleted \"{deleted_task[\"name\"]}\"',\n            style=insert_or_delete_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 312,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "        return\n\n    deleted_task = settings['tasks'][task_id]\n    del settings['tasks'][task_id]\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            f'Deleted \"{deleted_task[\"name\"]}\"',\n            style=insert_or_delete_line_style,\n        ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 313,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "\n    deleted_task = settings['tasks'][task_id]\n    del settings['tasks'][task_id]\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            f'Deleted \"{deleted_task[\"name\"]}\"',\n            style=insert_or_delete_line_style,\n        ),\n        style=insert_or_delete_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 320,
        "coloffset": 4,
        "linematch": "print_tasks(True)",
        "context": "            style=insert_or_delete_line_style,\n        ),\n        style=insert_or_delete_text_style,\n    )\n    print_tasks(True)\n\n\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #181",
        "line": 288,
        "description": [
          "    task_id = task_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -285,7 +285,7 @@\n @app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\n def delete(task_id: int) -> None:\n     \"\"\"[bright_red]Delete[/] a Task\"\"\"\n-    task_id = task_id - 1\n+    task_id = task_id + 1\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #182",
        "line": 288,
        "description": [
          "    task_id = task_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -285,7 +285,7 @@\n @app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\n def delete(task_id: int) -> None:\n     \"\"\"[bright_red]Delete[/] a Task\"\"\"\n-    task_id = task_id - 1\n+    task_id = task_id - 2\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #183",
        "line": 288,
        "description": [
          "    task_id = task_id - 1"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -285,7 +285,7 @@\n @app.command(short_help='[s]Delete a Task[/s]', deprecated=True)\n def delete(task_id: int) -> None:\n     \"\"\"[bright_red]Delete[/] a Task\"\"\"\n-    task_id = task_id - 1\n+    task_id = None\n     settings = Settings().get_settings()\n     if not settings['tasks']:\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #184",
        "line": 289,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -286,7 +286,7 @@\n def delete(task_id: int) -> None:\n     \"\"\"[bright_red]Delete[/] a Task\"\"\"\n     task_id = task_id - 1\n-    settings = Settings().get_settings()\n+    settings = None\n     if not settings['tasks']:\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #185",
        "line": 290,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -287,7 +287,7 @@\n     \"\"\"[bright_red]Delete[/] a Task\"\"\"\n     task_id = task_id - 1\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if  settings['tasks']:\n         center_print(\n             Rule(\n                 'Sorry, There are no tasks left to delete',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #186",
        "line": 290,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -287,7 +287,7 @@\n     \"\"\"[bright_red]Delete[/] a Task\"\"\"\n     task_id = task_id - 1\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if not settings['XXtasksXX']:\n         center_print(\n             Rule(\n                 'Sorry, There are no tasks left to delete',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #187",
        "line": 293,
        "description": [
          "                'Sorry, There are no tasks left to delete',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -290,7 +290,7 @@\n     if not settings['tasks']:\n         center_print(\n             Rule(\n-                'Sorry, There are no tasks left to delete',\n+                'XXSorry, There are no tasks left to deleteXX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #188",
        "line": 300,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -297,7 +297,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if  0 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to delete?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #189",
        "line": 300,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -297,7 +297,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 1 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to delete?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #190",
        "line": 300,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -297,7 +297,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 < task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to delete?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #191",
        "line": 300,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -297,7 +297,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id <= len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to delete?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #192",
        "line": 300,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -297,7 +297,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id < len(settings['XXtasksXX']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to delete?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #193",
        "line": 303,
        "description": [
          "                'Are you sure you gave me the correct ID to delete?',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -300,7 +300,7 @@\n     if not 0 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n-                'Are you sure you gave me the correct ID to delete?',\n+                'XXAre you sure you gave me the correct ID to delete?XX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #194",
        "line": 310,
        "description": [
          "    deleted_task = settings['tasks'][task_id]"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -307,7 +307,7 @@\n         )\n         return\n \n-    deleted_task = settings['tasks'][task_id]\n+    deleted_task = settings['XXtasksXX'][task_id]\n     del settings['tasks'][task_id]\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #195",
        "line": 310,
        "description": [
          "    deleted_task = settings['tasks'][task_id]"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -307,7 +307,7 @@\n         )\n         return\n \n-    deleted_task = settings['tasks'][task_id]\n+    deleted_task = None\n     del settings['tasks'][task_id]\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #196",
        "line": 311,
        "description": [
          "    del settings['tasks'][task_id]"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -308,7 +308,7 @@\n         return\n \n     deleted_task = settings['tasks'][task_id]\n-    del settings['tasks'][task_id]\n+    del settings['XXtasksXX'][task_id]\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #197",
        "line": 315,
        "description": [
          "            f'Deleted \"{deleted_task[\"name\"]}\"',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -312,7 +312,7 @@\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n-            f'Deleted \"{deleted_task[\"name\"]}\"',\n+            f'Deleted \"{deleted_task[\"XXnameXX\"]}\"',\n             style=insert_or_delete_line_style,\n         ),\n         style=insert_or_delete_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #198",
        "line": 315,
        "description": [
          "            f'Deleted \"{deleted_task[\"name\"]}\"',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -312,7 +312,7 @@\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n-            f'Deleted \"{deleted_task[\"name\"]}\"',\n+            f'XXDeleted \"{deleted_task[\"name\"]}\"XX',\n             style=insert_or_delete_line_style,\n         ),\n         style=insert_or_delete_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #199",
        "line": 320,
        "description": [
          "    print_tasks(True)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -317,7 +317,7 @@\n         ),\n         style=insert_or_delete_text_style,\n     )\n-    print_tasks(True)\n+    print_tasks(False)\n \n \n @app.command()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "move",
    "function_scope": "324-375",
    "patterns": [
      {
        "lineno": 327,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, cannot move tasks as the Task list is empty',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 337,
        "coloffset": 4,
        "linematch": "if old_id == new_id:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if old_id == new_id:\n        center_print(\n            Rule('No Updates Made', style=warning_line_style),\n            style=warning_text_style,\n        )\n        return",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 344,
        "coloffset": 4,
        "linematch": "if (not 0 <= old_id - 1 < len(settings['tasks'])) or (",
        "context": "            style=warning_text_style,\n        )\n        return\n\n    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n        not 0 <= new_id - 1 < len(settings['tasks'])\n    ):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to delete?',",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 337,
        "coloffset": 7,
        "linematch": "if old_id == new_id:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if old_id == new_id:\n        center_print(\n            Rule('No Updates Made', style=warning_line_style),\n            style=warning_text_style,\n        )\n        return",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 324,
        "coloffset": 0,
        "linematch": "def move(old_id: int, new_id: int) -> None:",
        "context": "    print_tasks(True)\n\n\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 337,
        "coloffset": 4,
        "linematch": "if old_id == new_id:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if old_id == new_id:\n        center_print(\n            Rule('No Updates Made', style=warning_line_style),\n            style=warning_text_style,\n        )\n        return",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 344,
        "coloffset": 4,
        "linematch": "if (not 0 <= old_id - 1 < len(settings['tasks'])) or (",
        "context": "            style=warning_text_style,\n        )\n        return\n\n    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n        not 0 <= new_id - 1 < len(settings['tasks'])\n    ):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to delete?',",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 324,
        "coloffset": 0,
        "linematch": "def move(old_id: int, new_id: int) -> None:",
        "context": "    print_tasks(True)\n\n\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 325,
        "coloffset": 4,
        "linematch": "\"\"\"Change task order \ud83d\udd00\"\"\"",
        "context": "\n\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, cannot move tasks as the Task list is empty',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 326,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, cannot move tasks as the Task list is empty',\n                style=error_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 327,
        "coloffset": 4,
        "linematch": "if not settings['tasks']:",
        "context": "@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(\n                'Sorry, cannot move tasks as the Task list is empty',\n                style=error_line_style,\n            ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 337,
        "coloffset": 4,
        "linematch": "if old_id == new_id:",
        "context": "            style=error_text_style,\n        )\n        return\n\n    if old_id == new_id:\n        center_print(\n            Rule('No Updates Made', style=warning_line_style),\n            style=warning_text_style,\n        )\n        return",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 344,
        "coloffset": 4,
        "linematch": "if (not 0 <= old_id - 1 < len(settings['tasks'])) or (",
        "context": "            style=warning_text_style,\n        )\n        return\n\n    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n        not 0 <= new_id - 1 < len(settings['tasks'])\n    ):\n        center_print(\n            Rule(\n                'Are you sure you gave me the correct ID to delete?',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 357,
        "coloffset": 4,
        "linematch": "try:",
        "context": "            wrap=True,\n        )\n        return\n\n    try:\n        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n            settings['tasks'][new_id - 1],\n            settings['tasks'][old_id - 1],\n        )\n        Settings().write_settings(settings)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 324,
        "coloffset": 0,
        "linematch": "def move(old_id: int, new_id: int) -> None:",
        "context": "    print_tasks(True)\n\n\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[count(body//Return) > 2]",
        "check_id": "MRET001",
        "check_name": "multiple-returns-in-function"
      },
      {
        "lineno": 324,
        "coloffset": 0,
        "linematch": "def move(old_id: int, new_id: int) -> None:",
        "context": "    print_tasks(True)\n\n\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "F030",
        "check_name": "deeply-nested-control-structures"
      },
      {
        "lineno": 324,
        "coloffset": 0,
        "linematch": "def move(old_id: int, new_id: int) -> None:",
        "context": "    print_tasks(True)\n\n\n@app.command()\ndef move(old_id: int, new_id: int) -> None:\n    \"\"\"Change task order \ud83d\udd00\"\"\"\n    settings = Settings().get_settings()\n    if not settings['tasks']:\n        center_print(\n            Rule(",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "P005",
        "check_name": "long-scope-chaining"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #201",
        "line": 326,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -323,7 +323,7 @@\n @app.command()\n def move(old_id: int, new_id: int) -> None:\n     \"\"\"Change task order \ud83d\udd00\"\"\"\n-    settings = Settings().get_settings()\n+    settings = None\n     if not settings['tasks']:\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #202",
        "line": 327,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -324,7 +324,7 @@\n def move(old_id: int, new_id: int) -> None:\n     \"\"\"Change task order \ud83d\udd00\"\"\"\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if  settings['tasks']:\n         center_print(\n             Rule(\n                 'Sorry, cannot move tasks as the Task list is empty',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #203",
        "line": 327,
        "description": [
          "    if not settings['tasks']:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -324,7 +324,7 @@\n def move(old_id: int, new_id: int) -> None:\n     \"\"\"Change task order \ud83d\udd00\"\"\"\n     settings = Settings().get_settings()\n-    if not settings['tasks']:\n+    if not settings['XXtasksXX']:\n         center_print(\n             Rule(\n                 'Sorry, cannot move tasks as the Task list is empty',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #204",
        "line": 330,
        "description": [
          "                'Sorry, cannot move tasks as the Task list is empty',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -327,7 +327,7 @@\n     if not settings['tasks']:\n         center_print(\n             Rule(\n-                'Sorry, cannot move tasks as the Task list is empty',\n+                'XXSorry, cannot move tasks as the Task list is emptyXX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #205",
        "line": 337,
        "description": [
          "    if old_id == new_id:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -334,7 +334,7 @@\n         )\n         return\n \n-    if old_id == new_id:\n+    if old_id != new_id:\n         center_print(\n             Rule('No Updates Made', style=warning_line_style),\n             style=warning_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #206",
        "line": 339,
        "description": [
          "            Rule('No Updates Made', style=warning_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -336,7 +336,7 @@\n \n     if old_id == new_id:\n         center_print(\n-            Rule('No Updates Made', style=warning_line_style),\n+            Rule('XXNo Updates MadeXX', style=warning_line_style),\n             style=warning_text_style,\n         )\n         return\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #207",
        "line": 344,
        "description": [
          "    if (not 0 <= old_id - 1 < len(settings['tasks'])) or ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if ( 0 <= old_id - 1 < len(settings['tasks'])) or (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #208",
        "line": 344,
        "description": [
          "    if (not 0 <= old_id - 1 < len(settings['tasks'])) or ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if (not 1 <= old_id - 1 < len(settings['tasks'])) or (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #209",
        "line": 344,
        "description": [
          "    if (not 0 <= old_id - 1 < len(settings['tasks'])) or ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if (not 0 < old_id - 1 < len(settings['tasks'])) or (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #210",
        "line": 344,
        "description": [
          "    if (not 0 <= old_id - 1 < len(settings['tasks'])) or ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if (not 0 <= old_id + 1 < len(settings['tasks'])) or (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #211",
        "line": 344,
        "description": [
          "    if (not 0 <= old_id - 1 < len(settings['tasks'])) or ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if (not 0 <= old_id - 2 < len(settings['tasks'])) or (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #212",
        "line": 344,
        "description": [
          "    if (not 0 <= old_id - 1 < len(settings['tasks'])) or ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if (not 0 <= old_id - 1 <= len(settings['tasks'])) or (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #213",
        "line": 344,
        "description": [
          "    if (not 0 <= old_id - 1 < len(settings['tasks'])) or ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if (not 0 <= old_id - 1 < len(settings['XXtasksXX'])) or (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #214",
        "line": 345,
        "description": [
          "        not 0 <= new_id - 1 < len(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -342,7 +342,7 @@\n         return\n \n     if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n-        not 0 <= new_id - 1 < len(settings['tasks'])\n+         0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #215",
        "line": 345,
        "description": [
          "        not 0 <= new_id - 1 < len(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -342,7 +342,7 @@\n         return\n \n     if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n-        not 0 <= new_id - 1 < len(settings['tasks'])\n+        not 1 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #216",
        "line": 345,
        "description": [
          "        not 0 <= new_id - 1 < len(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -342,7 +342,7 @@\n         return\n \n     if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n-        not 0 <= new_id - 1 < len(settings['tasks'])\n+        not 0 < new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #217",
        "line": 345,
        "description": [
          "        not 0 <= new_id - 1 < len(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -342,7 +342,7 @@\n         return\n \n     if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n-        not 0 <= new_id - 1 < len(settings['tasks'])\n+        not 0 <= new_id + 1 < len(settings['tasks'])\n     ):\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #218",
        "line": 345,
        "description": [
          "        not 0 <= new_id - 1 < len(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -342,7 +342,7 @@\n         return\n \n     if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n-        not 0 <= new_id - 1 < len(settings['tasks'])\n+        not 0 <= new_id - 2 < len(settings['tasks'])\n     ):\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #219",
        "line": 345,
        "description": [
          "        not 0 <= new_id - 1 < len(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -342,7 +342,7 @@\n         return\n \n     if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n-        not 0 <= new_id - 1 < len(settings['tasks'])\n+        not 0 <= new_id - 1 <= len(settings['tasks'])\n     ):\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #220",
        "line": 345,
        "description": [
          "        not 0 <= new_id - 1 < len(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -342,7 +342,7 @@\n         return\n \n     if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n-        not 0 <= new_id - 1 < len(settings['tasks'])\n+        not 0 <= new_id - 1 < len(settings['XXtasksXX'])\n     ):\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #221",
        "line": 346,
        "description": [
          "    ):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -341,7 +341,7 @@\n         )\n         return\n \n-    if (not 0 <= old_id - 1 < len(settings['tasks'])) or (\n+    if (not 0 <= old_id - 1 < len(settings['tasks'])) and (\n         not 0 <= new_id - 1 < len(settings['tasks'])\n     ):\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #222",
        "line": 349,
        "description": [
          "                'Are you sure you gave me the correct ID to delete?',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -346,7 +346,7 @@\n     ):\n         center_print(\n             Rule(\n-                'Are you sure you gave me the correct ID to delete?',\n+                'XXAre you sure you gave me the correct ID to delete?XX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #223",
        "line": 353,
        "description": [
          "            wrap=True,"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -350,7 +350,7 @@\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n-            wrap=True,\n+            wrap=False,\n         )\n         return\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #224",
        "line": 358,
        "description": [
          "        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -355,7 +355,7 @@\n         return\n \n     try:\n-        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n+        settings['XXtasksXX'][old_id - 1], settings['tasks'][new_id - 1] = (\n             settings['tasks'][new_id - 1],\n             settings['tasks'][old_id - 1],\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #225",
        "line": 358,
        "description": [
          "        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -355,7 +355,7 @@\n         return\n \n     try:\n-        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n+        settings['tasks'][old_id + 1], settings['tasks'][new_id - 1] = (\n             settings['tasks'][new_id - 1],\n             settings['tasks'][old_id - 1],\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #226",
        "line": 358,
        "description": [
          "        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -355,7 +355,7 @@\n         return\n \n     try:\n-        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n+        settings['tasks'][old_id - 2], settings['tasks'][new_id - 1] = (\n             settings['tasks'][new_id - 1],\n             settings['tasks'][old_id - 1],\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #227",
        "line": 358,
        "description": [
          "        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -355,7 +355,7 @@\n         return\n \n     try:\n-        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n+        settings['tasks'][old_id - 1], settings['XXtasksXX'][new_id - 1] = (\n             settings['tasks'][new_id - 1],\n             settings['tasks'][old_id - 1],\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #228",
        "line": 358,
        "description": [
          "        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -355,7 +355,7 @@\n         return\n \n     try:\n-        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n+        settings['tasks'][old_id - 1], settings['tasks'][new_id + 1] = (\n             settings['tasks'][new_id - 1],\n             settings['tasks'][old_id - 1],\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #229",
        "line": 358,
        "description": [
          "        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = ("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -355,7 +355,7 @@\n         return\n \n     try:\n-        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n+        settings['tasks'][old_id - 1], settings['tasks'][new_id - 2] = (\n             settings['tasks'][new_id - 1],\n             settings['tasks'][old_id - 1],\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #230",
        "line": 359,
        "description": [
          "            settings['tasks'][new_id - 1],"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -356,7 +356,7 @@\n \n     try:\n         settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n-            settings['tasks'][new_id - 1],\n+            settings['XXtasksXX'][new_id - 1],\n             settings['tasks'][old_id - 1],\n         )\n         Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #231",
        "line": 359,
        "description": [
          "            settings['tasks'][new_id - 1],"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -356,7 +356,7 @@\n \n     try:\n         settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n-            settings['tasks'][new_id - 1],\n+            settings['tasks'][new_id + 1],\n             settings['tasks'][old_id - 1],\n         )\n         Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #232",
        "line": 359,
        "description": [
          "            settings['tasks'][new_id - 1],"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -356,7 +356,7 @@\n \n     try:\n         settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n-            settings['tasks'][new_id - 1],\n+            settings['tasks'][new_id - 2],\n             settings['tasks'][old_id - 1],\n         )\n         Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #233",
        "line": 360,
        "description": [
          "            settings['tasks'][old_id - 1],"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -357,7 +357,7 @@\n     try:\n         settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n             settings['tasks'][new_id - 1],\n-            settings['tasks'][old_id - 1],\n+            settings['XXtasksXX'][old_id - 1],\n         )\n         Settings().write_settings(settings)\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #234",
        "line": 360,
        "description": [
          "            settings['tasks'][old_id - 1],"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -357,7 +357,7 @@\n     try:\n         settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n             settings['tasks'][new_id - 1],\n-            settings['tasks'][old_id - 1],\n+            settings['tasks'][old_id + 1],\n         )\n         Settings().write_settings(settings)\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #235",
        "line": 360,
        "description": [
          "            settings['tasks'][old_id - 1],"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -357,7 +357,7 @@\n     try:\n         settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n             settings['tasks'][new_id - 1],\n-            settings['tasks'][old_id - 1],\n+            settings['tasks'][old_id - 2],\n         )\n         Settings().write_settings(settings)\n         center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #236",
        "line": 361,
        "description": [
          "        )"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -355,10 +355,7 @@\n         return\n \n     try:\n-        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = (\n-            settings['tasks'][new_id - 1],\n-            settings['tasks'][old_id - 1],\n-        )\n+        settings['tasks'][old_id - 1], settings['tasks'][new_id - 1] = None\n         Settings().write_settings(settings)\n         center_print(\n             Rule('Updated Task List', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #237",
        "line": 364,
        "description": [
          "            Rule('Updated Task List', style=update_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -361,7 +361,7 @@\n         )\n         Settings().write_settings(settings)\n         center_print(\n-            Rule('Updated Task List', style=update_line_style),\n+            Rule('XXUpdated Task ListXX', style=update_line_style),\n             style=update_text_style,\n         )\n         print_tasks(settings['tasks'])\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #238",
        "line": 367,
        "description": [
          "        print_tasks(settings['tasks'])"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -364,7 +364,7 @@\n             Rule('Updated Task List', style=update_line_style),\n             style=update_text_style,\n         )\n-        print_tasks(settings['tasks'])\n+        print_tasks(settings['XXtasksXX'])\n     except Exception:\n         center_print(\n             Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #239",
        "line": 371,
        "description": [
          "                \"Please check the entered ID's values\", style=error_line_style"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -368,7 +368,7 @@\n     except Exception:\n         center_print(\n             Rule(\n-                \"Please check the entered ID's values\", style=error_line_style\n+                \"XXPlease check the entered ID's valuesXX\", style=error_line_style\n             ),\n             style=error_text_style,\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "setup",
    "function_scope": "434-507",
    "patterns": [
      {
        "lineno": 496,
        "coloffset": 4,
        "linematch": "if show_tasks_progress in ('n', 'N'):",
        "context": "    )\n    console.print(code_markdown)\n\n    settings['initial_setup_done'] = True\n    if show_tasks_progress in ('n', 'N'):\n        settings['show_task_progress'] = False\n    else:\n        settings['show_task_progress'] = True\n\n    if show_quotes in ('n', 'N'):",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 501,
        "coloffset": 4,
        "linematch": "if show_quotes in ('n', 'N'):",
        "context": "        settings['show_task_progress'] = False\n    else:\n        settings['show_task_progress'] = True\n\n    if show_quotes in ('n', 'N'):\n        settings['show_quotes'] = False\n    else:\n        settings['show_quotes'] = True\n\n    settings['tasks'] = []",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 434,
        "coloffset": 0,
        "linematch": "def setup() -> None:",
        "context": "    )\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef setup() -> None:\n    \"\"\"Reset all data and run setup :wrench:\"\"\"\n    settings: dict = {}\n    settings['user_name'] = typer.prompt(\n        typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n    )",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 501,
        "coloffset": 4,
        "linematch": "if show_quotes in ('n', 'N'):",
        "context": "        settings['show_task_progress'] = False\n    else:\n        settings['show_task_progress'] = True\n\n    if show_quotes in ('n', 'N'):\n        settings['show_quotes'] = False\n    else:\n        settings['show_quotes'] = True\n\n    settings['tasks'] = []",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 434,
        "coloffset": 0,
        "linematch": "def setup() -> None:",
        "context": "    )\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef setup() -> None:\n    \"\"\"Reset all data and run setup :wrench:\"\"\"\n    settings: dict = {}\n    settings['user_name'] = typer.prompt(\n        typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n    )",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 435,
        "coloffset": 4,
        "linematch": "\"\"\"Reset all data and run setup :wrench:\"\"\"",
        "context": "\n\n@app.command(rich_help_panel='Utils and Configs')\ndef setup() -> None:\n    \"\"\"Reset all data and run setup :wrench:\"\"\"\n    settings: dict = {}\n    settings['user_name'] = typer.prompt(\n        typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n    )\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 436,
        "coloffset": 4,
        "linematch": "settings: dict = {}",
        "context": "\n@app.command(rich_help_panel='Utils and Configs')\ndef setup() -> None:\n    \"\"\"Reset all data and run setup :wrench:\"\"\"\n    settings: dict = {}\n    settings['user_name'] = typer.prompt(\n        typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n    )\n\n    show_tasks_progress = typer.prompt(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 437,
        "coloffset": 4,
        "linematch": "settings['user_name'] = typer.prompt(",
        "context": "@app.command(rich_help_panel='Utils and Configs')\ndef setup() -> None:\n    \"\"\"Reset all data and run setup :wrench:\"\"\"\n    settings: dict = {}\n    settings['user_name'] = typer.prompt(\n        typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n    )\n\n    show_tasks_progress = typer.prompt(\n        typer.style(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 441,
        "coloffset": 4,
        "linematch": "show_tasks_progress = typer.prompt(",
        "context": "    settings['user_name'] = typer.prompt(\n        typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n    )\n\n    show_tasks_progress = typer.prompt(\n        typer.style(\n            'Do you want show tasks progress? (Y/n)', fg=typer.colors.CYAN\n        )\n    )\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 447,
        "coloffset": 4,
        "linematch": "show_quotes = typer.prompt(",
        "context": "            'Do you want show tasks progress? (Y/n)', fg=typer.colors.CYAN\n        )\n    )\n\n    show_quotes = typer.prompt(\n        typer.style('Do you want show quotes? (Y/n)', fg=typer.colors.CYAN)\n    )\n\n    code_markdown = Markdown(\n        \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 451,
        "coloffset": 4,
        "linematch": "code_markdown = Markdown(",
        "context": "    show_quotes = typer.prompt(\n        typer.style('Do you want show quotes? (Y/n)', fg=typer.colors.CYAN)\n    )\n\n    code_markdown = Markdown(\n        \"\"\"\n            pls callme <Your Name Goes Here>\n        \"\"\"\n    )\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 457,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "            pls callme <Your Name Goes Here>\n        \"\"\"\n    )\n\n    center_print(\n        'If you wanna change your name later, please use:', style='red'\n    )\n    console.print(code_markdown)\n\n    code_markdown = Markdown(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 460,
        "coloffset": 4,
        "linematch": "console.print(code_markdown)",
        "context": "\n    center_print(\n        'If you wanna change your name later, please use:', style='red'\n    )\n    console.print(code_markdown)\n\n    code_markdown = Markdown(\n        \"\"\"\n            pls tasks-progress <--show or --no-show>\n        \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 462,
        "coloffset": 4,
        "linematch": "code_markdown = Markdown(",
        "context": "        'If you wanna change your name later, please use:', style='red'\n    )\n    console.print(code_markdown)\n\n    code_markdown = Markdown(\n        \"\"\"\n            pls tasks-progress <--show or --no-show>\n        \"\"\"\n    )\n    center_print(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 467,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "        \"\"\"\n            pls tasks-progress <--show or --no-show>\n        \"\"\"\n    )\n    center_print(\n        'If you need to disable or enable the task progress bar later, please use:',\n        style='red',\n    )\n    console.print(code_markdown)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 471,
        "coloffset": 4,
        "linematch": "console.print(code_markdown)",
        "context": "    center_print(\n        'If you need to disable or enable the task progress bar later, please use:',\n        style='red',\n    )\n    console.print(code_markdown)\n\n    code_markdown = Markdown(\n        \"\"\"\n            pls quotes <--show or --no-show>\n        \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 473,
        "coloffset": 4,
        "linematch": "code_markdown = Markdown(",
        "context": "        style='red',\n    )\n    console.print(code_markdown)\n\n    code_markdown = Markdown(\n        \"\"\"\n            pls quotes <--show or --no-show>\n        \"\"\"\n    )\n    center_print(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 478,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "        \"\"\"\n            pls quotes <--show or --no-show>\n        \"\"\"\n    )\n    center_print(\n        'If you need to disable or enable quotes later, please use:',\n        style='red',\n    )\n    console.print(code_markdown)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 482,
        "coloffset": 4,
        "linematch": "console.print(code_markdown)",
        "context": "    center_print(\n        'If you need to disable or enable quotes later, please use:',\n        style='red',\n    )\n    console.print(code_markdown)\n\n    center_print(\n        'To apply the changes restart the terminal or use this command:',\n        style='red',\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 484,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "        style='red',\n    )\n    console.print(code_markdown)\n\n    center_print(\n        'To apply the changes restart the terminal or use this command:',\n        style='red',\n    )\n    code_markdown = Markdown(\n        \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 488,
        "coloffset": 4,
        "linematch": "code_markdown = Markdown(",
        "context": "    center_print(\n        'To apply the changes restart the terminal or use this command:',\n        style='red',\n    )\n    code_markdown = Markdown(\n        \"\"\"\n            pls\n        \"\"\"\n    )\n    console.print(code_markdown)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 493,
        "coloffset": 4,
        "linematch": "console.print(code_markdown)",
        "context": "        \"\"\"\n            pls\n        \"\"\"\n    )\n    console.print(code_markdown)\n\n    settings['initial_setup_done'] = True\n    if show_tasks_progress in ('n', 'N'):\n        settings['show_task_progress'] = False\n    else:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 495,
        "coloffset": 4,
        "linematch": "settings['initial_setup_done'] = True",
        "context": "        \"\"\"\n    )\n    console.print(code_markdown)\n\n    settings['initial_setup_done'] = True\n    if show_tasks_progress in ('n', 'N'):\n        settings['show_task_progress'] = False\n    else:\n        settings['show_task_progress'] = True\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 496,
        "coloffset": 4,
        "linematch": "if show_tasks_progress in ('n', 'N'):",
        "context": "    )\n    console.print(code_markdown)\n\n    settings['initial_setup_done'] = True\n    if show_tasks_progress in ('n', 'N'):\n        settings['show_task_progress'] = False\n    else:\n        settings['show_task_progress'] = True\n\n    if show_quotes in ('n', 'N'):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 501,
        "coloffset": 4,
        "linematch": "if show_quotes in ('n', 'N'):",
        "context": "        settings['show_task_progress'] = False\n    else:\n        settings['show_task_progress'] = True\n\n    if show_quotes in ('n', 'N'):\n        settings['show_quotes'] = False\n    else:\n        settings['show_quotes'] = True\n\n    settings['tasks'] = []",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 506,
        "coloffset": 4,
        "linematch": "settings['tasks'] = []",
        "context": "        settings['show_quotes'] = False\n    else:\n        settings['show_quotes'] = True\n\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n\n\n@app.callback(\n    invoke_without_command=True,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 507,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "    else:\n        settings['show_quotes'] = True\n\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n\n\n@app.callback(\n    invoke_without_command=True,\n    epilog='Made with [red]:heart:[/red] by [link=https://github.com/guedesfelipe/pls-cli]Felipe Guedes[/link]',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #266",
        "line": 436,
        "description": [
          "    settings: dict = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #267",
        "line": 437,
        "description": [
          "    settings['user_name'] = typer.prompt("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -434,7 +434,7 @@\n def setup() -> None:\n     \"\"\"Reset all data and run setup :wrench:\"\"\"\n     settings: dict = {}\n-    settings['user_name'] = typer.prompt(\n+    settings['XXuser_nameXX'] = typer.prompt(\n         typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n     )\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #268",
        "line": 438,
        "description": [
          "        typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #269",
        "line": 439,
        "description": [
          "    )"
        ],
        "failure": []
      },
      {
        "name": "Mutant #270",
        "line": 443,
        "description": [
          "            'Do you want show tasks progress? (Y/n)', fg=typer.colors.CYAN"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -440,7 +440,7 @@\n \n     show_tasks_progress = typer.prompt(\n         typer.style(\n-            'Do you want show tasks progress? (Y/n)', fg=typer.colors.CYAN\n+            'XXDo you want show tasks progress? (Y/n)XX', fg=typer.colors.CYAN\n         )\n     )\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #271",
        "line": 445,
        "description": [
          "    )"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -438,11 +438,7 @@\n         typer.style('Hello! What can I call you?', fg=typer.colors.CYAN)\n     )\n \n-    show_tasks_progress = typer.prompt(\n-        typer.style(\n-            'Do you want show tasks progress? (Y/n)', fg=typer.colors.CYAN\n-        )\n-    )\n+    show_tasks_progress = None\n \n     show_quotes = typer.prompt(\n         typer.style('Do you want show quotes? (Y/n)', fg=typer.colors.CYAN)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #272",
        "line": 448,
        "description": [
          "        typer.style('Do you want show quotes? (Y/n)', fg=typer.colors.CYAN)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -445,7 +445,7 @@\n     )\n \n     show_quotes = typer.prompt(\n-        typer.style('Do you want show quotes? (Y/n)', fg=typer.colors.CYAN)\n+        typer.style('XXDo you want show quotes? (Y/n)XX', fg=typer.colors.CYAN)\n     )\n \n     code_markdown = Markdown(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #273",
        "line": 449,
        "description": [
          "    )"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -444,9 +444,7 @@\n         )\n     )\n \n-    show_quotes = typer.prompt(\n-        typer.style('Do you want show quotes? (Y/n)', fg=typer.colors.CYAN)\n-    )\n+    show_quotes = None\n \n     code_markdown = Markdown(\n         \"\"\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #274",
        "line": 455,
        "description": [
          "    )"
        ],
        "failure": []
      },
      {
        "name": "Mutant #275",
        "line": 458,
        "description": [
          "        'If you wanna change your name later, please use:', style='red'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -455,7 +455,7 @@\n     )\n \n     center_print(\n-        'If you wanna change your name later, please use:', style='red'\n+        'XXIf you wanna change your name later, please use:XX', style='red'\n     )\n     console.print(code_markdown)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #276",
        "line": 458,
        "description": [
          "        'If you wanna change your name later, please use:', style='red'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #277",
        "line": 466,
        "description": [
          "    )"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -459,11 +459,7 @@\n     )\n     console.print(code_markdown)\n \n-    code_markdown = Markdown(\n-        \"\"\"\n-            pls tasks-progress <--show or --no-show>\n-        \"\"\"\n-    )\n+    code_markdown = None\n     center_print(\n         'If you need to disable or enable the task progress bar later, please use:',\n         style='red',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #278",
        "line": 468,
        "description": [
          "        'If you need to disable or enable the task progress bar later, please use:',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -465,7 +465,7 @@\n         \"\"\"\n     )\n     center_print(\n-        'If you need to disable or enable the task progress bar later, please use:',\n+        'XXIf you need to disable or enable the task progress bar later, please use:XX',\n         style='red',\n     )\n     console.print(code_markdown)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #279",
        "line": 469,
        "description": [
          "        style='red',"
        ],
        "failure": []
      },
      {
        "name": "Mutant #280",
        "line": 477,
        "description": [
          "    )"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -470,11 +470,7 @@\n     )\n     console.print(code_markdown)\n \n-    code_markdown = Markdown(\n-        \"\"\"\n-            pls quotes <--show or --no-show>\n-        \"\"\"\n-    )\n+    code_markdown = None\n     center_print(\n         'If you need to disable or enable quotes later, please use:',\n         style='red',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #281",
        "line": 479,
        "description": [
          "        'If you need to disable or enable quotes later, please use:',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -476,7 +476,7 @@\n         \"\"\"\n     )\n     center_print(\n-        'If you need to disable or enable quotes later, please use:',\n+        'XXIf you need to disable or enable quotes later, please use:XX',\n         style='red',\n     )\n     console.print(code_markdown)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #282",
        "line": 480,
        "description": [
          "        style='red',"
        ],
        "failure": []
      },
      {
        "name": "Mutant #283",
        "line": 485,
        "description": [
          "        'To apply the changes restart the terminal or use this command:',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -482,7 +482,7 @@\n     console.print(code_markdown)\n \n     center_print(\n-        'To apply the changes restart the terminal or use this command:',\n+        'XXTo apply the changes restart the terminal or use this command:XX',\n         style='red',\n     )\n     code_markdown = Markdown(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #284",
        "line": 486,
        "description": [
          "        style='red',"
        ],
        "failure": []
      },
      {
        "name": "Mutant #285",
        "line": 492,
        "description": [
          "    )"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -485,11 +485,7 @@\n         'To apply the changes restart the terminal or use this command:',\n         style='red',\n     )\n-    code_markdown = Markdown(\n-        \"\"\"\n-            pls\n-        \"\"\"\n-    )\n+    code_markdown = None\n     console.print(code_markdown)\n \n     settings['initial_setup_done'] = True\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #286",
        "line": 495,
        "description": [
          "    settings['initial_setup_done'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -492,7 +492,7 @@\n     )\n     console.print(code_markdown)\n \n-    settings['initial_setup_done'] = True\n+    settings['XXinitial_setup_doneXX'] = True\n     if show_tasks_progress in ('n', 'N'):\n         settings['show_task_progress'] = False\n     else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #287",
        "line": 495,
        "description": [
          "    settings['initial_setup_done'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -492,7 +492,7 @@\n     )\n     console.print(code_markdown)\n \n-    settings['initial_setup_done'] = True\n+    settings['initial_setup_done'] = False\n     if show_tasks_progress in ('n', 'N'):\n         settings['show_task_progress'] = False\n     else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #288",
        "line": 495,
        "description": [
          "    settings['initial_setup_done'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -492,7 +492,7 @@\n     )\n     console.print(code_markdown)\n \n-    settings['initial_setup_done'] = True\n+    settings['initial_setup_done'] = None\n     if show_tasks_progress in ('n', 'N'):\n         settings['show_task_progress'] = False\n     else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #289",
        "line": 496,
        "description": [
          "    if show_tasks_progress in ('n', 'N'):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -493,7 +493,7 @@\n     console.print(code_markdown)\n \n     settings['initial_setup_done'] = True\n-    if show_tasks_progress in ('n', 'N'):\n+    if show_tasks_progress not in ('n', 'N'):\n         settings['show_task_progress'] = False\n     else:\n         settings['show_task_progress'] = True\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #290",
        "line": 496,
        "description": [
          "    if show_tasks_progress in ('n', 'N'):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -493,7 +493,7 @@\n     console.print(code_markdown)\n \n     settings['initial_setup_done'] = True\n-    if show_tasks_progress in ('n', 'N'):\n+    if show_tasks_progress in ('XXnXX', 'N'):\n         settings['show_task_progress'] = False\n     else:\n         settings['show_task_progress'] = True\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #291",
        "line": 496,
        "description": [
          "    if show_tasks_progress in ('n', 'N'):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -493,7 +493,7 @@\n     console.print(code_markdown)\n \n     settings['initial_setup_done'] = True\n-    if show_tasks_progress in ('n', 'N'):\n+    if show_tasks_progress in ('n', 'XXNXX'):\n         settings['show_task_progress'] = False\n     else:\n         settings['show_task_progress'] = True\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #292",
        "line": 497,
        "description": [
          "        settings['show_task_progress'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -494,7 +494,7 @@\n \n     settings['initial_setup_done'] = True\n     if show_tasks_progress in ('n', 'N'):\n-        settings['show_task_progress'] = False\n+        settings['XXshow_task_progressXX'] = False\n     else:\n         settings['show_task_progress'] = True\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #293",
        "line": 497,
        "description": [
          "        settings['show_task_progress'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -494,7 +494,7 @@\n \n     settings['initial_setup_done'] = True\n     if show_tasks_progress in ('n', 'N'):\n-        settings['show_task_progress'] = False\n+        settings['show_task_progress'] = True\n     else:\n         settings['show_task_progress'] = True\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #294",
        "line": 497,
        "description": [
          "        settings['show_task_progress'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -494,7 +494,7 @@\n \n     settings['initial_setup_done'] = True\n     if show_tasks_progress in ('n', 'N'):\n-        settings['show_task_progress'] = False\n+        settings['show_task_progress'] = None\n     else:\n         settings['show_task_progress'] = True\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #295",
        "line": 499,
        "description": [
          "        settings['show_task_progress'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -496,7 +496,7 @@\n     if show_tasks_progress in ('n', 'N'):\n         settings['show_task_progress'] = False\n     else:\n-        settings['show_task_progress'] = True\n+        settings['XXshow_task_progressXX'] = True\n \n     if show_quotes in ('n', 'N'):\n         settings['show_quotes'] = False\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #296",
        "line": 499,
        "description": [
          "        settings['show_task_progress'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -496,7 +496,7 @@\n     if show_tasks_progress in ('n', 'N'):\n         settings['show_task_progress'] = False\n     else:\n-        settings['show_task_progress'] = True\n+        settings['show_task_progress'] = False\n \n     if show_quotes in ('n', 'N'):\n         settings['show_quotes'] = False\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #297",
        "line": 499,
        "description": [
          "        settings['show_task_progress'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -496,7 +496,7 @@\n     if show_tasks_progress in ('n', 'N'):\n         settings['show_task_progress'] = False\n     else:\n-        settings['show_task_progress'] = True\n+        settings['show_task_progress'] = None\n \n     if show_quotes in ('n', 'N'):\n         settings['show_quotes'] = False\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #298",
        "line": 501,
        "description": [
          "    if show_quotes in ('n', 'N'):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -498,7 +498,7 @@\n     else:\n         settings['show_task_progress'] = True\n \n-    if show_quotes in ('n', 'N'):\n+    if show_quotes not in ('n', 'N'):\n         settings['show_quotes'] = False\n     else:\n         settings['show_quotes'] = True\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #299",
        "line": 501,
        "description": [
          "    if show_quotes in ('n', 'N'):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -498,7 +498,7 @@\n     else:\n         settings['show_task_progress'] = True\n \n-    if show_quotes in ('n', 'N'):\n+    if show_quotes in ('XXnXX', 'N'):\n         settings['show_quotes'] = False\n     else:\n         settings['show_quotes'] = True\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #300",
        "line": 501,
        "description": [
          "    if show_quotes in ('n', 'N'):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -498,7 +498,7 @@\n     else:\n         settings['show_task_progress'] = True\n \n-    if show_quotes in ('n', 'N'):\n+    if show_quotes in ('n', 'XXNXX'):\n         settings['show_quotes'] = False\n     else:\n         settings['show_quotes'] = True\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #301",
        "line": 502,
        "description": [
          "        settings['show_quotes'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -499,7 +499,7 @@\n         settings['show_task_progress'] = True\n \n     if show_quotes in ('n', 'N'):\n-        settings['show_quotes'] = False\n+        settings['XXshow_quotesXX'] = False\n     else:\n         settings['show_quotes'] = True\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #302",
        "line": 502,
        "description": [
          "        settings['show_quotes'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -499,7 +499,7 @@\n         settings['show_task_progress'] = True\n \n     if show_quotes in ('n', 'N'):\n-        settings['show_quotes'] = False\n+        settings['show_quotes'] = True\n     else:\n         settings['show_quotes'] = True\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #303",
        "line": 502,
        "description": [
          "        settings['show_quotes'] = False"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -499,7 +499,7 @@\n         settings['show_task_progress'] = True\n \n     if show_quotes in ('n', 'N'):\n-        settings['show_quotes'] = False\n+        settings['show_quotes'] = None\n     else:\n         settings['show_quotes'] = True\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #304",
        "line": 504,
        "description": [
          "        settings['show_quotes'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -501,7 +501,7 @@\n     if show_quotes in ('n', 'N'):\n         settings['show_quotes'] = False\n     else:\n-        settings['show_quotes'] = True\n+        settings['XXshow_quotesXX'] = True\n \n     settings['tasks'] = []\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #305",
        "line": 504,
        "description": [
          "        settings['show_quotes'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -501,7 +501,7 @@\n     if show_quotes in ('n', 'N'):\n         settings['show_quotes'] = False\n     else:\n-        settings['show_quotes'] = True\n+        settings['show_quotes'] = False\n \n     settings['tasks'] = []\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #306",
        "line": 504,
        "description": [
          "        settings['show_quotes'] = True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -501,7 +501,7 @@\n     if show_quotes in ('n', 'N'):\n         settings['show_quotes'] = False\n     else:\n-        settings['show_quotes'] = True\n+        settings['show_quotes'] = None\n \n     settings['tasks'] = []\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #307",
        "line": 506,
        "description": [
          "    settings['tasks'] = []"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -503,7 +503,7 @@\n     else:\n         settings['show_quotes'] = True\n \n-    settings['tasks'] = []\n+    settings['XXtasksXX'] = []\n     Settings().write_settings(settings)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #308",
        "line": 506,
        "description": [
          "    settings['tasks'] = []"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -503,7 +503,7 @@\n     else:\n         settings['show_quotes'] = True\n \n-    settings['tasks'] = []\n+    settings['tasks'] = None\n     Settings().write_settings(settings)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 18.6046511627907
  },
  {
    "function_name": "show",
    "function_scope": "514-546",
    "patterns": [
      {
        "lineno": 521,
        "coloffset": 8,
        "linematch": "if ctx.invoked_subcommand is None:",
        "context": "\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"\n    try:\n        if ctx.invoked_subcommand is None:\n            if Settings().exists_settings():\n                date_now = datetime.datetime.now()\n                user_name = Settings().get_name()\n                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'\n                center_print(",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 522,
        "coloffset": 12,
        "linematch": "if Settings().exists_settings():",
        "context": "    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"\n    try:\n        if ctx.invoked_subcommand is None:\n            if Settings().exists_settings():\n                date_now = datetime.datetime.now()\n                user_name = Settings().get_name()\n                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'\n                center_print(\n                    Rule(header_greetings, style=header_greetings_style)",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 530,
        "coloffset": 16,
        "linematch": "if Settings().show_quotes():",
        "context": "                center_print(\n                    Rule(header_greetings, style=header_greetings_style)\n                )\n                quote = get_rand_quote()\n                if Settings().show_quotes():\n                    center_print(\n                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True\n                    )\n                    center_print(\n                        f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 522,
        "coloffset": 12,
        "linematch": "if Settings().exists_settings():",
        "context": "    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"\n    try:\n        if ctx.invoked_subcommand is None:\n            if Settings().exists_settings():\n                date_now = datetime.datetime.now()\n                user_name = Settings().get_name()\n                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'\n                center_print(\n                    Rule(header_greetings, style=header_greetings_style)",
        "pattern": ".//FunctionDef/body//If[ancestor::If and not(parent::orelse)]",
        "check_id": "CL002",
        "check_name": "double-nested-if"
      },
      {
        "lineno": 530,
        "coloffset": 16,
        "linematch": "if Settings().show_quotes():",
        "context": "                center_print(\n                    Rule(header_greetings, style=header_greetings_style)\n                )\n                quote = get_rand_quote()\n                if Settings().show_quotes():\n                    center_print(\n                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True\n                    )\n                    center_print(\n                        f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',",
        "pattern": ".//FunctionDef/body//If[ancestor::If and not(parent::orelse)]",
        "check_id": "CL002",
        "check_name": "double-nested-if"
      },
      {
        "lineno": 521,
        "coloffset": 11,
        "linematch": "if ctx.invoked_subcommand is None:",
        "context": "\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"\n    try:\n        if ctx.invoked_subcommand is None:\n            if Settings().exists_settings():\n                date_now = datetime.datetime.now()\n                user_name = Settings().get_name()\n                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'\n                center_print(",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 514,
        "coloffset": 0,
        "linematch": "def show(ctx: typer.Context) -> None:",
        "context": "@app.callback(\n    invoke_without_command=True,\n    epilog='Made with [red]:heart:[/red] by [link=https://github.com/guedesfelipe/pls-cli]Felipe Guedes[/link]',\n)\ndef show(ctx: typer.Context) -> None:\n    \"\"\"\n    \ud83d\udcbb [bold]PLS-CLI[/]\n\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 522,
        "coloffset": 12,
        "linematch": "if Settings().exists_settings():",
        "context": "    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"\n    try:\n        if ctx.invoked_subcommand is None:\n            if Settings().exists_settings():\n                date_now = datetime.datetime.now()\n                user_name = Settings().get_name()\n                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'\n                center_print(\n                    Rule(header_greetings, style=header_greetings_style)",
        "pattern": ".//FunctionDef//If/descendant::If",
        "check_id": "CL001",
        "check_name": "nested-conditions"
      },
      {
        "lineno": 530,
        "coloffset": 16,
        "linematch": "if Settings().show_quotes():",
        "context": "                center_print(\n                    Rule(header_greetings, style=header_greetings_style)\n                )\n                quote = get_rand_quote()\n                if Settings().show_quotes():\n                    center_print(\n                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True\n                    )\n                    center_print(\n                        f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',",
        "pattern": ".//FunctionDef//If/descendant::If",
        "check_id": "CL001",
        "check_name": "nested-conditions"
      },
      {
        "lineno": 514,
        "coloffset": 0,
        "linematch": "def show(ctx: typer.Context) -> None:",
        "context": "@app.callback(\n    invoke_without_command=True,\n    epilog='Made with [red]:heart:[/red] by [link=https://github.com/guedesfelipe/pls-cli]Felipe Guedes[/link]',\n)\ndef show(ctx: typer.Context) -> None:\n    \"\"\"\n    \ud83d\udcbb [bold]PLS-CLI[/]\n\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 515,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    invoke_without_command=True,\n    epilog='Made with [red]:heart:[/red] by [link=https://github.com/guedesfelipe/pls-cli]Felipe Guedes[/link]',\n)\ndef show(ctx: typer.Context) -> None:\n    \"\"\"\n    \ud83d\udcbb [bold]PLS-CLI[/]\n\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"\n    try:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 520,
        "coloffset": 4,
        "linematch": "try:",
        "context": "    \ud83d\udcbb [bold]PLS-CLI[/]\n\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"\n    try:\n        if ctx.invoked_subcommand is None:\n            if Settings().exists_settings():\n                date_now = datetime.datetime.now()\n                user_name = Settings().get_name()\n                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 514,
        "coloffset": 0,
        "linematch": "def show(ctx: typer.Context) -> None:",
        "context": "@app.callback(\n    invoke_without_command=True,\n    epilog='Made with [red]:heart:[/red] by [link=https://github.com/guedesfelipe/pls-cli]Felipe Guedes[/link]',\n)\ndef show(ctx: typer.Context) -> None:\n    \"\"\"\n    \ud83d\udcbb [bold]PLS-CLI[/]\n\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "F030",
        "check_name": "deeply-nested-control-structures"
      },
      {
        "lineno": 514,
        "coloffset": 0,
        "linematch": "def show(ctx: typer.Context) -> None:",
        "context": "@app.callback(\n    invoke_without_command=True,\n    epilog='Made with [red]:heart:[/red] by [link=https://github.com/guedesfelipe/pls-cli]Felipe Guedes[/link]',\n)\ndef show(ctx: typer.Context) -> None:\n    \"\"\"\n    \ud83d\udcbb [bold]PLS-CLI[/]\n\n    \u30fb[i]Minimalist and full configurable greetings and TODO list[/]\u30fb\n    \"\"\"",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "P005",
        "check_name": "long-scope-chaining"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #312",
        "line": 521,
        "description": [
          "        if ctx.invoked_subcommand is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #313",
        "line": 523,
        "description": [
          "                date_now = datetime.datetime.now()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #314",
        "line": 524,
        "description": [
          "                user_name = Settings().get_name()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #315",
        "line": 525,
        "description": [
          "                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #316",
        "line": 525,
        "description": [
          "                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -522,7 +522,7 @@\n             if Settings().exists_settings():\n                 date_now = datetime.datetime.now()\n                 user_name = Settings().get_name()\n-                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'\n+                header_greetings = f'XX[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]XX'\n                 center_print(\n                     Rule(header_greetings, style=header_greetings_style)\n                 )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #317",
        "line": 525,
        "description": [
          "                header_greetings = f'[{header_greetings_style}] Hello {user_name}! It\\'s {date_now.strftime(\"%d %b | %I:%M %p\")}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #318",
        "line": 529,
        "description": [
          "                quote = get_rand_quote()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #319",
        "line": 532,
        "description": [
          "                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True"
        ],
        "failure": []
      },
      {
        "name": "Mutant #320",
        "line": 532,
        "description": [
          "                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -529,7 +529,7 @@\n                 quote = get_rand_quote()\n                 if Settings().show_quotes():\n                     center_print(\n-                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True\n+                        f'XX[{quote_style}]\"{quote[\"content\"]}\"[/]XX', wrap=True\n                     )\n                     center_print(\n                         f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #321",
        "line": 532,
        "description": [
          "                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -529,7 +529,7 @@\n                 quote = get_rand_quote()\n                 if Settings().show_quotes():\n                     center_print(\n-                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True\n+                        f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=False\n                     )\n                     center_print(\n                         f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #322",
        "line": 535,
        "description": [
          "                        f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',"
        ],
        "failure": []
      },
      {
        "name": "Mutant #323",
        "line": 535,
        "description": [
          "                        f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -532,7 +532,7 @@\n                         f'[{quote_style}]\"{quote[\"content\"]}\"[/]', wrap=True\n                     )\n                     center_print(\n-                        f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',\n+                        f'XX[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]XX',\n                         wrap=True,\n                     )\n                 print_tasks()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #324",
        "line": 536,
        "description": [
          "                        wrap=True,"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -533,7 +533,7 @@\n                     )\n                     center_print(\n                         f'[{author_style}][i]\u30fb{quote[\"author\"]}\u30fb[/i][/]',\n-                        wrap=True,\n+                        wrap=False,\n                     )\n                 print_tasks()\n             else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #325",
        "line": 542,
        "description": [
          "        console.print_exception(show_locals=True)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -539,7 +539,7 @@\n             else:\n                 setup()\n     except json.JSONDecodeError:\n-        console.print_exception(show_locals=True)\n+        console.print_exception(show_locals=False)\n         center_print(\n             Rule('Failed while loading configuration', style=error_line_style),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #326",
        "line": 544,
        "description": [
          "            Rule('Failed while loading configuration', style=error_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -541,7 +541,7 @@\n     except json.JSONDecodeError:\n         console.print_exception(show_locals=True)\n         center_print(\n-            Rule('Failed while loading configuration', style=error_line_style),\n+            Rule('XXFailed while loading configurationXX', style=error_line_style),\n             style=error_text_style,\n         )\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 53.333333333333336
  },
  {
    "function_name": "edit",
    "function_scope": "571-611",
    "patterns": [
      {
        "lineno": 577,
        "coloffset": 4,
        "linematch": "if not tasks:",
        "context": "    settings = Settings().get_settings()\n    tasks = settings['tasks']\n\n    # check if task list is empty\n    if not tasks:\n        center_print(\n            f'[{warning_text_style}]Currently, you have no tasks to edit[/] \ud83d\udcdd'\n        )\n        print_tasks_progress()\n        raise typer.Exit()",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 587,
        "coloffset": 4,
        "linematch": "if task_id and task_id <= len(tasks):",
        "context": "\n    print_tasks()\n\n    # check if task exists\n    if task_id and task_id <= len(tasks):\n        old_task = tasks[task_id - 1]['name']\n        tasks[task_id - 1]['name'] = task\n    else:\n        center_print(\n            f'\\nTask #{task_id} was not found, pls choose an existing ID\\n',",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 602,
        "coloffset": 4,
        "linematch": "if not typer.confirm(",
        "context": "    center_print(\n        f'\\nOld Task: {old_task}\\nEdited Task: {task}\\n',\n        style=insert_or_delete_text_style,\n    )\n    if not typer.confirm(\n        f'Are you sure you want to edit Task #{task_id}?', show_default=True\n    ):\n        typer.clear()\n        print_tasks()\n        raise typer.Exit()",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 571,
        "coloffset": 0,
        "linematch": "def edit(task_id: int, task: str):",
        "context": "    typer.launch(Settings().get_full_settings_path(), locate=True)\n\n\n@app.command()\ndef edit(task_id: int, task: str):\n    \"\"\"[bold yellow]Edit[/bold yellow] a task by id \u270f\ufe0f [light_slate_grey italic] (Add task name inside quotes)[/]\"\"\"\n    settings = Settings().get_settings()\n    tasks = settings['tasks']\n\n    # check if task list is empty",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 587,
        "coloffset": 4,
        "linematch": "if task_id and task_id <= len(tasks):",
        "context": "\n    print_tasks()\n\n    # check if task exists\n    if task_id and task_id <= len(tasks):\n        old_task = tasks[task_id - 1]['name']\n        tasks[task_id - 1]['name'] = task\n    else:\n        center_print(\n            f'\\nTask #{task_id} was not found, pls choose an existing ID\\n',",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 602,
        "coloffset": 4,
        "linematch": "if not typer.confirm(",
        "context": "    center_print(\n        f'\\nOld Task: {old_task}\\nEdited Task: {task}\\n',\n        style=insert_or_delete_text_style,\n    )\n    if not typer.confirm(\n        f'Are you sure you want to edit Task #{task_id}?', show_default=True\n    ):\n        typer.clear()\n        print_tasks()\n        raise typer.Exit()",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 571,
        "coloffset": 0,
        "linematch": "def edit(task_id: int, task: str):",
        "context": "    typer.launch(Settings().get_full_settings_path(), locate=True)\n\n\n@app.command()\ndef edit(task_id: int, task: str):\n    \"\"\"[bold yellow]Edit[/bold yellow] a task by id \u270f\ufe0f [light_slate_grey italic] (Add task name inside quotes)[/]\"\"\"\n    settings = Settings().get_settings()\n    tasks = settings['tasks']\n\n    # check if task list is empty",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 572,
        "coloffset": 4,
        "linematch": "\"\"\"[bold yellow]Edit[/bold yellow] a task by id \u270f\ufe0f [light_slate_grey italic] (Add task name inside quotes)[/]\"\"\"",
        "context": "\n\n@app.command()\ndef edit(task_id: int, task: str):\n    \"\"\"[bold yellow]Edit[/bold yellow] a task by id \u270f\ufe0f [light_slate_grey italic] (Add task name inside quotes)[/]\"\"\"\n    settings = Settings().get_settings()\n    tasks = settings['tasks']\n\n    # check if task list is empty\n    if not tasks:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 573,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "\n@app.command()\ndef edit(task_id: int, task: str):\n    \"\"\"[bold yellow]Edit[/bold yellow] a task by id \u270f\ufe0f [light_slate_grey italic] (Add task name inside quotes)[/]\"\"\"\n    settings = Settings().get_settings()\n    tasks = settings['tasks']\n\n    # check if task list is empty\n    if not tasks:\n        center_print(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 574,
        "coloffset": 4,
        "linematch": "tasks = settings['tasks']",
        "context": "@app.command()\ndef edit(task_id: int, task: str):\n    \"\"\"[bold yellow]Edit[/bold yellow] a task by id \u270f\ufe0f [light_slate_grey italic] (Add task name inside quotes)[/]\"\"\"\n    settings = Settings().get_settings()\n    tasks = settings['tasks']\n\n    # check if task list is empty\n    if not tasks:\n        center_print(\n            f'[{warning_text_style}]Currently, you have no tasks to edit[/] \ud83d\udcdd'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 577,
        "coloffset": 4,
        "linematch": "if not tasks:",
        "context": "    settings = Settings().get_settings()\n    tasks = settings['tasks']\n\n    # check if task list is empty\n    if not tasks:\n        center_print(\n            f'[{warning_text_style}]Currently, you have no tasks to edit[/] \ud83d\udcdd'\n        )\n        print_tasks_progress()\n        raise typer.Exit()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 584,
        "coloffset": 4,
        "linematch": "print_tasks()",
        "context": "        )\n        print_tasks_progress()\n        raise typer.Exit()\n\n    print_tasks()\n\n    # check if task exists\n    if task_id and task_id <= len(tasks):\n        old_task = tasks[task_id - 1]['name']\n        tasks[task_id - 1]['name'] = task",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 587,
        "coloffset": 4,
        "linematch": "if task_id and task_id <= len(tasks):",
        "context": "\n    print_tasks()\n\n    # check if task exists\n    if task_id and task_id <= len(tasks):\n        old_task = tasks[task_id - 1]['name']\n        tasks[task_id - 1]['name'] = task\n    else:\n        center_print(\n            f'\\nTask #{task_id} was not found, pls choose an existing ID\\n',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 598,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "        )\n        raise typer.Exit()\n\n    # confirm edit task\n    center_print(\n        f'\\nOld Task: {old_task}\\nEdited Task: {task}\\n',\n        style=insert_or_delete_text_style,\n    )\n    if not typer.confirm(\n        f'Are you sure you want to edit Task #{task_id}?', show_default=True",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 602,
        "coloffset": 4,
        "linematch": "if not typer.confirm(",
        "context": "    center_print(\n        f'\\nOld Task: {old_task}\\nEdited Task: {task}\\n',\n        style=insert_or_delete_text_style,\n    )\n    if not typer.confirm(\n        f'Are you sure you want to edit Task #{task_id}?', show_default=True\n    ):\n        typer.clear()\n        print_tasks()\n        raise typer.Exit()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 609,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "        typer.clear()\n        print_tasks()\n        raise typer.Exit()\n\n    Settings().write_settings(settings)\n    typer.clear()\n    print_tasks()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 610,
        "coloffset": 4,
        "linematch": "typer.clear()",
        "context": "        print_tasks()\n        raise typer.Exit()\n\n    Settings().write_settings(settings)\n    typer.clear()\n    print_tasks()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 611,
        "coloffset": 4,
        "linematch": "print_tasks()",
        "context": "        raise typer.Exit()\n\n    Settings().write_settings(settings)\n    typer.clear()\n    print_tasks()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #341",
        "line": 573,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #342",
        "line": 574,
        "description": [
          "    tasks = settings['tasks']"
        ],
        "failure": []
      },
      {
        "name": "Mutant #343",
        "line": 574,
        "description": [
          "    tasks = settings['tasks']"
        ],
        "failure": []
      },
      {
        "name": "Mutant #344",
        "line": 577,
        "description": [
          "    if not tasks:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #345",
        "line": 579,
        "description": [
          "            f'[{warning_text_style}]Currently, you have no tasks to edit[/] \ud83d\udcdd'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -576,7 +576,7 @@\n     # check if task list is empty\n     if not tasks:\n         center_print(\n-            f'[{warning_text_style}]Currently, you have no tasks to edit[/] \ud83d\udcdd'\n+            f'XX[{warning_text_style}]Currently, you have no tasks to edit[/] \ud83d\udcddXX'\n         )\n         print_tasks_progress()\n         raise typer.Exit()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #346",
        "line": 587,
        "description": [
          "    if task_id and task_id <= len(tasks):"
        ],
        "failure": []
      },
      {
        "name": "Mutant #347",
        "line": 587,
        "description": [
          "    if task_id and task_id <= len(tasks):"
        ],
        "failure": []
      },
      {
        "name": "Mutant #348",
        "line": 588,
        "description": [
          "        old_task = tasks[task_id - 1]['name']"
        ],
        "failure": []
      },
      {
        "name": "Mutant #349",
        "line": 588,
        "description": [
          "        old_task = tasks[task_id - 1]['name']"
        ],
        "failure": []
      },
      {
        "name": "Mutant #350",
        "line": 588,
        "description": [
          "        old_task = tasks[task_id - 1]['name']"
        ],
        "failure": []
      },
      {
        "name": "Mutant #351",
        "line": 588,
        "description": [
          "        old_task = tasks[task_id - 1]['name']"
        ],
        "failure": []
      },
      {
        "name": "Mutant #352",
        "line": 589,
        "description": [
          "        tasks[task_id - 1]['name'] = task"
        ],
        "failure": []
      },
      {
        "name": "Mutant #353",
        "line": 589,
        "description": [
          "        tasks[task_id - 1]['name'] = task"
        ],
        "failure": []
      },
      {
        "name": "Mutant #354",
        "line": 589,
        "description": [
          "        tasks[task_id - 1]['name'] = task"
        ],
        "failure": []
      },
      {
        "name": "Mutant #355",
        "line": 589,
        "description": [
          "        tasks[task_id - 1]['name'] = task"
        ],
        "failure": []
      },
      {
        "name": "Mutant #356",
        "line": 592,
        "description": [
          "            f'\\nTask #{task_id} was not found, pls choose an existing ID\\n',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -589,7 +589,7 @@\n         tasks[task_id - 1]['name'] = task\n     else:\n         center_print(\n-            f'\\nTask #{task_id} was not found, pls choose an existing ID\\n',\n+            f'XX\\nTask #{task_id} was not found, pls choose an existing ID\\nXX',\n             style=error_text_style,\n         )\n         raise typer.Exit()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #357",
        "line": 599,
        "description": [
          "        f'\\nOld Task: {old_task}\\nEdited Task: {task}\\n',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -596,7 +596,7 @@\n \n     # confirm edit task\n     center_print(\n-        f'\\nOld Task: {old_task}\\nEdited Task: {task}\\n',\n+        f'XX\\nOld Task: {old_task}\\nEdited Task: {task}\\nXX',\n         style=insert_or_delete_text_style,\n     )\n     if not typer.confirm(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #358",
        "line": 602,
        "description": [
          "    if not typer.confirm("
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -599,7 +599,7 @@\n         f'\\nOld Task: {old_task}\\nEdited Task: {task}\\n',\n         style=insert_or_delete_text_style,\n     )\n-    if not typer.confirm(\n+    if  typer.confirm(\n         f'Are you sure you want to edit Task #{task_id}?', show_default=True\n     ):\n         typer.clear()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #359",
        "line": 603,
        "description": [
          "        f'Are you sure you want to edit Task #{task_id}?', show_default=True"
        ],
        "failure": []
      },
      {
        "name": "Mutant #360",
        "line": 603,
        "description": [
          "        f'Are you sure you want to edit Task #{task_id}?', show_default=True"
        ],
        "failure": []
      }
    ],
    "mutation_score": 80.0
  },
  {
    "function_name": "create_dir_if_not_exists",
    "function_scope": "26-28",
    "patterns": [
      {
        "lineno": 27,
        "coloffset": 8,
        "linematch": "if not os.path.exists(self.config_path):",
        "context": "    def get_full_settings_path(self):\n        return self.full_settings_path\n\n    def create_dir_if_not_exists(self) -> None:\n        if not os.path.exists(self.config_path):\n            os.makedirs(self.config_path)\n\n    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "def create_dir_if_not_exists(self) -> None:",
        "context": "\n    def get_full_settings_path(self):\n        return self.full_settings_path\n\n    def create_dir_if_not_exists(self) -> None:\n        if not os.path.exists(self.config_path):\n            os.makedirs(self.config_path)\n\n    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 27,
        "coloffset": 8,
        "linematch": "if not os.path.exists(self.config_path):",
        "context": "    def get_full_settings_path(self):\n        return self.full_settings_path\n\n    def create_dir_if_not_exists(self) -> None:\n        if not os.path.exists(self.config_path):\n            os.makedirs(self.config_path)\n\n    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #10",
        "line": 26,
        "description": [
          "warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -23,7 +23,7 @@\n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n-warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n+warning_line_style = os.getenv('XXPLS_WARNING_LINE_STYLEXX', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #11",
        "line": 26,
        "description": [
          "warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -23,7 +23,7 @@\n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n-warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n+warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', 'XX#FFBF00XX')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #12",
        "line": 26,
        "description": [
          "warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -23,7 +23,7 @@\n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n-warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n+warning_line_style = None\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #13",
        "line": 27,
        "description": [
          "warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -24,7 +24,7 @@\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n-warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n+warning_text_style = os.getenv('XXPLS_WARNING_TEXT_STYLEXX', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #14",
        "line": 27,
        "description": [
          "warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #15",
        "line": 27,
        "description": [
          "warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')"
        ],
        "failure": []
      }
    ],
    "mutation_score": 33.33333333333333
  },
  {
    "function_name": "get_settings",
    "function_scope": "33-39",
    "patterns": [
      {
        "lineno": 34,
        "coloffset": 8,
        "linematch": "if os.path.exists(self.full_settings_path):",
        "context": "    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)\n\n    def get_settings(self) -> dict:\n        if os.path.exists(self.full_settings_path):\n            with open(\n                self.full_settings_path, encoding='utf-8'\n            ) as config_file:\n                return json.load(config_file)\n        return self.minimal_default_config",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "def get_settings(self) -> dict:",
        "context": "\n    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)\n\n    def get_settings(self) -> dict:\n        if os.path.exists(self.full_settings_path):\n            with open(\n                self.full_settings_path, encoding='utf-8'\n            ) as config_file:\n                return json.load(config_file)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 34,
        "coloffset": 8,
        "linematch": "if os.path.exists(self.full_settings_path):",
        "context": "    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)\n\n    def get_settings(self) -> dict:\n        if os.path.exists(self.full_settings_path):\n            with open(\n                self.full_settings_path, encoding='utf-8'\n            ) as config_file:\n                return json.load(config_file)\n        return self.minimal_default_config",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 39,
        "coloffset": 8,
        "linematch": "return self.minimal_default_config",
        "context": "            with open(\n                self.full_settings_path, encoding='utf-8'\n            ) as config_file:\n                return json.load(config_file)\n        return self.minimal_default_config\n\n    def write_settings(self, data: dict) -> None:\n        with open(\n            self.full_settings_path, 'w', encoding='utf-8'\n        ) as config_file:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #22",
        "line": 33,
        "description": [
          "    'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -30,7 +30,7 @@\n update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n \n insert_or_delete_line_style = os.getenv(\n-    'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n+    'XXPLS_INSERT_DELETE_LINE_STYLEXX', '#bb93f2'\n )\n insert_or_delete_text_style = os.getenv(\n     'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #23",
        "line": 33,
        "description": [
          "    'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -30,7 +30,7 @@\n update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n \n insert_or_delete_line_style = os.getenv(\n-    'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n+    'PLS_INSERT_DELETE_LINE_STYLE', 'XX#bb93f2XX'\n )\n insert_or_delete_text_style = os.getenv(\n     'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #24",
        "line": 34,
        "description": [
          ")"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -29,9 +29,7 @@\n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n \n-insert_or_delete_line_style = os.getenv(\n-    'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n-)\n+insert_or_delete_line_style = None\n insert_or_delete_text_style = os.getenv(\n     'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #25",
        "line": 36,
        "description": [
          "    'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -33,7 +33,7 @@\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n )\n insert_or_delete_text_style = os.getenv(\n-    'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n+    'XXPLS_INSERT_DELETE_TEXT_STYLEXX', '#a0a0a0'\n )\n \n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #26",
        "line": 36,
        "description": [
          "    'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #27",
        "line": 37,
        "description": [
          ")"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -32,9 +32,7 @@\n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n )\n-insert_or_delete_text_style = os.getenv(\n-    'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n-)\n+insert_or_delete_text_style = None\n \n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #28",
        "line": 39,
        "description": [
          "msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -36,7 +36,7 @@\n     'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n )\n \n-msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n+msg_pending_style = os.getenv('XXPLS_MSG_PENDING_STYLEXX', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #29",
        "line": 39,
        "description": [
          "msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #30",
        "line": 39,
        "description": [
          "msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')"
        ],
        "failure": []
      }
    ],
    "mutation_score": 33.33333333333333
  },
  {
    "function_name": "count_tasks_done",
    "function_scope": "65-70",
    "patterns": [
      {
        "lineno": 66,
        "coloffset": 8,
        "linematch": "if not self.get_tasks():",
        "context": "    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 65,
        "coloffset": 4,
        "linematch": "def count_tasks_done(self) -> int:",
        "context": "\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 65,
        "coloffset": 4,
        "linematch": "def count_tasks_done(self) -> int:",
        "context": "\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 66,
        "coloffset": 8,
        "linematch": "if not self.get_tasks():",
        "context": "    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 68,
        "coloffset": 8,
        "linematch": "return len(",
        "context": "\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )\n\n    def count_tasks_undone(self) -> int:\n        if not self.get_tasks():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #61",
        "line": 68,
        "description": [
          "    width = get_terminal_full_width() if wrap else get_terminal_full_width()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -65,7 +65,7 @@\n         text (Union[str, Rule, Table]): object to center align\n         style (str, optional): styling of the object. Defaults to None.\n     \"\"\"\n-    width = get_terminal_full_width() if wrap else get_terminal_full_width()\n+    width = None\n \n     if isinstance(text, Rule):\n         console.print(text, style=style, width=width)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "count_tasks_undone",
    "function_scope": "72-81",
    "patterns": [
      {
        "lineno": 73,
        "coloffset": 8,
        "linematch": "if not self.get_tasks():",
        "context": "            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )\n\n    def count_tasks_undone(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [\n                task.get('done', '')\n                for task in self.get_tasks()",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "def count_tasks_undone(self) -> int:",
        "context": "        return len(\n            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )\n\n    def count_tasks_undone(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [\n                task.get('done', '')",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "def count_tasks_undone(self) -> int:",
        "context": "        return len(\n            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )\n\n    def count_tasks_undone(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [\n                task.get('done', '')",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 73,
        "coloffset": 8,
        "linematch": "if not self.get_tasks():",
        "context": "            [task.get('done', '') for task in self.get_tasks() if task['done']]\n        )\n\n    def count_tasks_undone(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [\n                task.get('done', '')\n                for task in self.get_tasks()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 75,
        "coloffset": 8,
        "linematch": "return len(",
        "context": "\n    def count_tasks_undone(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(\n            [\n                task.get('done', '')\n                for task in self.get_tasks()\n                if not task['done']\n            ]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #62",
        "line": 78,
        "description": [
          "        f'[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -75,7 +75,7 @@\n \n def print_no_pending_tasks() -> None:\n     center_print(\n-        f'[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728'\n+        f'XX[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728XX'\n     )\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_edit_empty_tasks",
    "function_scope": "217-221",
    "patterns": [
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 220,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 217,
        "coloffset": 0,
        "linematch": "def test_edit_empty_tasks(mock_write_settings, mock_get_settings):",
        "context": "        'tasks': [],\n    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 220,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 221,
        "coloffset": 4,
        "linematch": "assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "context": "def test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 218,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 219,
        "coloffset": 4,
        "linematch": "output = result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 220,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 221,
        "coloffset": 4,
        "linematch": "assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "context": "def test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 218,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 219,
        "coloffset": 4,
        "linematch": "output = result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 220,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 221,
        "coloffset": 4,
        "linematch": "assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "context": "def test_edit_empty_tasks(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Task 1 edited'])\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Currently, you have no tasks to edit \ud83d\udcdd' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #144",
        "line": 218,
        "description": [
          "                'No Updates Made, Task Already Done', style=warning_line_style"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -215,7 +215,7 @@\n     if settings['tasks'][task_id]['done']:\n         center_print(\n             Rule(\n-                'No Updates Made, Task Already Done', style=warning_line_style\n+                'XXNo Updates Made, Task Already DoneXX', style=warning_line_style\n             ),\n             style=warning_text_style,\n         )\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_version",
    "function_scope": "13-14",
    "patterns": [
      {
        "lineno": 13,
        "coloffset": 0,
        "linematch": "def test_version():",
        "context": "\nrunner = CliRunner()\n\n\ndef test_version():\n    assert __version__ == pkg_resources.get_distribution('pls-cli').version\n\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "assert __version__ == pkg_resources.get_distribution('pls-cli').version",
        "context": "runner = CliRunner()\n\n\ndef test_version():\n    assert __version__ == pkg_resources.get_distribution('pls-cli').version\n\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "assert __version__ == pkg_resources.get_distribution('pls-cli').version",
        "context": "runner = CliRunner()\n\n\ndef test_version():\n    assert __version__ == pkg_resources.get_distribution('pls-cli').version\n\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "assert __version__ == pkg_resources.get_distribution('pls-cli').version",
        "context": "runner = CliRunner()\n\n\ndef test_version():\n    assert __version__ == pkg_resources.get_distribution('pls-cli').version\n\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_error_invalid_command",
    "function_scope": "17-20",
    "patterns": [
      {
        "lineno": 17,
        "coloffset": 0,
        "linematch": "def test_error_invalid_command():",
        "context": "def test_version():\n    assert __version__ == pkg_resources.get_distribution('pls-cli').version\n\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 19,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 2",
        "context": "\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "assert \"No such command 'test'\" in result.stdout",
        "context": "\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 18,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['test'])",
        "context": "    assert __version__ == pkg_resources.get_distribution('pls-cli').version\n\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 19,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 2",
        "context": "\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "assert \"No such command 'test'\" in result.stdout",
        "context": "\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 18,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['test'])",
        "context": "    assert __version__ == pkg_resources.get_distribution('pls-cli').version\n\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 19,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 2",
        "context": "\n\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "assert \"No such command 'test'\" in result.stdout",
        "context": "\ndef test_error_invalid_command():\n    result = runner.invoke(app, ['test'])\n    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #1",
        "line": 20,
        "description": [
          "app = typer.Typer(rich_markup_mode='rich')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -17,7 +17,7 @@\n from pls_cli.utils.quotes import get_rand_quote\n from pls_cli.utils.settings import Settings\n \n-app = typer.Typer(rich_markup_mode='rich')\n+app = typer.Typer(rich_markup_mode='XXrichXX')\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2",
        "line": 20,
        "description": [
          "app = typer.Typer(rich_markup_mode='rich')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -17,7 +17,7 @@\n from pls_cli.utils.quotes import get_rand_quote\n from pls_cli.utils.settings import Settings\n \n-app = typer.Typer(rich_markup_mode='rich')\n+app = None\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_help",
    "function_scope": "23-26",
    "patterns": [
      {
        "lineno": 23,
        "coloffset": 0,
        "linematch": "def test_help():",
        "context": "    assert result.exit_code == 2\n    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 25,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "assert 'Show this message and exit' in result.stdout",
        "context": "\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['--help'])",
        "context": "    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 25,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "assert 'Show this message and exit' in result.stdout",
        "context": "\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['--help'])",
        "context": "    assert \"No such command 'test'\" in result.stdout\n\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 25,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "\n\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "assert 'Show this message and exit' in result.stdout",
        "context": "\ndef test_help():\n    result = runner.invoke(app, ['--help'])\n    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4",
        "line": 23,
        "description": [
          "error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -20,7 +20,7 @@\n app = typer.Typer(rich_markup_mode='rich')\n console = Console()\n \n-error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n+error_line_style = os.getenv('XXPLS_ERROR_LINE_STYLEXX', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #5",
        "line": 23,
        "description": [
          "error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -20,7 +20,7 @@\n app = typer.Typer(rich_markup_mode='rich')\n console = Console()\n \n-error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n+error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', 'XX#e56767XX')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #6",
        "line": 23,
        "description": [
          "error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -20,7 +20,7 @@\n app = typer.Typer(rich_markup_mode='rich')\n console = Console()\n \n-error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n+error_line_style = None\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #7",
        "line": 24,
        "description": [
          "error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -21,7 +21,7 @@\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n-error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n+error_text_style = os.getenv('XXPLS_ERROR_TEXT_STYLEXX', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #8",
        "line": 24,
        "description": [
          "error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #9",
        "line": 24,
        "description": [
          "error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -21,7 +21,7 @@\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n-error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n+error_text_style = None\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #10",
        "line": 26,
        "description": [
          "warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -23,7 +23,7 @@\n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n-warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n+warning_line_style = os.getenv('XXPLS_WARNING_LINE_STYLEXX', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #11",
        "line": 26,
        "description": [
          "warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -23,7 +23,7 @@\n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n-warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n+warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', 'XX#FFBF00XX')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #12",
        "line": 26,
        "description": [
          "warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -23,7 +23,7 @@\n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n-warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n+warning_line_style = None\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 11.11111111111111
  },
  {
    "function_name": "test_version_command",
    "function_scope": "29-32",
    "patterns": [
      {
        "lineno": 29,
        "coloffset": 0,
        "linematch": "def test_version_command():",
        "context": "    assert result.exit_code == 0\n    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 32,
        "coloffset": 4,
        "linematch": "assert result.stdout == f'pls CLI Version: {__version__}\\n'",
        "context": "\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['version'])",
        "context": "    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 32,
        "coloffset": 4,
        "linematch": "assert result.stdout == f'pls CLI Version: {__version__}\\n'",
        "context": "\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['version'])",
        "context": "    assert 'Show this message and exit' in result.stdout\n\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "\n\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 32,
        "coloffset": 4,
        "linematch": "assert result.stdout == f'pls CLI Version: {__version__}\\n'",
        "context": "\ndef test_version_command():\n    result = runner.invoke(app, ['version'])\n    assert result.exit_code == 0\n    assert result.stdout == f'pls CLI Version: {__version__}\\n'\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #16",
        "line": 29,
        "description": [
          "update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -26,7 +26,7 @@\n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n-update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n+update_line_style = os.getenv('XXPLS_UPDATE_LINE_STYLEXX', '#61E294')\n update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n \n insert_or_delete_line_style = os.getenv(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #17",
        "line": 29,
        "description": [
          "update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -26,7 +26,7 @@\n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n-update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n+update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', 'XX#61E294XX')\n update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n \n insert_or_delete_line_style = os.getenv(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #18",
        "line": 29,
        "description": [
          "update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -26,7 +26,7 @@\n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n-update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n+update_line_style = None\n update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n \n insert_or_delete_line_style = os.getenv(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #19",
        "line": 30,
        "description": [
          "update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -27,7 +27,7 @@\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n-update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n+update_text_style = os.getenv('XXPLS_UPDATE_TEXT_STYLEXX', '#61E294 bold')\n \n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #20",
        "line": 30,
        "description": [
          "update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -27,7 +27,7 @@\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n-update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n+update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', 'XX#61E294 boldXX')\n \n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #21",
        "line": 30,
        "description": [
          "update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -27,7 +27,7 @@\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n-update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n+update_text_style = None\n \n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_first_usage",
    "function_scope": "37-54",
    "patterns": [
      {
        "lineno": 37,
        "coloffset": 0,
        "linematch": "def test_first_usage(mock_write_settings, mock_exists_settings):",
        "context": "\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 39,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 40,
        "coloffset": 4,
        "linematch": "assert 'Hello! What can I call you?: test' in result.stdout",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "assert 'pls callme <Your Name Goes Here>' in result.stdout",
        "context": "def test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "assert 'If you wanna change your name later, please use:' in result.stdout",
        "context": "    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 43,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable the task progress bar later, please use:'",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable the task progress bar later, please use:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable quotes later, please use:'",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert (\n        'If you need to disable or enable the task progress bar later, please use:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable quotes later, please use:'\n        in result.stdout\n    )\n\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, input='test\\ny\\nY\\n')",
        "context": "\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 39,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 40,
        "coloffset": 4,
        "linematch": "assert 'Hello! What can I call you?: test' in result.stdout",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "assert 'pls callme <Your Name Goes Here>' in result.stdout",
        "context": "def test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "assert 'If you wanna change your name later, please use:' in result.stdout",
        "context": "    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 43,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable the task progress bar later, please use:'",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable the task progress bar later, please use:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable quotes later, please use:'",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert (\n        'If you need to disable or enable the task progress bar later, please use:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable quotes later, please use:'\n        in result.stdout\n    )\n\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, input='test\\ny\\nY\\n')",
        "context": "\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 39,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=False)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 40,
        "coloffset": 4,
        "linematch": "assert 'Hello! What can I call you?: test' in result.stdout",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "assert 'pls callme <Your Name Goes Here>' in result.stdout",
        "context": "def test_first_usage(mock_write_settings, mock_exists_settings):\n    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "assert 'If you wanna change your name later, please use:' in result.stdout",
        "context": "    result = runner.invoke(app, input='test\\ny\\nY\\n')\n    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 43,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert result.exit_code == 0\n    assert 'Hello! What can I call you?: test' in result.stdout\n    assert 'pls callme <Your Name Goes Here>' in result.stdout\n    assert 'If you wanna change your name later, please use:' in result.stdout\n    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable the task progress bar later, please use:'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert (\n        'To apply the changes restart the terminal or use this command:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable the task progress bar later, please use:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable quotes later, please use:'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "assert (",
        "context": "    assert (\n        'If you need to disable or enable the task progress bar later, please use:'\n        in result.stdout\n    )\n    assert (\n        'If you need to disable or enable quotes later, please use:'\n        in result.stdout\n    )\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #27",
        "line": 37,
        "description": [
          ")"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -32,9 +32,7 @@\n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n )\n-insert_or_delete_text_style = os.getenv(\n-    'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n-)\n+insert_or_delete_text_style = None\n \n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #28",
        "line": 39,
        "description": [
          "msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -36,7 +36,7 @@\n     'PLS_INSERT_DELETE_TEXT_STYLE', '#a0a0a0'\n )\n \n-msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n+msg_pending_style = os.getenv('XXPLS_MSG_PENDING_STYLEXX', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #29",
        "line": 39,
        "description": [
          "msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #30",
        "line": 39,
        "description": [
          "msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #31",
        "line": 40,
        "description": [
          "table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -37,7 +37,7 @@\n )\n \n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n-table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n+table_header_style = os.getenv('XXPLS_TABLE_HEADER_STYLEXX', '#d77dd8')\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #32",
        "line": 40,
        "description": [
          "table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #33",
        "line": 40,
        "description": [
          "table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -37,7 +37,7 @@\n )\n \n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n-table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n+table_header_style = None\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #34",
        "line": 41,
        "description": [
          "task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -38,7 +38,7 @@\n \n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n-task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n+task_done_style = os.getenv('XXPLS_TASK_DONE_STYLEXX', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #35",
        "line": 41,
        "description": [
          "task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #36",
        "line": 41,
        "description": [
          "task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #37",
        "line": 42,
        "description": [
          "task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -39,7 +39,7 @@\n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n-task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n+task_pending_style = os.getenv('XXPLS_TASK_PENDING_STYLEXX', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #38",
        "line": 42,
        "description": [
          "task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #39",
        "line": 42,
        "description": [
          "task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #40",
        "line": 43,
        "description": [
          "header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -40,7 +40,7 @@\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n-header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n+header_greetings_style = os.getenv('XXPLS_HEADER_GREETINGS_STYLEXX', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #41",
        "line": 43,
        "description": [
          "header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #42",
        "line": 43,
        "description": [
          "header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #43",
        "line": 44,
        "description": [
          "quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -41,7 +41,7 @@\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n-quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n+quote_style = os.getenv('XXPLS_QUOTE_STYLEXX', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #44",
        "line": 44,
        "description": [
          "quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #45",
        "line": 44,
        "description": [
          "quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #46",
        "line": 45,
        "description": [
          "author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -42,7 +42,7 @@\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n-author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n+author_style = os.getenv('XXPLS_AUTHOR_STYLEXX', '#a0a0a0')\n \n background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #47",
        "line": 45,
        "description": [
          "author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #48",
        "line": 45,
        "description": [
          "author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #49",
        "line": 47,
        "description": [
          "background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -44,7 +44,7 @@\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n-background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n+background_bar_style = os.getenv('XXPLS_BACKGROUND_BAR_STYLEXX', 'bar.back')\n complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\n finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #50",
        "line": 47,
        "description": [
          "background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #51",
        "line": 47,
        "description": [
          "background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #52",
        "line": 48,
        "description": [
          "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -45,7 +45,7 @@\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n-complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\n+complete_bar_style = os.getenv('XXPLS_COMPLETE_BAR_STYLEXX', 'bar.complete')\n finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #53",
        "line": 48,
        "description": [
          "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #54",
        "line": 48,
        "description": [
          "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #55",
        "line": 49,
        "description": [
          "finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -46,7 +46,7 @@\n \n background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\n-finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n+finished_bar_style = os.getenv('XXPLS_FINISHED_BAR_STYLEXX', 'bar.finished')\n \n \n def get_terminal_full_width() -> int:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #56",
        "line": 49,
        "description": [
          "finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #57",
        "line": 49,
        "description": [
          "finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')"
        ],
        "failure": []
      }
    ],
    "mutation_score": 61.29032258064516
  },
  {
    "function_name": "test_config_ok_show_tasks",
    "function_scope": "65-72",
    "patterns": [
      {
        "lineno": 65,
        "coloffset": 0,
        "linematch": "def test_config_ok_show_tasks(",
        "context": "@patch(\n    'pls_cli.utils.settings.Settings.get_tasks',\n    return_value=[{'name': 'Task 1', 'done': False}],\n)\ndef test_config_ok_show_tasks(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 69,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_show_tasks(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "assert 'ID   TASK     STATUS' in result.stdout",
        "context": "):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "assert '1    Task 1     \u25cb' in result.stdout",
        "context": "    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch('pls_cli.utils.settings.Settings.get_name', return_value='Test name')",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 68,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app)",
        "context": ")\ndef test_config_ok_show_tasks(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 69,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_show_tasks(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "assert 'ID   TASK     STATUS' in result.stdout",
        "context": "):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "assert '1    Task 1     \u25cb' in result.stdout",
        "context": "    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch('pls_cli.utils.settings.Settings.get_name', return_value='Test name')",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 68,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app)",
        "context": ")\ndef test_config_ok_show_tasks(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 69,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_show_tasks(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "assert 'ID   TASK     STATUS' in result.stdout",
        "context": "):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "assert '1    Task 1     \u25cb' in result.stdout",
        "context": "    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'ID   TASK     STATUS' in result.stdout\n    assert '1    Task 1     \u25cb' in result.stdout\n\n\n@freeze_time('2022-01-14 03:21:34')\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch('pls_cli.utils.settings.Settings.get_name', return_value='Test name')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #61",
        "line": 68,
        "description": [
          "    width = get_terminal_full_width() if wrap else get_terminal_full_width()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -65,7 +65,7 @@\n         text (Union[str, Rule, Table]): object to center align\n         style (str, optional): styling of the object. Defaults to None.\n     \"\"\"\n-    width = get_terminal_full_width() if wrap else get_terminal_full_width()\n+    width = None\n \n     if isinstance(text, Rule):\n         console.print(text, style=style, width=width)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_config_ok_no_tasks_pending",
    "function_scope": "83-89",
    "patterns": [
      {
        "lineno": 83,
        "coloffset": 0,
        "linematch": "def test_config_ok_no_tasks_pending(",
        "context": "@patch(\n    'pls_cli.utils.settings.Settings.get_tasks',\n    return_value=[{'name': 'Task 1', 'done': False}],\n)\ndef test_config_ok_no_tasks_pending(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 87,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_no_tasks_pending(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 88,
        "coloffset": 4,
        "linematch": "assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch(",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 89,
        "coloffset": 4,
        "linematch": "assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout",
        "context": "):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch(\n    'pls_cli.utils.settings.Settings.get_tasks',",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 86,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app)",
        "context": ")\ndef test_config_ok_no_tasks_pending(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 87,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_no_tasks_pending(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 88,
        "coloffset": 4,
        "linematch": "assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch(",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 89,
        "coloffset": 4,
        "linematch": "assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout",
        "context": "):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch(\n    'pls_cli.utils.settings.Settings.get_tasks',",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 86,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app)",
        "context": ")\ndef test_config_ok_no_tasks_pending(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 87,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_no_tasks_pending(\n    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 88,
        "coloffset": 4,
        "linematch": "assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_get_name, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 89,
        "coloffset": 4,
        "linematch": "assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout",
        "context": "):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n    assert \"Hello Test name! It's 14 Jan | 03:21 AM\" in result.stdout\n    assert 'Looking good, no pending tasks \u2728 \ud83c\udf70 \u2728' in result.stdout\n\n\n@patch('pls_cli.utils.settings.Settings.exists_settings', return_value=True)\n@patch(\n    'pls_cli.utils.settings.Settings.get_tasks',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_config_ok_no_tasks_pending_with_progress",
    "function_scope": "97-101",
    "patterns": [
      {
        "lineno": 97,
        "coloffset": 0,
        "linematch": "def test_config_ok_no_tasks_pending_with_progress(",
        "context": "@patch(\n    'pls_cli.utils.settings.Settings.get_tasks',\n    return_value=[{'name': 'Task 1', 'done': True}],\n)\ndef test_config_ok_no_tasks_pending_with_progress(\n    mock_get_tasks, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 101,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_no_tasks_pending_with_progress(\n    mock_get_tasks, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 100,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app)",
        "context": ")\ndef test_config_ok_no_tasks_pending_with_progress(\n    mock_get_tasks, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 101,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_no_tasks_pending_with_progress(\n    mock_get_tasks, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 100,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app)",
        "context": ")\ndef test_config_ok_no_tasks_pending_with_progress(\n    mock_get_tasks, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 101,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_config_ok_no_tasks_pending_with_progress(\n    mock_get_tasks, mock_exists_settings\n):\n    result = runner.invoke(app)\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #63",
        "line": 98,
        "description": [
          "            qty_done = Settings().count_tasks_done()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #64",
        "line": 99,
        "description": [
          "            qty_undone = Settings().count_tasks_undone()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #65",
        "line": 100,
        "description": [
          "            task1 = progress.add_task('Progress', total=qty_done + qty_undone)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -97,7 +97,7 @@\n         ) as progress:\n             qty_done = Settings().count_tasks_done()\n             qty_undone = Settings().count_tasks_undone()\n-            task1 = progress.add_task('Progress', total=qty_done + qty_undone)\n+            task1 = progress.add_task('XXProgressXX', total=qty_done + qty_undone)\n             progress.update(task1, advance=qty_done)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #66",
        "line": 100,
        "description": [
          "            task1 = progress.add_task('Progress', total=qty_done + qty_undone)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -97,7 +97,7 @@\n         ) as progress:\n             qty_done = Settings().count_tasks_done()\n             qty_undone = Settings().count_tasks_undone()\n-            task1 = progress.add_task('Progress', total=qty_done + qty_undone)\n+            task1 = progress.add_task('Progress', total=qty_done - qty_undone)\n             progress.update(task1, advance=qty_done)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #67",
        "line": 100,
        "description": [
          "            task1 = progress.add_task('Progress', total=qty_done + qty_undone)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 60.0
  },
  {
    "function_name": "test_add_task",
    "function_scope": "121-129",
    "patterns": [
      {
        "lineno": 121,
        "coloffset": 0,
        "linematch": "def test_add_task(",
        "context": "        {'name': 'Task 1', 'done': True},\n        {'name': 'New task', 'done': False},\n    ],\n)\ndef test_add_task(\n    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_add_task(\n    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 126,
        "coloffset": 4,
        "linematch": "assert 'Added \"New task\" to the list' in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 127,
        "coloffset": 4,
        "linematch": "assert 'ID   TASK       STATUS' in result.stdout",
        "context": "):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 128,
        "coloffset": 4,
        "linematch": "assert '1    Task 1       \u2713' in result.stdout",
        "context": "    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 129,
        "coloffset": 4,
        "linematch": "assert '2    New task     \u25cb' in result.stdout",
        "context": "    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 124,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['add', 'New task'])",
        "context": ")\ndef test_add_task(\n    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_add_task(\n    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 126,
        "coloffset": 4,
        "linematch": "assert 'Added \"New task\" to the list' in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 127,
        "coloffset": 4,
        "linematch": "assert 'ID   TASK       STATUS' in result.stdout",
        "context": "):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 128,
        "coloffset": 4,
        "linematch": "assert '1    Task 1       \u2713' in result.stdout",
        "context": "    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 129,
        "coloffset": 4,
        "linematch": "assert '2    New task     \u25cb' in result.stdout",
        "context": "    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 124,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['add', 'New task'])",
        "context": ")\ndef test_add_task(\n    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "def test_add_task(\n    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 126,
        "coloffset": 4,
        "linematch": "assert 'Added \"New task\" to the list' in result.stdout",
        "context": "    mock_get_tasks, mock_all_tasks_done, mock_write_settings, mock_get_settings\n):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 127,
        "coloffset": 4,
        "linematch": "assert 'ID   TASK       STATUS' in result.stdout",
        "context": "):\n    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 128,
        "coloffset": 4,
        "linematch": "assert '1    Task 1       \u2713' in result.stdout",
        "context": "    result = runner.invoke(app, ['add', 'New task'])\n    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 129,
        "coloffset": 4,
        "linematch": "assert '2    New task     \u25cb' in result.stdout",
        "context": "    assert result.exit_code == 0\n    assert 'Added \"New task\" to the list' in result.stdout\n    assert 'ID   TASK       STATUS' in result.stdout\n    assert '1    Task 1       \u2713' in result.stdout\n    assert '2    New task     \u25cb' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #80",
        "line": 122,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -119,7 +119,7 @@\n @app.command('quotes', rich_help_panel='Utils and Configs')\n def quotes(show: bool = True) -> None:\n     \"\"\"Show quotes \ud83c\udff7\"\"\"\n-    settings = Settings().get_settings()\n+    settings = None\n     settings['show_quotes'] = show\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #81",
        "line": 123,
        "description": [
          "    settings['show_quotes'] = show"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -120,7 +120,7 @@\n def quotes(show: bool = True) -> None:\n     \"\"\"Show quotes \ud83c\udff7\"\"\"\n     settings = Settings().get_settings()\n-    settings['show_quotes'] = show\n+    settings['XXshow_quotesXX'] = show\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #82",
        "line": 123,
        "description": [
          "    settings['show_quotes'] = show"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -120,7 +120,7 @@\n def quotes(show: bool = True) -> None:\n     \"\"\"Show quotes \ud83c\udff7\"\"\"\n     settings = Settings().get_settings()\n-    settings['show_quotes'] = show\n+    settings['show_quotes'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #83",
        "line": 127,
        "description": [
          "            'Thanks for letting me know that!',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -124,7 +124,7 @@\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n-            'Thanks for letting me know that!',\n+            'XXThanks for letting me know that!XX',\n             style=insert_or_delete_line_style,\n         ),\n         style=insert_or_delete_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_edit_task_with_invalid_id",
    "function_scope": "141-144",
    "patterns": [
      {
        "lineno": 141,
        "coloffset": 0,
        "linematch": "def test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):",
        "context": "        'tasks': [],\n    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 143,
        "coloffset": 4,
        "linematch": "assert 'Currently, you have no tasks' in result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 144,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 142,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '1', 'Edited'])",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 143,
        "coloffset": 4,
        "linematch": "assert 'Currently, you have no tasks' in result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 144,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 142,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '1', 'Edited'])",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 143,
        "coloffset": 4,
        "linematch": "assert 'Currently, you have no tasks' in result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 144,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_with_invalid_id(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '1', 'Edited'])\n    assert 'Currently, you have no tasks' in result.stdout\n    assert result.exit_code == 0\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #90",
        "line": 142,
        "description": [
          "    )"
        ],
        "failure": []
      },
      {
        "name": "Mutant #91",
        "line": 144,
        "description": [
          "    task_table.add_column('ID', justify='center')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #92",
        "line": 144,
        "description": [
          "    task_table.add_column('ID', justify='center')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -141,7 +141,7 @@\n         box=box.SIMPLE_HEAVY,\n     )\n \n-    task_table.add_column('ID', justify='center')\n+    task_table.add_column('ID', justify='XXcenterXX')\n     task_table.add_column('TASK')\n     task_table.add_column('STATUS', justify='center')\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 66.66666666666666
  },
  {
    "function_name": "test_edit_not_found_task",
    "function_scope": "156-159",
    "patterns": [
      {
        "lineno": 156,
        "coloffset": 0,
        "linematch": "def test_edit_not_found_task(mock_write_settings, mock_get_settings):",
        "context": "        'tasks': [{'name': 'Task 1', 'done': False}],\n    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 158,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 159,
        "coloffset": 4,
        "linematch": "assert 'Task #2 was not found, pls choose an existing ID' in result.stdout",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 157,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 158,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 159,
        "coloffset": 4,
        "linematch": "assert 'Task #2 was not found, pls choose an existing ID' in result.stdout",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 157,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 158,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 159,
        "coloffset": 4,
        "linematch": "assert 'Task #2 was not found, pls choose an existing ID' in result.stdout",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_not_found_task(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'])\n    assert result.exit_code == 0\n    assert 'Task #2 was not found, pls choose an existing ID' in result.stdout\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #111",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #112",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #113",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #114",
        "line": 156,
        "description": [
          "            task_id = f'[{task_pending_style}]{str(index + 1)}[/]'"
        ],
        "failure": []
      },
      {
        "name": "Mutant #115",
        "line": 159,
        "description": [
          "    center_print(task_table)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_edit_task_success",
    "function_scope": "174-182",
    "patterns": [
      {
        "lineno": 174,
        "coloffset": 0,
        "linematch": "def test_edit_task_success(mock_write_settings, mock_get_settings):",
        "context": "        ],\n    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 177,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 178,
        "coloffset": 4,
        "linematch": "assert 'Old Task: Old task text' in output",
        "context": "def test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 179,
        "coloffset": 4,
        "linematch": "assert 'Edited Task: New task text' in output",
        "context": "    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 180,
        "coloffset": 4,
        "linematch": "assert 'Are you sure you want to edit Task #2? [y/N]: y' in output",
        "context": "    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 181,
        "coloffset": 4,
        "linematch": "assert '1    Task 1            \u25cb' in output",
        "context": "    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 182,
        "coloffset": 4,
        "linematch": "assert '2    New task text     \u25cb' in output",
        "context": "    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 175,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 176,
        "coloffset": 4,
        "linematch": "output = result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 177,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 178,
        "coloffset": 4,
        "linematch": "assert 'Old Task: Old task text' in output",
        "context": "def test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 179,
        "coloffset": 4,
        "linematch": "assert 'Edited Task: New task text' in output",
        "context": "    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 180,
        "coloffset": 4,
        "linematch": "assert 'Are you sure you want to edit Task #2? [y/N]: y' in output",
        "context": "    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 181,
        "coloffset": 4,
        "linematch": "assert '1    Task 1            \u25cb' in output",
        "context": "    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 182,
        "coloffset": 4,
        "linematch": "assert '2    New task text     \u25cb' in output",
        "context": "    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 175,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 176,
        "coloffset": 4,
        "linematch": "output = result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 177,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 178,
        "coloffset": 4,
        "linematch": "assert 'Old Task: Old task text' in output",
        "context": "def test_edit_task_success(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 179,
        "coloffset": 4,
        "linematch": "assert 'Edited Task: New task text' in output",
        "context": "    result = runner.invoke(app, ['edit', '2', 'New task text'], input='y')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 180,
        "coloffset": 4,
        "linematch": "assert 'Are you sure you want to edit Task #2? [y/N]: y' in output",
        "context": "    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 181,
        "coloffset": 4,
        "linematch": "assert '1    Task 1            \u25cb' in output",
        "context": "    assert result.exit_code == 0\n    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 182,
        "coloffset": 4,
        "linematch": "assert '2    New task text     \u25cb' in output",
        "context": "    assert 'Old Task: Old task text' in output\n    assert 'Edited Task: New task text' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: y' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    New task text     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #120",
        "line": 176,
        "description": [
          "@app.command()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #121",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = {'XXnameXX': task, 'done': False}\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #122",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = {'name': task, 'XXdoneXX': False}\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #123",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = {'name': task, 'done': True}\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #124",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = None\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #125",
        "line": 180,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #126",
        "line": 181,
        "description": [
          "    settings['tasks'].append(new_task)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 42.857142857142854
  },
  {
    "function_name": "test_edit_task_aborted",
    "function_scope": "197-205",
    "patterns": [
      {
        "lineno": 197,
        "coloffset": 0,
        "linematch": "def test_edit_task_aborted(mock_write_settings, mock_get_settings):",
        "context": "        ],\n    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 200,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 201,
        "coloffset": 4,
        "linematch": "assert 'Old Task: Task 2' in output",
        "context": "def test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 202,
        "coloffset": 4,
        "linematch": "assert 'Edited Task: Task 2 edited' in output",
        "context": "    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 203,
        "coloffset": 4,
        "linematch": "assert 'Are you sure you want to edit Task #2? [y/N]: N' in output",
        "context": "    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 204,
        "coloffset": 4,
        "linematch": "assert '1    Task 1            \u25cb' in output",
        "context": "    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 205,
        "coloffset": 4,
        "linematch": "assert '2    Task 2 edited     \u25cb' in output",
        "context": "    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 198,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 199,
        "coloffset": 4,
        "linematch": "output = result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 200,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 201,
        "coloffset": 4,
        "linematch": "assert 'Old Task: Task 2' in output",
        "context": "def test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 202,
        "coloffset": 4,
        "linematch": "assert 'Edited Task: Task 2 edited' in output",
        "context": "    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 203,
        "coloffset": 4,
        "linematch": "assert 'Are you sure you want to edit Task #2? [y/N]: N' in output",
        "context": "    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 204,
        "coloffset": 4,
        "linematch": "assert '1    Task 1            \u25cb' in output",
        "context": "    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 205,
        "coloffset": 4,
        "linematch": "assert '2    Task 2 edited     \u25cb' in output",
        "context": "    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 198,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')",
        "context": "    },\n)\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 199,
        "coloffset": 4,
        "linematch": "output = result.stdout",
        "context": ")\n@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 200,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "@patch('pls_cli.utils.settings.Settings.write_settings')\ndef test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 201,
        "coloffset": 4,
        "linematch": "assert 'Old Task: Task 2' in output",
        "context": "def test_edit_task_aborted(mock_write_settings, mock_get_settings):\n    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 202,
        "coloffset": 4,
        "linematch": "assert 'Edited Task: Task 2 edited' in output",
        "context": "    result = runner.invoke(app, ['edit', '2', 'Task 2 edited'], input='N\\n')\n    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 203,
        "coloffset": 4,
        "linematch": "assert 'Are you sure you want to edit Task #2? [y/N]: N' in output",
        "context": "    output = result.stdout\n    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 204,
        "coloffset": 4,
        "linematch": "assert '1    Task 1            \u25cb' in output",
        "context": "    assert result.exit_code == 0\n    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 205,
        "coloffset": 4,
        "linematch": "assert '2    Task 2 edited     \u25cb' in output",
        "context": "    assert 'Old Task: Task 2' in output\n    assert 'Edited Task: Task 2 edited' in output\n    assert 'Are you sure you want to edit Task #2? [y/N]: N' in output\n    assert '1    Task 1            \u25cb' in output\n    assert '2    Task 2 edited     \u25cb' in output\n\n\n@patch(\n    'pls_cli.utils.settings.Settings.get_settings',\n    return_value={",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #135",
        "line": 198,
        "description": [
          "                'Sorry, There are no tasks to mark as done',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -195,7 +195,7 @@\n     if not settings['tasks']:\n         center_print(\n             Rule(\n-                'Sorry, There are no tasks to mark as done',\n+                'XXSorry, There are no tasks to mark as doneXX',\n                 style=error_line_style,\n             ),\n             style=error_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #136",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if  0 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #137",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 1 <= task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #138",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 < task_id < len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #139",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id <= len(settings['tasks']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #140",
        "line": 205,
        "description": [
          "    if not 0 <= task_id < len(settings['tasks']):"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -202,7 +202,7 @@\n         )\n         return\n \n-    if not 0 <= task_id < len(settings['tasks']):\n+    if not 0 <= task_id < len(settings['XXtasksXX']):\n         center_print(\n             Rule(\n                 'Are you sure you gave me the correct ID to mark as done?',\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "get_terminal_full_width",
    "function_scope": "52-53",
    "patterns": [
      {
        "lineno": 52,
        "coloffset": 0,
        "linematch": "def get_terminal_full_width() -> int:",
        "context": "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\nfinished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n\n\ndef get_terminal_full_width() -> int:\n    return shutil.get_terminal_size().columns\n\n\ndef get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 52,
        "coloffset": 0,
        "linematch": "def get_terminal_full_width() -> int:",
        "context": "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\nfinished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n\n\ndef get_terminal_full_width() -> int:\n    return shutil.get_terminal_size().columns\n\n\ndef get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 53,
        "coloffset": 4,
        "linematch": "return shutil.get_terminal_size().columns",
        "context": "finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n\n\ndef get_terminal_full_width() -> int:\n    return shutil.get_terminal_size().columns\n\n\ndef get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "get_terminal_center_width",
    "function_scope": "56-57",
    "patterns": [
      {
        "lineno": 56,
        "coloffset": 0,
        "linematch": "def get_terminal_center_width() -> int:",
        "context": "def get_terminal_full_width() -> int:\n    return shutil.get_terminal_size().columns\n\n\ndef get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2\n\n\ndef center_print(\n    text, style: Union[str, None] = None, wrap: bool = False",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 56,
        "coloffset": 0,
        "linematch": "def get_terminal_center_width() -> int:",
        "context": "def get_terminal_full_width() -> int:\n    return shutil.get_terminal_size().columns\n\n\ndef get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2\n\n\ndef center_print(\n    text, style: Union[str, None] = None, wrap: bool = False",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 57,
        "coloffset": 4,
        "linematch": "return shutil.get_terminal_size().columns // 2",
        "context": "    return shutil.get_terminal_size().columns\n\n\ndef get_terminal_center_width() -> int:\n    return shutil.get_terminal_size().columns // 2\n\n\ndef center_print(\n    text, style: Union[str, None] = None, wrap: bool = False\n) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #58",
        "line": 57,
        "description": [
          "    return shutil.get_terminal_size().columns // 2"
        ],
        "failure": []
      },
      {
        "name": "Mutant #59",
        "line": 57,
        "description": [
          "    return shutil.get_terminal_size().columns // 2"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -54,7 +54,7 @@\n \n \n def get_terminal_center_width() -> int:\n-    return shutil.get_terminal_size().columns // 2\n+    return shutil.get_terminal_size().columns // 3\n \n \n def center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 50.0
  },
  {
    "function_name": "print_no_pending_tasks",
    "function_scope": "76-79",
    "patterns": [
      {
        "lineno": 76,
        "coloffset": 0,
        "linematch": "def print_no_pending_tasks() -> None:",
        "context": "    else:\n        console.print(Align.center(text, style=style, width=width))\n\n\ndef print_no_pending_tasks() -> None:\n    center_print(\n        f'[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728'\n    )\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 76,
        "coloffset": 0,
        "linematch": "def print_no_pending_tasks() -> None:",
        "context": "    else:\n        console.print(Align.center(text, style=style, width=width))\n\n\ndef print_no_pending_tasks() -> None:\n    center_print(\n        f'[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728'\n    )\n\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 77,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "        console.print(Align.center(text, style=style, width=width))\n\n\ndef print_no_pending_tasks() -> None:\n    center_print(\n        f'[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728'\n    )\n\n\nclass CenteredProgress(Progress):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #62",
        "line": 78,
        "description": [
          "        f'[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728'"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -75,7 +75,7 @@\n \n def print_no_pending_tasks() -> None:\n     center_print(\n-        f'[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728'\n+        f'XX[{msg_pending_style}]Looking good, no pending tasks[/] \u2728 \ud83c\udf70 \u2728XX'\n     )\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "tasks_progress",
    "function_scope": "105-116",
    "patterns": [
      {
        "lineno": 105,
        "coloffset": 0,
        "linematch": "def tasks_progress(show: bool = True) -> None:",
        "context": "            progress.update(task1, advance=qty_done)\n\n\n@app.command('tasks-progress', rich_help_panel='Utils and Configs')\ndef tasks_progress(show: bool = True) -> None:\n    \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n    settings = Settings().get_settings()\n    settings['show_task_progress'] = show\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 105,
        "coloffset": 0,
        "linematch": "def tasks_progress(show: bool = True) -> None:",
        "context": "            progress.update(task1, advance=qty_done)\n\n\n@app.command('tasks-progress', rich_help_panel='Utils and Configs')\ndef tasks_progress(show: bool = True) -> None:\n    \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n    settings = Settings().get_settings()\n    settings['show_task_progress'] = show\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 106,
        "coloffset": 4,
        "linematch": "\"\"\"Show tasks progress \ud83c\udfaf\"\"\"",
        "context": "\n\n@app.command('tasks-progress', rich_help_panel='Utils and Configs')\ndef tasks_progress(show: bool = True) -> None:\n    \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n    settings = Settings().get_settings()\n    settings['show_task_progress'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 107,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "\n@app.command('tasks-progress', rich_help_panel='Utils and Configs')\ndef tasks_progress(show: bool = True) -> None:\n    \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n    settings = Settings().get_settings()\n    settings['show_task_progress'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 108,
        "coloffset": 4,
        "linematch": "settings['show_task_progress'] = show",
        "context": "@app.command('tasks-progress', rich_help_panel='Utils and Configs')\ndef tasks_progress(show: bool = True) -> None:\n    \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n    settings = Settings().get_settings()\n    settings['show_task_progress'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',\n            style=insert_or_delete_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 109,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "def tasks_progress(show: bool = True) -> None:\n    \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n    settings = Settings().get_settings()\n    settings['show_task_progress'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',\n            style=insert_or_delete_line_style,\n        ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 110,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "    \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n    settings = Settings().get_settings()\n    settings['show_task_progress'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',\n            style=insert_or_delete_line_style,\n        ),\n        style=insert_or_delete_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #71",
        "line": 105,
        "description": [
          "def tasks_progress(show: bool = True) -> None:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -102,7 +102,7 @@\n \n \n @app.command('tasks-progress', rich_help_panel='Utils and Configs')\n-def tasks_progress(show: bool = True) -> None:\n+def tasks_progress(show: bool = False) -> None:\n     \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n     settings = Settings().get_settings()\n     settings['show_task_progress'] = show\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #72",
        "line": 107,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -104,7 +104,7 @@\n @app.command('tasks-progress', rich_help_panel='Utils and Configs')\n def tasks_progress(show: bool = True) -> None:\n     \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n-    settings = Settings().get_settings()\n+    settings = None\n     settings['show_task_progress'] = show\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #73",
        "line": 108,
        "description": [
          "    settings['show_task_progress'] = show"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -105,7 +105,7 @@\n def tasks_progress(show: bool = True) -> None:\n     \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n     settings = Settings().get_settings()\n-    settings['show_task_progress'] = show\n+    settings['XXshow_task_progressXX'] = show\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #74",
        "line": 108,
        "description": [
          "    settings['show_task_progress'] = show"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -105,7 +105,7 @@\n def tasks_progress(show: bool = True) -> None:\n     \"\"\"Show tasks progress \ud83c\udfaf\"\"\"\n     settings = Settings().get_settings()\n-    settings['show_task_progress'] = show\n+    settings['show_task_progress'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #75",
        "line": 112,
        "description": [
          "            'Thanks for letting me know that!',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -109,7 +109,7 @@\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n-            'Thanks for letting me know that!',\n+            'XXThanks for letting me know that!XX',\n             style=insert_or_delete_line_style,\n         ),\n         style=insert_or_delete_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "quotes",
    "function_scope": "120-131",
    "patterns": [
      {
        "lineno": 120,
        "coloffset": 0,
        "linematch": "def quotes(show: bool = True) -> None:",
        "context": "    )\n\n\n@app.command('quotes', rich_help_panel='Utils and Configs')\ndef quotes(show: bool = True) -> None:\n    \"\"\"Show quotes \ud83c\udff7\"\"\"\n    settings = Settings().get_settings()\n    settings['show_quotes'] = show\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 120,
        "coloffset": 0,
        "linematch": "def quotes(show: bool = True) -> None:",
        "context": "    )\n\n\n@app.command('quotes', rich_help_panel='Utils and Configs')\ndef quotes(show: bool = True) -> None:\n    \"\"\"Show quotes \ud83c\udff7\"\"\"\n    settings = Settings().get_settings()\n    settings['show_quotes'] = show\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 121,
        "coloffset": 4,
        "linematch": "\"\"\"Show quotes \ud83c\udff7\"\"\"",
        "context": "\n\n@app.command('quotes', rich_help_panel='Utils and Configs')\ndef quotes(show: bool = True) -> None:\n    \"\"\"Show quotes \ud83c\udff7\"\"\"\n    settings = Settings().get_settings()\n    settings['show_quotes'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 122,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "\n@app.command('quotes', rich_help_panel='Utils and Configs')\ndef quotes(show: bool = True) -> None:\n    \"\"\"Show quotes \ud83c\udff7\"\"\"\n    settings = Settings().get_settings()\n    settings['show_quotes'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 123,
        "coloffset": 4,
        "linematch": "settings['show_quotes'] = show",
        "context": "@app.command('quotes', rich_help_panel='Utils and Configs')\ndef quotes(show: bool = True) -> None:\n    \"\"\"Show quotes \ud83c\udff7\"\"\"\n    settings = Settings().get_settings()\n    settings['show_quotes'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',\n            style=insert_or_delete_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 124,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "def quotes(show: bool = True) -> None:\n    \"\"\"Show quotes \ud83c\udff7\"\"\"\n    settings = Settings().get_settings()\n    settings['show_quotes'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',\n            style=insert_or_delete_line_style,\n        ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "    \"\"\"Show quotes \ud83c\udff7\"\"\"\n    settings = Settings().get_settings()\n    settings['show_quotes'] = show\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know that!',\n            style=insert_or_delete_line_style,\n        ),\n        style=insert_or_delete_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #79",
        "line": 120,
        "description": [
          "def quotes(show: bool = True) -> None:"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -117,7 +117,7 @@\n \n \n @app.command('quotes', rich_help_panel='Utils and Configs')\n-def quotes(show: bool = True) -> None:\n+def quotes(show: bool = False) -> None:\n     \"\"\"Show quotes \ud83c\udff7\"\"\"\n     settings = Settings().get_settings()\n     settings['show_quotes'] = show\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #80",
        "line": 122,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -119,7 +119,7 @@\n @app.command('quotes', rich_help_panel='Utils and Configs')\n def quotes(show: bool = True) -> None:\n     \"\"\"Show quotes \ud83c\udff7\"\"\"\n-    settings = Settings().get_settings()\n+    settings = None\n     settings['show_quotes'] = show\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #81",
        "line": 123,
        "description": [
          "    settings['show_quotes'] = show"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -120,7 +120,7 @@\n def quotes(show: bool = True) -> None:\n     \"\"\"Show quotes \ud83c\udff7\"\"\"\n     settings = Settings().get_settings()\n-    settings['show_quotes'] = show\n+    settings['XXshow_quotesXX'] = show\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #82",
        "line": 123,
        "description": [
          "    settings['show_quotes'] = show"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -120,7 +120,7 @@\n def quotes(show: bool = True) -> None:\n     \"\"\"Show quotes \ud83c\udff7\"\"\"\n     settings = Settings().get_settings()\n-    settings['show_quotes'] = show\n+    settings['show_quotes'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #83",
        "line": 127,
        "description": [
          "            'Thanks for letting me know that!',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -124,7 +124,7 @@\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n-            'Thanks for letting me know that!',\n+            'XXThanks for letting me know that!XX',\n             style=insert_or_delete_line_style,\n         ),\n         style=insert_or_delete_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "add",
    "function_scope": "177-187",
    "patterns": [
      {
        "lineno": 177,
        "coloffset": 0,
        "linematch": "def add(task: str) -> None:",
        "context": "        print_tasks_progress()\n\n\n@app.command()\ndef add(task: str) -> None:\n    \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 177,
        "coloffset": 0,
        "linematch": "def add(task: str) -> None:",
        "context": "        print_tasks_progress()\n\n\n@app.command()\ndef add(task: str) -> None:\n    \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 178,
        "coloffset": 4,
        "linematch": "\"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"",
        "context": "\n\n@app.command()\ndef add(task: str) -> None:\n    \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 179,
        "coloffset": 4,
        "linematch": "new_task = {'name': task, 'done': False}",
        "context": "\n@app.command()\ndef add(task: str) -> None:\n    \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)\n    center_print(\n        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 180,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "@app.command()\ndef add(task: str) -> None:\n    \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)\n    center_print(\n        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),\n        style=insert_or_delete_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 181,
        "coloffset": 4,
        "linematch": "settings['tasks'].append(new_task)",
        "context": "def add(task: str) -> None:\n    \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)\n    center_print(\n        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),\n        style=insert_or_delete_text_style,\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 182,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "    \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)\n    center_print(\n        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),\n        style=insert_or_delete_text_style,\n    )\n    print_tasks()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 183,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "    new_task = {'name': task, 'done': False}\n    settings = Settings().get_settings()\n    settings['tasks'].append(new_task)\n    Settings().write_settings(settings)\n    center_print(\n        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),\n        style=insert_or_delete_text_style,\n    )\n    print_tasks()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 187,
        "coloffset": 4,
        "linematch": "print_tasks()",
        "context": "    center_print(\n        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),\n        style=insert_or_delete_text_style,\n    )\n    print_tasks()\n\n\n@app.command()\ndef done(taks_id: int) -> None:\n    \"\"\"Mark a task as [#bbf2b3]done \u2713[/]\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #121",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = {'XXnameXX': task, 'done': False}\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #122",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = {'name': task, 'XXdoneXX': False}\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #123",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = {'name': task, 'done': True}\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #124",
        "line": 179,
        "description": [
          "    new_task = {'name': task, 'done': False}"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -176,7 +176,7 @@\n @app.command()\n def add(task: str) -> None:\n     \"\"\"[bold green]Add[/bold green] a Task :sparkles: [light_slate_grey italic](Add task name inside quotes)[/]\"\"\"\n-    new_task = {'name': task, 'done': False}\n+    new_task = None\n     settings = Settings().get_settings()\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #125",
        "line": 180,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #126",
        "line": 181,
        "description": [
          "    settings['tasks'].append(new_task)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #127",
        "line": 184,
        "description": [
          "        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -181,7 +181,7 @@\n     settings['tasks'].append(new_task)\n     Settings().write_settings(settings)\n     center_print(\n-        Rule(f'Added \"{task}\" to the list', style=insert_or_delete_line_style),\n+        Rule(f'XXAdded \"{task}\" to the listXX', style=insert_or_delete_line_style),\n         style=insert_or_delete_text_style,\n     )\n     print_tasks()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 28.57142857142857
  },
  {
    "function_name": "clear",
    "function_scope": "379-388",
    "patterns": [
      {
        "lineno": 379,
        "coloffset": 0,
        "linematch": "def clear() -> None:",
        "context": "        print_tasks()\n\n\n@app.command()\ndef clear() -> None:\n    \"\"\"Clear all tasks :wastebasket:\"\"\"\n    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 379,
        "coloffset": 0,
        "linematch": "def clear() -> None:",
        "context": "        print_tasks()\n\n\n@app.command()\ndef clear() -> None:\n    \"\"\"Clear all tasks :wastebasket:\"\"\"\n    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 380,
        "coloffset": 4,
        "linematch": "\"\"\"Clear all tasks :wastebasket:\"\"\"",
        "context": "\n\n@app.command()\ndef clear() -> None:\n    \"\"\"Clear all tasks :wastebasket:\"\"\"\n    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 381,
        "coloffset": 4,
        "linematch": "typer.confirm('Are you sure you want to delete all tasks?', abort=True)",
        "context": "\n@app.command()\ndef clear() -> None:\n    \"\"\"Clear all tasks :wastebasket:\"\"\"\n    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Task List Deleted', style=update_line_style),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 382,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "@app.command()\ndef clear() -> None:\n    \"\"\"Clear all tasks :wastebasket:\"\"\"\n    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Task List Deleted', style=update_line_style),\n        style=update_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 383,
        "coloffset": 4,
        "linematch": "settings['tasks'] = []",
        "context": "def clear() -> None:\n    \"\"\"Clear all tasks :wastebasket:\"\"\"\n    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Task List Deleted', style=update_line_style),\n        style=update_text_style,\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 384,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "    \"\"\"Clear all tasks :wastebasket:\"\"\"\n    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Task List Deleted', style=update_line_style),\n        style=update_text_style,\n    )\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 385,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n    settings = Settings().get_settings()\n    settings['tasks'] = []\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Task List Deleted', style=update_line_style),\n        style=update_text_style,\n    )\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #241",
        "line": 381,
        "description": [
          "    typer.confirm('Are you sure you want to delete all tasks?', abort=True)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -378,7 +378,7 @@\n @app.command()\n def clear() -> None:\n     \"\"\"Clear all tasks :wastebasket:\"\"\"\n-    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n+    typer.confirm('XXAre you sure you want to delete all tasks?XX', abort=True)\n     settings = Settings().get_settings()\n     settings['tasks'] = []\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #242",
        "line": 381,
        "description": [
          "    typer.confirm('Are you sure you want to delete all tasks?', abort=True)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -378,7 +378,7 @@\n @app.command()\n def clear() -> None:\n     \"\"\"Clear all tasks :wastebasket:\"\"\"\n-    typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n+    typer.confirm('Are you sure you want to delete all tasks?', abort=False)\n     settings = Settings().get_settings()\n     settings['tasks'] = []\n     Settings().write_settings(settings)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #243",
        "line": 382,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -379,7 +379,7 @@\n def clear() -> None:\n     \"\"\"Clear all tasks :wastebasket:\"\"\"\n     typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n-    settings = Settings().get_settings()\n+    settings = None\n     settings['tasks'] = []\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #244",
        "line": 383,
        "description": [
          "    settings['tasks'] = []"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -380,7 +380,7 @@\n     \"\"\"Clear all tasks :wastebasket:\"\"\"\n     typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n     settings = Settings().get_settings()\n-    settings['tasks'] = []\n+    settings['XXtasksXX'] = []\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Task List Deleted', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #245",
        "line": 383,
        "description": [
          "    settings['tasks'] = []"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -380,7 +380,7 @@\n     \"\"\"Clear all tasks :wastebasket:\"\"\"\n     typer.confirm('Are you sure you want to delete all tasks?', abort=True)\n     settings = Settings().get_settings()\n-    settings['tasks'] = []\n+    settings['tasks'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Task List Deleted', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #246",
        "line": 386,
        "description": [
          "        Rule('Task List Deleted', style=update_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -383,7 +383,7 @@\n     settings['tasks'] = []\n     Settings().write_settings(settings)\n     center_print(\n-        Rule('Task List Deleted', style=update_line_style),\n+        Rule('XXTask List DeletedXX', style=update_line_style),\n         style=update_text_style,\n     )\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "clean",
    "function_scope": "392-403",
    "patterns": [
      {
        "lineno": 392,
        "coloffset": 0,
        "linematch": "def clean() -> None:",
        "context": "    )\n\n\n@app.command()\ndef clean() -> None:\n    \"\"\"Clean up tasks marked as done :broom:\"\"\"\n    typer.confirm(\n        'Are you sure you want to delete all done tasks?', abort=True\n    )\n    settings = Settings().get_settings()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 392,
        "coloffset": 0,
        "linematch": "def clean() -> None:",
        "context": "    )\n\n\n@app.command()\ndef clean() -> None:\n    \"\"\"Clean up tasks marked as done :broom:\"\"\"\n    typer.confirm(\n        'Are you sure you want to delete all done tasks?', abort=True\n    )\n    settings = Settings().get_settings()",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 393,
        "coloffset": 4,
        "linematch": "\"\"\"Clean up tasks marked as done :broom:\"\"\"",
        "context": "\n\n@app.command()\ndef clean() -> None:\n    \"\"\"Clean up tasks marked as done :broom:\"\"\"\n    typer.confirm(\n        'Are you sure you want to delete all done tasks?', abort=True\n    )\n    settings = Settings().get_settings()\n    settings['tasks'] = Settings().get_all_tasks_undone()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 394,
        "coloffset": 4,
        "linematch": "typer.confirm(",
        "context": "\n@app.command()\ndef clean() -> None:\n    \"\"\"Clean up tasks marked as done :broom:\"\"\"\n    typer.confirm(\n        'Are you sure you want to delete all done tasks?', abort=True\n    )\n    settings = Settings().get_settings()\n    settings['tasks'] = Settings().get_all_tasks_undone()\n    Settings().write_settings(settings)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 397,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "    \"\"\"Clean up tasks marked as done :broom:\"\"\"\n    typer.confirm(\n        'Are you sure you want to delete all done tasks?', abort=True\n    )\n    settings = Settings().get_settings()\n    settings['tasks'] = Settings().get_all_tasks_undone()\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Done Tasks Deleted', style=update_line_style),\n        style=update_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 398,
        "coloffset": 4,
        "linematch": "settings['tasks'] = Settings().get_all_tasks_undone()",
        "context": "    typer.confirm(\n        'Are you sure you want to delete all done tasks?', abort=True\n    )\n    settings = Settings().get_settings()\n    settings['tasks'] = Settings().get_all_tasks_undone()\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Done Tasks Deleted', style=update_line_style),\n        style=update_text_style,\n    )",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 399,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "        'Are you sure you want to delete all done tasks?', abort=True\n    )\n    settings = Settings().get_settings()\n    settings['tasks'] = Settings().get_all_tasks_undone()\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Done Tasks Deleted', style=update_line_style),\n        style=update_text_style,\n    )\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 400,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "    )\n    settings = Settings().get_settings()\n    settings['tasks'] = Settings().get_all_tasks_undone()\n    Settings().write_settings(settings)\n    center_print(\n        Rule('Done Tasks Deleted', style=update_line_style),\n        style=update_text_style,\n    )\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #248",
        "line": 395,
        "description": [
          "        'Are you sure you want to delete all done tasks?', abort=True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -392,7 +392,7 @@\n def clean() -> None:\n     \"\"\"Clean up tasks marked as done :broom:\"\"\"\n     typer.confirm(\n-        'Are you sure you want to delete all done tasks?', abort=True\n+        'XXAre you sure you want to delete all done tasks?XX', abort=True\n     )\n     settings = Settings().get_settings()\n     settings['tasks'] = Settings().get_all_tasks_undone()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #249",
        "line": 395,
        "description": [
          "        'Are you sure you want to delete all done tasks?', abort=True"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -392,7 +392,7 @@\n def clean() -> None:\n     \"\"\"Clean up tasks marked as done :broom:\"\"\"\n     typer.confirm(\n-        'Are you sure you want to delete all done tasks?', abort=True\n+        'Are you sure you want to delete all done tasks?', abort=False\n     )\n     settings = Settings().get_settings()\n     settings['tasks'] = Settings().get_all_tasks_undone()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #250",
        "line": 397,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -394,7 +394,7 @@\n     typer.confirm(\n         'Are you sure you want to delete all done tasks?', abort=True\n     )\n-    settings = Settings().get_settings()\n+    settings = None\n     settings['tasks'] = Settings().get_all_tasks_undone()\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #251",
        "line": 398,
        "description": [
          "    settings['tasks'] = Settings().get_all_tasks_undone()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -395,7 +395,7 @@\n         'Are you sure you want to delete all done tasks?', abort=True\n     )\n     settings = Settings().get_settings()\n-    settings['tasks'] = Settings().get_all_tasks_undone()\n+    settings['XXtasksXX'] = Settings().get_all_tasks_undone()\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Done Tasks Deleted', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #252",
        "line": 398,
        "description": [
          "    settings['tasks'] = Settings().get_all_tasks_undone()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -395,7 +395,7 @@\n         'Are you sure you want to delete all done tasks?', abort=True\n     )\n     settings = Settings().get_settings()\n-    settings['tasks'] = Settings().get_all_tasks_undone()\n+    settings['tasks'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule('Done Tasks Deleted', style=update_line_style),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #253",
        "line": 401,
        "description": [
          "        Rule('Done Tasks Deleted', style=update_line_style),"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -398,7 +398,7 @@\n     settings['tasks'] = Settings().get_all_tasks_undone()\n     Settings().write_settings(settings)\n     center_print(\n-        Rule('Done Tasks Deleted', style=update_line_style),\n+        Rule('XXDone Tasks DeletedXX', style=update_line_style),\n         style=update_text_style,\n     )\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "count_done",
    "function_scope": "407-409",
    "patterns": [
      {
        "lineno": 407,
        "coloffset": 0,
        "linematch": "def count_done() -> None:",
        "context": "    )\n\n\n@app.command(rich_help_panel='Integration')\ndef count_done() -> None:\n    \"\"\"Count done tasks :chart_increasing:\"\"\"\n    typer.echo(Settings().count_tasks_done())\n\n\n@app.command(rich_help_panel='Integration')",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 407,
        "coloffset": 0,
        "linematch": "def count_done() -> None:",
        "context": "    )\n\n\n@app.command(rich_help_panel='Integration')\ndef count_done() -> None:\n    \"\"\"Count done tasks :chart_increasing:\"\"\"\n    typer.echo(Settings().count_tasks_done())\n\n\n@app.command(rich_help_panel='Integration')",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 408,
        "coloffset": 4,
        "linematch": "\"\"\"Count done tasks :chart_increasing:\"\"\"",
        "context": "\n\n@app.command(rich_help_panel='Integration')\ndef count_done() -> None:\n    \"\"\"Count done tasks :chart_increasing:\"\"\"\n    typer.echo(Settings().count_tasks_done())\n\n\n@app.command(rich_help_panel='Integration')\ndef count_undone() -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 409,
        "coloffset": 4,
        "linematch": "typer.echo(Settings().count_tasks_done())",
        "context": "\n@app.command(rich_help_panel='Integration')\ndef count_done() -> None:\n    \"\"\"Count done tasks :chart_increasing:\"\"\"\n    typer.echo(Settings().count_tasks_done())\n\n\n@app.command(rich_help_panel='Integration')\ndef count_undone() -> None:\n    \"\"\"Count undone tasks :chart_decreasing:\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "count_undone",
    "function_scope": "413-415",
    "patterns": [
      {
        "lineno": 413,
        "coloffset": 0,
        "linematch": "def count_undone() -> None:",
        "context": "    typer.echo(Settings().count_tasks_done())\n\n\n@app.command(rich_help_panel='Integration')\ndef count_undone() -> None:\n    \"\"\"Count undone tasks :chart_decreasing:\"\"\"\n    typer.echo(Settings().count_tasks_undone())\n\n\n@app.command(rich_help_panel='Utils and Configs')",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 413,
        "coloffset": 0,
        "linematch": "def count_undone() -> None:",
        "context": "    typer.echo(Settings().count_tasks_done())\n\n\n@app.command(rich_help_panel='Integration')\ndef count_undone() -> None:\n    \"\"\"Count undone tasks :chart_decreasing:\"\"\"\n    typer.echo(Settings().count_tasks_undone())\n\n\n@app.command(rich_help_panel='Utils and Configs')",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 414,
        "coloffset": 4,
        "linematch": "\"\"\"Count undone tasks :chart_decreasing:\"\"\"",
        "context": "\n\n@app.command(rich_help_panel='Integration')\ndef count_undone() -> None:\n    \"\"\"Count undone tasks :chart_decreasing:\"\"\"\n    typer.echo(Settings().count_tasks_undone())\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef callme(name: str) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 415,
        "coloffset": 4,
        "linematch": "typer.echo(Settings().count_tasks_undone())",
        "context": "\n@app.command(rich_help_panel='Integration')\ndef count_undone() -> None:\n    \"\"\"Count undone tasks :chart_decreasing:\"\"\"\n    typer.echo(Settings().count_tasks_undone())\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef callme(name: str) -> None:\n    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "callme",
    "function_scope": "419-430",
    "patterns": [
      {
        "lineno": 419,
        "coloffset": 0,
        "linematch": "def callme(name: str) -> None:",
        "context": "    typer.echo(Settings().count_tasks_undone())\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef callme(name: str) -> None:\n    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n    settings = Settings().get_settings()\n    settings['user_name'] = name\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 419,
        "coloffset": 0,
        "linematch": "def callme(name: str) -> None:",
        "context": "    typer.echo(Settings().count_tasks_undone())\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef callme(name: str) -> None:\n    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n    settings = Settings().get_settings()\n    settings['user_name'] = name\n    Settings().write_settings(settings)\n    center_print(",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 420,
        "coloffset": 4,
        "linematch": "\"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"",
        "context": "\n\n@app.command(rich_help_panel='Utils and Configs')\ndef callme(name: str) -> None:\n    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n    settings = Settings().get_settings()\n    settings['user_name'] = name\n    Settings().write_settings(settings)\n    center_print(\n        Rule(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 421,
        "coloffset": 4,
        "linematch": "settings = Settings().get_settings()",
        "context": "\n@app.command(rich_help_panel='Utils and Configs')\ndef callme(name: str) -> None:\n    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n    settings = Settings().get_settings()\n    settings['user_name'] = name\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know your name!',",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 422,
        "coloffset": 4,
        "linematch": "settings['user_name'] = name",
        "context": "@app.command(rich_help_panel='Utils and Configs')\ndef callme(name: str) -> None:\n    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n    settings = Settings().get_settings()\n    settings['user_name'] = name\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know your name!',\n            style=insert_or_delete_line_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 423,
        "coloffset": 4,
        "linematch": "Settings().write_settings(settings)",
        "context": "def callme(name: str) -> None:\n    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n    settings = Settings().get_settings()\n    settings['user_name'] = name\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know your name!',\n            style=insert_or_delete_line_style,\n        ),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 424,
        "coloffset": 4,
        "linematch": "center_print(",
        "context": "    \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n    settings = Settings().get_settings()\n    settings['user_name'] = name\n    Settings().write_settings(settings)\n    center_print(\n        Rule(\n            'Thanks for letting me know your name!',\n            style=insert_or_delete_line_style,\n        ),\n        style=insert_or_delete_text_style,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #260",
        "line": 421,
        "description": [
          "    settings = Settings().get_settings()"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -418,7 +418,7 @@\n @app.command(rich_help_panel='Utils and Configs')\n def callme(name: str) -> None:\n     \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n-    settings = Settings().get_settings()\n+    settings = None\n     settings['user_name'] = name\n     Settings().write_settings(settings)\n     center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #261",
        "line": 422,
        "description": [
          "    settings['user_name'] = name"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -419,7 +419,7 @@\n def callme(name: str) -> None:\n     \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n     settings = Settings().get_settings()\n-    settings['user_name'] = name\n+    settings['XXuser_nameXX'] = name\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #262",
        "line": 422,
        "description": [
          "    settings['user_name'] = name"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -419,7 +419,7 @@\n def callme(name: str) -> None:\n     \"\"\"Change name :name_badge: [light_slate_grey italic](without resetting data)[/]\"\"\"\n     settings = Settings().get_settings()\n-    settings['user_name'] = name\n+    settings['user_name'] = None\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #263",
        "line": 426,
        "description": [
          "            'Thanks for letting me know your name!',"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -423,7 +423,7 @@\n     Settings().write_settings(settings)\n     center_print(\n         Rule(\n-            'Thanks for letting me know your name!',\n+            'XXThanks for letting me know your name!XX',\n             style=insert_or_delete_line_style,\n         ),\n         style=insert_or_delete_text_style,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "version",
    "function_scope": "550-553",
    "patterns": [
      {
        "lineno": 550,
        "coloffset": 0,
        "linematch": "def version():",
        "context": "        )\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef version():\n    \"\"\"Show version :bookmark:\"\"\"\n    typer.echo(f'pls CLI Version: {__version__}')\n    raise typer.Exit()\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 550,
        "coloffset": 0,
        "linematch": "def version():",
        "context": "        )\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef version():\n    \"\"\"Show version :bookmark:\"\"\"\n    typer.echo(f'pls CLI Version: {__version__}')\n    raise typer.Exit()\n\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 551,
        "coloffset": 4,
        "linematch": "\"\"\"Show version :bookmark:\"\"\"",
        "context": "\n\n@app.command(rich_help_panel='Utils and Configs')\ndef version():\n    \"\"\"Show version :bookmark:\"\"\"\n    typer.echo(f'pls CLI Version: {__version__}')\n    raise typer.Exit()\n\n\n@app.command(rich_help_panel='Utils and Configs')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 552,
        "coloffset": 4,
        "linematch": "typer.echo(f'pls CLI Version: {__version__}')",
        "context": "\n@app.command(rich_help_panel='Utils and Configs')\ndef version():\n    \"\"\"Show version :bookmark:\"\"\"\n    typer.echo(f'pls CLI Version: {__version__}')\n    raise typer.Exit()\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef docs():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 553,
        "coloffset": 4,
        "linematch": "raise typer.Exit()",
        "context": "@app.command(rich_help_panel='Utils and Configs')\ndef version():\n    \"\"\"Show version :bookmark:\"\"\"\n    typer.echo(f'pls CLI Version: {__version__}')\n    raise typer.Exit()\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef docs():\n    \"\"\"Launch docs Website :globe_with_meridians:\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #329",
        "line": 552,
        "description": [
          "    typer.echo(f'pls CLI Version: {__version__}')"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "docs",
    "function_scope": "557-560",
    "patterns": [
      {
        "lineno": 557,
        "coloffset": 0,
        "linematch": "def docs():",
        "context": "    raise typer.Exit()\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef docs():\n    \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 557,
        "coloffset": 0,
        "linematch": "def docs():",
        "context": "    raise typer.Exit()\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef docs():\n    \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 558,
        "coloffset": 4,
        "linematch": "\"\"\"Launch docs Website :globe_with_meridians:\"\"\"",
        "context": "\n\n@app.command(rich_help_panel='Utils and Configs')\ndef docs():\n    \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n\n\n@app.command(rich_help_panel='Utils and Configs')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 559,
        "coloffset": 4,
        "linematch": "center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))",
        "context": "\n@app.command(rich_help_panel='Utils and Configs')\ndef docs():\n    \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef config():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 560,
        "coloffset": 4,
        "linematch": "typer.launch('https://guedesfelipe.github.io/pls-cli/')",
        "context": "@app.command(rich_help_panel='Utils and Configs')\ndef docs():\n    \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef config():\n    \"\"\"Launch config directory :open_file_folder:\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #332",
        "line": 559,
        "description": [
          "    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -556,7 +556,7 @@\n @app.command(rich_help_panel='Utils and Configs')\n def docs():\n     \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n-    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n+    center_print(Rule('XX\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fbXX', style='#d77dd8'))\n     typer.launch('https://guedesfelipe.github.io/pls-cli/')\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #333",
        "line": 559,
        "description": [
          "    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -556,7 +556,7 @@\n @app.command(rich_help_panel='Utils and Configs')\n def docs():\n     \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n-    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n+    center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='XX#d77dd8XX'))\n     typer.launch('https://guedesfelipe.github.io/pls-cli/')\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #334",
        "line": 560,
        "description": [
          "    typer.launch('https://guedesfelipe.github.io/pls-cli/')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -557,7 +557,7 @@\n def docs():\n     \"\"\"Launch docs Website :globe_with_meridians:\"\"\"\n     center_print(Rule('\u30fbOpening [#FFBF00]PLS-CLI[/] docs\u30fb', style='#d77dd8'))\n-    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n+    typer.launch('XXhttps://guedesfelipe.github.io/pls-cli/XX')\n \n \n @app.command(rich_help_panel='Utils and Configs')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "config",
    "function_scope": "564-567",
    "patterns": [
      {
        "lineno": 564,
        "coloffset": 0,
        "linematch": "def config():",
        "context": "    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef config():\n    \"\"\"Launch config directory :open_file_folder:\"\"\"\n    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n    typer.launch(Settings().get_full_settings_path(), locate=True)\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 564,
        "coloffset": 0,
        "linematch": "def config():",
        "context": "    typer.launch('https://guedesfelipe.github.io/pls-cli/')\n\n\n@app.command(rich_help_panel='Utils and Configs')\ndef config():\n    \"\"\"Launch config directory :open_file_folder:\"\"\"\n    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n    typer.launch(Settings().get_full_settings_path(), locate=True)\n\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 565,
        "coloffset": 4,
        "linematch": "\"\"\"Launch config directory :open_file_folder:\"\"\"",
        "context": "\n\n@app.command(rich_help_panel='Utils and Configs')\ndef config():\n    \"\"\"Launch config directory :open_file_folder:\"\"\"\n    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n    typer.launch(Settings().get_full_settings_path(), locate=True)\n\n\n@app.command()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 566,
        "coloffset": 4,
        "linematch": "center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))",
        "context": "\n@app.command(rich_help_panel='Utils and Configs')\ndef config():\n    \"\"\"Launch config directory :open_file_folder:\"\"\"\n    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n    typer.launch(Settings().get_full_settings_path(), locate=True)\n\n\n@app.command()\ndef edit(task_id: int, task: str):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 567,
        "coloffset": 4,
        "linematch": "typer.launch(Settings().get_full_settings_path(), locate=True)",
        "context": "@app.command(rich_help_panel='Utils and Configs')\ndef config():\n    \"\"\"Launch config directory :open_file_folder:\"\"\"\n    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n    typer.launch(Settings().get_full_settings_path(), locate=True)\n\n\n@app.command()\ndef edit(task_id: int, task: str):\n    \"\"\"[bold yellow]Edit[/bold yellow] a task by id \u270f\ufe0f [light_slate_grey italic] (Add task name inside quotes)[/]\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #337",
        "line": 566,
        "description": [
          "    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -563,7 +563,7 @@\n @app.command(rich_help_panel='Utils and Configs')\n def config():\n     \"\"\"Launch config directory :open_file_folder:\"\"\"\n-    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n+    center_print(Rule('XX\u30fbOpening config directory\u30fbXX', style='#d77dd8'))\n     typer.launch(Settings().get_full_settings_path(), locate=True)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #338",
        "line": 566,
        "description": [
          "    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -563,7 +563,7 @@\n @app.command(rich_help_panel='Utils and Configs')\n def config():\n     \"\"\"Launch config directory :open_file_folder:\"\"\"\n-    center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n+    center_print(Rule('\u30fbOpening config directory\u30fb', style='XX#d77dd8XX'))\n     typer.launch(Settings().get_full_settings_path(), locate=True)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #339",
        "line": 567,
        "description": [
          "    typer.launch(Settings().get_full_settings_path(), locate=True)"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -564,7 +564,7 @@\n def config():\n     \"\"\"Launch config directory :open_file_folder:\"\"\"\n     center_print(Rule('\u30fbOpening config directory\u30fb', style='#d77dd8'))\n-    typer.launch(Settings().get_full_settings_path(), locate=True)\n+    typer.launch(Settings().get_full_settings_path(), locate=False)\n \n \n @app.command()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "get_renderable",
    "function_scope": "83-84",
    "patterns": [
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "def get_renderable(self) -> RenderableType:",
        "context": "    )\n\n\nclass CenteredProgress(Progress):\n    def get_renderable(self) -> RenderableType:\n        return Align.center(super().get_renderable())\n\n\ndef print_tasks_progress() -> None:\n    if Settings().show_tasks_progress():",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "def get_renderable(self) -> RenderableType:",
        "context": "    )\n\n\nclass CenteredProgress(Progress):\n    def get_renderable(self) -> RenderableType:\n        return Align.center(super().get_renderable())\n\n\ndef print_tasks_progress() -> None:\n    if Settings().show_tasks_progress():",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 84,
        "coloffset": 8,
        "linematch": "return Align.center(super().get_renderable())",
        "context": "\n\nclass CenteredProgress(Progress):\n    def get_renderable(self) -> RenderableType:\n        return Align.center(super().get_renderable())\n\n\ndef print_tasks_progress() -> None:\n    if Settings().show_tasks_progress():\n        with CenteredProgress(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "__init__",
    "function_scope": "8-15",
    "patterns": [
      {
        "lineno": 8,
        "coloffset": 4,
        "linematch": "def __init__(self) -> None:",
        "context": "from typing import List\n\n\nclass Settings:\n    def __init__(self) -> None:\n        self.config_name = self.get_config_name()\n        self.config_path = self.get_config_path()\n        self.full_settings_path = os.path.join(\n            self.config_path, self.config_name\n        )",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 9,
        "coloffset": 8,
        "linematch": "self.config_name = self.get_config_name()",
        "context": "\n\nclass Settings:\n    def __init__(self) -> None:\n        self.config_name = self.get_config_name()\n        self.config_path = self.get_config_path()\n        self.full_settings_path = os.path.join(\n            self.config_path, self.config_name\n        )\n        self.create_dir_if_not_exists()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 10,
        "coloffset": 8,
        "linematch": "self.config_path = self.get_config_path()",
        "context": "\nclass Settings:\n    def __init__(self) -> None:\n        self.config_name = self.get_config_name()\n        self.config_path = self.get_config_path()\n        self.full_settings_path = os.path.join(\n            self.config_path, self.config_name\n        )\n        self.create_dir_if_not_exists()\n        self.minimal_default_config = {'user_name': '', 'tasks': []}",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 11,
        "coloffset": 8,
        "linematch": "self.full_settings_path = os.path.join(",
        "context": "class Settings:\n    def __init__(self) -> None:\n        self.config_name = self.get_config_name()\n        self.config_path = self.get_config_path()\n        self.full_settings_path = os.path.join(\n            self.config_path, self.config_name\n        )\n        self.create_dir_if_not_exists()\n        self.minimal_default_config = {'user_name': '', 'tasks': []}\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 14,
        "coloffset": 8,
        "linematch": "self.create_dir_if_not_exists()",
        "context": "        self.config_path = self.get_config_path()\n        self.full_settings_path = os.path.join(\n            self.config_path, self.config_name\n        )\n        self.create_dir_if_not_exists()\n        self.minimal_default_config = {'user_name': '', 'tasks': []}\n\n    def get_config_name(self):\n        return 'config.json'\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 15,
        "coloffset": 8,
        "linematch": "self.minimal_default_config = {'user_name': '', 'tasks': []}",
        "context": "        self.full_settings_path = os.path.join(\n            self.config_path, self.config_name\n        )\n        self.create_dir_if_not_exists()\n        self.minimal_default_config = {'user_name': '', 'tasks': []}\n\n    def get_config_name(self):\n        return 'config.json'\n\n    def get_config_path(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "get_config_name",
    "function_scope": "17-18",
    "patterns": [
      {
        "lineno": 17,
        "coloffset": 4,
        "linematch": "def get_config_name(self):",
        "context": "        )\n        self.create_dir_if_not_exists()\n        self.minimal_default_config = {'user_name': '', 'tasks': []}\n\n    def get_config_name(self):\n        return 'config.json'\n\n    def get_config_path(self):\n        return os.path.join(expanduser('~'), '.config', 'pls')\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 18,
        "coloffset": 8,
        "linematch": "return 'config.json'",
        "context": "        self.create_dir_if_not_exists()\n        self.minimal_default_config = {'user_name': '', 'tasks': []}\n\n    def get_config_name(self):\n        return 'config.json'\n\n    def get_config_path(self):\n        return os.path.join(expanduser('~'), '.config', 'pls')\n\n    def get_full_settings_path(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "get_config_path",
    "function_scope": "20-21",
    "patterns": [
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "def get_config_path(self):",
        "context": "\n    def get_config_name(self):\n        return 'config.json'\n\n    def get_config_path(self):\n        return os.path.join(expanduser('~'), '.config', 'pls')\n\n    def get_full_settings_path(self):\n        return self.full_settings_path\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 21,
        "coloffset": 8,
        "linematch": "return os.path.join(expanduser('~'), '.config', 'pls')",
        "context": "    def get_config_name(self):\n        return 'config.json'\n\n    def get_config_path(self):\n        return os.path.join(expanduser('~'), '.config', 'pls')\n\n    def get_full_settings_path(self):\n        return self.full_settings_path\n\n    def create_dir_if_not_exists(self) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #1",
        "line": 20,
        "description": [
          "app = typer.Typer(rich_markup_mode='rich')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -17,7 +17,7 @@\n from pls_cli.utils.quotes import get_rand_quote\n from pls_cli.utils.settings import Settings\n \n-app = typer.Typer(rich_markup_mode='rich')\n+app = typer.Typer(rich_markup_mode='XXrichXX')\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2",
        "line": 20,
        "description": [
          "app = typer.Typer(rich_markup_mode='rich')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -17,7 +17,7 @@\n from pls_cli.utils.quotes import get_rand_quote\n from pls_cli.utils.settings import Settings\n \n-app = typer.Typer(rich_markup_mode='rich')\n+app = None\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3",
        "line": 21,
        "description": [
          "console = Console()"
        ],
        "failure": []
      }
    ],
    "mutation_score": 33.33333333333333
  },
  {
    "function_name": "get_full_settings_path",
    "function_scope": "23-24",
    "patterns": [
      {
        "lineno": 23,
        "coloffset": 4,
        "linematch": "def get_full_settings_path(self):",
        "context": "\n    def get_config_path(self):\n        return os.path.join(expanduser('~'), '.config', 'pls')\n\n    def get_full_settings_path(self):\n        return self.full_settings_path\n\n    def create_dir_if_not_exists(self) -> None:\n        if not os.path.exists(self.config_path):\n            os.makedirs(self.config_path)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 24,
        "coloffset": 8,
        "linematch": "return self.full_settings_path",
        "context": "    def get_config_path(self):\n        return os.path.join(expanduser('~'), '.config', 'pls')\n\n    def get_full_settings_path(self):\n        return self.full_settings_path\n\n    def create_dir_if_not_exists(self) -> None:\n        if not os.path.exists(self.config_path):\n            os.makedirs(self.config_path)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4",
        "line": 23,
        "description": [
          "error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -20,7 +20,7 @@\n app = typer.Typer(rich_markup_mode='rich')\n console = Console()\n \n-error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n+error_line_style = os.getenv('XXPLS_ERROR_LINE_STYLEXX', '#e56767')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #5",
        "line": 23,
        "description": [
          "error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -20,7 +20,7 @@\n app = typer.Typer(rich_markup_mode='rich')\n console = Console()\n \n-error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n+error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', 'XX#e56767XX')\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #6",
        "line": 23,
        "description": [
          "error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -20,7 +20,7 @@\n app = typer.Typer(rich_markup_mode='rich')\n console = Console()\n \n-error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n+error_line_style = None\n error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #7",
        "line": 24,
        "description": [
          "error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -21,7 +21,7 @@\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n-error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n+error_text_style = os.getenv('XXPLS_ERROR_TEXT_STYLEXX', '#ff0000 bold')\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #8",
        "line": 24,
        "description": [
          "error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #9",
        "line": 24,
        "description": [
          "error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -21,7 +21,7 @@\n console = Console()\n \n error_line_style = os.getenv('PLS_ERROR_LINE_STYLE', '#e56767')\n-error_text_style = os.getenv('PLS_ERROR_TEXT_STYLE', '#ff0000 bold')\n+error_text_style = None\n \n warning_line_style = os.getenv('PLS_WARNING_LINE_STYLE', '#FFBF00')\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 16.666666666666664
  },
  {
    "function_name": "exists_settings",
    "function_scope": "30-31",
    "patterns": [
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "def exists_settings(self) -> bool:",
        "context": "    def create_dir_if_not_exists(self) -> None:\n        if not os.path.exists(self.config_path):\n            os.makedirs(self.config_path)\n\n    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)\n\n    def get_settings(self) -> dict:\n        if os.path.exists(self.full_settings_path):\n            with open(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 31,
        "coloffset": 8,
        "linematch": "return os.path.exists(self.full_settings_path)",
        "context": "        if not os.path.exists(self.config_path):\n            os.makedirs(self.config_path)\n\n    def exists_settings(self) -> bool:\n        return os.path.exists(self.full_settings_path)\n\n    def get_settings(self) -> dict:\n        if os.path.exists(self.full_settings_path):\n            with open(\n                self.full_settings_path, encoding='utf-8'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #19",
        "line": 30,
        "description": [
          "update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -27,7 +27,7 @@\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n-update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n+update_text_style = os.getenv('XXPLS_UPDATE_TEXT_STYLEXX', '#61E294 bold')\n \n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #20",
        "line": 30,
        "description": [
          "update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -27,7 +27,7 @@\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n-update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n+update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', 'XX#61E294 boldXX')\n \n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #21",
        "line": 30,
        "description": [
          "update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -27,7 +27,7 @@\n warning_text_style = os.getenv('PLS_WARNING_TEXT_STYLE', '#FFBF00 bold')\n \n update_line_style = os.getenv('PLS_UPDATE_LINE_STYLE', '#61E294')\n-update_text_style = os.getenv('PLS_UPDATE_TEXT_STYLE', '#61E294 bold')\n+update_text_style = None\n \n insert_or_delete_line_style = os.getenv(\n     'PLS_INSERT_DELETE_LINE_STYLE', '#bb93f2'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "write_settings",
    "function_scope": "41-45",
    "patterns": [
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "def write_settings(self, data: dict) -> None:",
        "context": "            ) as config_file:\n                return json.load(config_file)\n        return self.minimal_default_config\n\n    def write_settings(self, data: dict) -> None:\n        with open(\n            self.full_settings_path, 'w', encoding='utf-8'\n        ) as config_file:\n            json.dump(data, config_file, indent=2)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 42,
        "coloffset": 8,
        "linematch": "with open(",
        "context": "                return json.load(config_file)\n        return self.minimal_default_config\n\n    def write_settings(self, data: dict) -> None:\n        with open(\n            self.full_settings_path, 'w', encoding='utf-8'\n        ) as config_file:\n            json.dump(data, config_file, indent=2)\n\n    def get_name(self) -> str:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #34",
        "line": 41,
        "description": [
          "task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -38,7 +38,7 @@\n \n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n-task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n+task_done_style = os.getenv('XXPLS_TASK_DONE_STYLEXX', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #35",
        "line": 41,
        "description": [
          "task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #36",
        "line": 41,
        "description": [
          "task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #37",
        "line": 42,
        "description": [
          "task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -39,7 +39,7 @@\n msg_pending_style = os.getenv('PLS_MSG_PENDING_STYLE', '#61E294')\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n-task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n+task_pending_style = os.getenv('XXPLS_TASK_PENDING_STYLEXX', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #38",
        "line": 42,
        "description": [
          "task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #39",
        "line": 42,
        "description": [
          "task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #40",
        "line": 43,
        "description": [
          "header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -40,7 +40,7 @@\n table_header_style = os.getenv('PLS_TABLE_HEADER_STYLE', '#d77dd8')\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n-header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n+header_greetings_style = os.getenv('XXPLS_HEADER_GREETINGS_STYLEXX', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #41",
        "line": 43,
        "description": [
          "header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #42",
        "line": 43,
        "description": [
          "header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #43",
        "line": 44,
        "description": [
          "quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -41,7 +41,7 @@\n task_done_style = os.getenv('PLS_TASK_DONE_STYLE', '#a0a0a0')\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n-quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n+quote_style = os.getenv('XXPLS_QUOTE_STYLEXX', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #44",
        "line": 44,
        "description": [
          "quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #45",
        "line": 44,
        "description": [
          "quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #46",
        "line": 45,
        "description": [
          "author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -42,7 +42,7 @@\n task_pending_style = os.getenv('PLS_TASK_PENDING_STYLE', '#bb93f2')\n header_greetings_style = os.getenv('PLS_HEADER_GREETINGS_STYLE', '#FFBF00')\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n-author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n+author_style = os.getenv('XXPLS_AUTHOR_STYLEXX', '#a0a0a0')\n \n background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #47",
        "line": 45,
        "description": [
          "author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #48",
        "line": 45,
        "description": [
          "author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')"
        ],
        "failure": []
      }
    ],
    "mutation_score": 66.66666666666666
  },
  {
    "function_name": "get_name",
    "function_scope": "47-48",
    "patterns": [
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "def get_name(self) -> str:",
        "context": "            self.full_settings_path, 'w', encoding='utf-8'\n        ) as config_file:\n            json.dump(data, config_file, indent=2)\n\n    def get_name(self) -> str:\n        return self.get_settings().get('user_name', '')\n\n    def get_tasks(self) -> List[dict]:\n        return self.get_settings().get('tasks', [])\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 48,
        "coloffset": 8,
        "linematch": "return self.get_settings().get('user_name', '')",
        "context": "        ) as config_file:\n            json.dump(data, config_file, indent=2)\n\n    def get_name(self) -> str:\n        return self.get_settings().get('user_name', '')\n\n    def get_tasks(self) -> List[dict]:\n        return self.get_settings().get('tasks', [])\n\n    def show_tasks_progress(self) -> bool:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #49",
        "line": 47,
        "description": [
          "background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -44,7 +44,7 @@\n quote_style = os.getenv('PLS_QUOTE_STYLE', '#a0a0a0')\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n-background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n+background_bar_style = os.getenv('XXPLS_BACKGROUND_BAR_STYLEXX', 'bar.back')\n complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\n finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #50",
        "line": 47,
        "description": [
          "background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #51",
        "line": 47,
        "description": [
          "background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #52",
        "line": 48,
        "description": [
          "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -45,7 +45,7 @@\n author_style = os.getenv('PLS_AUTHOR_STYLE', '#a0a0a0')\n \n background_bar_style = os.getenv('PLS_BACKGROUND_BAR_STYLE', 'bar.back')\n-complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')\n+complete_bar_style = os.getenv('XXPLS_COMPLETE_BAR_STYLEXX', 'bar.complete')\n finished_bar_style = os.getenv('PLS_FINISHED_BAR_STYLE', 'bar.finished')\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #53",
        "line": 48,
        "description": [
          "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')"
        ],
        "failure": []
      },
      {
        "name": "Mutant #54",
        "line": 48,
        "description": [
          "complete_bar_style = os.getenv('PLS_COMPLETE_BAR_STYLE', 'bar.complete')"
        ],
        "failure": []
      }
    ],
    "mutation_score": 66.66666666666666
  },
  {
    "function_name": "get_tasks",
    "function_scope": "50-51",
    "patterns": [
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "def get_tasks(self) -> List[dict]:",
        "context": "\n    def get_name(self) -> str:\n        return self.get_settings().get('user_name', '')\n\n    def get_tasks(self) -> List[dict]:\n        return self.get_settings().get('tasks', [])\n\n    def show_tasks_progress(self) -> bool:\n        return self.get_settings().get('show_task_progress', True)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 51,
        "coloffset": 8,
        "linematch": "return self.get_settings().get('tasks', [])",
        "context": "    def get_name(self) -> str:\n        return self.get_settings().get('user_name', '')\n\n    def get_tasks(self) -> List[dict]:\n        return self.get_settings().get('tasks', [])\n\n    def show_tasks_progress(self) -> bool:\n        return self.get_settings().get('show_task_progress', True)\n\n    def show_quotes(self) -> bool:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "show_tasks_progress",
    "function_scope": "53-54",
    "patterns": [
      {
        "lineno": 53,
        "coloffset": 4,
        "linematch": "def show_tasks_progress(self) -> bool:",
        "context": "\n    def get_tasks(self) -> List[dict]:\n        return self.get_settings().get('tasks', [])\n\n    def show_tasks_progress(self) -> bool:\n        return self.get_settings().get('show_task_progress', True)\n\n    def show_quotes(self) -> bool:\n        return self.get_settings().get('show_quotes', True)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 54,
        "coloffset": 8,
        "linematch": "return self.get_settings().get('show_task_progress', True)",
        "context": "    def get_tasks(self) -> List[dict]:\n        return self.get_settings().get('tasks', [])\n\n    def show_tasks_progress(self) -> bool:\n        return self.get_settings().get('show_task_progress', True)\n\n    def show_quotes(self) -> bool:\n        return self.get_settings().get('show_quotes', True)\n\n    def all_tasks_done(self) -> bool:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "show_quotes",
    "function_scope": "56-57",
    "patterns": [
      {
        "lineno": 56,
        "coloffset": 4,
        "linematch": "def show_quotes(self) -> bool:",
        "context": "\n    def show_tasks_progress(self) -> bool:\n        return self.get_settings().get('show_task_progress', True)\n\n    def show_quotes(self) -> bool:\n        return self.get_settings().get('show_quotes', True)\n\n    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 57,
        "coloffset": 8,
        "linematch": "return self.get_settings().get('show_quotes', True)",
        "context": "    def show_tasks_progress(self) -> bool:\n        return self.get_settings().get('show_task_progress', True)\n\n    def show_quotes(self) -> bool:\n        return self.get_settings().get('show_quotes', True)\n\n    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n\n    def get_all_tasks_undone(self) -> List[dict]:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #58",
        "line": 57,
        "description": [
          "    return shutil.get_terminal_size().columns // 2"
        ],
        "failure": []
      },
      {
        "name": "Mutant #59",
        "line": 57,
        "description": [
          "    return shutil.get_terminal_size().columns // 2"
        ],
        "failure": [
          {
            "inner": "--- pls_cli/please.py\n+++ pls_cli/please.py\n@@ -54,7 +54,7 @@\n \n \n def get_terminal_center_width() -> int:\n-    return shutil.get_terminal_size().columns // 2\n+    return shutil.get_terminal_size().columns // 3\n \n \n def center_print(\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 50.0
  },
  {
    "function_name": "all_tasks_done",
    "function_scope": "59-60",
    "patterns": [
      {
        "lineno": 59,
        "coloffset": 4,
        "linematch": "def all_tasks_done(self) -> bool:",
        "context": "\n    def show_quotes(self) -> bool:\n        return self.get_settings().get('show_quotes', True)\n\n    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 59,
        "coloffset": 4,
        "linematch": "def all_tasks_done(self) -> bool:",
        "context": "\n    def show_quotes(self) -> bool:\n        return self.get_settings().get('show_quotes', True)\n\n    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 60,
        "coloffset": 8,
        "linematch": "return all(task.get('done', '') for task in self.get_tasks())",
        "context": "    def show_quotes(self) -> bool:\n        return self.get_settings().get('show_quotes', True)\n\n    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "get_all_tasks_undone",
    "function_scope": "62-63",
    "patterns": [
      {
        "lineno": 62,
        "coloffset": 4,
        "linematch": "def get_all_tasks_undone(self) -> List[dict]:",
        "context": "\n    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 62,
        "coloffset": 4,
        "linematch": "def get_all_tasks_undone(self) -> List[dict]:",
        "context": "\n    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 63,
        "coloffset": 8,
        "linematch": "return [task for task in self.get_tasks() if not task['done']]",
        "context": "    def all_tasks_done(self) -> bool:\n        return all(task.get('done', '') for task in self.get_tasks())\n\n    def get_all_tasks_undone(self) -> List[dict]:\n        return [task for task in self.get_tasks() if not task['done']]\n\n    def count_tasks_done(self) -> int:\n        if not self.get_tasks():\n            return 0\n        return len(",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "get_rand_quote",
    "function_scope": "6-14",
    "patterns": [
      {
        "lineno": 6,
        "coloffset": 0,
        "linematch": "def get_rand_quote():",
        "context": "import os\nimport random\n\n\ndef get_rand_quote():\n    __location__ = os.path.realpath(\n        os.path.join(os.getcwd(), os.path.dirname(__file__))\n    )\n    with open(\n        os.path.join(__location__, 'quotes.json'), 'r', encoding='utf-8'",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 7,
        "coloffset": 4,
        "linematch": "__location__ = os.path.realpath(",
        "context": "import random\n\n\ndef get_rand_quote():\n    __location__ = os.path.realpath(\n        os.path.join(os.getcwd(), os.path.dirname(__file__))\n    )\n    with open(\n        os.path.join(__location__, 'quotes.json'), 'r', encoding='utf-8'\n    ) as quotes_file:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 10,
        "coloffset": 4,
        "linematch": "with open(",
        "context": "def get_rand_quote():\n    __location__ = os.path.realpath(\n        os.path.join(os.getcwd(), os.path.dirname(__file__))\n    )\n    with open(\n        os.path.join(__location__, 'quotes.json'), 'r', encoding='utf-8'\n    ) as quotes_file:\n        list_of_quotes = json.load(quotes_file)\n    return random.choice(list_of_quotes)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "return random.choice(list_of_quotes)",
        "context": "    with open(\n        os.path.join(__location__, 'quotes.json'), 'r', encoding='utf-8'\n    ) as quotes_file:\n        list_of_quotes = json.load(quotes_file)\n    return random.choice(list_of_quotes)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  }
]