[
  {
    "function_name": "version_callback",
    "function_scope": "13-16",
    "patterns": [
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "if value:",
        "context": "\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 13,
        "coloffset": 0,
        "linematch": "def version_callback(value: bool):",
        "context": "from typing import Optional\n\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 13,
        "coloffset": 0,
        "linematch": "def version_callback(value: bool):",
        "context": "from typing import Optional\n\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "if value:",
        "context": "\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "callback",
    "function_scope": "20-27",
    "patterns": [
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "if ctx.invoked_subcommand is None:",
        "context": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 24,
        "coloffset": 7,
        "linematch": "if ctx.invoked_subcommand is None:",
        "context": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 20,
        "coloffset": 0,
        "linematch": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):",
        "context": "        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 20,
        "coloffset": 0,
        "linematch": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):",
        "context": "        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 21,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "if ctx.invoked_subcommand is None:",
        "context": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #128",
        "line": 20,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #129",
        "line": 21,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #130",
        "line": 21,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #131",
        "line": 22,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #132",
        "line": 22,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #133",
        "line": 23,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
        ],
        "failure": []
      },
      {
        "name": "Mutant #134",
        "line": 23,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "add",
    "function_scope": "30-46",
    "patterns": [
      {
        "lineno": 38,
        "coloffset": 8,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            ",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 30,
        "coloffset": 0,
        "linematch": "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):",
        "context": "        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 30,
        "coloffset": 0,
        "linematch": "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):",
        "context": "        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 34,
        "coloffset": 4,
        "linematch": "path = os.getcwd()",
        "context": "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\",",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 35,
        "coloffset": 4,
        "linematch": "current_config = JsonDataOperations.read()",
        "context": "    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 37,
        "coloffset": 4,
        "linematch": "for project_item in current_config['projects']:",
        "context": "    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "current_config['projects'].append({'project_name':project_name, 'path':path})",
        "context": "             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            \n    current_config['projects'].append({'project_name':project_name, 'path':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 45,
        "coloffset": 4,
        "linematch": "JsonDataOperations.update(current_config)",
        "context": "            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            \n    current_config['projects'].append({'project_name':project_name, 'path':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 46,
        "coloffset": 4,
        "linematch": "typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)",
        "context": "            raise typer.Exit(code=1)\n            \n    current_config['projects'].append({'project_name':project_name, 'path':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #135",
        "line": 33,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #136",
        "line": 34,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #137",
        "line": 34,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #138",
        "line": 35,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #139",
        "line": 35,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #140",
        "line": 36,
        "description": [
          "    assert \"Project Name\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #141",
        "line": 36,
        "description": [
          "    assert \"Project Name\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #142",
        "line": 37,
        "description": [
          "    assert \"abc\" in result.stdout "
        ],
        "failure": []
      },
      {
        "name": "Mutant #143",
        "line": 37,
        "description": [
          "    assert \"abc\" in result.stdout "
        ],
        "failure": []
      },
      {
        "name": "Mutant #144",
        "line": 38,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -35,7 +35,7 @@\n     assert result.exit_code == 0\n     assert \"Project Name\" in result.stdout\n     assert \"abc\" in result.stdout \n-    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n+    assert \"XXSeems like you have not added any project yet!!!XX\" not in result.stdout \n \n def test_add_new_project(monkeypatch, config_with_project):\n     \"\"\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #145",
        "line": 38,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
        ],
        "failure": []
      }
    ],
    "mutation_score": 90.9090909090909
  },
  {
    "function_name": "see",
    "function_scope": "49-65",
    "patterns": [
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "if len(current_config['projects'])==0:",
        "context": "    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 49,
        "coloffset": 0,
        "linematch": "def see():",
        "context": "    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 49,
        "coloffset": 0,
        "linematch": "def see():",
        "context": "    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 53,
        "coloffset": 4,
        "linematch": "current_config = JsonDataOperations.read()",
        "context": "def see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "if len(current_config['projects'])==0:",
        "context": "    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 60,
        "coloffset": 4,
        "linematch": "col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)",
        "context": "        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 61,
        "coloffset": 4,
        "linematch": "typer.echo(col)",
        "context": "        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 62,
        "coloffset": 4,
        "linematch": "typer.echo(\"=======================\")",
        "context": "        raise typer.Exit()\n\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 63,
        "coloffset": 4,
        "linematch": "for project_item in current_config['projects']:",
        "context": "\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 65,
        "coloffset": 4,
        "linematch": "typer.echo(\"=======================\")",
        "context": "    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #146",
        "line": 50,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #147",
        "line": 51,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #148",
        "line": 53,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #149",
        "line": 53,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -50,7 +50,7 @@\n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n     monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n \n-    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n+    result = runner.invoke(app, [\"add\"],input=\"XXtest-nameXX\")\n     assert result.exit_code == 0\n     assert \"Project added successfully!!\" in result.stdout\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #150",
        "line": 53,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #151",
        "line": 54,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #152",
        "line": 54,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #153",
        "line": 55,
        "description": [
          "    assert \"Project added successfully!!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #154",
        "line": 55,
        "description": [
          "    assert \"Project added successfully!!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 88.88888888888889
  },
  {
    "function_name": "open",
    "function_scope": "68-89",
    "patterns": [
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "if found == False:",
        "context": "            os.system(current_config['default_editor'])\n            found = True\n            break\n\n    if found == False:\n        echo_text = project_name + \": Project Not Found!\"\n        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n        typer.echo(not_found,  err=True)\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 75,
        "coloffset": 8,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item['path'])\n            os.system(current_config['default_editor'])\n            found = True",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 68,
        "coloffset": 0,
        "linematch": "def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
        "context": "        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 68,
        "coloffset": 0,
        "linematch": "def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
        "context": "        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 69,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "current_config = JsonDataOperations.read()",
        "context": "def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 73,
        "coloffset": 4,
        "linematch": "found = False",
        "context": "    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item['path'])",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 74,
        "coloffset": 4,
        "linematch": "for project_item in current_config['projects']:",
        "context": "    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item['path'])\n            os.system(current_config['default_editor'])",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "if found == False:",
        "context": "            os.system(current_config['default_editor'])\n            found = True\n            break\n\n    if found == False:\n        echo_text = project_name + \": Project Not Found!\"\n        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n        typer.echo(not_found,  err=True)\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #156",
        "line": 68,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #157",
        "line": 70,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #158",
        "line": 70,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #159",
        "line": 70,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #160",
        "line": 71,
        "description": [
          "    assert result.exit_code == 1"
        ],
        "failure": []
      },
      {
        "name": "Mutant #161",
        "line": 71,
        "description": [
          "    assert result.exit_code == 1"
        ],
        "failure": []
      },
      {
        "name": "Mutant #162",
        "line": 72,
        "description": [
          "    assert \"Project with this name already present!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #163",
        "line": 72,
        "description": [
          "    assert \"Project with this name already present!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #164",
        "line": 81,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #165",
        "line": 82,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"test_project\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #166",
        "line": 82,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"test_project\"])"
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -79,7 +79,7 @@\n         return config_with_project\n     \n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n-    result = runner.invoke(app, [\"open\", \"test_project\"])\n+    result = runner.invoke(app, [\"open\", \"XXtest_projectXX\"])\n     assert result.exit_code == 0\n     assert \"Project Not Found!\" in result.stdout\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #167",
        "line": 82,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"test_project\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #168",
        "line": 83,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #169",
        "line": 83,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #170",
        "line": 84,
        "description": [
          "    assert \"Project Not Found!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #171",
        "line": 84,
        "description": [
          "    assert \"Project Not Found!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 93.75
  },
  {
    "function_name": "remove",
    "function_scope": "92-112",
    "patterns": [
      {
        "lineno": 107,
        "coloffset": 4,
        "linematch": "if found==False:",
        "context": "            found = True\n            JsonDataOperations.update(current_config)\n            break\n\n    if found==False:\n        echo_text = typer.style(\"Project with this name is not present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n        typer.echo(echo_text, err=True)\n    else:\n        typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 101,
        "coloffset": 8,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 101,
        "coloffset": 11,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 101,
        "coloffset": 11,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 101,
        "coloffset": 11,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 101,
        "coloffset": 11,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 101,
        "coloffset": 11,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 101,
        "coloffset": 11,
        "linematch": "if project_item['project_name']==project_name:",
        "context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 92,
        "coloffset": 0,
        "linematch": "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
        "context": "        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 92,
        "coloffset": 0,
        "linematch": "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
        "context": "        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 93,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 96,
        "coloffset": 4,
        "linematch": "current_config = JsonDataOperations.read()",
        "context": "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 97,
        "coloffset": 4,
        "linematch": "index = -1",
        "context": "    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 98,
        "coloffset": 4,
        "linematch": "found = False",
        "context": "    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 99,
        "coloffset": 4,
        "linematch": "for project_item in current_config['projects']:",
        "context": "    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 107,
        "coloffset": 4,
        "linematch": "if found==False:",
        "context": "            found = True\n            JsonDataOperations.update(current_config)\n            break\n\n    if found==False:\n        echo_text = typer.style(\"Project with this name is not present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n        typer.echo(echo_text, err=True)\n    else:\n        typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #172",
        "line": 99,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #173",
        "line": 100,
        "description": [
          "    monkeypatch.setattr(os, 'system', mock_os_sytem)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #174",
        "line": 101,
        "description": [
          "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #175",
        "line": 103,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"abc\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #176",
        "line": 103,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"abc\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #177",
        "line": 103,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"abc\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #178",
        "line": 104,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #179",
        "line": 104,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #180",
        "line": 105,
        "description": [
          "    assert \"Project Not Found!\" not in result.stdout"
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -102,7 +102,7 @@\n \n     result = runner.invoke(app, [\"open\", \"abc\"])\n     assert result.exit_code == 0\n-    assert \"Project Not Found!\" not in result.stdout\n+    assert \"XXProject Not Found!XX\" not in result.stdout\n     assert \"Project Found!\" in result.stdout\n \n def test_remove_not_present_project(monkeypatch, config_with_project):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #181",
        "line": 105,
        "description": [
          "    assert \"Project Not Found!\" not in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #182",
        "line": 106,
        "description": [
          "    assert \"Project Found!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #183",
        "line": 106,
        "description": [
          "    assert \"Project Found!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 91.66666666666666
  },
  {
    "function_name": "list_projects",
    "function_scope": "42-51",
    "patterns": [
      {
        "lineno": 49,
        "coloffset": 12,
        "linematch": "if project_item['project_name'].startswith(incomplete):",
        "context": "        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "def list_projects(cls,incomplete: str):",
        "context": "    editor_list = ['VSCode','Sublime Text']\n\n\n    @classmethod\n    def list_projects(cls,incomplete: str):\n        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 43,
        "coloffset": 8,
        "linematch": "\"\"\"",
        "context": "\n\n    @classmethod\n    def list_projects(cls,incomplete: str):\n        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 46,
        "coloffset": 8,
        "linematch": "current_config = JsonDataOperations.read()",
        "context": "    def list_projects(cls,incomplete: str):\n        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 47,
        "coloffset": 8,
        "linematch": "project_name_list = []",
        "context": "        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 48,
        "coloffset": 8,
        "linematch": "for project_item in current_config['projects']:",
        "context": "        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 51,
        "coloffset": 8,
        "linematch": "return project_name_list",
        "context": "        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #146",
        "line": 50,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #147",
        "line": 51,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "list_of_editors",
    "function_scope": "54-62",
    "patterns": [
      {
        "lineno": 60,
        "coloffset": 12,
        "linematch": "if editor.startswith(incomplete):",
        "context": "        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "def list_of_editors(cls,incomplete:str):",
        "context": "                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 55,
        "coloffset": 8,
        "linematch": "\"\"\"",
        "context": "        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 58,
        "coloffset": 8,
        "linematch": "editors_matched = []",
        "context": "    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 59,
        "coloffset": 8,
        "linematch": "for editor in cls.editor_list:",
        "context": "        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 62,
        "coloffset": 8,
        "linematch": "return editor",
        "context": "        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #151",
        "line": 54,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #152",
        "line": 54,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #153",
        "line": 55,
        "description": [
          "    assert \"Project added successfully!!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #154",
        "line": 55,
        "description": [
          "    assert \"Project added successfully!!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_version",
    "function_scope": "4-8",
    "patterns": [
      {
        "lineno": 8,
        "coloffset": 11,
        "linematch": "assert __version__ == '1.0.1'",
        "context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 4,
        "coloffset": 0,
        "linematch": "def test_version():",
        "context": "from code_opener_cli import __version__\n\n\ndef test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 8,
        "coloffset": 4,
        "linematch": "assert __version__ == '1.0.1'",
        "context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 5,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "from code_opener_cli import __version__\n\n\ndef test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 8,
        "coloffset": 4,
        "linematch": "assert __version__ == '1.0.1'",
        "context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 5,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "from code_opener_cli import __version__\n\n\ndef test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 8,
        "coloffset": 4,
        "linematch": "assert __version__ == '1.0.1'",
        "context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_remove_project_present",
    "function_scope": "121-136",
    "patterns": [
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 135,
        "coloffset": 11,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 121,
        "coloffset": 0,
        "linematch": "def test_remove_project_present(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    ",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 128,
        "coloffset": 4,
        "linematch": "def mock_update(config_data):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 121,
        "coloffset": 0,
        "linematch": "def test_remove_project_present(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 135,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 136,
        "coloffset": 4,
        "linematch": "assert \"Removed Successfully!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 122,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    ",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 128,
        "coloffset": 4,
        "linematch": "def mock_update(config_data):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 131,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 132,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
        "context": "    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 134,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 135,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 136,
        "coloffset": 4,
        "linematch": "assert \"Removed Successfully!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 122,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 126,
        "coloffset": 8,
        "linematch": "return config_with_project",
        "context": "    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 128,
        "coloffset": 4,
        "linematch": "def mock_update(config_data):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 129,
        "coloffset": 8,
        "linematch": "return None",
        "context": "    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 131,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 132,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
        "context": "    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 134,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 135,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 136,
        "coloffset": 4,
        "linematch": "assert \"Removed Successfully!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #192",
        "line": 131,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #193",
        "line": 132,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #194",
        "line": 134,
        "description": [
          "    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #195",
        "line": 134,
        "description": [
          "    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #196",
        "line": 134,
        "description": [
          "    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #197",
        "line": 135,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #198",
        "line": 135,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #199",
        "line": 136,
        "description": [
          "    assert \"Removed Successfully!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #200",
        "line": 136,
        "description": [
          "    assert \"Removed Successfully!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "config_with_project",
    "function_scope": "7-8",
    "patterns": [
      {
        "lineno": 7,
        "coloffset": 0,
        "linematch": "def config_with_project():",
        "context": "\"\"\"\nimport pytest\n\n@pytest.fixture(scope=\"package\")\ndef config_with_project():\n    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 8,
        "coloffset": 4,
        "linematch": "return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}",
        "context": "import pytest\n\n@pytest.fixture(scope=\"package\")\ndef config_with_project():\n    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "config_with_no_project",
    "function_scope": "11-12",
    "patterns": [
      {
        "lineno": 11,
        "coloffset": 0,
        "linematch": "def config_with_no_project():",
        "context": "def config_with_project():\n    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 12,
        "coloffset": 4,
        "linematch": "return {\"default_editor\": \"code .\", \"projects\": []}",
        "context": "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #127",
        "line": 11,
        "description": [
          "runner = CliRunner()"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_see_with_no_projects",
    "function_scope": "13-23",
    "patterns": [
      {
        "lineno": 13,
        "coloffset": 0,
        "linematch": "def test_see_with_no_projects(monkeypatch, config_with_no_project):",
        "context": "\n# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 17,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 13,
        "coloffset": 0,
        "linematch": "def test_see_with_no_projects(monkeypatch, config_with_no_project):",
        "context": "\n# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 22,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 23,
        "coloffset": 4,
        "linematch": "assert \"Seems like you have not added any project yet!!!\" in result.stdout ",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 17,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 21,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"see\"])",
        "context": "    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 22,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 23,
        "coloffset": 4,
        "linematch": "assert \"Seems like you have not added any project yet!!!\" in result.stdout ",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 17,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 18,
        "coloffset": 8,
        "linematch": "return config_with_no_project",
        "context": "    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 21,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"see\"])",
        "context": "    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 22,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 23,
        "coloffset": 4,
        "linematch": "assert \"Seems like you have not added any project yet!!!\" in result.stdout ",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #128",
        "line": 20,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #129",
        "line": 21,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #130",
        "line": 21,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #131",
        "line": 22,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #132",
        "line": 22,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #133",
        "line": 23,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
        ],
        "failure": []
      },
      {
        "name": "Mutant #134",
        "line": 23,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_see_with_projects",
    "function_scope": "26-38",
    "patterns": [
      {
        "lineno": 26,
        "coloffset": 0,
        "linematch": "def test_see_with_projects(monkeypatch, config_with_project):",
        "context": "    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 26,
        "coloffset": 0,
        "linematch": "def test_see_with_projects(monkeypatch, config_with_project):",
        "context": "    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 35,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "assert \"Project Name\" in result.stdout",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 37,
        "coloffset": 4,
        "linematch": "assert \"abc\" in result.stdout ",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
        "context": "    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 27,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 34,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"see\"])",
        "context": "    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 35,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "assert \"Project Name\" in result.stdout",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 37,
        "coloffset": 4,
        "linematch": "assert \"abc\" in result.stdout ",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
        "context": "    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 27,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 31,
        "coloffset": 8,
        "linematch": "return config_with_project",
        "context": "    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 34,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"see\"])",
        "context": "    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 35,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "assert \"Project Name\" in result.stdout",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 37,
        "coloffset": 4,
        "linematch": "assert \"abc\" in result.stdout ",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
        "context": "    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #135",
        "line": 33,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #136",
        "line": 34,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #137",
        "line": 34,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #138",
        "line": 35,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #139",
        "line": 35,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #140",
        "line": 36,
        "description": [
          "    assert \"Project Name\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #141",
        "line": 36,
        "description": [
          "    assert \"Project Name\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #142",
        "line": 37,
        "description": [
          "    assert \"abc\" in result.stdout "
        ],
        "failure": []
      },
      {
        "name": "Mutant #143",
        "line": 37,
        "description": [
          "    assert \"abc\" in result.stdout "
        ],
        "failure": []
      },
      {
        "name": "Mutant #144",
        "line": 38,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -35,7 +35,7 @@\n     assert result.exit_code == 0\n     assert \"Project Name\" in result.stdout\n     assert \"abc\" in result.stdout \n-    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n+    assert \"XXSeems like you have not added any project yet!!!XX\" not in result.stdout \n \n def test_add_new_project(monkeypatch, config_with_project):\n     \"\"\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #145",
        "line": 38,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
        ],
        "failure": []
      }
    ],
    "mutation_score": 90.9090909090909
  },
  {
    "function_name": "test_add_new_project",
    "function_scope": "40-55",
    "patterns": [
      {
        "lineno": 40,
        "coloffset": 0,
        "linematch": "def test_add_new_project(monkeypatch, config_with_project):",
        "context": "    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "def mock_update(config_data):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 40,
        "coloffset": 0,
        "linematch": "def test_add_new_project(monkeypatch, config_with_project):",
        "context": "    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 55,
        "coloffset": 4,
        "linematch": "assert \"Project added successfully!!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "def mock_update(config_data):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
        "context": "    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 53,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"add\"],input=\"test-name\")",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 55,
        "coloffset": 4,
        "linematch": "assert \"Project added successfully!!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 45,
        "coloffset": 8,
        "linematch": "return config_with_project",
        "context": "    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "def mock_update(config_data):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 48,
        "coloffset": 8,
        "linematch": "return None",
        "context": "    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
        "context": "    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 53,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"add\"],input=\"test-name\")",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 55,
        "coloffset": 4,
        "linematch": "assert \"Project added successfully!!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #146",
        "line": 50,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #147",
        "line": 51,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #148",
        "line": 53,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #149",
        "line": 53,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -50,7 +50,7 @@\n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n     monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n \n-    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n+    result = runner.invoke(app, [\"add\"],input=\"XXtest-nameXX\")\n     assert result.exit_code == 0\n     assert \"Project added successfully!!\" in result.stdout\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #150",
        "line": 53,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #151",
        "line": 54,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #152",
        "line": 54,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #153",
        "line": 55,
        "description": [
          "    assert \"Project added successfully!!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #154",
        "line": 55,
        "description": [
          "    assert \"Project added successfully!!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 88.88888888888889
  },
  {
    "function_name": "test_add_present_project",
    "function_scope": "57-72",
    "patterns": [
      {
        "lineno": 57,
        "coloffset": 0,
        "linematch": "def test_add_present_project(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 61,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 64,
        "coloffset": 4,
        "linematch": "def mock_update(config_file):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 57,
        "coloffset": 0,
        "linematch": "def test_add_present_project(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 1",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "assert \"Project with this name already present!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 58,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 61,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 64,
        "coloffset": 4,
        "linematch": "def mock_update(config_file):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 67,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 68,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
        "context": "    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"add\"],input=\"abc\")",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 1",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "assert \"Project with this name already present!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 58,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 61,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 62,
        "coloffset": 8,
        "linematch": "return config_with_project",
        "context": "    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 64,
        "coloffset": 4,
        "linematch": "def mock_update(config_file):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 65,
        "coloffset": 8,
        "linematch": "return None",
        "context": "    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 67,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 68,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
        "context": "    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"add\"],input=\"abc\")",
        "context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 1",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "assert \"Project with this name already present!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #155",
        "line": 67,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #156",
        "line": 68,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #157",
        "line": 70,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #158",
        "line": 70,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #159",
        "line": 70,
        "description": [
          "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #160",
        "line": 71,
        "description": [
          "    assert result.exit_code == 1"
        ],
        "failure": []
      },
      {
        "name": "Mutant #161",
        "line": 71,
        "description": [
          "    assert result.exit_code == 1"
        ],
        "failure": []
      },
      {
        "name": "Mutant #162",
        "line": 72,
        "description": [
          "    assert \"Project with this name already present!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #163",
        "line": 72,
        "description": [
          "    assert \"Project with this name already present!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_open_project_not_present",
    "function_scope": "74-84",
    "patterns": [
      {
        "lineno": 74,
        "coloffset": 0,
        "linematch": "def test_open_project_not_present(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 78,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 74,
        "coloffset": 0,
        "linematch": "def test_open_project_not_present(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 84,
        "coloffset": 4,
        "linematch": "assert \"Project Not Found!\" in result.stdout",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 75,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 78,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 81,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 82,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"open\", \"test_project\"])",
        "context": "    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 84,
        "coloffset": 4,
        "linematch": "assert \"Project Not Found!\" in result.stdout",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 75,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 78,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 79,
        "coloffset": 8,
        "linematch": "return config_with_project",
        "context": "    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 81,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 82,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"open\", \"test_project\"])",
        "context": "    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 84,
        "coloffset": 4,
        "linematch": "assert \"Project Not Found!\" in result.stdout",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #164",
        "line": 81,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #165",
        "line": 82,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"test_project\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #166",
        "line": 82,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"test_project\"])"
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -79,7 +79,7 @@\n         return config_with_project\n     \n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n-    result = runner.invoke(app, [\"open\", \"test_project\"])\n+    result = runner.invoke(app, [\"open\", \"XXtest_projectXX\"])\n     assert result.exit_code == 0\n     assert \"Project Not Found!\" in result.stdout\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #167",
        "line": 82,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"test_project\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #168",
        "line": 83,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #169",
        "line": 83,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #170",
        "line": 84,
        "description": [
          "    assert \"Project Not Found!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #171",
        "line": 84,
        "description": [
          "    assert \"Project Not Found!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 87.5
  },
  {
    "function_name": "test_open_project_present",
    "function_scope": "86-106",
    "patterns": [
      {
        "lineno": 86,
        "coloffset": 0,
        "linematch": "def test_open_project_present(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 90,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    ",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 93,
        "coloffset": 4,
        "linematch": "def mock_os_sytem(command):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 96,
        "coloffset": 4,
        "linematch": "def mock_os_chdir(dir_name):",
        "context": "    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 86,
        "coloffset": 0,
        "linematch": "def test_open_project_present(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 104,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 105,
        "coloffset": 4,
        "linematch": "assert \"Project Not Found!\" not in result.stdout",
        "context": "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 106,
        "coloffset": 4,
        "linematch": "assert \"Project Found!\" in result.stdout",
        "context": "\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 87,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 90,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    ",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 93,
        "coloffset": 4,
        "linematch": "def mock_os_sytem(command):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 96,
        "coloffset": 4,
        "linematch": "def mock_os_chdir(dir_name):",
        "context": "    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 99,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 100,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(os, 'system', mock_os_sytem)",
        "context": "    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 101,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(os, 'chdir', mock_os_chdir)",
        "context": "        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 103,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"open\", \"abc\"])",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 104,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 105,
        "coloffset": 4,
        "linematch": "assert \"Project Not Found!\" not in result.stdout",
        "context": "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 106,
        "coloffset": 4,
        "linematch": "assert \"Project Found!\" in result.stdout",
        "context": "\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 87,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 90,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 91,
        "coloffset": 8,
        "linematch": "return config_with_project",
        "context": "    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 93,
        "coloffset": 4,
        "linematch": "def mock_os_sytem(command):",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 94,
        "coloffset": 8,
        "linematch": "return None",
        "context": "    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 96,
        "coloffset": 4,
        "linematch": "def mock_os_chdir(dir_name):",
        "context": "    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 97,
        "coloffset": 8,
        "linematch": "return None",
        "context": "    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 99,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 100,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(os, 'system', mock_os_sytem)",
        "context": "    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 101,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(os, 'chdir', mock_os_chdir)",
        "context": "        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 103,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"open\", \"abc\"])",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 104,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 105,
        "coloffset": 4,
        "linematch": "assert \"Project Not Found!\" not in result.stdout",
        "context": "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 106,
        "coloffset": 4,
        "linematch": "assert \"Project Found!\" in result.stdout",
        "context": "\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 86,
        "coloffset": 0,
        "linematch": "def test_open_project_present(monkeypatch, config_with_project):",
        "context": "    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[count(body//Return) > 2]",
        "check_id": "MRET001",
        "check_name": "multiple-returns-in-function"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #172",
        "line": 99,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #173",
        "line": 100,
        "description": [
          "    monkeypatch.setattr(os, 'system', mock_os_sytem)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #174",
        "line": 101,
        "description": [
          "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #175",
        "line": 103,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"abc\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #176",
        "line": 103,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"abc\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #177",
        "line": 103,
        "description": [
          "    result = runner.invoke(app, [\"open\", \"abc\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #178",
        "line": 104,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #179",
        "line": 104,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #180",
        "line": 105,
        "description": [
          "    assert \"Project Not Found!\" not in result.stdout"
        ],
        "failure": [
          {
            "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -102,7 +102,7 @@\n \n     result = runner.invoke(app, [\"open\", \"abc\"])\n     assert result.exit_code == 0\n-    assert \"Project Not Found!\" not in result.stdout\n+    assert \"XXProject Not Found!XX\" not in result.stdout\n     assert \"Project Found!\" in result.stdout\n \n def test_remove_not_present_project(monkeypatch, config_with_project):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #181",
        "line": 105,
        "description": [
          "    assert \"Project Not Found!\" not in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #182",
        "line": 106,
        "description": [
          "    assert \"Project Found!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #183",
        "line": 106,
        "description": [
          "    assert \"Project Found!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 91.66666666666666
  },
  {
    "function_name": "test_remove_not_present_project",
    "function_scope": "108-119",
    "patterns": [
      {
        "lineno": 108,
        "coloffset": 0,
        "linematch": "def test_remove_not_present_project(monkeypatch, config_with_project):",
        "context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 112,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 108,
        "coloffset": 0,
        "linematch": "def test_remove_not_present_project(monkeypatch, config_with_project):",
        "context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 118,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 119,
        "coloffset": 4,
        "linematch": "assert \"Project with this name is not present!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/Assert",
        "check_id": "NOA001",
        "check_name": "number-of-assertions"
      },
      {
        "lineno": 109,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 112,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 115,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 117,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")",
        "context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 118,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 119,
        "coloffset": 4,
        "linematch": "assert \"Project with this name is not present!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 109,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 112,
        "coloffset": 4,
        "linematch": "def mock_read():",
        "context": "def test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 113,
        "coloffset": 8,
        "linematch": "return config_with_project",
        "context": "    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 115,
        "coloffset": 4,
        "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
        "context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 117,
        "coloffset": 4,
        "linematch": "result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")",
        "context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 118,
        "coloffset": 4,
        "linematch": "assert result.exit_code == 0",
        "context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 119,
        "coloffset": 4,
        "linematch": "assert \"Project with this name is not present!\" in result.stdout",
        "context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #184",
        "line": 115,
        "description": [
          "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #185",
        "line": 117,
        "description": [
          "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #186",
        "line": 117,
        "description": [
          "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #187",
        "line": 117,
        "description": [
          "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #188",
        "line": 118,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #189",
        "line": 118,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #190",
        "line": 119,
        "description": [
          "    assert \"Project with this name is not present!\" in result.stdout"
        ],
        "failure": []
      },
      {
        "name": "Mutant #191",
        "line": 119,
        "description": [
          "    assert \"Project with this name is not present!\" in result.stdout"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "update",
    "function_scope": "13-18",
    "patterns": [
      {
        "lineno": 13,
        "coloffset": 4,
        "linematch": "def update(cls,config_data):",
        "context": "    This class is used for operations on settings.json file.\n    setting.json file servers as basic configuration for the project\n    \"\"\"\n    @classmethod\n    def update(cls,config_data):\n        \"\"\"\n        Creates the setting.json file\n        \"\"\"\n        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 14,
        "coloffset": 8,
        "linematch": "\"\"\"",
        "context": "    setting.json file servers as basic configuration for the project\n    \"\"\"\n    @classmethod\n    def update(cls,config_data):\n        \"\"\"\n        Creates the setting.json file\n        \"\"\"\n        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 17,
        "coloffset": 8,
        "linematch": "with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:",
        "context": "    def update(cls,config_data):\n        \"\"\"\n        Creates the setting.json file\n        \"\"\"\n        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        \"\"\" ",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "read",
    "function_scope": "21-28",
    "patterns": [
      {
        "lineno": 21,
        "coloffset": 4,
        "linematch": "def read(cls):",
        "context": "        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 22,
        "coloffset": 8,
        "linematch": "\"\"\" ",
        "context": "            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 25,
        "coloffset": 8,
        "linematch": "f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)",
        "context": "    def read(cls):\n        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 26,
        "coloffset": 8,
        "linematch": "data = json.load(f)",
        "context": "        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 27,
        "coloffset": 8,
        "linematch": "f.close()",
        "context": "        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 28,
        "coloffset": 8,
        "linematch": "return data",
        "context": "        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:\n    \"\"\"\n    This class is used for providing autocomplete suggestions",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #129",
        "line": 21,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #130",
        "line": 21,
        "description": [
          "    result = runner.invoke(app, [\"see\"])"
        ],
        "failure": []
      },
      {
        "name": "Mutant #131",
        "line": 22,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #132",
        "line": 22,
        "description": [
          "    assert result.exit_code == 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #133",
        "line": 23,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
        ],
        "failure": []
      },
      {
        "name": "Mutant #134",
        "line": 23,
        "description": [
          "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  }
]