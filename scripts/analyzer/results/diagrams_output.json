[
  {
    "function_name": "pre_mutation",
    "function_scope": "3-11",
    "patterns": [
      {
        "lineno": 6,
        "coloffset": 4,
        "linematch": "if any(op in context.source for op in arithmetic_operators):",
        "context": "\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return\n    else:\n        # Skip all other mutations\n        context.skip = True",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 3,
        "coloffset": 0,
        "linematch": "def pre_mutation(context):",
        "context": "from mutmut import MutationID, mutate\n\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 3,
        "coloffset": 0,
        "linematch": "def pre_mutation(context):",
        "context": "from mutmut import MutationID, mutate\n\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 4,
        "coloffset": 4,
        "linematch": "arithmetic_operators = ['+', '-', '*', '/']",
        "context": "from mutmut import MutationID, mutate\n\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return\n    else:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 6,
        "coloffset": 4,
        "linematch": "if any(op in context.source for op in arithmetic_operators):",
        "context": "\ndef pre_mutation(context):\n    arithmetic_operators = ['+', '-', '*', '/']\n    \n    if any(op in context.source for op in arithmetic_operators):\n        # Allow arithmetic operator mutations\n        return\n    else:\n        # Skip all other mutations\n        context.skip = True",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #367",
        "line": 9,
        "description": [
          "    _provider = \"openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = \"openstack\"\n+    _provider = \"XXopenstackXX\"\n     _icon_dir = \"resources/openstack\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #368",
        "line": 9,
        "description": [
          "    _provider = \"openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = \"openstack\"\n+    _provider = None\n     _icon_dir = \"resources/openstack\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #369",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = \"openstack\"\n-    _icon_dir = \"resources/openstack\"\n+    _icon_dir = \"XXresources/openstackXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #370",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = \"openstack\"\n-    _icon_dir = \"resources/openstack\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #473",
        "line": 5,
        "description": [
          "    _provider = \"outscale\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -2,7 +2,7 @@\n \n \n class _Outscale(Node):\n-    _provider = \"outscale\"\n+    _provider = \"XXoutscaleXX\"\n     _icon_dir = \"resources/outscale\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #474",
        "line": 5,
        "description": [
          "    _provider = \"outscale\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -2,7 +2,7 @@\n \n \n class _Outscale(Node):\n-    _provider = \"outscale\"\n+    _provider = None\n     _icon_dir = \"resources/outscale\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #475",
        "line": 6,
        "description": [
          "    _icon_dir = \"resources/outscale\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -3,7 +3,7 @@\n \n class _Outscale(Node):\n     _provider = \"outscale\"\n-    _icon_dir = \"resources/outscale\"\n+    _icon_dir = \"XXresources/outscaleXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #476",
        "line": 6,
        "description": [
          "    _icon_dir = \"resources/outscale\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -3,7 +3,7 @@\n \n class _Outscale(Node):\n     _provider = \"outscale\"\n-    _icon_dir = \"resources/outscale\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #477",
        "line": 8,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = \"outscale\"\n     _icon_dir = \"resources/outscale\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #478",
        "line": 8,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = \"outscale\"\n     _icon_dir = \"resources/outscale\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #566",
        "line": 9,
        "description": [
          "    _provider = \"elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = \"elastic\"\n+    _provider = \"XXelasticXX\"\n     _icon_dir = \"resources/elastic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #567",
        "line": 9,
        "description": [
          "    _provider = \"elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = \"elastic\"\n+    _provider = None\n     _icon_dir = \"resources/elastic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #568",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = \"elastic\"\n-    _icon_dir = \"resources/elastic\"\n+    _icon_dir = \"XXresources/elasticXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #569",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = \"elastic\"\n-    _icon_dir = \"resources/elastic\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #744",
        "line": 9,
        "description": [
          "    _provider = \"azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = \"azure\"\n+    _provider = \"XXazureXX\"\n     _icon_dir = \"resources/azure\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #745",
        "line": 9,
        "description": [
          "    _provider = \"azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = \"azure\"\n+    _provider = None\n     _icon_dir = \"resources/azure\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #746",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = \"azure\"\n-    _icon_dir = \"resources/azure\"\n+    _icon_dir = \"XXresources/azureXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #747",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = \"azure\"\n-    _icon_dir = \"resources/azure\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1402",
        "line": 9,
        "description": [
          "    _provider = \"onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = \"onprem\"\n+    _provider = \"XXonpremXX\"\n     _icon_dir = \"resources/onprem\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1403",
        "line": 9,
        "description": [
          "    _provider = \"onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = \"onprem\"\n+    _provider = None\n     _icon_dir = \"resources/onprem\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1404",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = \"onprem\"\n-    _icon_dir = \"resources/onprem\"\n+    _icon_dir = \"XXresources/onpremXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1405",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = \"onprem\"\n-    _icon_dir = \"resources/onprem\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1710",
        "line": 9,
        "description": [
          "    _provider = \"k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = \"k8s\"\n+    _provider = \"XXk8sXX\"\n     _icon_dir = \"resources/k8s\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1711",
        "line": 9,
        "description": [
          "    _provider = \"k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = \"k8s\"\n+    _provider = None\n     _icon_dir = \"resources/k8s\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1712",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = \"k8s\"\n-    _icon_dir = \"resources/k8s\"\n+    _icon_dir = \"XXresources/k8sXX\"\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1713",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = \"k8s\"\n-    _icon_dir = \"resources/k8s\"\n+    _icon_dir = None\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1828",
        "line": 9,
        "description": [
          "    _provider = \"digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = \"digitalocean\"\n+    _provider = \"XXdigitaloceanXX\"\n     _icon_dir = \"resources/digitalocean\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1829",
        "line": 9,
        "description": [
          "    _provider = \"digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = \"digitalocean\"\n+    _provider = None\n     _icon_dir = \"resources/digitalocean\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1830",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = \"digitalocean\"\n-    _icon_dir = \"resources/digitalocean\"\n+    _icon_dir = \"XXresources/digitaloceanXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1831",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = \"digitalocean\"\n-    _icon_dir = \"resources/digitalocean\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2048",
        "line": 9,
        "description": [
          "    _provider = \"oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = \"oci\"\n+    _provider = \"XXociXX\"\n     _icon_dir = \"resources/oci\"\n \n     fontcolor = \"#312D2A\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2049",
        "line": 9,
        "description": [
          "    _provider = \"oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = \"oci\"\n+    _provider = None\n     _icon_dir = \"resources/oci\"\n \n     fontcolor = \"#312D2A\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2050",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = \"oci\"\n-    _icon_dir = \"resources/oci\"\n+    _icon_dir = \"XXresources/ociXX\"\n \n     fontcolor = \"#312D2A\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2051",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = \"oci\"\n-    _icon_dir = \"resources/oci\"\n+    _icon_dir = None\n \n     fontcolor = \"#312D2A\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2257",
        "line": 9,
        "description": [
          "    _provider = \"gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = \"gcp\"\n+    _provider = \"XXgcpXX\"\n     _icon_dir = \"resources/gcp\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2258",
        "line": 9,
        "description": [
          "    _provider = \"gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = \"gcp\"\n+    _provider = None\n     _icon_dir = \"resources/gcp\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2259",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = \"gcp\"\n-    _icon_dir = \"resources/gcp\"\n+    _icon_dir = \"XXresources/gcpXX\"\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2260",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = \"gcp\"\n-    _icon_dir = \"resources/gcp\"\n+    _icon_dir = None\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2572",
        "line": 9,
        "description": [
          "    _provider = \"alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = \"alibabacloud\"\n+    _provider = \"XXalibabacloudXX\"\n     _icon_dir = \"resources/alibabacloud\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2573",
        "line": 9,
        "description": [
          "    _provider = \"alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = \"alibabacloud\"\n+    _provider = None\n     _icon_dir = \"resources/alibabacloud\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2574",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = \"alibabacloud\"\n-    _icon_dir = \"resources/alibabacloud\"\n+    _icon_dir = \"XXresources/alibabacloudXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2575",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = \"alibabacloud\"\n-    _icon_dir = \"resources/alibabacloud\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2889",
        "line": 9,
        "description": [
          "    _provider = \"ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = \"ibm\"\n+    _provider = \"XXibmXX\"\n     _icon_dir = \"resources/ibm\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2890",
        "line": 9,
        "description": [
          "    _provider = \"ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = \"ibm\"\n+    _provider = None\n     _icon_dir = \"resources/ibm\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2891",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = \"ibm\"\n-    _icon_dir = \"resources/ibm\"\n+    _icon_dir = \"XXresources/ibmXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2892",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = \"ibm\"\n-    _icon_dir = \"resources/ibm\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3194",
        "line": 9,
        "description": [
          "    _provider = \"firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = \"firebase\"\n+    _provider = \"XXfirebaseXX\"\n     _icon_dir = \"resources/firebase\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3195",
        "line": 9,
        "description": [
          "    _provider = \"firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = \"firebase\"\n+    _provider = None\n     _icon_dir = \"resources/firebase\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3196",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = \"firebase\"\n-    _icon_dir = \"resources/firebase\"\n+    _icon_dir = \"XXresources/firebaseXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3197",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = \"firebase\"\n-    _icon_dir = \"resources/firebase\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3276",
        "line": 9,
        "description": [
          "    _provider = \"programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = \"programming\"\n+    _provider = \"XXprogrammingXX\"\n     _icon_dir = \"resources/programming\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3277",
        "line": 9,
        "description": [
          "    _provider = \"programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = \"programming\"\n+    _provider = None\n     _icon_dir = \"resources/programming\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3278",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = \"programming\"\n-    _icon_dir = \"resources/programming\"\n+    _icon_dir = \"XXresources/programmingXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3279",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = \"programming\"\n-    _icon_dir = \"resources/programming\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3446",
        "line": 9,
        "description": [
          "    provider = \"generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = \"generic\"\n+    provider = \"XXgenericXX\"\n     _icon_dir = \"resources/generic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3447",
        "line": 9,
        "description": [
          "    provider = \"generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = \"generic\"\n+    provider = None\n     _icon_dir = \"resources/generic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3448",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = \"generic\"\n-    _icon_dir = \"resources/generic\"\n+    _icon_dir = \"XXresources/genericXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3449",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = \"generic\"\n-    _icon_dir = \"resources/generic\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3763",
        "line": 9,
        "description": [
          "    _provider = \"aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = \"aws\"\n+    _provider = \"XXawsXX\"\n     _icon_dir = \"resources/aws\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3764",
        "line": 9,
        "description": [
          "    _provider = \"aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = \"aws\"\n+    _provider = None\n     _icon_dir = \"resources/aws\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3765",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = \"aws\"\n-    _icon_dir = \"resources/aws\"\n+    _icon_dir = \"XXresources/awsXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3766",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = \"aws\"\n-    _icon_dir = \"resources/aws\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4603",
        "line": 11,
        "description": [
          "    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n-    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n+    title = f'XX<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>XX'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4604",
        "line": 11,
        "description": [
          "    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n-    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n+    title = None\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4718",
        "line": 9,
        "description": [
          "    _provider = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = \"custom\"\n+    _provider = \"XXcustomXX\"\n     _type = \"custom\"\n     _icon_dir = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4719",
        "line": 9,
        "description": [
          "    _provider = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = \"custom\"\n+    _provider = None\n     _type = \"custom\"\n     _icon_dir = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4720",
        "line": 10,
        "description": [
          "    _type = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = \"custom\"\n-    _type = \"custom\"\n+    _type = \"XXcustomXX\"\n     _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4721",
        "line": 10,
        "description": [
          "    _type = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = \"custom\"\n-    _type = \"custom\"\n+    _type = None\n     _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4722",
        "line": 11,
        "description": [
          "    _icon_dir = None"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -8,7 +8,7 @@\n class Custom(Node):\n     _provider = \"custom\"\n     _type = \"custom\"\n-    _icon_dir = None\n+    _icon_dir = \"\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4758",
        "line": 9,
        "description": [
          "    _provider = \"saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = \"saas\"\n+    _provider = \"XXsaasXX\"\n     _icon_dir = \"resources/saas\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4759",
        "line": 9,
        "description": [
          "    _provider = \"saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = \"saas\"\n+    _provider = None\n     _icon_dir = \"resources/saas\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4760",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = \"saas\"\n-    _icon_dir = \"resources/saas\"\n+    _icon_dir = \"XXresources/saasXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4761",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = \"saas\"\n-    _icon_dir = \"resources/saas\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4838",
        "line": 9,
        "description": [
          "    _provider = \"base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = \"base\"\n+    _provider = \"XXbaseXX\"\n     _icon_dir = \"resources/base\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4839",
        "line": 9,
        "description": [
          "    _provider = \"base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = \"base\"\n+    _provider = None\n     _icon_dir = \"resources/base\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4840",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = \"base\"\n-    _icon_dir = \"resources/base\"\n+    _icon_dir = \"XXresources/baseXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4841",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = \"base\"\n-    _icon_dir = \"resources/base\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "render",
    "function_scope": "193-198",
    "patterns": [
      {
        "lineno": 194,
        "coloffset": 8,
        "linematch": "if isinstance(self.outformat, list):",
        "context": "        \"\"\"Create a subgraph for clustering\"\"\"\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 193,
        "coloffset": 4,
        "linematch": "def render(self) -> None:",
        "context": "    def subgraph(self, dot: Digraph) -> None:\n        \"\"\"Create a subgraph for clustering\"\"\"\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 193,
        "coloffset": 4,
        "linematch": "def render(self) -> None:",
        "context": "    def subgraph(self, dot: Digraph) -> None:\n        \"\"\"Create a subgraph for clustering\"\"\"\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 194,
        "coloffset": 8,
        "linematch": "if isinstance(self.outformat, list):",
        "context": "        \"\"\"Create a subgraph for clustering\"\"\"\n        self.dot.subgraph(dot)\n\n    def render(self) -> None:\n        if isinstance(self.outformat, list):\n            for one_format in self.outformat:\n                self.dot.render(format=one_format, view=self.show, quiet=True)\n        else:\n            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #107",
        "line": 196,
        "description": [
          "                self.dot.render(format=one_format, view=self.show, quiet=True)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -193,7 +193,7 @@\n     def render(self) -> None:\n         if isinstance(self.outformat, list):\n             for one_format in self.outformat:\n-                self.dot.render(format=one_format, view=self.show, quiet=True)\n+                self.dot.render(format=one_format, view=self.show, quiet=False)\n         else:\n             self.dot.render(format=self.outformat, view=self.show, quiet=True)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #108",
        "line": 198,
        "description": [
          "            self.dot.render(format=self.outformat, view=self.show, quiet=True)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -195,7 +195,7 @@\n             for one_format in self.outformat:\n                 self.dot.render(format=one_format, view=self.show, quiet=True)\n         else:\n-            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n+            self.dot.render(format=self.outformat, view=self.show, quiet=False)\n \n \n class Cluster:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "__exit__",
    "function_scope": "266-271",
    "patterns": [
      {
        "lineno": 267,
        "coloffset": 8,
        "linematch": "if self._parent:",
        "context": "        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 266,
        "coloffset": 4,
        "linematch": "def __exit__(self, exc_type, exc_value, traceback):",
        "context": "    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 266,
        "coloffset": 4,
        "linematch": "def __exit__(self, exc_type, exc_value, traceback):",
        "context": "    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 267,
        "coloffset": 8,
        "linematch": "if self._parent:",
        "context": "        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 271,
        "coloffset": 8,
        "linematch": "setcluster(self._parent)",
        "context": "        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "__init__",
    "function_scope": "446-487",
    "patterns": [
      {
        "lineno": 466,
        "coloffset": 8,
        "linematch": "if node is not None:",
        "context": "        :param color: Edge color.\n        :param style: Edge style.\n        :param attrs: Other edge attributes\n        \"\"\"\n        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 479,
        "coloffset": 8,
        "linematch": "if label:",
        "context": "        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 483,
        "coloffset": 8,
        "linematch": "if color:",
        "context": "        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 485,
        "coloffset": 8,
        "linematch": "if style:",
        "context": "            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 446,
        "coloffset": 4,
        "linematch": "def __init__(",
        "context": "        \"fontname\": \"XXSans-SerifXX\",\n        \"fontsize\": \"13\",\n    }\n\n    def __init__(\n        self,\n        node: \"Node\" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = \"\",",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 18,
        "coloffset": 4,
        "linematch": "def __init__(self, label, icon_path, *args, **kwargs):",
        "context": "\n    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 479,
        "coloffset": 8,
        "linematch": "if label:",
        "context": "        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 483,
        "coloffset": 8,
        "linematch": "if color:",
        "context": "        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 485,
        "coloffset": 8,
        "linematch": "if style:",
        "context": "            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 446,
        "coloffset": 4,
        "linematch": "def __init__(",
        "context": "        \"fontname\": \"XXSans-SerifXX\",\n        \"fontsize\": \"13\",\n    }\n\n    def __init__(\n        self,\n        node: \"Node\" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = \"\",",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 456,
        "coloffset": 8,
        "linematch": "\"\"\"Edge represents an edge between two nodes.",
        "context": "        color: str = \"\",\n        style: str = \"\",\n        **attrs: Dict,\n    ):\n        \"\"\"Edge represents an edge between two nodes.\n\n        :param node: Parent node.\n        :param forward: Points forward.\n        :param reverse: Points backward.\n        :param label: Edge label.",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 466,
        "coloffset": 8,
        "linematch": "if node is not None:",
        "context": "        :param color: Edge color.\n        :param style: Edge style.\n        :param attrs: Other edge attributes\n        \"\"\"\n        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 469,
        "coloffset": 8,
        "linematch": "self.node = node",
        "context": "        \"\"\"\n        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 470,
        "coloffset": 8,
        "linematch": "self.forward = forward",
        "context": "        if node is not None:\n            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n\n        # Set attributes.",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 471,
        "coloffset": 8,
        "linematch": "self.reverse = reverse",
        "context": "            assert isinstance(node, Node)\n\n        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n\n        # Set attributes.\n        for k, v in self._default_edge_attrs.items():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 473,
        "coloffset": 8,
        "linematch": "self._attrs = {}",
        "context": "        self.node = node\n        self.forward = forward\n        self.reverse = reverse\n\n        self._attrs = {}\n\n        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 476,
        "coloffset": 8,
        "linematch": "for k, v in self._default_edge_attrs.items():",
        "context": "\n        self._attrs = {}\n\n        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 479,
        "coloffset": 8,
        "linematch": "if label:",
        "context": "        # Set attributes.\n        for k, v in self._default_edge_attrs.items():\n            self._attrs[k] = v\n\n        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 483,
        "coloffset": 8,
        "linematch": "if color:",
        "context": "        if label:\n            # Graphviz complaining about using label for edges, so replace it with xlabel.\n            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 485,
        "coloffset": 8,
        "linematch": "if style:",
        "context": "            # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n            self._attrs[\"label\"] = label\n        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 487,
        "coloffset": 8,
        "linematch": "self._attrs.update(attrs)",
        "context": "        if color:\n            self._attrs[\"color\"] = color\n        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 19,
        "coloffset": 8,
        "linematch": "self._icon = icon_path",
        "context": "    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 20,
        "coloffset": 8,
        "linematch": "super().__init__(label, *args, **kwargs)",
        "context": "        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 446,
        "coloffset": 4,
        "linematch": "def __init__(",
        "context": "        \"fontname\": \"XXSans-SerifXX\",\n        \"fontsize\": \"13\",\n    }\n\n    def __init__(\n        self,\n        node: \"Node\" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = \"\",",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "F030",
        "check_name": "deeply-nested-control-structures"
      },
      {
        "lineno": 446,
        "coloffset": 4,
        "linematch": "def __init__(",
        "context": "        \"fontname\": \"XXSans-SerifXX\",\n        \"fontsize\": \"13\",\n    }\n\n    def __init__(\n        self,\n        node: \"Node\" = None,\n        forward: bool = False,\n        reverse: bool = False,\n        label: str = \"\",",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "P005",
        "check_name": "long-scope-chaining"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #224",
        "line": 449,
        "description": [
          "        forward: bool = False,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -446,7 +446,7 @@\n     def __init__(\n         self,\n         node: \"Node\" = None,\n-        forward: bool = False,\n+        forward: bool = True,\n         reverse: bool = False,\n         label: str = \"\",\n         color: str = \"\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #225",
        "line": 450,
        "description": [
          "        reverse: bool = False,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -447,7 +447,7 @@\n         self,\n         node: \"Node\" = None,\n         forward: bool = False,\n-        reverse: bool = False,\n+        reverse: bool = True,\n         label: str = \"\",\n         color: str = \"\",\n         style: str = \"\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #226",
        "line": 451,
        "description": [
          "        label: str = \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -448,7 +448,7 @@\n         node: \"Node\" = None,\n         forward: bool = False,\n         reverse: bool = False,\n-        label: str = \"\",\n+        label: str = \"XXXX\",\n         color: str = \"\",\n         style: str = \"\",\n         **attrs: Dict,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #227",
        "line": 452,
        "description": [
          "        color: str = \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -449,7 +449,7 @@\n         forward: bool = False,\n         reverse: bool = False,\n         label: str = \"\",\n-        color: str = \"\",\n+        color: str = \"XXXX\",\n         style: str = \"\",\n         **attrs: Dict,\n     ):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #228",
        "line": 453,
        "description": [
          "        style: str = \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -450,7 +450,7 @@\n         reverse: bool = False,\n         label: str = \"\",\n         color: str = \"\",\n-        style: str = \"\",\n+        style: str = \"XXXX\",\n         **attrs: Dict,\n     ):\n         \"\"\"Edge represents an edge between two nodes.\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #229",
        "line": 466,
        "description": [
          "        if node is not None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #230",
        "line": 469,
        "description": [
          "        self.node = node"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -466,7 +466,7 @@\n         if node is not None:\n             assert isinstance(node, Node)\n \n-        self.node = node\n+        self.node = None\n         self.forward = forward\n         self.reverse = reverse\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #231",
        "line": 470,
        "description": [
          "        self.forward = forward"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -467,7 +467,7 @@\n             assert isinstance(node, Node)\n \n         self.node = node\n-        self.forward = forward\n+        self.forward = None\n         self.reverse = reverse\n \n         self._attrs = {}\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #232",
        "line": 471,
        "description": [
          "        self.reverse = reverse"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -468,7 +468,7 @@\n \n         self.node = node\n         self.forward = forward\n-        self.reverse = reverse\n+        self.reverse = None\n \n         self._attrs = {}\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #233",
        "line": 473,
        "description": [
          "        self._attrs = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #234",
        "line": 477,
        "description": [
          "            self._attrs[k] = v"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -474,7 +474,7 @@\n \n         # Set attributes.\n         for k, v in self._default_edge_attrs.items():\n-            self._attrs[k] = v\n+            self._attrs[k] = None\n \n         if label:\n             # Graphviz complaining about using label for edges, so replace it with xlabel.\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #235",
        "line": 482,
        "description": [
          "            self._attrs[\"label\"] = label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -479,7 +479,7 @@\n         if label:\n             # Graphviz complaining about using label for edges, so replace it with xlabel.\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n-            self._attrs[\"label\"] = label\n+            self._attrs[\"XXlabelXX\"] = label\n         if color:\n             self._attrs[\"color\"] = color\n         if style:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #236",
        "line": 482,
        "description": [
          "            self._attrs[\"label\"] = label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -479,7 +479,7 @@\n         if label:\n             # Graphviz complaining about using label for edges, so replace it with xlabel.\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n-            self._attrs[\"label\"] = label\n+            self._attrs[\"label\"] = None\n         if color:\n             self._attrs[\"color\"] = color\n         if style:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #237",
        "line": 484,
        "description": [
          "            self._attrs[\"color\"] = color"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -481,7 +481,7 @@\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n             self._attrs[\"label\"] = label\n         if color:\n-            self._attrs[\"color\"] = color\n+            self._attrs[\"XXcolorXX\"] = color\n         if style:\n             self._attrs[\"style\"] = style\n         self._attrs.update(attrs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #238",
        "line": 484,
        "description": [
          "            self._attrs[\"color\"] = color"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -481,7 +481,7 @@\n             # Update: xlabel option causes the misaligned label position: https://github.com/mingrammer/diagrams/issues/83\n             self._attrs[\"label\"] = label\n         if color:\n-            self._attrs[\"color\"] = color\n+            self._attrs[\"color\"] = None\n         if style:\n             self._attrs[\"style\"] = style\n         self._attrs.update(attrs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #239",
        "line": 486,
        "description": [
          "            self._attrs[\"style\"] = style"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -483,7 +483,7 @@\n         if color:\n             self._attrs[\"color\"] = color\n         if style:\n-            self._attrs[\"style\"] = style\n+            self._attrs[\"XXstyleXX\"] = style\n         self._attrs.update(attrs)\n \n     def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #240",
        "line": 486,
        "description": [
          "            self._attrs[\"style\"] = style"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -483,7 +483,7 @@\n         if color:\n             self._attrs[\"color\"] = color\n         if style:\n-            self._attrs[\"style\"] = style\n+            self._attrs[\"style\"] = None\n         self._attrs.update(attrs)\n \n     def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 11.76470588235294
  },
  {
    "function_name": "append",
    "function_scope": "515-525",
    "patterns": [
      {
        "lineno": 518,
        "coloffset": 12,
        "linematch": "if isinstance(o, Edge):",
        "context": "\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse\n                self._attrs = o.attrs.copy()\n                result.append(o)\n            else:",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 515,
        "coloffset": 4,
        "linematch": "def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:",
        "context": "    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 515,
        "coloffset": 4,
        "linematch": "def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:",
        "context": "    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 516,
        "coloffset": 8,
        "linematch": "result = []",
        "context": "        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse\n                self._attrs = o.attrs.copy()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 517,
        "coloffset": 8,
        "linematch": "for o in other:",
        "context": "        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):\n                o.forward = forward if forward else o.forward\n                o.reverse = forward if forward else o.reverse\n                self._attrs = o.attrs.copy()\n                result.append(o)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 525,
        "coloffset": 8,
        "linematch": "return result",
        "context": "                self._attrs = o.attrs.copy()\n                result.append(o)\n            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #247",
        "line": 516,
        "description": [
          "        result = []"
        ],
        "failure": []
      },
      {
        "name": "Mutant #248",
        "line": 519,
        "description": [
          "                o.forward = forward if forward else o.forward"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -516,7 +516,7 @@\n         result = []\n         for o in other:\n             if isinstance(o, Edge):\n-                o.forward = forward if forward else o.forward\n+                o.forward = None\n                 o.reverse = forward if forward else o.reverse\n                 self._attrs = o.attrs.copy()\n                 result.append(o)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #249",
        "line": 520,
        "description": [
          "                o.reverse = forward if forward else o.reverse"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -517,7 +517,7 @@\n         for o in other:\n             if isinstance(o, Edge):\n                 o.forward = forward if forward else o.forward\n-                o.reverse = forward if forward else o.reverse\n+                o.reverse = None\n                 self._attrs = o.attrs.copy()\n                 result.append(o)\n             else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #250",
        "line": 521,
        "description": [
          "                self._attrs = o.attrs.copy()"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -518,7 +518,7 @@\n             if isinstance(o, Edge):\n                 o.forward = forward if forward else o.forward\n                 o.reverse = forward if forward else o.reverse\n-                self._attrs = o.attrs.copy()\n+                self._attrs = None\n                 result.append(o)\n             else:\n                 result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 25.0
  },
  {
    "function_name": "connect",
    "function_scope": "527-540",
    "patterns": [
      {
        "lineno": 528,
        "coloffset": 8,
        "linematch": "if isinstance(other, list):",
        "context": "                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 532,
        "coloffset": 8,
        "linematch": "elif isinstance(other, Edge):",
        "context": "        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 536,
        "coloffset": 12,
        "linematch": "if self.node is not None:",
        "context": "        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)\n            else:\n                self.node = other\n                return self\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 527,
        "coloffset": 4,
        "linematch": "def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 532,
        "coloffset": 8,
        "linematch": "elif isinstance(other, Edge):",
        "context": "        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)",
        "pattern": ".//FunctionDef//If/descendant::If",
        "check_id": "CL001",
        "check_name": "nested-conditions"
      },
      {
        "lineno": 536,
        "coloffset": 12,
        "linematch": "if self.node is not None:",
        "context": "        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()\n            return self\n        else:\n            if self.node is not None:\n                return self.node.connect(other, self)\n            else:\n                self.node = other\n                return self\n",
        "pattern": ".//FunctionDef//If/descendant::If",
        "check_id": "CL001",
        "check_name": "nested-conditions"
      },
      {
        "lineno": 527,
        "coloffset": 4,
        "linematch": "def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 528,
        "coloffset": 8,
        "linematch": "if isinstance(other, list):",
        "context": "                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):\n            self._attrs = other._attrs.copy()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 527,
        "coloffset": 4,
        "linematch": "def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):",
        "pattern": ".//FunctionDef[count(body//Return) > 2]",
        "check_id": "MRET001",
        "check_name": "multiple-returns-in-function"
      },
      {
        "lineno": 527,
        "coloffset": 4,
        "linematch": "def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "F030",
        "check_name": "deeply-nested-control-structures"
      },
      {
        "lineno": 527,
        "coloffset": 4,
        "linematch": "def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "            else:\n                result.append(Edge(o, forward=forward, reverse=reverse, **self._attrs))\n        return result\n\n    def connect(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        if isinstance(other, list):\n            for node in other:\n                self.node.connect(node, self)\n            return other\n        elif isinstance(other, Edge):",
        "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
        "check_id": "P005",
        "check_name": "long-scope-chaining"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #251",
        "line": 533,
        "description": [
          "            self._attrs = other._attrs.copy()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #252",
        "line": 536,
        "description": [
          "            if self.node is not None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #253",
        "line": 539,
        "description": [
          "                self.node = other"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "attrs",
    "function_scope": "543-552",
    "patterns": [
      {
        "lineno": 544,
        "coloffset": 8,
        "linematch": "if self.forward and self.reverse:",
        "context": "                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:\n            direction = \"back\"",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 546,
        "coloffset": 8,
        "linematch": "elif self.forward:",
        "context": "    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:\n            direction = \"back\"\n        else:\n            direction = \"none\"",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 548,
        "coloffset": 8,
        "linematch": "elif self.reverse:",
        "context": "        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:\n            direction = \"back\"\n        else:\n            direction = \"none\"\n        return {**self._attrs, \"dir\": direction}\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 543,
        "coloffset": 4,
        "linematch": "def attrs(self) -> Dict:",
        "context": "                self.node = other\n                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 546,
        "coloffset": 8,
        "linematch": "elif self.forward:",
        "context": "    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:\n            direction = \"back\"\n        else:\n            direction = \"none\"",
        "pattern": ".//FunctionDef//If/descendant::If",
        "check_id": "CL001",
        "check_name": "nested-conditions"
      },
      {
        "lineno": 548,
        "coloffset": 8,
        "linematch": "elif self.reverse:",
        "context": "        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:\n            direction = \"back\"\n        else:\n            direction = \"none\"\n        return {**self._attrs, \"dir\": direction}\n",
        "pattern": ".//FunctionDef//If/descendant::If",
        "check_id": "CL001",
        "check_name": "nested-conditions"
      },
      {
        "lineno": 543,
        "coloffset": 4,
        "linematch": "def attrs(self) -> Dict:",
        "context": "                self.node = other\n                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 544,
        "coloffset": 8,
        "linematch": "if self.forward and self.reverse:",
        "context": "                return self\n\n    @property\n    def attrs(self) -> Dict:\n        if self.forward and self.reverse:\n            direction = \"both\"\n        elif self.forward:\n            direction = \"forward\"\n        elif self.reverse:\n            direction = \"back\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 552,
        "coloffset": 8,
        "linematch": "return {**self._attrs, \"dir\": direction}",
        "context": "        elif self.reverse:\n            direction = \"back\"\n        else:\n            direction = \"none\"\n        return {**self._attrs, \"dir\": direction}\n\n\nGroup = Cluster",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #255",
        "line": 544,
        "description": [
          "        if self.forward and self.reverse:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -541,7 +541,7 @@\n \n     @property\n     def attrs(self) -> Dict:\n-        if self.forward and self.reverse:\n+        if self.forward or self.reverse:\n             direction = \"both\"\n         elif self.forward:\n             direction = \"forward\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #256",
        "line": 545,
        "description": [
          "            direction = \"both\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -542,7 +542,7 @@\n     @property\n     def attrs(self) -> Dict:\n         if self.forward and self.reverse:\n-            direction = \"both\"\n+            direction = \"XXbothXX\"\n         elif self.forward:\n             direction = \"forward\"\n         elif self.reverse:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #257",
        "line": 545,
        "description": [
          "            direction = \"both\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -542,7 +542,7 @@\n     @property\n     def attrs(self) -> Dict:\n         if self.forward and self.reverse:\n-            direction = \"both\"\n+            direction = None\n         elif self.forward:\n             direction = \"forward\"\n         elif self.reverse:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #258",
        "line": 547,
        "description": [
          "            direction = \"forward\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -544,7 +544,7 @@\n         if self.forward and self.reverse:\n             direction = \"both\"\n         elif self.forward:\n-            direction = \"forward\"\n+            direction = \"XXforwardXX\"\n         elif self.reverse:\n             direction = \"back\"\n         else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #259",
        "line": 547,
        "description": [
          "            direction = \"forward\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -544,7 +544,7 @@\n         if self.forward and self.reverse:\n             direction = \"both\"\n         elif self.forward:\n-            direction = \"forward\"\n+            direction = None\n         elif self.reverse:\n             direction = \"back\"\n         else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #260",
        "line": 549,
        "description": [
          "            direction = \"back\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -546,7 +546,7 @@\n         elif self.forward:\n             direction = \"forward\"\n         elif self.reverse:\n-            direction = \"back\"\n+            direction = \"XXbackXX\"\n         else:\n             direction = \"none\"\n         return {**self._attrs, \"dir\": direction}\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #261",
        "line": 549,
        "description": [
          "            direction = \"back\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -546,7 +546,7 @@\n         elif self.forward:\n             direction = \"forward\"\n         elif self.reverse:\n-            direction = \"back\"\n+            direction = None\n         else:\n             direction = \"none\"\n         return {**self._attrs, \"dir\": direction}\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #262",
        "line": 551,
        "description": [
          "            direction = \"none\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -548,7 +548,7 @@\n         elif self.reverse:\n             direction = \"back\"\n         else:\n-            direction = \"none\"\n+            direction = \"XXnoneXX\"\n         return {**self._attrs, \"dir\": direction}\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #263",
        "line": 551,
        "description": [
          "            direction = \"none\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -548,7 +548,7 @@\n         elif self.reverse:\n             direction = \"back\"\n         else:\n-            direction = \"none\"\n+            direction = None\n         return {**self._attrs, \"dir\": direction}\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #264",
        "line": 552,
        "description": [
          "        return {**self._attrs, \"dir\": direction}"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -549,7 +549,7 @@\n             direction = \"back\"\n         else:\n             direction = \"none\"\n-        return {**self._attrs, \"dir\": direction}\n+        return {*self._attrs, \"dir\": direction}\n \n \n Group = Cluster\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #265",
        "line": 552,
        "description": [
          "        return {**self._attrs, \"dir\": direction}"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -549,7 +549,7 @@\n             direction = \"back\"\n         else:\n             direction = \"none\"\n-        return {**self._attrs, \"dir\": direction}\n+        return {**self._attrs, \"XXdirXX\": direction}\n \n \n Group = Cluster\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "C4Node",
    "function_scope": "40-57",
    "patterns": [
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "if not description:",
        "context": "        \"fillcolor\": \"dodgerblue3\",\n        \"fontcolor\": \"white\",\n    }\n    # collapse boxes to a smaller form if they don't have a description\n    if not description:\n        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 40,
        "coloffset": 0,
        "linematch": "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):",
        "context": "    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'\n\n\ndef C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n    key = f\"{type}: {technology}\" if technology else type\n    node_attributes = {\n        \"label\": _format_node_label(name, key, description),\n        \"labelloc\": \"c\",\n        \"shape\": \"rect\",",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "key = f\"{type}: {technology}\" if technology else type",
        "context": "    return f'<<font point-size=\"10\">{text}</font>>'\n\n\ndef C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n    key = f\"{type}: {technology}\" if technology else type\n    node_attributes = {\n        \"label\": _format_node_label(name, key, description),\n        \"labelloc\": \"c\",\n        \"shape\": \"rect\",\n        \"width\": \"2.6\",",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "node_attributes = {",
        "context": "\n\ndef C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n    key = f\"{type}: {technology}\" if technology else type\n    node_attributes = {\n        \"label\": _format_node_label(name, key, description),\n        \"labelloc\": \"c\",\n        \"shape\": \"rect\",\n        \"width\": \"2.6\",\n        \"height\": \"1.6\",",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "if not description:",
        "context": "        \"fillcolor\": \"dodgerblue3\",\n        \"fontcolor\": \"white\",\n    }\n    # collapse boxes to a smaller form if they don't have a description\n    if not description:\n        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 56,
        "coloffset": 4,
        "linematch": "node_attributes.update(kwargs)",
        "context": "    }\n    # collapse boxes to a smaller form if they don't have a description\n    if not description:\n        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n\ndef Container(name, technology=\"\", description=\"\", **kwargs):\n    container_attributes = {",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 57,
        "coloffset": 4,
        "linematch": "return Node(**node_attributes)",
        "context": "    # collapse boxes to a smaller form if they don't have a description\n    if not description:\n        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n\ndef Container(name, technology=\"\", description=\"\", **kwargs):\n    container_attributes = {\n        \"name\": name,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #5",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #6",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #7",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #8",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #9",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #10",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #11",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #12",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #13",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #14",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #15",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #16",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #17",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #18",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #19",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"XXpadXX\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #20",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"pad\": \"XX2.0XX\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #21",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"XXsplinesXX\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #22",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"splines\": \"XXorthoXX\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #23",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"XXnodesepXX\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #24",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"nodesep\": \"XX0.60XX\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #25",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"XXranksepXX\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #26",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"ranksep\": \"XX0.75XX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #27",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"XXfontnameXX\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #28",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"fontname\": \"XXSans-SerifXX\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #29",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"XXfontsizeXX\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #30",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"fontsize\": \"XX15XX\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #31",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"XXfontcolorXX\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #32",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"fontcolor\": \"XX#2D3436XX\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #33",
        "line": 54,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #34",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"XXshapeXX\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #35",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"shape\": \"XXboxXX\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #36",
        "line": 57,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"XXstyleXX\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #37",
        "line": 57,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"style\": \"XXroundedXX\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4630",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"XXXX\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4631",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"XXXX\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4632",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"\", type=\"XXContainerXX\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4633",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = f\"XX{type}: {technology}XX\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4634",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = None\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4635",
        "line": 43,
        "description": [
          "        \"label\": _format_node_label(name, key, description),"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n-        \"label\": _format_node_label(name, key, description),\n+        \"XXlabelXX\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4636",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"XXlabellocXX\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4637",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"labelloc\": \"XXcXX\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4638",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"XXshapeXX\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4639",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"shape\": \"XXrectXX\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4640",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"XXwidthXX\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4641",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"width\": \"XX2.6XX\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4642",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"XXheightXX\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4643",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"height\": \"XX1.6XX\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4644",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"XXfixedsizeXX\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4645",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"fixedsize\": \"XXtrueXX\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4646",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"XXstyleXX\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4647",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"style\": \"XXfilledXX\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4648",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"XXfillcolorXX\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4649",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"fillcolor\": \"XXdodgerblue3XX\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4650",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"XXfontcolorXX\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4651",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"fontcolor\": \"XXwhiteXX\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4652",
        "line": 52,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4653",
        "line": 54,
        "description": [
          "    if not description:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4654",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"XXwidthXX\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4655",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"XX2XX\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4656",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"XXheightXX\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4657",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"height\": \"XX1XX\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 26.229508196721312
  },
  {
    "function_name": "up_or_title",
    "function_scope": "19-24",
    "patterns": [
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "if s in cfg.UPPER_WORDS.get(pvd, ()):",
        "context": "    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 22,
        "coloffset": 4,
        "linematch": "if s in cfg.TITLE_WORDS.get(pvd, {}):",
        "context": "\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 19,
        "coloffset": 0,
        "linematch": "def up_or_title(pvd: str, s: str) -> str:",
        "context": "    env.filters[\"up_or_title\"] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 22,
        "coloffset": 4,
        "linematch": "if s in cfg.TITLE_WORDS.get(pvd, {}):",
        "context": "\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:",
        "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
        "check_id": "F002",
        "check_name": "number-of-conditions-in-function"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "if s in cfg.UPPER_WORDS.get(pvd, ()):",
        "context": "    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 22,
        "coloffset": 4,
        "linematch": "if s in cfg.TITLE_WORDS.get(pvd, {}):",
        "context": "\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "return s.title()",
        "context": "    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    \"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"\n    tmpl = load_tmpl(cfg.TMPL_MODULE)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 19,
        "coloffset": 0,
        "linematch": "def up_or_title(pvd: str, s: str) -> str:",
        "context": "    env.filters[\"up_or_title\"] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()\n    if s in cfg.TITLE_WORDS.get(pvd, {}):\n        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()",
        "pattern": ".//FunctionDef[count(body//Return) > 2]",
        "check_id": "MRET001",
        "check_name": "multiple-returns-in-function"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4725",
        "line": 19,
        "description": [
          "        self._icon = icon_path"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "generate",
    "function_scope": "82-104",
    "patterns": [
      {
        "lineno": 94,
        "coloffset": 8,
        "linematch": "if typ == pvd:",
        "context": "        paths = list(filter(lambda f: \"rounded\" not in f, pngs))\n\n        # Skip the top-root directory.\n        typ = os.path.basename(root)\n        if typ == pvd:\n            continue\n\n        resource_root = os.path.relpath(root, base)\n        classes = gen_classes(pvd, typ, paths)\n        make_module(pvd, typ, classes)",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 94,
        "coloffset": 11,
        "linematch": "if typ == pvd:",
        "context": "        paths = list(filter(lambda f: \"rounded\" not in f, pngs))\n\n        # Skip the top-root directory.\n        typ = os.path.basename(root)\n        if typ == pvd:\n            continue\n\n        resource_root = os.path.relpath(root, base)\n        classes = gen_classes(pvd, typ, paths)\n        make_module(pvd, typ, classes)",
        "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
        "check_id": "BOOL001",
        "check_name": "boolean-comparison"
      },
      {
        "lineno": 82,
        "coloffset": 0,
        "linematch": "def generate(pvd: str) -> None:",
        "context": "    with open(mod_path, \"w+\") as f:\n        f.write(content)\n\n\ndef generate(pvd: str) -> None:\n    \"\"\"Generates a service node classes.\"\"\"\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 83,
        "coloffset": 4,
        "linematch": "\"\"\"Generates a service node classes.\"\"\"",
        "context": "        f.write(content)\n\n\ndef generate(pvd: str) -> None:\n    \"\"\"Generates a service node classes.\"\"\"\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 84,
        "coloffset": 4,
        "linematch": "typ_paths = {}",
        "context": "\n\ndef generate(pvd: str) -> None:\n    \"\"\"Generates a service node classes.\"\"\"\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()\n        pngs = list(filter(lambda f: f.endswith(\".png\"), files))",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 85,
        "coloffset": 4,
        "linematch": "base = base_dir()",
        "context": "\ndef generate(pvd: str) -> None:\n    \"\"\"Generates a service node classes.\"\"\"\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()\n        pngs = list(filter(lambda f: f.endswith(\".png\"), files))\n        paths = list(filter(lambda f: \"rounded\" not in f, pngs))",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 86,
        "coloffset": 4,
        "linematch": "for root, _, files in os.walk(resource_dir(pvd)):",
        "context": "def generate(pvd: str) -> None:\n    \"\"\"Generates a service node classes.\"\"\"\n    typ_paths = {}\n    base = base_dir()\n    for root, _, files in os.walk(resource_dir(pvd)):\n        # Extract the names and paths from resources.\n        files.sort()\n        pngs = list(filter(lambda f: f.endswith(\".png\"), files))\n        paths = list(filter(lambda f: \"rounded\" not in f, pngs))\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 103,
        "coloffset": 4,
        "linematch": "apidoc = gen_apidoc(pvd, typ_paths)",
        "context": "        make_module(pvd, typ, classes)\n\n        typ_paths[typ] = (paths, resource_root)\n    # Build API documentation\n    apidoc = gen_apidoc(pvd, typ_paths)\n    make_apidoc(pvd, apidoc)\n\n\nif __name__ == \"__main__\":\n    pvd = sys.argv[1]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 104,
        "coloffset": 4,
        "linematch": "make_apidoc(pvd, apidoc)",
        "context": "\n        typ_paths[typ] = (paths, resource_root)\n    # Build API documentation\n    apidoc = gen_apidoc(pvd, typ_paths)\n    make_apidoc(pvd, apidoc)\n\n\nif __name__ == \"__main__\":\n    pvd = sys.argv[1]\n    if pvd not in cfg.PROVIDERS:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #59",
        "line": 82,
        "description": [
          "        filename: str = \"\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #60",
        "line": 83,
        "description": [
          "        direction: str = \"LR\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #61",
        "line": 84,
        "description": [
          "        curvestyle: str = \"ortho\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #62",
        "line": 85,
        "description": [
          "        outformat: str = \"png\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #63",
        "line": 86,
        "description": [
          "        autolabel: bool = False,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -83,7 +83,7 @@\n         direction: str = \"LR\",\n         curvestyle: str = \"ortho\",\n         outformat: str = \"png\",\n-        autolabel: bool = False,\n+        autolabel: bool = True,\n         show: bool = True,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #64",
        "line": 87,
        "description": [
          "        show: bool = True,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -84,7 +84,7 @@\n         curvestyle: str = \"ortho\",\n         outformat: str = \"png\",\n         autolabel: bool = False,\n-        show: bool = True,\n+        show: bool = False,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #65",
        "line": 88,
        "description": [
          "        strict: bool = False,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -85,7 +85,7 @@\n         outformat: str = \"png\",\n         autolabel: bool = False,\n         show: bool = True,\n-        strict: bool = False,\n+        strict: bool = True,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n         edge_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4678",
        "line": 84,
        "description": [
          "def System(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description=\"\", external=False, **kwargs):\n+def System(name, description=\"XXXX\", external=False, **kwargs):\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4679",
        "line": 84,
        "description": [
          "def System(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description=\"\", external=False, **kwargs):\n+def System(name, description=\"\", external=True, **kwargs):\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4680",
        "line": 86,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4681",
        "line": 87,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -84,7 +84,7 @@\n def System(name, description=\"\", external=False, **kwargs):\n     system_attributes = {\n         \"name\": name,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"External System\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4682",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"XXtypeXX\": \"External System\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4683",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"type\": \"XXExternal SystemXX\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4684",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"type\": \"External System\" if external else \"XXSystemXX\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4685",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"XXfillcolorXX\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4686",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"XXgray60XX\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4687",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"gray60\" if external else \"XXdodgerblue4XX\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4688",
        "line": 90,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4689",
        "line": 95,
        "description": [
          "def Person(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description=\"\", external=False, **kwargs):\n+def Person(name, description=\"XXXX\", external=False, **kwargs):\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4690",
        "line": 95,
        "description": [
          "def Person(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description=\"\", external=False, **kwargs):\n+def Person(name, description=\"\", external=True, **kwargs):\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4691",
        "line": 97,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4692",
        "line": 98,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -95,7 +95,7 @@\n def Person(name, description=\"\", external=False, **kwargs):\n     person_attributes = {\n         \"name\": name,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4693",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"XXtypeXX\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4694",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"XXExternal PersonXX\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4695",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"External Person\" if external else \"XXPersonXX\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4696",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"XXfillcolorXX\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4697",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"XXgray60XX\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4698",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"gray60\" if external else \"XXdodgerblue4XX\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4699",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"XXstyleXX\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4700",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"style\": \"XXrounded,filledXX\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4701",
        "line": 102,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 25.806451612903224
  },
  {
    "function_name": "cleaner_aws",
    "function_scope": "24-35",
    "patterns": [
      {
        "lineno": 32,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 24,
        "coloffset": 0,
        "linematch": "def cleaner_aws(f):",
        "context": "    f = f.replace(\"_\", \"-\")\n    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 25,
        "coloffset": 4,
        "linematch": "f = f.replace(\"_\", \"-\")",
        "context": "    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "f = f.replace(\"@4x\", \"\")",
        "context": "\n\ndef cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 27,
        "coloffset": 4,
        "linematch": "f = f.replace(\"@5x\", \"\")",
        "context": "\ndef cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 28,
        "coloffset": 4,
        "linematch": "f = f.replace(\"2.0\", \"2-0\")",
        "context": "def cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):\n            f = f[len(p) :]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "f = f.replace(\"-light-bg4x\", \"\")",
        "context": "    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "f = f.replace(\"-light-bg\", \"\")",
        "context": "    f = f.replace(\"@4x\", \"\")\n    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"aws\"]:",
        "context": "    f = f.replace(\"@5x\", \"\")\n    f = f.replace(\"2.0\", \"2-0\")\n    f = f.replace(\"-light-bg4x\", \"\")\n    f = f.replace(\"-light-bg\", \"\")\n    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 35,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"aws\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_azure(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4612",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=41, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4613",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=40, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4614",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4615",
        "line": 27,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4616",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines = [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4617",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4618",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"XXXX\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4619",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4620",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"\"] * (4 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4621",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"\"] * (3 + len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4622",
        "line": 29,
        "description": [
          "    return \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return \"<br/>\".join(lines)\n+    return \"XX<br/>XX\".join(lines)\n \n \n def _format_edge_label(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4623",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=25, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4624",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=24, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4625",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4626",
        "line": 35,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      }
    ],
    "mutation_score": 40.0
  },
  {
    "function_name": "cleaner_azure",
    "function_scope": "38-46",
    "patterns": [
      {
        "lineno": 43,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 38,
        "coloffset": 0,
        "linematch": "def cleaner_azure(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_azure(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 39,
        "coloffset": 4,
        "linematch": "f = f.replace(\"_\", \"-\")",
        "context": "    return f.lower()\n\n\ndef cleaner_azure(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):\n            f = f[len(p) :]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 40,
        "coloffset": 4,
        "linematch": "f = f.replace(\"(\", \"\").replace(\")\", \"\")",
        "context": "\n\ndef cleaner_azure(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "f = \"-\".join(f.split())",
        "context": "\ndef cleaner_azure(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"azure\"]:",
        "context": "def cleaner_azure(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"(\", \"\").replace(\")\", \"\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 46,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"azure\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_gcp(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #5",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #6",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #7",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #8",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #9",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #10",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #11",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #12",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #13",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #14",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #15",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #16",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #17",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #18",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4630",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"XXXX\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4631",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"XXXX\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4632",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"\", type=\"XXContainerXX\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4633",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = f\"XX{type}: {technology}XX\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4634",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = None\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4635",
        "line": 43,
        "description": [
          "        \"label\": _format_node_label(name, key, description),"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n-        \"label\": _format_node_label(name, key, description),\n+        \"XXlabelXX\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4636",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"XXlabellocXX\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4637",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"labelloc\": \"XXcXX\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4638",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"XXshapeXX\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4639",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"shape\": \"XXrectXX\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4640",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"XXwidthXX\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4641",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"width\": \"XX2.6XX\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 53.84615384615385
  },
  {
    "function_name": "cleaner_gcp",
    "function_scope": "49-56",
    "patterns": [
      {
        "lineno": 53,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "def cleaner_gcp(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"gcp\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 49,
        "coloffset": 0,
        "linematch": "def cleaner_gcp(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_gcp(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"gcp\"]:\n        if f.startswith(p):\n            f = f[len(p) :]",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "f = f.replace(\"_\", \"-\")",
        "context": "    return f.lower()\n\n\ndef cleaner_gcp(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"gcp\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "f = \"-\".join(f.split())",
        "context": "\n\ndef cleaner_gcp(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"gcp\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 52,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"gcp\"]:",
        "context": "\ndef cleaner_gcp(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"gcp\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 56,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"gcp\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_ibm(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #23",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"XXnodesepXX\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #24",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"nodesep\": \"XX0.60XX\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #25",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"XXranksepXX\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #26",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"ranksep\": \"XX0.75XX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #27",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"XXfontnameXX\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #28",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"fontname\": \"XXSans-SerifXX\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #29",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"XXfontsizeXX\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #30",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"fontsize\": \"XX15XX\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #31",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"XXfontcolorXX\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #32",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"fontcolor\": \"XX#2D3436XX\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #33",
        "line": 54,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #34",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"XXshapeXX\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #35",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"shape\": \"XXboxXX\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4646",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"XXstyleXX\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4647",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"style\": \"XXfilledXX\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4648",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"XXfillcolorXX\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4649",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"fillcolor\": \"XXdodgerblue3XX\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4650",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"XXfontcolorXX\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4651",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"fontcolor\": \"XXwhiteXX\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4652",
        "line": 52,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4653",
        "line": 54,
        "description": [
          "    if not description:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4654",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"XXwidthXX\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4655",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"XX2XX\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4656",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"XXheightXX\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4657",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"height\": \"XX1XX\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 8.0
  },
  {
    "function_name": "cleaner_ibm",
    "function_scope": "59-66",
    "patterns": [
      {
        "lineno": 63,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "def cleaner_ibm(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"ibm\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 59,
        "coloffset": 0,
        "linematch": "def cleaner_ibm(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_ibm(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"ibm\"]:\n        if f.startswith(p):\n            f = f[len(p) :]",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 60,
        "coloffset": 4,
        "linematch": "f = f.replace(\"_\", \"-\")",
        "context": "    return f.lower()\n\n\ndef cleaner_ibm(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"ibm\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 61,
        "coloffset": 4,
        "linematch": "f = \"-\".join(f.split())",
        "context": "\n\ndef cleaner_ibm(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"ibm\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 62,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"ibm\"]:",
        "context": "\ndef cleaner_ibm(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"ibm\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 66,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"ibm\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_firebase(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #40",
        "line": 59,
        "description": [
          "        \"width\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n-        \"width\": \"1.4\",\n+        \"XXwidthXX\": \"1.4\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #41",
        "line": 59,
        "description": [
          "        \"width\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n-        \"width\": \"1.4\",\n+        \"width\": \"XX1.4XX\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #42",
        "line": 60,
        "description": [
          "        \"height\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n-        \"height\": \"1.4\",\n+        \"XXheightXX\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #43",
        "line": 60,
        "description": [
          "        \"height\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n-        \"height\": \"1.4\",\n+        \"height\": \"XX1.4XX\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #44",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"XXlabellocXX\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #45",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"labelloc\": \"XXbXX\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #46",
        "line": 66,
        "description": [
          "        \"imagescale\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # \"imagepos\": \"tc\",\n-        \"imagescale\": \"true\",\n+        \"XXimagescaleXX\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #47",
        "line": 66,
        "description": [
          "        \"imagescale\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # \"imagepos\": \"tc\",\n-        \"imagescale\": \"true\",\n+        \"imagescale\": \"XXtrueXX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4658",
        "line": 60,
        "description": [
          "def Container(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology=\"\", description=\"\", **kwargs):\n+def Container(name, technology=\"XXXX\", description=\"\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4659",
        "line": 60,
        "description": [
          "def Container(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology=\"\", description=\"\", **kwargs):\n+def Container(name, technology=\"\", description=\"XXXX\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4660",
        "line": 62,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4661",
        "line": 63,
        "description": [
          "        \"technology\": technology,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -60,7 +60,7 @@\n def Container(name, technology=\"\", description=\"\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n-        \"technology\": technology,\n+        \"XXtechnologyXX\": technology,\n         \"description\": description,\n         \"type\": \"Container\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4662",
        "line": 64,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -61,7 +61,7 @@\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"Container\",\n     }\n     container_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4663",
        "line": 65,
        "description": [
          "        \"type\": \"Container\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Container\",\n+        \"XXtypeXX\": \"Container\",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4664",
        "line": 65,
        "description": [
          "        \"type\": \"Container\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Container\",\n+        \"type\": \"XXContainerXX\",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4665",
        "line": 66,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 12.5
  },
  {
    "function_name": "cleaner_firebase",
    "function_scope": "69-76",
    "patterns": [
      {
        "lineno": 73,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "def cleaner_firebase(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"firebase\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 69,
        "coloffset": 0,
        "linematch": "def cleaner_firebase(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_firebase(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"firebase\"]:\n        if f.startswith(p):\n            f = f[len(p) :]",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "f = f.replace(\"_\", \"-\")",
        "context": "    return f.lower()\n\n\ndef cleaner_firebase(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"firebase\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "f = \"-\".join(f.split())",
        "context": "\n\ndef cleaner_firebase(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"firebase\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"firebase\"]:",
        "context": "\ndef cleaner_firebase(f):\n    f = f.replace(\"_\", \"-\")\n    f = \"-\".join(f.split())\n    for p in cfg.FILE_PREFIXES[\"firebase\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 76,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"firebase\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_k8s(f):\n    f = f.replace(\"-256\", \"\")\n    for p in cfg.FILE_PREFIXES[\"k8s\"]:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #52",
        "line": 69,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"XXfontcolorXX\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n         \"color\": \"#7B8894\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #53",
        "line": 69,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"fontcolor\": \"XX#2D3436XX\",\n     }\n     _default_edge_attrs = {\n         \"color\": \"#7B8894\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #54",
        "line": 70,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #55",
        "line": 72,
        "description": [
          "        \"color\": \"#7B8894\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n-        \"color\": \"#7B8894\",\n+        \"XXcolorXX\": \"#7B8894\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #56",
        "line": 72,
        "description": [
          "        \"color\": \"#7B8894\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n-        \"color\": \"#7B8894\",\n+        \"color\": \"XX#7B8894XX\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #57",
        "line": 73,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4666",
        "line": 71,
        "description": [
          "def Database(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology=\"\", description=\"\", **kwargs):\n+def Database(name, technology=\"XXXX\", description=\"\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4667",
        "line": 71,
        "description": [
          "def Database(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology=\"\", description=\"\", **kwargs):\n+def Database(name, technology=\"\", description=\"XXXX\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4668",
        "line": 73,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4669",
        "line": 74,
        "description": [
          "        \"technology\": technology,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -71,7 +71,7 @@\n def Database(name, technology=\"\", description=\"\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n-        \"technology\": technology,\n+        \"XXtechnologyXX\": technology,\n         \"description\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4670",
        "line": 75,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -72,7 +72,7 @@\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4671",
        "line": 76,
        "description": [
          "        \"type\": \"Database\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Database\",\n+        \"XXtypeXX\": \"Database\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4672",
        "line": 76,
        "description": [
          "        \"type\": \"Database\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Database\",\n+        \"type\": \"XXDatabaseXX\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 23.076923076923077
  },
  {
    "function_name": "cleaner_k8s",
    "function_scope": "79-85",
    "patterns": [
      {
        "lineno": 82,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "\ndef cleaner_k8s(f):\n    f = f.replace(\"-256\", \"\")\n    for p in cfg.FILE_PREFIXES[\"k8s\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 79,
        "coloffset": 0,
        "linematch": "def cleaner_k8s(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_k8s(f):\n    f = f.replace(\"-256\", \"\")\n    for p in cfg.FILE_PREFIXES[\"k8s\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 80,
        "coloffset": 4,
        "linematch": "f = f.replace(\"-256\", \"\")",
        "context": "    return f.lower()\n\n\ndef cleaner_k8s(f):\n    f = f.replace(\"-256\", \"\")\n    for p in cfg.FILE_PREFIXES[\"k8s\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 81,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"k8s\"]:",
        "context": "\n\ndef cleaner_k8s(f):\n    f = f.replace(\"-256\", \"\")\n    for p in cfg.FILE_PREFIXES[\"k8s\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 85,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"k8s\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(\"-32\", \"\")\n    for p in cfg.FILE_PREFIXES[\"digitalocean\"]:\n        if f.startswith(p):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #58",
        "line": 81,
        "description": [
          "        name: str = \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -78,7 +78,7 @@\n     # TODO: Save directory option (filename + directory?)\n     def __init__(\n         self,\n-        name: str = \"\",\n+        name: str = \"XXXX\",\n         filename: str = \"\",\n         direction: str = \"LR\",\n         curvestyle: str = \"ortho\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #59",
        "line": 82,
        "description": [
          "        filename: str = \"\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #60",
        "line": 83,
        "description": [
          "        direction: str = \"LR\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #61",
        "line": 84,
        "description": [
          "        curvestyle: str = \"ortho\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #62",
        "line": 85,
        "description": [
          "        outformat: str = \"png\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #4677",
        "line": 79,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4678",
        "line": 84,
        "description": [
          "def System(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description=\"\", external=False, **kwargs):\n+def System(name, description=\"XXXX\", external=False, **kwargs):\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4679",
        "line": 84,
        "description": [
          "def System(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description=\"\", external=False, **kwargs):\n+def System(name, description=\"\", external=True, **kwargs):\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 62.5
  },
  {
    "function_name": "cleaner_digitalocean",
    "function_scope": "87-93",
    "patterns": [
      {
        "lineno": 90,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "\ndef cleaner_digitalocean(f):\n    f = f.replace(\"-32\", \"\")\n    for p in cfg.FILE_PREFIXES[\"digitalocean\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 87,
        "coloffset": 0,
        "linematch": "def cleaner_digitalocean(f):",
        "context": "            f = f[len(p) :]\n            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(\"-32\", \"\")\n    for p in cfg.FILE_PREFIXES[\"digitalocean\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 88,
        "coloffset": 4,
        "linematch": "f = f.replace(\"-32\", \"\")",
        "context": "            break\n    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(\"-32\", \"\")\n    for p in cfg.FILE_PREFIXES[\"digitalocean\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 89,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"digitalocean\"]:",
        "context": "    return f.lower()\n\ndef cleaner_digitalocean(f):\n    f = f.replace(\"-32\", \"\")\n    for p in cfg.FILE_PREFIXES[\"digitalocean\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 93,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"digitalocean\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[\"alibabacloud\"]:\n        if f.startswith(p):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #64",
        "line": 87,
        "description": [
          "        show: bool = True,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -84,7 +84,7 @@\n         curvestyle: str = \"ortho\",\n         outformat: str = \"png\",\n         autolabel: bool = False,\n-        show: bool = True,\n+        show: bool = False,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #65",
        "line": 88,
        "description": [
          "        strict: bool = False,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -85,7 +85,7 @@\n         outformat: str = \"png\",\n         autolabel: bool = False,\n         show: bool = True,\n-        strict: bool = False,\n+        strict: bool = True,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n         edge_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4681",
        "line": 87,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -84,7 +84,7 @@\n def System(name, description=\"\", external=False, **kwargs):\n     system_attributes = {\n         \"name\": name,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"External System\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4682",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"XXtypeXX\": \"External System\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4683",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"type\": \"XXExternal SystemXX\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4684",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"type\": \"External System\" if external else \"XXSystemXX\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4685",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"XXfillcolorXX\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4686",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"XXgray60XX\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4687",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"gray60\" if external else \"XXdodgerblue4XX\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4688",
        "line": 90,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 10.0
  },
  {
    "function_name": "cleaner_alibabacloud",
    "function_scope": "96-101",
    "patterns": [
      {
        "lineno": 98,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[\"alibabacloud\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 96,
        "coloffset": 0,
        "linematch": "def cleaner_alibabacloud(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[\"alibabacloud\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 97,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"alibabacloud\"]:",
        "context": "    return f.lower()\n\n\ndef cleaner_alibabacloud(f):\n    for p in cfg.FILE_PREFIXES[\"alibabacloud\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 101,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"alibabacloud\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_oci(f):\n    f = f.replace(\" \", \"-\")\n    f = f.replace(\"_\", \"-\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4691",
        "line": 97,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4692",
        "line": 98,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -95,7 +95,7 @@\n def Person(name, description=\"\", external=False, **kwargs):\n     person_attributes = {\n         \"name\": name,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4693",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"XXtypeXX\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4694",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"XXExternal PersonXX\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4695",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"External Person\" if external else \"XXPersonXX\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4696",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"XXfillcolorXX\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4697",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"XXgray60XX\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4698",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"gray60\" if external else \"XXdodgerblue4XX\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4699",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"XXstyleXX\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4700",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"style\": \"XXrounded,filledXX\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 10.0
  },
  {
    "function_name": "cleaner_oci",
    "function_scope": "104-111",
    "patterns": [
      {
        "lineno": 108,
        "coloffset": 8,
        "linematch": "if f.startswith(p):",
        "context": "def cleaner_oci(f):\n    f = f.replace(\" \", \"-\")\n    f = f.replace(\"_\", \"-\")\n    for p in cfg.FILE_PREFIXES[\"oci\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n",
        "pattern": ".//FunctionDef/body//If",
        "check_id": "CL001",
        "check_name": "single-nested-if"
      },
      {
        "lineno": 104,
        "coloffset": 0,
        "linematch": "def cleaner_oci(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_oci(f):\n    f = f.replace(\" \", \"-\")\n    f = f.replace(\"_\", \"-\")\n    for p in cfg.FILE_PREFIXES[\"oci\"]:\n        if f.startswith(p):\n            f = f[len(p) :]",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 105,
        "coloffset": 4,
        "linematch": "f = f.replace(\" \", \"-\")",
        "context": "    return f.lower()\n\n\ndef cleaner_oci(f):\n    f = f.replace(\" \", \"-\")\n    f = f.replace(\"_\", \"-\")\n    for p in cfg.FILE_PREFIXES[\"oci\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 106,
        "coloffset": 4,
        "linematch": "f = f.replace(\"_\", \"-\")",
        "context": "\n\ndef cleaner_oci(f):\n    f = f.replace(\" \", \"-\")\n    f = f.replace(\"_\", \"-\")\n    for p in cfg.FILE_PREFIXES[\"oci\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 107,
        "coloffset": 4,
        "linematch": "for p in cfg.FILE_PREFIXES[\"oci\"]:",
        "context": "\ndef cleaner_oci(f):\n    f = f.replace(\" \", \"-\")\n    f = f.replace(\"_\", \"-\")\n    for p in cfg.FILE_PREFIXES[\"oci\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 111,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    for p in cfg.FILE_PREFIXES[\"oci\"]:\n        if f.startswith(p):\n            f = f[len(p) :]\n            break\n    return f.lower()\n\n\ndef cleaner_programming(f):\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #66",
        "line": 108,
        "description": [
          "        if graph_attr is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #67",
        "line": 109,
        "description": [
          "            graph_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #68",
        "line": 110,
        "description": [
          "        if node_attr is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #69",
        "line": 111,
        "description": [
          "            node_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4702",
        "line": 109,
        "description": [
          "        \"label\": html.escape(name),"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -106,7 +106,7 @@\n \n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n-        \"label\": html.escape(name),\n+        \"XXlabelXX\": html.escape(name),\n         \"bgcolor\": \"white\",\n         \"margin\": \"16\",\n         \"style\": \"dashed\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4703",
        "line": 110,
        "description": [
          "        \"bgcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         \"label\": html.escape(name),\n-        \"bgcolor\": \"white\",\n+        \"XXbgcolorXX\": \"white\",\n         \"margin\": \"16\",\n         \"style\": \"dashed\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4704",
        "line": 110,
        "description": [
          "        \"bgcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         \"label\": html.escape(name),\n-        \"bgcolor\": \"white\",\n+        \"bgcolor\": \"XXwhiteXX\",\n         \"margin\": \"16\",\n         \"style\": \"dashed\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4705",
        "line": 111,
        "description": [
          "        \"margin\": \"16\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n-        \"margin\": \"16\",\n+        \"XXmarginXX\": \"16\",\n         \"style\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4706",
        "line": 111,
        "description": [
          "        \"margin\": \"16\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n-        \"margin\": \"16\",\n+        \"margin\": \"XX16XX\",\n         \"style\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 44.44444444444444
  },
  {
    "function_name": "configure",
    "function_scope": "13-14",
    "patterns": [
      {
        "lineno": 13,
        "coloffset": 0,
        "linematch": "def configure(context):",
        "context": "    else:\n        # Skip all other mutations\n        context.skip = True\n\ndef configure(context):\n    context.pre_mutation = pre_mutation",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "context.pre_mutation = pre_mutation",
        "context": "        # Skip all other mutations\n        context.skip = True\n\ndef configure(context):\n    context.pre_mutation = pre_mutation",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #1",
        "line": 14,
        "description": [
          "__diagram = contextvars.ContextVar(\"diagrams\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -11,7 +11,7 @@\n # These global contexts are for letting the clusters and nodes know\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n-__diagram = contextvars.ContextVar(\"diagrams\")\n+__diagram = contextvars.ContextVar(\"XXdiagramsXX\")\n __cluster = contextvars.ContextVar(\"cluster\")\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2",
        "line": 14,
        "description": [
          "__diagram = contextvars.ContextVar(\"diagrams\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4608",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = f'XX<br/><font point-size=\"10\">{_format_description(description)}</font>XX' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4609",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"XXXX\"\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4610",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = None\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4611",
        "line": 14,
        "description": [
          "    return f\"<{title}{subtitle}{text}>\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -11,7 +11,7 @@\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n-    return f\"<{title}{subtitle}{text}>\"\n+    return f\"XX<{title}{subtitle}{text}>XX\"\n \n \n def _format_description(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4723",
        "line": 13,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = \"custom\"\n     _icon_dir = None\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n     def _load_icon(self):\n         return self._icon\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4724",
        "line": 13,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = \"custom\"\n     _icon_dir = None\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n     def _load_icon(self):\n         return self._icon\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 12.5
  },
  {
    "function_name": "getdiagram",
    "function_scope": "18-22",
    "patterns": [
      {
        "lineno": 18,
        "coloffset": 0,
        "linematch": "def getdiagram() -> \"Diagram\":",
        "context": "__diagram = contextvars.ContextVar(\"diagrams\")\n__cluster = contextvars.ContextVar(\"cluster\")\n\n\ndef getdiagram() -> \"Diagram\":\n    try:\n        return __diagram.get()\n    except LookupError:\n        return None\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 18,
        "coloffset": 0,
        "linematch": "def getdiagram() -> \"Diagram\":",
        "context": "__diagram = contextvars.ContextVar(\"diagrams\")\n__cluster = contextvars.ContextVar(\"cluster\")\n\n\ndef getdiagram() -> \"Diagram\":\n    try:\n        return __diagram.get()\n    except LookupError:\n        return None\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 19,
        "coloffset": 4,
        "linematch": "try:",
        "context": "__cluster = contextvars.ContextVar(\"cluster\")\n\n\ndef getdiagram() -> \"Diagram\":\n    try:\n        return __diagram.get()\n    except LookupError:\n        return None\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4725",
        "line": 19,
        "description": [
          "        self._icon = icon_path"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "setdiagram",
    "function_scope": "25-26",
    "patterns": [
      {
        "lineno": 25,
        "coloffset": 0,
        "linematch": "def setdiagram(diagram: \"Diagram\"):",
        "context": "    except LookupError:\n        return None\n\n\ndef setdiagram(diagram: \"Diagram\"):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> \"Cluster\":\n    try:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 25,
        "coloffset": 0,
        "linematch": "def setdiagram(diagram: \"Diagram\"):",
        "context": "    except LookupError:\n        return None\n\n\ndef setdiagram(diagram: \"Diagram\"):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> \"Cluster\":\n    try:",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "__diagram.set(diagram)",
        "context": "        return None\n\n\ndef setdiagram(diagram: \"Diagram\"):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> \"Cluster\":\n    try:\n        return __cluster.get()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4612",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=41, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4613",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=40, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4614",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 33.33333333333333
  },
  {
    "function_name": "getcluster",
    "function_scope": "29-33",
    "patterns": [
      {
        "lineno": 29,
        "coloffset": 0,
        "linematch": "def getcluster() -> \"Cluster\":",
        "context": "def setdiagram(diagram: \"Diagram\"):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> \"Cluster\":\n    try:\n        return __cluster.get()\n    except LookupError:\n        return None\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 29,
        "coloffset": 0,
        "linematch": "def getcluster() -> \"Cluster\":",
        "context": "def setdiagram(diagram: \"Diagram\"):\n    __diagram.set(diagram)\n\n\ndef getcluster() -> \"Cluster\":\n    try:\n        return __cluster.get()\n    except LookupError:\n        return None\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "try:",
        "context": "    __diagram.set(diagram)\n\n\ndef getcluster() -> \"Cluster\":\n    try:\n        return __cluster.get()\n    except LookupError:\n        return None\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4622",
        "line": 29,
        "description": [
          "    return \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return \"<br/>\".join(lines)\n+    return \"XX<br/>XX\".join(lines)\n \n \n def _format_edge_label(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "setcluster",
    "function_scope": "36-37",
    "patterns": [
      {
        "lineno": 36,
        "coloffset": 0,
        "linematch": "def setcluster(cluster: \"Cluster\"):",
        "context": "    except LookupError:\n        return None\n\n\ndef setcluster(cluster: \"Cluster\"):\n    __cluster.set(cluster)\n\n\nclass Diagram:\n    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 36,
        "coloffset": 0,
        "linematch": "def setcluster(cluster: \"Cluster\"):",
        "context": "    except LookupError:\n        return None\n\n\ndef setcluster(cluster: \"Cluster\"):\n    __cluster.set(cluster)\n\n\nclass Diagram:\n    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 37,
        "coloffset": 4,
        "linematch": "__cluster.set(cluster)",
        "context": "        return None\n\n\ndef setcluster(cluster: \"Cluster\"):\n    __cluster.set(cluster)\n\n\nclass Diagram:\n    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")\n    __curvestyles = (\"ortho\", \"curved\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4627",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = \"XX<br/>XX\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4628",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = None\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4629",
        "line": 37,
        "description": [
          "    return f'<<font point-size=\"10\">{text}</font>>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n-    return f'<<font point-size=\"10\">{text}</font>>'\n+    return f'XX<<font point-size=\"10\">{text}</font>>XX'\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "__str__",
    "function_scope": "156-157",
    "patterns": [
      {
        "lineno": 156,
        "coloffset": 4,
        "linematch": "def __str__(self) -> str:",
        "context": "\n        self.show = show\n        self.autolabel = autolabel\n\n    def __str__(self) -> str:\n        return str(self.dot)\n\n    def __enter__(self):\n        setdiagram(self)\n        return self",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 156,
        "coloffset": 4,
        "linematch": "def __str__(self) -> str:",
        "context": "\n        self.show = show\n        self.autolabel = autolabel\n\n    def __str__(self) -> str:\n        return str(self.dot)\n\n    def __enter__(self):\n        setdiagram(self)\n        return self",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 157,
        "coloffset": 8,
        "linematch": "return str(self.dot)",
        "context": "        self.show = show\n        self.autolabel = autolabel\n\n    def __str__(self) -> str:\n        return str(self.dot)\n\n    def __enter__(self):\n        setdiagram(self)\n        return self\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "_repr_png_",
    "function_scope": "169-170",
    "patterns": [
      {
        "lineno": 169,
        "coloffset": 4,
        "linematch": "def _repr_png_(self):",
        "context": "        # Remove the graphviz file leaving only the image.\n        os.remove(self.filename)\n        setdiagram(None)\n\n    def _repr_png_(self):\n        return self.dot.pipe(format=\"png\")\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 169,
        "coloffset": 4,
        "linematch": "def _repr_png_(self):",
        "context": "        # Remove the graphviz file leaving only the image.\n        os.remove(self.filename)\n        setdiagram(None)\n\n    def _repr_png_(self):\n        return self.dot.pipe(format=\"png\")\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 170,
        "coloffset": 8,
        "linematch": "return self.dot.pipe(format=\"png\")",
        "context": "        os.remove(self.filename)\n        setdiagram(None)\n\n    def _repr_png_(self):\n        return self.dot.pipe(format=\"png\")\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #103",
        "line": 170,
        "description": [
          "        return self.dot.pipe(format=\"png\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -167,7 +167,7 @@\n         setdiagram(None)\n \n     def _repr_png_(self):\n-        return self.dot.pipe(format=\"png\")\n+        return self.dot.pipe(format=\"XXpngXX\")\n \n     def _validate_direction(self, direction: str) -> bool:\n         return direction.upper() in self.__directions\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "_validate_curvestyle",
    "function_scope": "175-176",
    "patterns": [
      {
        "lineno": 175,
        "coloffset": 4,
        "linematch": "def _validate_curvestyle(self, curvestyle: str) -> bool:",
        "context": "\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 175,
        "coloffset": 4,
        "linematch": "def _validate_curvestyle(self, curvestyle: str) -> bool:",
        "context": "\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 176,
        "coloffset": 8,
        "linematch": "return curvestyle.lower() in self.__curvestyles",
        "context": "    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #105",
        "line": 176,
        "description": [
          "        return curvestyle.lower() in self.__curvestyles"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "_validate_outformat",
    "function_scope": "178-179",
    "patterns": [
      {
        "lineno": 178,
        "coloffset": 4,
        "linematch": "def _validate_outformat(self, outformat: str) -> bool:",
        "context": "\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 178,
        "coloffset": 4,
        "linematch": "def _validate_outformat(self, outformat: str) -> bool:",
        "context": "\n    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 179,
        "coloffset": 8,
        "linematch": "return outformat.lower() in self.__outformats",
        "context": "    def _validate_curvestyle(self, curvestyle: str) -> bool:\n        return curvestyle.lower() in self.__curvestyles\n\n    def _validate_outformat(self, outformat: str) -> bool:\n        return outformat.lower() in self.__outformats\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #106",
        "line": 179,
        "description": [
          "        return outformat.lower() in self.__outformats"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "__enter__",
    "function_scope": "262-264",
    "patterns": [
      {
        "lineno": 262,
        "coloffset": 4,
        "linematch": "def __enter__(self):",
        "context": "\n        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 262,
        "coloffset": 4,
        "linematch": "def __enter__(self):",
        "context": "\n        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 263,
        "coloffset": 8,
        "linematch": "setcluster(self)",
        "context": "        # Merge passed in attributes\n        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 264,
        "coloffset": 8,
        "linematch": "return self",
        "context": "        self.dot.graph_attr.update(graph_attr)\n\n    def __enter__(self):\n        setcluster(self)\n        return self\n\n    def __exit__(self, exc_type, exc_value, traceback):\n        if self._parent:\n            self._parent.subgraph(self.dot)\n        else:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #160",
        "line": 263,
        "description": [
          "        setcluster(self)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "_validate_direction",
    "function_scope": "273-274",
    "patterns": [
      {
        "lineno": 273,
        "coloffset": 4,
        "linematch": "def _validate_direction(self, direction: str) -> bool:",
        "context": "        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 273,
        "coloffset": 4,
        "linematch": "def _validate_direction(self, direction: str) -> bool:",
        "context": "        else:\n            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 274,
        "coloffset": 8,
        "linematch": "return direction.upper() in self.__directions",
        "context": "            self._diagram.subgraph(self.dot)\n        setcluster(self._parent)\n\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #161",
        "line": 274,
        "description": [
          "        return direction.upper() in self.__directions"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "node",
    "function_scope": "276-278",
    "patterns": [
      {
        "lineno": 276,
        "coloffset": 4,
        "linematch": "def node(self, nodeid: str, label: str, **attrs) -> None:",
        "context": "\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 276,
        "coloffset": 4,
        "linematch": "def node(self, nodeid: str, label: str, **attrs) -> None:",
        "context": "\n    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 277,
        "coloffset": 8,
        "linematch": "\"\"\"Create a new node in the cluster.\"\"\"",
        "context": "    def _validate_direction(self, direction: str) -> bool:\n        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 278,
        "coloffset": 8,
        "linematch": "self.dot.node(nodeid, label=label, **attrs)",
        "context": "        return direction.upper() in self.__directions\n\n    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "subgraph",
    "function_scope": "280-281",
    "patterns": [
      {
        "lineno": 280,
        "coloffset": 4,
        "linematch": "def subgraph(self, dot: Digraph) -> None:",
        "context": "    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)\n\n\nclass Node:\n    \"\"\"Node represents a node for a specific backend service.\"\"\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 280,
        "coloffset": 4,
        "linematch": "def subgraph(self, dot: Digraph) -> None:",
        "context": "    def node(self, nodeid: str, label: str, **attrs) -> None:\n        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)\n\n\nclass Node:\n    \"\"\"Node represents a node for a specific backend service.\"\"\"",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 281,
        "coloffset": 8,
        "linematch": "self.dot.subgraph(dot)",
        "context": "        \"\"\"Create a new node in the cluster.\"\"\"\n        self.dot.node(nodeid, label=label, **attrs)\n\n    def subgraph(self, dot: Digraph) -> None:\n        self.dot.subgraph(dot)\n\n\nclass Node:\n    \"\"\"Node represents a node for a specific backend service.\"\"\"\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "__repr__",
    "function_scope": "338-340",
    "patterns": [
      {
        "lineno": 338,
        "coloffset": 4,
        "linematch": "def __repr__(self):",
        "context": "            self._cluster.node(self._id, self.label, **self._attrs)\n        else:\n            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f\"<{self._provider}.{self._type}.{_name}>\"\n\n    def __sub__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n        \"\"\"Implement Self - Node, Self - [Nodes] and Self - Edge.\"\"\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 338,
        "coloffset": 4,
        "linematch": "def __repr__(self):",
        "context": "            self._cluster.node(self._id, self.label, **self._attrs)\n        else:\n            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f\"<{self._provider}.{self._type}.{_name}>\"\n\n    def __sub__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n        \"\"\"Implement Self - Node, Self - [Nodes] and Self - Edge.\"\"\"",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 339,
        "coloffset": 8,
        "linematch": "_name = self.__class__.__name__",
        "context": "        else:\n            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f\"<{self._provider}.{self._type}.{_name}>\"\n\n    def __sub__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n        \"\"\"Implement Self - Node, Self - [Nodes] and Self - Edge.\"\"\"\n        if isinstance(other, list):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 340,
        "coloffset": 8,
        "linematch": "return f\"<{self._provider}.{self._type}.{_name}>\"",
        "context": "            self._diagram.node(self._id, self.label, **self._attrs)\n\n    def __repr__(self):\n        _name = self.__class__.__name__\n        return f\"<{self._provider}.{self._type}.{_name}>\"\n\n    def __sub__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n        \"\"\"Implement Self - Node, Self - [Nodes] and Self - Edge.\"\"\"\n        if isinstance(other, list):\n            for node in other:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #192",
        "line": 339,
        "description": [
          "        _name = self.__class__.__name__"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -336,7 +336,7 @@\n             self._diagram.node(self._id, self.label, **self._attrs)\n \n     def __repr__(self):\n-        _name = self.__class__.__name__\n+        _name = None\n         return f\"<{self._provider}.{self._type}.{_name}>\"\n \n     def __sub__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #193",
        "line": 340,
        "description": [
          "        return f\"<{self._provider}.{self._type}.{_name}>\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -337,7 +337,7 @@\n \n     def __repr__(self):\n         _name = self.__class__.__name__\n-        return f\"<{self._provider}.{self._type}.{_name}>\"\n+        return f\"XX<{self._provider}.{self._type}.{_name}>XX\"\n \n     def __sub__(self, other: Union[\"Node\", List[\"Node\"], \"Edge\"]):\n         \"\"\"Implement Self - Node, Self - [Nodes] and Self - Edge.\"\"\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "nodeid",
    "function_scope": "409-410",
    "patterns": [
      {
        "lineno": 409,
        "coloffset": 4,
        "linematch": "def nodeid(self):",
        "context": "                o.connect(self, Edge(self, reverse=True))\n        return self\n\n    @property\n    def nodeid(self):\n        return self._id\n\n    # TODO: option for adding flow description to the connection edge\n    def connect(self, node: \"Node\", edge: \"Edge\"):\n        \"\"\"Connect to other node.",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 409,
        "coloffset": 4,
        "linematch": "def nodeid(self):",
        "context": "                o.connect(self, Edge(self, reverse=True))\n        return self\n\n    @property\n    def nodeid(self):\n        return self._id\n\n    # TODO: option for adding flow description to the connection edge\n    def connect(self, node: \"Node\", edge: \"Edge\"):\n        \"\"\"Connect to other node.",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 410,
        "coloffset": 8,
        "linematch": "return self._id",
        "context": "        return self\n\n    @property\n    def nodeid(self):\n        return self._id\n\n    # TODO: option for adding flow description to the connection edge\n    def connect(self, node: \"Node\", edge: \"Edge\"):\n        \"\"\"Connect to other node.\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "_rand_id",
    "function_scope": "429-430",
    "patterns": [
      {
        "lineno": 429,
        "coloffset": 4,
        "linematch": "def _rand_id():",
        "context": "        self._diagram.connect(self, node, edge)\n        return node\n\n    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 429,
        "coloffset": 4,
        "linematch": "def _rand_id():",
        "context": "        self._diagram.connect(self, node, edge)\n        return node\n\n    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 430,
        "coloffset": 8,
        "linematch": "return uuid.uuid4().hex",
        "context": "        return node\n\n    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "_load_icon",
    "function_scope": "432-434",
    "patterns": [
      {
        "lineno": 432,
        "coloffset": 4,
        "linematch": "def _load_icon(self):",
        "context": "    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 15,
        "coloffset": 4,
        "linematch": "def _load_icon(self):",
        "context": "    _icon_dir = None\n\n    fontcolor = \"#ffffff\"\n\n    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 432,
        "coloffset": 4,
        "linematch": "def _load_icon(self):",
        "context": "    @staticmethod\n    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 433,
        "coloffset": 8,
        "linematch": "basedir = Path(os.path.abspath(os.path.dirname(__file__)))",
        "context": "    def _rand_id():\n        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:\n    \"\"\"Edge represents an edge between two nodes.\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 434,
        "coloffset": 8,
        "linematch": "return os.path.join(basedir.parent, self._icon_dir, self._icon)",
        "context": "        return uuid.uuid4().hex\n\n    def _load_icon(self):\n        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n        return os.path.join(basedir.parent, self._icon_dir, self._icon)\n\n\nclass Edge:\n    \"\"\"Edge represents an edge between two nodes.\"\"\"\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 16,
        "coloffset": 8,
        "linematch": "return self._icon",
        "context": "\n    fontcolor = \"#ffffff\"\n\n    def _load_icon(self):\n        return self._icon\n\n    def __init__(self, label, icon_path, *args, **kwargs):\n        self._icon = icon_path\n        super().__init__(label, *args, **kwargs)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #216",
        "line": 433,
        "description": [
          "        basedir = Path(os.path.abspath(os.path.dirname(__file__)))"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -430,7 +430,7 @@\n         return uuid.uuid4().hex\n \n     def _load_icon(self):\n-        basedir = Path(os.path.abspath(os.path.dirname(__file__)))\n+        basedir = None\n         return os.path.join(basedir.parent, self._icon_dir, self._icon)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "__sub__",
    "function_scope": "489-491",
    "patterns": [
      {
        "lineno": 489,
        "coloffset": 4,
        "linematch": "def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 489,
        "coloffset": 4,
        "linematch": "def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "        if style:\n            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 490,
        "coloffset": 8,
        "linematch": "\"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"",
        "context": "            self._attrs[\"style\"] = style\n        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 491,
        "coloffset": 8,
        "linematch": "return self.connect(other)",
        "context": "        self._attrs.update(attrs)\n\n    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "__rsub__",
    "function_scope": "493-495",
    "patterns": [
      {
        "lineno": 493,
        "coloffset": 4,
        "linematch": "def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "context": "    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 493,
        "coloffset": 4,
        "linematch": "def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "context": "    def __sub__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 494,
        "coloffset": 8,
        "linematch": "\"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"",
        "context": "        \"\"\"Implement Self - Node or Edge and Self - [Nodes]\"\"\"\n        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 495,
        "coloffset": 8,
        "linematch": "return self.append(other)",
        "context": "        return self.connect(other)\n\n    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "__rshift__",
    "function_scope": "497-500",
    "patterns": [
      {
        "lineno": 497,
        "coloffset": 4,
        "linematch": "def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 497,
        "coloffset": 4,
        "linematch": "def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "    def __rsub__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 498,
        "coloffset": 8,
        "linematch": "\"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"",
        "context": "        \"\"\"Called for [Nodes] or [Edges] - Self because list don't have __sub__ operators.\"\"\"\n        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 499,
        "coloffset": 8,
        "linematch": "self.forward = True",
        "context": "        return self.append(other)\n\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 500,
        "coloffset": 8,
        "linematch": "return self.connect(other)",
        "context": "\n    def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #241",
        "line": 499,
        "description": [
          "        self.forward = True"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -496,7 +496,7 @@\n \n     def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n         \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n-        self.forward = True\n+        self.forward = False\n         return self.connect(other)\n \n     def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #242",
        "line": 499,
        "description": [
          "        self.forward = True"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -496,7 +496,7 @@\n \n     def __rshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n         \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n-        self.forward = True\n+        self.forward = None\n         return self.connect(other)\n \n     def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "__lshift__",
    "function_scope": "502-505",
    "patterns": [
      {
        "lineno": 502,
        "coloffset": 4,
        "linematch": "def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 502,
        "coloffset": 4,
        "linematch": "def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):",
        "context": "        \"\"\"Implements Self >> Node or Edge and Self >> [Nodes].\"\"\"\n        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 503,
        "coloffset": 8,
        "linematch": "\"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"",
        "context": "        self.forward = True\n        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 504,
        "coloffset": 8,
        "linematch": "self.reverse = True",
        "context": "        return self.connect(other)\n\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 505,
        "coloffset": 8,
        "linematch": "return self.connect(other)",
        "context": "\n    def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #243",
        "line": 504,
        "description": [
          "        self.reverse = True"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -501,7 +501,7 @@\n \n     def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n         \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n-        self.reverse = True\n+        self.reverse = False\n         return self.connect(other)\n \n     def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #244",
        "line": 504,
        "description": [
          "        self.reverse = True"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -501,7 +501,7 @@\n \n     def __lshift__(self, other: Union[\"Node\", \"Edge\", List[\"Node\"]]):\n         \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n-        self.reverse = True\n+        self.reverse = None\n         return self.connect(other)\n \n     def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "__rrshift__",
    "function_scope": "507-509",
    "patterns": [
      {
        "lineno": 507,
        "coloffset": 4,
        "linematch": "def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "context": "        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 507,
        "coloffset": 4,
        "linematch": "def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "context": "        \"\"\"Implements Self << Node or Edge and Self << [Nodes].\"\"\"\n        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 508,
        "coloffset": 8,
        "linematch": "\"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"",
        "context": "        self.reverse = True\n        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 509,
        "coloffset": 8,
        "linematch": "return self.append(other, forward=True)",
        "context": "        return self.connect(other)\n\n    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #245",
        "line": 509,
        "description": [
          "        return self.append(other, forward=True)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -506,7 +506,7 @@\n \n     def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n         \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n-        return self.append(other, forward=True)\n+        return self.append(other, forward=False)\n \n     def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n         \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "__rlshift__",
    "function_scope": "511-513",
    "patterns": [
      {
        "lineno": 511,
        "coloffset": 4,
        "linematch": "def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "context": "    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 511,
        "coloffset": 4,
        "linematch": "def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:",
        "context": "    def __rrshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []",
        "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
        "check_id": "C002",
        "check_name": "nested-loop-conditions"
      },
      {
        "lineno": 512,
        "coloffset": 8,
        "linematch": "\"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"",
        "context": "        \"\"\"Called for [Nodes] or [Edges] >> Self because list of Edges don't have __rshift__ operators.\"\"\"\n        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 513,
        "coloffset": 8,
        "linematch": "return self.append(other, reverse=True)",
        "context": "        return self.append(other, forward=True)\n\n    def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n        \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n        return self.append(other, reverse=True)\n\n    def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n        result = []\n        for o in other:\n            if isinstance(o, Edge):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #246",
        "line": 513,
        "description": [
          "        return self.append(other, reverse=True)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -510,7 +510,7 @@\n \n     def __rlshift__(self, other: Union[List[\"Node\"], List[\"Edge\"]]) -> List[\"Edge\"]:\n         \"\"\"Called for [Nodes] or [Edges] << Self because list of Edges don't have __lshift__ operators.\"\"\"\n-        return self.append(other, reverse=True)\n+        return self.append(other, reverse=False)\n \n     def append(self, other: Union[List[\"Node\"], List[\"Edge\"]], forward=None, reverse=None) -> List[\"Edge\"]:\n         result = []\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "_format_node_label",
    "function_scope": "9-14",
    "patterns": [
      {
        "lineno": 9,
        "coloffset": 0,
        "linematch": "def _format_node_label(name, key, description):",
        "context": "import textwrap\nfrom diagrams import Cluster, Node, Edge\n\n\ndef _format_node_label(name, key, description):\n    \"\"\"Create a graphviz label string for a C4 node\"\"\"\n    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 10,
        "coloffset": 4,
        "linematch": "\"\"\"Create a graphviz label string for a C4 node\"\"\"",
        "context": "from diagrams import Cluster, Node, Edge\n\n\ndef _format_node_label(name, key, description):\n    \"\"\"Create a graphviz label string for a C4 node\"\"\"\n    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 11,
        "coloffset": 4,
        "linematch": "title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'",
        "context": "\n\ndef _format_node_label(name, key, description):\n    \"\"\"Create a graphviz label string for a C4 node\"\"\"\n    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 12,
        "coloffset": 4,
        "linematch": "subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"",
        "context": "\ndef _format_node_label(name, key, description):\n    \"\"\"Create a graphviz label string for a C4 node\"\"\"\n    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n\n\ndef _format_description(description):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 13,
        "coloffset": 4,
        "linematch": "text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"",
        "context": "def _format_node_label(name, key, description):\n    \"\"\"Create a graphviz label string for a C4 node\"\"\"\n    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n\n\ndef _format_description(description):\n    \"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "return f\"<{title}{subtitle}{text}>\"",
        "context": "    \"\"\"Create a graphviz label string for a C4 node\"\"\"\n    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n\n\ndef _format_description(description):\n    \"\"\"\n    Formats the description string so it fits into the C4 nodes.",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #1",
        "line": 14,
        "description": [
          "__diagram = contextvars.ContextVar(\"diagrams\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -11,7 +11,7 @@\n # These global contexts are for letting the clusters and nodes know\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n-__diagram = contextvars.ContextVar(\"diagrams\")\n+__diagram = contextvars.ContextVar(\"XXdiagramsXX\")\n __cluster = contextvars.ContextVar(\"cluster\")\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2",
        "line": 14,
        "description": [
          "__diagram = contextvars.ContextVar(\"diagrams\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #367",
        "line": 9,
        "description": [
          "    _provider = \"openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = \"openstack\"\n+    _provider = \"XXopenstackXX\"\n     _icon_dir = \"resources/openstack\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #368",
        "line": 9,
        "description": [
          "    _provider = \"openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OpenStack(Node):\n-    _provider = \"openstack\"\n+    _provider = None\n     _icon_dir = \"resources/openstack\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #369",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = \"openstack\"\n-    _icon_dir = \"resources/openstack\"\n+    _icon_dir = \"XXresources/openstackXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #370",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/openstack\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OpenStack(Node):\n     _provider = \"openstack\"\n-    _icon_dir = \"resources/openstack\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #371",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"openstack\"\n     _icon_dir = \"resources/openstack\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #372",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"openstack\"\n     _icon_dir = \"resources/openstack\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #566",
        "line": 9,
        "description": [
          "    _provider = \"elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = \"elastic\"\n+    _provider = \"XXelasticXX\"\n     _icon_dir = \"resources/elastic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #567",
        "line": 9,
        "description": [
          "    _provider = \"elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Elastic(Node):\n-    _provider = \"elastic\"\n+    _provider = None\n     _icon_dir = \"resources/elastic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #568",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = \"elastic\"\n-    _icon_dir = \"resources/elastic\"\n+    _icon_dir = \"XXresources/elasticXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #569",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/elastic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Elastic(Node):\n     _provider = \"elastic\"\n-    _icon_dir = \"resources/elastic\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #570",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"elastic\"\n     _icon_dir = \"resources/elastic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #571",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"elastic\"\n     _icon_dir = \"resources/elastic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #744",
        "line": 9,
        "description": [
          "    _provider = \"azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = \"azure\"\n+    _provider = \"XXazureXX\"\n     _icon_dir = \"resources/azure\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #745",
        "line": 9,
        "description": [
          "    _provider = \"azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Azure(Node):\n-    _provider = \"azure\"\n+    _provider = None\n     _icon_dir = \"resources/azure\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #746",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = \"azure\"\n-    _icon_dir = \"resources/azure\"\n+    _icon_dir = \"XXresources/azureXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #747",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/azure\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Azure(Node):\n     _provider = \"azure\"\n-    _icon_dir = \"resources/azure\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #748",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"azure\"\n     _icon_dir = \"resources/azure\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #749",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"azure\"\n     _icon_dir = \"resources/azure\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1402",
        "line": 9,
        "description": [
          "    _provider = \"onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = \"onprem\"\n+    _provider = \"XXonpremXX\"\n     _icon_dir = \"resources/onprem\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1403",
        "line": 9,
        "description": [
          "    _provider = \"onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OnPrem(Node):\n-    _provider = \"onprem\"\n+    _provider = None\n     _icon_dir = \"resources/onprem\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1404",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = \"onprem\"\n-    _icon_dir = \"resources/onprem\"\n+    _icon_dir = \"XXresources/onpremXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1405",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/onprem\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OnPrem(Node):\n     _provider = \"onprem\"\n-    _icon_dir = \"resources/onprem\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1406",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"onprem\"\n     _icon_dir = \"resources/onprem\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1407",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"onprem\"\n     _icon_dir = \"resources/onprem\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1710",
        "line": 9,
        "description": [
          "    _provider = \"k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = \"k8s\"\n+    _provider = \"XXk8sXX\"\n     _icon_dir = \"resources/k8s\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1711",
        "line": 9,
        "description": [
          "    _provider = \"k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _K8S(Node):\n-    _provider = \"k8s\"\n+    _provider = None\n     _icon_dir = \"resources/k8s\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1712",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = \"k8s\"\n-    _icon_dir = \"resources/k8s\"\n+    _icon_dir = \"XXresources/k8sXX\"\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1713",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/k8s\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -7,7 +7,7 @@\n \n class _K8S(Node):\n     _provider = \"k8s\"\n-    _icon_dir = \"resources/k8s\"\n+    _icon_dir = None\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1714",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"k8s\"\n     _icon_dir = \"resources/k8s\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = \"XX#2d3436XX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1715",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"k8s\"\n     _icon_dir = \"resources/k8s\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1828",
        "line": 9,
        "description": [
          "    _provider = \"digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = \"digitalocean\"\n+    _provider = \"XXdigitaloceanXX\"\n     _icon_dir = \"resources/digitalocean\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1829",
        "line": 9,
        "description": [
          "    _provider = \"digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _DigitalOcean(Node):\n-    _provider = \"digitalocean\"\n+    _provider = None\n     _icon_dir = \"resources/digitalocean\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1830",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = \"digitalocean\"\n-    _icon_dir = \"resources/digitalocean\"\n+    _icon_dir = \"XXresources/digitaloceanXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1831",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/digitalocean\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -7,7 +7,7 @@\n \n class _DigitalOcean(Node):\n     _provider = \"digitalocean\"\n-    _icon_dir = \"resources/digitalocean\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1832",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"digitalocean\"\n     _icon_dir = \"resources/digitalocean\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1833",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"digitalocean\"\n     _icon_dir = \"resources/digitalocean\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2048",
        "line": 9,
        "description": [
          "    _provider = \"oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = \"oci\"\n+    _provider = \"XXociXX\"\n     _icon_dir = \"resources/oci\"\n \n     fontcolor = \"#312D2A\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2049",
        "line": 9,
        "description": [
          "    _provider = \"oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _OCI(Node):\n-    _provider = \"oci\"\n+    _provider = None\n     _icon_dir = \"resources/oci\"\n \n     fontcolor = \"#312D2A\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2050",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = \"oci\"\n-    _icon_dir = \"resources/oci\"\n+    _icon_dir = \"XXresources/ociXX\"\n \n     fontcolor = \"#312D2A\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2051",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/oci\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -7,7 +7,7 @@\n \n class _OCI(Node):\n     _provider = \"oci\"\n-    _icon_dir = \"resources/oci\"\n+    _icon_dir = None\n \n     fontcolor = \"#312D2A\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2052",
        "line": 12,
        "description": [
          "    fontcolor = \"#312D2A\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"oci\"\n     _icon_dir = \"resources/oci\"\n \n-    fontcolor = \"#312D2A\"\n+    fontcolor = \"XX#312D2AXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2053",
        "line": 12,
        "description": [
          "    fontcolor = \"#312D2A\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"oci\"\n     _icon_dir = \"resources/oci\"\n \n-    fontcolor = \"#312D2A\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2257",
        "line": 9,
        "description": [
          "    _provider = \"gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = \"gcp\"\n+    _provider = \"XXgcpXX\"\n     _icon_dir = \"resources/gcp\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2258",
        "line": 9,
        "description": [
          "    _provider = \"gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _GCP(Node):\n-    _provider = \"gcp\"\n+    _provider = None\n     _icon_dir = \"resources/gcp\"\n \n     fontcolor = \"#2d3436\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2259",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = \"gcp\"\n-    _icon_dir = \"resources/gcp\"\n+    _icon_dir = \"XXresources/gcpXX\"\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2260",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/gcp\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -7,7 +7,7 @@\n \n class _GCP(Node):\n     _provider = \"gcp\"\n-    _icon_dir = \"resources/gcp\"\n+    _icon_dir = None\n \n     fontcolor = \"#2d3436\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2261",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"gcp\"\n     _icon_dir = \"resources/gcp\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = \"XX#2d3436XX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2262",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"gcp\"\n     _icon_dir = \"resources/gcp\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2572",
        "line": 9,
        "description": [
          "    _provider = \"alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = \"alibabacloud\"\n+    _provider = \"XXalibabacloudXX\"\n     _icon_dir = \"resources/alibabacloud\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2573",
        "line": 9,
        "description": [
          "    _provider = \"alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AlibabaCloud(Node):\n-    _provider = \"alibabacloud\"\n+    _provider = None\n     _icon_dir = \"resources/alibabacloud\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2574",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = \"alibabacloud\"\n-    _icon_dir = \"resources/alibabacloud\"\n+    _icon_dir = \"XXresources/alibabacloudXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2575",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/alibabacloud\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AlibabaCloud(Node):\n     _provider = \"alibabacloud\"\n-    _icon_dir = \"resources/alibabacloud\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2576",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"alibabacloud\"\n     _icon_dir = \"resources/alibabacloud\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2577",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"alibabacloud\"\n     _icon_dir = \"resources/alibabacloud\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2889",
        "line": 9,
        "description": [
          "    _provider = \"ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = \"ibm\"\n+    _provider = \"XXibmXX\"\n     _icon_dir = \"resources/ibm\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2890",
        "line": 9,
        "description": [
          "    _provider = \"ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _IBM(Node):\n-    _provider = \"ibm\"\n+    _provider = None\n     _icon_dir = \"resources/ibm\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2891",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = \"ibm\"\n-    _icon_dir = \"resources/ibm\"\n+    _icon_dir = \"XXresources/ibmXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2892",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/ibm\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -7,7 +7,7 @@\n \n class _IBM(Node):\n     _provider = \"ibm\"\n-    _icon_dir = \"resources/ibm\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2893",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"ibm\"\n     _icon_dir = \"resources/ibm\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2894",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"ibm\"\n     _icon_dir = \"resources/ibm\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3194",
        "line": 9,
        "description": [
          "    _provider = \"firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = \"firebase\"\n+    _provider = \"XXfirebaseXX\"\n     _icon_dir = \"resources/firebase\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3195",
        "line": 9,
        "description": [
          "    _provider = \"firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Firebase(Node):\n-    _provider = \"firebase\"\n+    _provider = None\n     _icon_dir = \"resources/firebase\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3196",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = \"firebase\"\n-    _icon_dir = \"resources/firebase\"\n+    _icon_dir = \"XXresources/firebaseXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3197",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/firebase\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Firebase(Node):\n     _provider = \"firebase\"\n-    _icon_dir = \"resources/firebase\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3198",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"firebase\"\n     _icon_dir = \"resources/firebase\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3199",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"firebase\"\n     _icon_dir = \"resources/firebase\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3276",
        "line": 9,
        "description": [
          "    _provider = \"programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = \"programming\"\n+    _provider = \"XXprogrammingXX\"\n     _icon_dir = \"resources/programming\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3277",
        "line": 9,
        "description": [
          "    _provider = \"programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Programming(Node):\n-    _provider = \"programming\"\n+    _provider = None\n     _icon_dir = \"resources/programming\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3278",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = \"programming\"\n-    _icon_dir = \"resources/programming\"\n+    _icon_dir = \"XXresources/programmingXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3279",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/programming\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Programming(Node):\n     _provider = \"programming\"\n-    _icon_dir = \"resources/programming\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3280",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"programming\"\n     _icon_dir = \"resources/programming\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3281",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"programming\"\n     _icon_dir = \"resources/programming\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3446",
        "line": 9,
        "description": [
          "    provider = \"generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = \"generic\"\n+    provider = \"XXgenericXX\"\n     _icon_dir = \"resources/generic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3447",
        "line": 9,
        "description": [
          "    provider = \"generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Generic(Node):\n-    provider = \"generic\"\n+    provider = None\n     _icon_dir = \"resources/generic\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3448",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = \"generic\"\n-    _icon_dir = \"resources/generic\"\n+    _icon_dir = \"XXresources/genericXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3449",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/generic\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Generic(Node):\n     provider = \"generic\"\n-    _icon_dir = \"resources/generic\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3450",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = \"generic\"\n     _icon_dir = \"resources/generic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3451",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = \"generic\"\n     _icon_dir = \"resources/generic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3763",
        "line": 9,
        "description": [
          "    _provider = \"aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = \"aws\"\n+    _provider = \"XXawsXX\"\n     _icon_dir = \"resources/aws\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3764",
        "line": 9,
        "description": [
          "    _provider = \"aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _AWS(Node):\n-    _provider = \"aws\"\n+    _provider = None\n     _icon_dir = \"resources/aws\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3765",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = \"aws\"\n-    _icon_dir = \"resources/aws\"\n+    _icon_dir = \"XXresources/awsXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3766",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/aws\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -7,7 +7,7 @@\n \n class _AWS(Node):\n     _provider = \"aws\"\n-    _icon_dir = \"resources/aws\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3767",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"aws\"\n     _icon_dir = \"resources/aws\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3768",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"aws\"\n     _icon_dir = \"resources/aws\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4603",
        "line": 11,
        "description": [
          "    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n-    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n+    title = f'XX<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>XX'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4604",
        "line": 11,
        "description": [
          "    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n-    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n+    title = None\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4605",
        "line": 12,
        "description": [
          "    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n-    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n+    subtitle = f'XX<font point-size=\"9\">[{html.escape(key)}]<br/></font>XX' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4606",
        "line": 12,
        "description": [
          "    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n-    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n+    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"XXXX\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4607",
        "line": 12,
        "description": [
          "    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n-    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n+    subtitle = None\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4608",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = f'XX<br/><font point-size=\"10\">{_format_description(description)}</font>XX' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4609",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"XXXX\"\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4610",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = None\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4611",
        "line": 14,
        "description": [
          "    return f\"<{title}{subtitle}{text}>\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -11,7 +11,7 @@\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n-    return f\"<{title}{subtitle}{text}>\"\n+    return f\"XX<{title}{subtitle}{text}>XX\"\n \n \n def _format_description(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4718",
        "line": 9,
        "description": [
          "    _provider = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = \"custom\"\n+    _provider = \"XXcustomXX\"\n     _type = \"custom\"\n     _icon_dir = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4719",
        "line": 9,
        "description": [
          "    _provider = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class Custom(Node):\n-    _provider = \"custom\"\n+    _provider = None\n     _type = \"custom\"\n     _icon_dir = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4720",
        "line": 10,
        "description": [
          "    _type = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = \"custom\"\n-    _type = \"custom\"\n+    _type = \"XXcustomXX\"\n     _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4721",
        "line": 10,
        "description": [
          "    _type = \"custom\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -7,7 +7,7 @@\n \n class Custom(Node):\n     _provider = \"custom\"\n-    _type = \"custom\"\n+    _type = None\n     _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4722",
        "line": 11,
        "description": [
          "    _icon_dir = None"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -8,7 +8,7 @@\n class Custom(Node):\n     _provider = \"custom\"\n     _type = \"custom\"\n-    _icon_dir = None\n+    _icon_dir = \"\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4723",
        "line": 13,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = \"custom\"\n     _icon_dir = None\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n     def _load_icon(self):\n         return self._icon\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4724",
        "line": 13,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = \"custom\"\n     _icon_dir = None\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n     def _load_icon(self):\n         return self._icon\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4758",
        "line": 9,
        "description": [
          "    _provider = \"saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = \"saas\"\n+    _provider = \"XXsaasXX\"\n     _icon_dir = \"resources/saas\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4759",
        "line": 9,
        "description": [
          "    _provider = \"saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Saas(Node):\n-    _provider = \"saas\"\n+    _provider = None\n     _icon_dir = \"resources/saas\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4760",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = \"saas\"\n-    _icon_dir = \"resources/saas\"\n+    _icon_dir = \"XXresources/saasXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4761",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/saas\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Saas(Node):\n     _provider = \"saas\"\n-    _icon_dir = \"resources/saas\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4762",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"saas\"\n     _icon_dir = \"resources/saas\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4763",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"saas\"\n     _icon_dir = \"resources/saas\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4838",
        "line": 9,
        "description": [
          "    _provider = \"base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = \"base\"\n+    _provider = \"XXbaseXX\"\n     _icon_dir = \"resources/base\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4839",
        "line": 9,
        "description": [
          "    _provider = \"base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -6,7 +6,7 @@\n \n \n class _Base(Node):\n-    _provider = \"base\"\n+    _provider = None\n     _icon_dir = \"resources/base\"\n \n     fontcolor = \"#ffffff\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4840",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = \"base\"\n-    _icon_dir = \"resources/base\"\n+    _icon_dir = \"XXresources/baseXX\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4841",
        "line": 10,
        "description": [
          "    _icon_dir = \"resources/base\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -7,7 +7,7 @@\n \n class _Base(Node):\n     _provider = \"base\"\n-    _icon_dir = \"resources/base\"\n+    _icon_dir = None\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4842",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"base\"\n     _icon_dir = \"resources/base\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4843",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"base\"\n     _icon_dir = \"resources/base\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.8771929824561403
  },
  {
    "function_name": "_format_description",
    "function_scope": "17-29",
    "patterns": [
      {
        "lineno": 17,
        "coloffset": 0,
        "linematch": "def _format_description(description):",
        "context": "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n\n\ndef _format_description(description):\n    \"\"\"\n    Formats the description string so it fits into the C4 nodes.\n\n    It line-breaks the description so it fits onto exactly three lines. If there are more\n    than three lines, all further lines are discarded and \"...\" inserted on the last line to",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 17,
        "coloffset": 0,
        "linematch": "def _format_description(description):",
        "context": "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n    return f\"<{title}{subtitle}{text}>\"\n\n\ndef _format_description(description):\n    \"\"\"\n    Formats the description string so it fits into the C4 nodes.\n\n    It line-breaks the description so it fits onto exactly three lines. If there are more\n    than three lines, all further lines are discarded and \"...\" inserted on the last line to",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 18,
        "coloffset": 4,
        "linematch": "\"\"\"",
        "context": "    return f\"<{title}{subtitle}{text}>\"\n\n\ndef _format_description(description):\n    \"\"\"\n    Formats the description string so it fits into the C4 nodes.\n\n    It line-breaks the description so it fits onto exactly three lines. If there are more\n    than three lines, all further lines are discarded and \"...\" inserted on the last line to\n    indicate that it was shortened. This will also html-escape the description so it can",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "wrapper = textwrap.TextWrapper(width=40, max_lines=3)",
        "context": "    than three lines, all further lines are discarded and \"...\" inserted on the last line to\n    indicate that it was shortened. This will also html-escape the description so it can\n    safely be included in a HTML label.\n    \"\"\"\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return \"<br/>\".join(lines)\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 27,
        "coloffset": 4,
        "linematch": "lines = [html.escape(line) for line in wrapper.wrap(description)]",
        "context": "    indicate that it was shortened. This will also html-escape the description so it can\n    safely be included in a HTML label.\n    \"\"\"\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return \"<br/>\".join(lines)\n\n\ndef _format_edge_label(description):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 28,
        "coloffset": 4,
        "linematch": "lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three",
        "context": "    safely be included in a HTML label.\n    \"\"\"\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return \"<br/>\".join(lines)\n\n\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "return \"<br/>\".join(lines)",
        "context": "    \"\"\"\n    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return \"<br/>\".join(lines)\n\n\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4612",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=41, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4613",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=40, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4614",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4615",
        "line": 27,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4616",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines = [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4617",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4618",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"XXXX\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4619",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4620",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"\"] * (4 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4621",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"\"] * (3 + len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4622",
        "line": 29,
        "description": [
          "    return \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return \"<br/>\".join(lines)\n+    return \"XX<br/>XX\".join(lines)\n \n \n def _format_edge_label(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4725",
        "line": 19,
        "description": [
          "        self._icon = icon_path"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 33.33333333333333
  },
  {
    "function_name": "_format_edge_label",
    "function_scope": "32-37",
    "patterns": [
      {
        "lineno": 32,
        "coloffset": 0,
        "linematch": "def _format_edge_label(description):",
        "context": "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return \"<br/>\".join(lines)\n\n\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 32,
        "coloffset": 0,
        "linematch": "def _format_edge_label(description):",
        "context": "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n    return \"<br/>\".join(lines)\n\n\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "\"\"\"Create a graphviz label string for a C4 edge\"\"\"",
        "context": "    return \"<br/>\".join(lines)\n\n\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 34,
        "coloffset": 4,
        "linematch": "wrapper = textwrap.TextWrapper(width=24, max_lines=3)",
        "context": "\n\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 35,
        "coloffset": 4,
        "linematch": "lines = [html.escape(line) for line in wrapper.wrap(description)]",
        "context": "\ndef _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'\n\n\ndef C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "text = \"<br/>\".join(lines)",
        "context": "def _format_edge_label(description):\n    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'\n\n\ndef C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n    key = f\"{type}: {technology}\" if technology else type",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 37,
        "coloffset": 4,
        "linematch": "return f'<<font point-size=\"10\">{text}</font>>'",
        "context": "    \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n    lines = [html.escape(line) for line in wrapper.wrap(description)]\n    text = \"<br/>\".join(lines)\n    return f'<<font point-size=\"10\">{text}</font>>'\n\n\ndef C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n    key = f\"{type}: {technology}\" if technology else type\n    node_attributes = {",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4623",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=25, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4624",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=24, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4625",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4626",
        "line": 35,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4627",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = \"XX<br/>XX\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4628",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = None\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4629",
        "line": 37,
        "description": [
          "    return f'<<font point-size=\"10\">{text}</font>>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n-    return f'<<font point-size=\"10\">{text}</font>>'\n+    return f'XX<<font point-size=\"10\">{text}</font>>XX'\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 28.57142857142857
  },
  {
    "function_name": "Container",
    "function_scope": "60-68",
    "patterns": [
      {
        "lineno": 60,
        "coloffset": 0,
        "linematch": "def Container(name, technology=\"\", description=\"\", **kwargs):",
        "context": "    node_attributes.update(kwargs)\n    return Node(**node_attributes)\n\n\ndef Container(name, technology=\"\", description=\"\", **kwargs):\n    container_attributes = {\n        \"name\": name,\n        \"technology\": technology,\n        \"description\": description,\n        \"type\": \"Container\",",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 61,
        "coloffset": 4,
        "linematch": "container_attributes = {",
        "context": "    return Node(**node_attributes)\n\n\ndef Container(name, technology=\"\", description=\"\", **kwargs):\n    container_attributes = {\n        \"name\": name,\n        \"technology\": technology,\n        \"description\": description,\n        \"type\": \"Container\",\n    }",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 67,
        "coloffset": 4,
        "linematch": "container_attributes.update(kwargs)",
        "context": "        \"technology\": technology,\n        \"description\": description,\n        \"type\": \"Container\",\n    }\n    container_attributes.update(kwargs)\n    return C4Node(**container_attributes)\n\n\ndef Database(name, technology=\"\", description=\"\", **kwargs):\n    database_attributes = {",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 68,
        "coloffset": 4,
        "linematch": "return C4Node(**container_attributes)",
        "context": "        \"description\": description,\n        \"type\": \"Container\",\n    }\n    container_attributes.update(kwargs)\n    return C4Node(**container_attributes)\n\n\ndef Database(name, technology=\"\", description=\"\", **kwargs):\n    database_attributes = {\n        \"name\": name,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #42",
        "line": 60,
        "description": [
          "        \"height\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n-        \"height\": \"1.4\",\n+        \"XXheightXX\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #43",
        "line": 60,
        "description": [
          "        \"height\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n-        \"height\": \"1.4\",\n+        \"height\": \"XX1.4XX\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #44",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"XXlabellocXX\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #45",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"labelloc\": \"XXbXX\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #46",
        "line": 66,
        "description": [
          "        \"imagescale\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # \"imagepos\": \"tc\",\n-        \"imagescale\": \"true\",\n+        \"XXimagescaleXX\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #47",
        "line": 66,
        "description": [
          "        \"imagescale\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -63,7 +63,7 @@\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # \"imagepos\": \"tc\",\n-        \"imagescale\": \"true\",\n+        \"imagescale\": \"XXtrueXX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #48",
        "line": 67,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -64,7 +64,7 @@\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # \"imagepos\": \"tc\",\n         \"imagescale\": \"true\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"XXfontnameXX\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #49",
        "line": 67,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -64,7 +64,7 @@\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n         # \"imagepos\": \"tc\",\n         \"imagescale\": \"true\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"fontname\": \"XXSans-SerifXX\",\n         \"fontsize\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #50",
        "line": 68,
        "description": [
          "        \"fontsize\": \"13\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # \"imagepos\": \"tc\",\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"13\",\n+        \"XXfontsizeXX\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #51",
        "line": 68,
        "description": [
          "        \"fontsize\": \"13\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # \"imagepos\": \"tc\",\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"13\",\n+        \"fontsize\": \"XX13XX\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4658",
        "line": 60,
        "description": [
          "def Container(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology=\"\", description=\"\", **kwargs):\n+def Container(name, technology=\"XXXX\", description=\"\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4659",
        "line": 60,
        "description": [
          "def Container(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology=\"\", description=\"\", **kwargs):\n+def Container(name, technology=\"\", description=\"XXXX\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4660",
        "line": 62,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4661",
        "line": 63,
        "description": [
          "        \"technology\": technology,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -60,7 +60,7 @@\n def Container(name, technology=\"\", description=\"\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n-        \"technology\": technology,\n+        \"XXtechnologyXX\": technology,\n         \"description\": description,\n         \"type\": \"Container\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4662",
        "line": 64,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -61,7 +61,7 @@\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"Container\",\n     }\n     container_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4663",
        "line": 65,
        "description": [
          "        \"type\": \"Container\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Container\",\n+        \"XXtypeXX\": \"Container\",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4664",
        "line": 65,
        "description": [
          "        \"type\": \"Container\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Container\",\n+        \"type\": \"XXContainerXX\",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4665",
        "line": 66,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 11.11111111111111
  },
  {
    "function_name": "Database",
    "function_scope": "71-81",
    "patterns": [
      {
        "lineno": 71,
        "coloffset": 0,
        "linematch": "def Database(name, technology=\"\", description=\"\", **kwargs):",
        "context": "    container_attributes.update(kwargs)\n    return C4Node(**container_attributes)\n\n\ndef Database(name, technology=\"\", description=\"\", **kwargs):\n    database_attributes = {\n        \"name\": name,\n        \"technology\": technology,\n        \"description\": description,\n        \"type\": \"Database\",",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 72,
        "coloffset": 4,
        "linematch": "database_attributes = {",
        "context": "    return C4Node(**container_attributes)\n\n\ndef Database(name, technology=\"\", description=\"\", **kwargs):\n    database_attributes = {\n        \"name\": name,\n        \"technology\": technology,\n        \"description\": description,\n        \"type\": \"Database\",\n        \"shape\": \"cylinder\",",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 80,
        "coloffset": 4,
        "linematch": "database_attributes.update(kwargs)",
        "context": "        \"type\": \"Database\",\n        \"shape\": \"cylinder\",\n        \"labelloc\": \"b\",\n    }\n    database_attributes.update(kwargs)\n    return C4Node(**database_attributes)\n\n\ndef System(name, description=\"\", external=False, **kwargs):\n    system_attributes = {",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 81,
        "coloffset": 4,
        "linematch": "return C4Node(**database_attributes)",
        "context": "        \"shape\": \"cylinder\",\n        \"labelloc\": \"b\",\n    }\n    database_attributes.update(kwargs)\n    return C4Node(**database_attributes)\n\n\ndef System(name, description=\"\", external=False, **kwargs):\n    system_attributes = {\n        \"name\": name,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #55",
        "line": 72,
        "description": [
          "        \"color\": \"#7B8894\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n-        \"color\": \"#7B8894\",\n+        \"XXcolorXX\": \"#7B8894\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #56",
        "line": 72,
        "description": [
          "        \"color\": \"#7B8894\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n-        \"color\": \"#7B8894\",\n+        \"color\": \"XX#7B8894XX\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #57",
        "line": 73,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #58",
        "line": 81,
        "description": [
          "        name: str = \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -78,7 +78,7 @@\n     # TODO: Save directory option (filename + directory?)\n     def __init__(\n         self,\n-        name: str = \"\",\n+        name: str = \"XXXX\",\n         filename: str = \"\",\n         direction: str = \"LR\",\n         curvestyle: str = \"ortho\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4666",
        "line": 71,
        "description": [
          "def Database(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology=\"\", description=\"\", **kwargs):\n+def Database(name, technology=\"XXXX\", description=\"\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4667",
        "line": 71,
        "description": [
          "def Database(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology=\"\", description=\"\", **kwargs):\n+def Database(name, technology=\"\", description=\"XXXX\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4668",
        "line": 73,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4669",
        "line": 74,
        "description": [
          "        \"technology\": technology,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -71,7 +71,7 @@\n def Database(name, technology=\"\", description=\"\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n-        \"technology\": technology,\n+        \"XXtechnologyXX\": technology,\n         \"description\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4670",
        "line": 75,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -72,7 +72,7 @@\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4671",
        "line": 76,
        "description": [
          "        \"type\": \"Database\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Database\",\n+        \"XXtypeXX\": \"Database\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4672",
        "line": 76,
        "description": [
          "        \"type\": \"Database\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Database\",\n+        \"type\": \"XXDatabaseXX\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4673",
        "line": 77,
        "description": [
          "        \"shape\": \"cylinder\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         \"technology\": technology,\n         \"description\": description,\n         \"type\": \"Database\",\n-        \"shape\": \"cylinder\",\n+        \"XXshapeXX\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n     database_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4674",
        "line": 77,
        "description": [
          "        \"shape\": \"cylinder\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         \"technology\": technology,\n         \"description\": description,\n         \"type\": \"Database\",\n-        \"shape\": \"cylinder\",\n+        \"shape\": \"XXcylinderXX\",\n         \"labelloc\": \"b\",\n     }\n     database_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4675",
        "line": 78,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         \"description\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n-        \"labelloc\": \"b\",\n+        \"XXlabellocXX\": \"b\",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4676",
        "line": 78,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         \"description\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n-        \"labelloc\": \"b\",\n+        \"labelloc\": \"XXbXX\",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4677",
        "line": 79,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 18.75
  },
  {
    "function_name": "System",
    "function_scope": "84-92",
    "patterns": [
      {
        "lineno": 84,
        "coloffset": 0,
        "linematch": "def System(name, description=\"\", external=False, **kwargs):",
        "context": "    database_attributes.update(kwargs)\n    return C4Node(**database_attributes)\n\n\ndef System(name, description=\"\", external=False, **kwargs):\n    system_attributes = {\n        \"name\": name,\n        \"description\": description,\n        \"type\": \"External System\" if external else \"System\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 85,
        "coloffset": 4,
        "linematch": "system_attributes = {",
        "context": "    return C4Node(**database_attributes)\n\n\ndef System(name, description=\"\", external=False, **kwargs):\n    system_attributes = {\n        \"name\": name,\n        \"description\": description,\n        \"type\": \"External System\" if external else \"System\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n    }",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 91,
        "coloffset": 4,
        "linematch": "system_attributes.update(kwargs)",
        "context": "        \"description\": description,\n        \"type\": \"External System\" if external else \"System\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n    }\n    system_attributes.update(kwargs)\n    return C4Node(**system_attributes)\n\n\ndef Person(name, description=\"\", external=False, **kwargs):\n    person_attributes = {",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 92,
        "coloffset": 4,
        "linematch": "return C4Node(**system_attributes)",
        "context": "        \"type\": \"External System\" if external else \"System\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n    }\n    system_attributes.update(kwargs)\n    return C4Node(**system_attributes)\n\n\ndef Person(name, description=\"\", external=False, **kwargs):\n    person_attributes = {\n        \"name\": name,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #61",
        "line": 84,
        "description": [
          "        curvestyle: str = \"ortho\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #62",
        "line": 85,
        "description": [
          "        outformat: str = \"png\","
        ],
        "failure": []
      },
      {
        "name": "Mutant #63",
        "line": 86,
        "description": [
          "        autolabel: bool = False,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -83,7 +83,7 @@\n         direction: str = \"LR\",\n         curvestyle: str = \"ortho\",\n         outformat: str = \"png\",\n-        autolabel: bool = False,\n+        autolabel: bool = True,\n         show: bool = True,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #64",
        "line": 87,
        "description": [
          "        show: bool = True,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -84,7 +84,7 @@\n         curvestyle: str = \"ortho\",\n         outformat: str = \"png\",\n         autolabel: bool = False,\n-        show: bool = True,\n+        show: bool = False,\n         strict: bool = False,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #65",
        "line": 88,
        "description": [
          "        strict: bool = False,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -85,7 +85,7 @@\n         outformat: str = \"png\",\n         autolabel: bool = False,\n         show: bool = True,\n-        strict: bool = False,\n+        strict: bool = True,\n         graph_attr: Optional[dict] = None,\n         node_attr: Optional[dict] = None,\n         edge_attr: Optional[dict] = None,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4678",
        "line": 84,
        "description": [
          "def System(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description=\"\", external=False, **kwargs):\n+def System(name, description=\"XXXX\", external=False, **kwargs):\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4679",
        "line": 84,
        "description": [
          "def System(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -81,7 +81,7 @@\n     return C4Node(**database_attributes)\n \n \n-def System(name, description=\"\", external=False, **kwargs):\n+def System(name, description=\"\", external=True, **kwargs):\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4680",
        "line": 86,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4681",
        "line": 87,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -84,7 +84,7 @@\n def System(name, description=\"\", external=False, **kwargs):\n     system_attributes = {\n         \"name\": name,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"External System\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4682",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"XXtypeXX\": \"External System\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4683",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"type\": \"XXExternal SystemXX\" if external else \"System\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4684",
        "line": 88,
        "description": [
          "        \"type\": \"External System\" if external else \"System\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -85,7 +85,7 @@\n     system_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External System\" if external else \"System\",\n+        \"type\": \"External System\" if external else \"XXSystemXX\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4685",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"XXfillcolorXX\": \"gray60\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4686",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"XXgray60XX\" if external else \"dodgerblue4\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4687",
        "line": 89,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -86,7 +86,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External System\" if external else \"System\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"gray60\" if external else \"XXdodgerblue4XX\",\n     }\n     system_attributes.update(kwargs)\n     return C4Node(**system_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4688",
        "line": 90,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 25.0
  },
  {
    "function_name": "Person",
    "function_scope": "95-104",
    "patterns": [
      {
        "lineno": 95,
        "coloffset": 0,
        "linematch": "def Person(name, description=\"\", external=False, **kwargs):",
        "context": "    system_attributes.update(kwargs)\n    return C4Node(**system_attributes)\n\n\ndef Person(name, description=\"\", external=False, **kwargs):\n    person_attributes = {\n        \"name\": name,\n        \"description\": description,\n        \"type\": \"External Person\" if external else \"Person\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 96,
        "coloffset": 4,
        "linematch": "person_attributes = {",
        "context": "    return C4Node(**system_attributes)\n\n\ndef Person(name, description=\"\", external=False, **kwargs):\n    person_attributes = {\n        \"name\": name,\n        \"description\": description,\n        \"type\": \"External Person\" if external else \"Person\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n        \"style\": \"rounded,filled\",",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 103,
        "coloffset": 4,
        "linematch": "person_attributes.update(kwargs)",
        "context": "        \"type\": \"External Person\" if external else \"Person\",\n        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n        \"style\": \"rounded,filled\",\n    }\n    person_attributes.update(kwargs)\n    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 104,
        "coloffset": 4,
        "linematch": "return C4Node(**person_attributes)",
        "context": "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n        \"style\": \"rounded,filled\",\n    }\n    person_attributes.update(kwargs)\n    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {\n        \"label\": html.escape(name),",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4689",
        "line": 95,
        "description": [
          "def Person(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description=\"\", external=False, **kwargs):\n+def Person(name, description=\"XXXX\", external=False, **kwargs):\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4690",
        "line": 95,
        "description": [
          "def Person(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description=\"\", external=False, **kwargs):\n+def Person(name, description=\"\", external=True, **kwargs):\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4691",
        "line": 97,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4692",
        "line": 98,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -95,7 +95,7 @@\n def Person(name, description=\"\", external=False, **kwargs):\n     person_attributes = {\n         \"name\": name,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4693",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"XXtypeXX\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4694",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"XXExternal PersonXX\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4695",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"External Person\" if external else \"XXPersonXX\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4696",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"XXfillcolorXX\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4697",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"XXgray60XX\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4698",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"gray60\" if external else \"XXdodgerblue4XX\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4699",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"XXstyleXX\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4700",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"style\": \"XXrounded,filledXX\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4701",
        "line": 102,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 15.384615384615385
  },
  {
    "function_name": "SystemBoundary",
    "function_scope": "107-115",
    "patterns": [
      {
        "lineno": 107,
        "coloffset": 0,
        "linematch": "def SystemBoundary(name, **kwargs):",
        "context": "    person_attributes.update(kwargs)\n    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {\n        \"label\": html.escape(name),\n        \"bgcolor\": \"white\",\n        \"margin\": \"16\",\n        \"style\": \"dashed\",",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 108,
        "coloffset": 4,
        "linematch": "graph_attributes = {",
        "context": "    return C4Node(**person_attributes)\n\n\ndef SystemBoundary(name, **kwargs):\n    graph_attributes = {\n        \"label\": html.escape(name),\n        \"bgcolor\": \"white\",\n        \"margin\": \"16\",\n        \"style\": \"dashed\",\n    }",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 114,
        "coloffset": 4,
        "linematch": "graph_attributes.update(kwargs)",
        "context": "        \"bgcolor\": \"white\",\n        \"margin\": \"16\",\n        \"style\": \"dashed\",\n    }\n    graph_attributes.update(kwargs)\n    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label=\"\", **kwargs):\n    edge_attributes = {",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 115,
        "coloffset": 4,
        "linematch": "return Cluster(name, graph_attr=graph_attributes)",
        "context": "        \"margin\": \"16\",\n        \"style\": \"dashed\",\n    }\n    graph_attributes.update(kwargs)\n    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label=\"\", **kwargs):\n    edge_attributes = {\n        \"style\": \"dashed\",",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #66",
        "line": 108,
        "description": [
          "        if graph_attr is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #67",
        "line": 109,
        "description": [
          "            graph_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #68",
        "line": 110,
        "description": [
          "        if node_attr is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #69",
        "line": 111,
        "description": [
          "            node_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #70",
        "line": 112,
        "description": [
          "        if edge_attr is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #71",
        "line": 113,
        "description": [
          "            edge_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #72",
        "line": 114,
        "description": [
          "        self.name = name"
        ],
        "failure": []
      },
      {
        "name": "Mutant #73",
        "line": 115,
        "description": [
          "        if not name and not filename:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #74",
        "line": 115,
        "description": [
          "        if not name and not filename:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -112,7 +112,7 @@\n         if edge_attr is None:\n             edge_attr = {}\n         self.name = name\n-        if not name and not filename:\n+        if not name and  filename:\n             filename = None\n         elif not filename:\n             filename = \"_\".join(self.name.split()).lower()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #75",
        "line": 115,
        "description": [
          "        if not name and not filename:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4702",
        "line": 109,
        "description": [
          "        \"label\": html.escape(name),"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -106,7 +106,7 @@\n \n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n-        \"label\": html.escape(name),\n+        \"XXlabelXX\": html.escape(name),\n         \"bgcolor\": \"white\",\n         \"margin\": \"16\",\n         \"style\": \"dashed\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4703",
        "line": 110,
        "description": [
          "        \"bgcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         \"label\": html.escape(name),\n-        \"bgcolor\": \"white\",\n+        \"XXbgcolorXX\": \"white\",\n         \"margin\": \"16\",\n         \"style\": \"dashed\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4704",
        "line": 110,
        "description": [
          "        \"bgcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -107,7 +107,7 @@\n def SystemBoundary(name, **kwargs):\n     graph_attributes = {\n         \"label\": html.escape(name),\n-        \"bgcolor\": \"white\",\n+        \"bgcolor\": \"XXwhiteXX\",\n         \"margin\": \"16\",\n         \"style\": \"dashed\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4705",
        "line": 111,
        "description": [
          "        \"margin\": \"16\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n-        \"margin\": \"16\",\n+        \"XXmarginXX\": \"16\",\n         \"style\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4706",
        "line": 111,
        "description": [
          "        \"margin\": \"16\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n-        \"margin\": \"16\",\n+        \"margin\": \"XX16XX\",\n         \"style\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4707",
        "line": 112,
        "description": [
          "        \"style\": \"dashed\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -109,7 +109,7 @@\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n         \"margin\": \"16\",\n-        \"style\": \"dashed\",\n+        \"XXstyleXX\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n     return Cluster(name, graph_attr=graph_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4708",
        "line": 112,
        "description": [
          "        \"style\": \"dashed\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -109,7 +109,7 @@\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n         \"margin\": \"16\",\n-        \"style\": \"dashed\",\n+        \"style\": \"XXdashedXX\",\n     }\n     graph_attributes.update(kwargs)\n     return Cluster(name, graph_attr=graph_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4709",
        "line": 113,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 55.55555555555556
  },
  {
    "function_name": "Relationship",
    "function_scope": "118-125",
    "patterns": [
      {
        "lineno": 118,
        "coloffset": 0,
        "linematch": "def Relationship(label=\"\", **kwargs):",
        "context": "    graph_attributes.update(kwargs)\n    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label=\"\", **kwargs):\n    edge_attributes = {\n        \"style\": \"dashed\",\n        \"color\": \"gray60\",\n        \"label\": _format_edge_label(label) if label else \"\",\n    }",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 119,
        "coloffset": 4,
        "linematch": "edge_attributes = {",
        "context": "    return Cluster(name, graph_attr=graph_attributes)\n\n\ndef Relationship(label=\"\", **kwargs):\n    edge_attributes = {\n        \"style\": \"dashed\",\n        \"color\": \"gray60\",\n        \"label\": _format_edge_label(label) if label else \"\",\n    }\n    edge_attributes.update(kwargs)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 124,
        "coloffset": 4,
        "linematch": "edge_attributes.update(kwargs)",
        "context": "        \"style\": \"dashed\",\n        \"color\": \"gray60\",\n        \"label\": _format_edge_label(label) if label else \"\",\n    }\n    edge_attributes.update(kwargs)\n    return Edge(**edge_attributes)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 125,
        "coloffset": 4,
        "linematch": "return Edge(**edge_attributes)",
        "context": "        \"color\": \"gray60\",\n        \"label\": _format_edge_label(label) if label else \"\",\n    }\n    edge_attributes.update(kwargs)\n    return Edge(**edge_attributes)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #78",
        "line": 118,
        "description": [
          "            filename = \"_\".join(self.name.split()).lower()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #79",
        "line": 118,
        "description": [
          "            filename = \"_\".join(self.name.split()).lower()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #80",
        "line": 119,
        "description": [
          "        self.filename = filename"
        ],
        "failure": []
      },
      {
        "name": "Mutant #81",
        "line": 120,
        "description": [
          "        self.dot = Digraph(self.name, filename=self.filename, strict=strict)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #82",
        "line": 124,
        "description": [
          "            self.dot.graph_attr[k] = v"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -121,7 +121,7 @@\n \n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n-            self.dot.graph_attr[k] = v\n+            self.dot.graph_attr[k] = None\n         self.dot.graph_attr[\"label\"] = self.name\n         for k, v in self._default_node_attrs.items():\n             self.dot.node_attr[k] = v\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #83",
        "line": 125,
        "description": [
          "        self.dot.graph_attr[\"label\"] = self.name"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -122,7 +122,7 @@\n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n             self.dot.graph_attr[k] = v\n-        self.dot.graph_attr[\"label\"] = self.name\n+        self.dot.graph_attr[\"XXlabelXX\"] = self.name\n         for k, v in self._default_node_attrs.items():\n             self.dot.node_attr[k] = v\n         for k, v in self._default_edge_attrs.items():\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #84",
        "line": 125,
        "description": [
          "        self.dot.graph_attr[\"label\"] = self.name"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -122,7 +122,7 @@\n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n             self.dot.graph_attr[k] = v\n-        self.dot.graph_attr[\"label\"] = self.name\n+        self.dot.graph_attr[\"label\"] = None\n         for k, v in self._default_node_attrs.items():\n             self.dot.node_attr[k] = v\n         for k, v in self._default_edge_attrs.items():\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4710",
        "line": 118,
        "description": [
          "def Relationship(label=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -115,7 +115,7 @@\n     return Cluster(name, graph_attr=graph_attributes)\n \n \n-def Relationship(label=\"\", **kwargs):\n+def Relationship(label=\"XXXX\", **kwargs):\n     edge_attributes = {\n         \"style\": \"dashed\",\n         \"color\": \"gray60\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4711",
        "line": 120,
        "description": [
          "        \"style\": \"dashed\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -117,7 +117,7 @@\n \n def Relationship(label=\"\", **kwargs):\n     edge_attributes = {\n-        \"style\": \"dashed\",\n+        \"XXstyleXX\": \"dashed\",\n         \"color\": \"gray60\",\n         \"label\": _format_edge_label(label) if label else \"\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4712",
        "line": 120,
        "description": [
          "        \"style\": \"dashed\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -117,7 +117,7 @@\n \n def Relationship(label=\"\", **kwargs):\n     edge_attributes = {\n-        \"style\": \"dashed\",\n+        \"style\": \"XXdashedXX\",\n         \"color\": \"gray60\",\n         \"label\": _format_edge_label(label) if label else \"\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4713",
        "line": 121,
        "description": [
          "        \"color\": \"gray60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -118,7 +118,7 @@\n def Relationship(label=\"\", **kwargs):\n     edge_attributes = {\n         \"style\": \"dashed\",\n-        \"color\": \"gray60\",\n+        \"XXcolorXX\": \"gray60\",\n         \"label\": _format_edge_label(label) if label else \"\",\n     }\n     edge_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4714",
        "line": 121,
        "description": [
          "        \"color\": \"gray60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -118,7 +118,7 @@\n def Relationship(label=\"\", **kwargs):\n     edge_attributes = {\n         \"style\": \"dashed\",\n-        \"color\": \"gray60\",\n+        \"color\": \"XXgray60XX\",\n         \"label\": _format_edge_label(label) if label else \"\",\n     }\n     edge_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4715",
        "line": 122,
        "description": [
          "        \"label\": _format_edge_label(label) if label else \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         \"style\": \"dashed\",\n         \"color\": \"gray60\",\n-        \"label\": _format_edge_label(label) if label else \"\",\n+        \"XXlabelXX\": _format_edge_label(label) if label else \"\",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4716",
        "line": 122,
        "description": [
          "        \"label\": _format_edge_label(label) if label else \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         \"style\": \"dashed\",\n         \"color\": \"gray60\",\n-        \"label\": _format_edge_label(label) if label else \"\",\n+        \"label\": _format_edge_label(label) if label else \"XXXX\",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4717",
        "line": 123,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 33.33333333333333
  },
  {
    "function_name": "test_validate_curvestyle",
    "function_scope": "37-45",
    "patterns": [
      {
        "lineno": 37,
        "coloffset": 4,
        "linematch": "def test_validate_curvestyle(self):",
        "context": "        for dir in (\"BR\", \"TL\", \"Unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(direction=dir)\n\n    def test_validate_curvestyle(self):\n        # Normal directions.\n        for cvs in (\"ortho\", \"curved\", \"CURVED\"):\n            Diagram(curvestyle=cvs)\n\n        # Invalid directions.",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 39,
        "coloffset": 8,
        "linematch": "for cvs in (\"ortho\", \"curved\", \"CURVED\"):",
        "context": "                Diagram(direction=dir)\n\n    def test_validate_curvestyle(self):\n        # Normal directions.\n        for cvs in (\"ortho\", \"curved\", \"CURVED\"):\n            Diagram(curvestyle=cvs)\n\n        # Invalid directions.\n        for cvs in (\"tangent\", \"unknown\"):\n            with self.assertRaises(ValueError):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 43,
        "coloffset": 8,
        "linematch": "for cvs in (\"tangent\", \"unknown\"):",
        "context": "        for cvs in (\"ortho\", \"curved\", \"CURVED\"):\n            Diagram(curvestyle=cvs)\n\n        # Invalid directions.\n        for cvs in (\"tangent\", \"unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(curvestyle=cvs)\n\n    def test_validate_outformat(self):\n        # Normal output formats.",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 39,
        "coloffset": 8,
        "linematch": "for cvs in (\"ortho\", \"curved\", \"CURVED\"):",
        "context": "                Diagram(direction=dir)\n\n    def test_validate_curvestyle(self):\n        # Normal directions.\n        for cvs in (\"ortho\", \"curved\", \"CURVED\"):\n            Diagram(curvestyle=cvs)\n\n        # Invalid directions.\n        for cvs in (\"tangent\", \"unknown\"):\n            with self.assertRaises(ValueError):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 43,
        "coloffset": 8,
        "linematch": "for cvs in (\"tangent\", \"unknown\"):",
        "context": "        for cvs in (\"ortho\", \"curved\", \"CURVED\"):\n            Diagram(curvestyle=cvs)\n\n        # Invalid directions.\n        for cvs in (\"tangent\", \"unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(curvestyle=cvs)\n\n    def test_validate_outformat(self):\n        # Normal output formats.",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #5",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #6",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #7",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #8",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #9",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #10",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #11",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #12",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #13",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #14",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #15",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #16",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #17",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #18",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4629",
        "line": 37,
        "description": [
          "    return f'<<font point-size=\"10\">{text}</font>>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n-    return f'<<font point-size=\"10\">{text}</font>>'\n+    return f'XX<<font point-size=\"10\">{text}</font>>XX'\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4630",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"XXXX\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4631",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"XXXX\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4632",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"\", type=\"XXContainerXX\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4633",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = f\"XX{type}: {technology}XX\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4634",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = None\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4635",
        "line": 43,
        "description": [
          "        \"label\": _format_node_label(name, key, description),"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n-        \"label\": _format_node_label(name, key, description),\n+        \"XXlabelXX\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4636",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"XXlabellocXX\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4637",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"labelloc\": \"XXcXX\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4638",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"XXshapeXX\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4639",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"shape\": \"XXrectXX\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 56.00000000000001
  },
  {
    "function_name": "test_validate_outformat",
    "function_scope": "47-55",
    "patterns": [
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "def test_validate_outformat(self):",
        "context": "        for cvs in (\"tangent\", \"unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(curvestyle=cvs)\n\n    def test_validate_outformat(self):\n        # Normal output formats.\n        for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):\n            Diagram(outformat=fmt)\n\n        # Invalid output formats.",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 49,
        "coloffset": 8,
        "linematch": "for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):",
        "context": "                Diagram(curvestyle=cvs)\n\n    def test_validate_outformat(self):\n        # Normal output formats.\n        for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):\n            Diagram(outformat=fmt)\n\n        # Invalid output formats.\n        for fmt in (\"pnp\", \"jpe\", \"unknown\"):\n            with self.assertRaises(ValueError):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 53,
        "coloffset": 8,
        "linematch": "for fmt in (\"pnp\", \"jpe\", \"unknown\"):",
        "context": "        for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):\n            Diagram(outformat=fmt)\n\n        # Invalid output formats.\n        for fmt in (\"pnp\", \"jpe\", \"unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(outformat=fmt)\n\n    def test_with_global_context(self):\n        self.assertIsNone(getdiagram())",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 49,
        "coloffset": 8,
        "linematch": "for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):",
        "context": "                Diagram(curvestyle=cvs)\n\n    def test_validate_outformat(self):\n        # Normal output formats.\n        for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):\n            Diagram(outformat=fmt)\n\n        # Invalid output formats.\n        for fmt in (\"pnp\", \"jpe\", \"unknown\"):\n            with self.assertRaises(ValueError):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 53,
        "coloffset": 8,
        "linematch": "for fmt in (\"pnp\", \"jpe\", \"unknown\"):",
        "context": "        for fmt in (\"png\", \"jpg\", \"svg\", \"pdf\", \"PNG\", \"dot\"):\n            Diagram(outformat=fmt)\n\n        # Invalid output formats.\n        for fmt in (\"pnp\", \"jpe\", \"unknown\"):\n            with self.assertRaises(ValueError):\n                Diagram(outformat=fmt)\n\n    def test_with_global_context(self):\n        self.assertIsNone(getdiagram())",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #19",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"XXpadXX\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #20",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"pad\": \"XX2.0XX\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #21",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"XXsplinesXX\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #22",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"splines\": \"XXorthoXX\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #23",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"XXnodesepXX\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #24",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"nodesep\": \"XX0.60XX\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #25",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"XXranksepXX\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #26",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"ranksep\": \"XX0.75XX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #27",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"XXfontnameXX\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #28",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"fontname\": \"XXSans-SerifXX\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #29",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"XXfontsizeXX\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #30",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"fontsize\": \"XX15XX\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #31",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"XXfontcolorXX\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #32",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"fontcolor\": \"XX#2D3436XX\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #33",
        "line": 54,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4642",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"XXheightXX\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4643",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"height\": \"XX1.6XX\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4644",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"XXfixedsizeXX\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4645",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"fixedsize\": \"XXtrueXX\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4646",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"XXstyleXX\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4647",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"style\": \"XXfilledXX\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4648",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"XXfillcolorXX\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4649",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"fillcolor\": \"XXdodgerblue3XX\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4650",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"XXfontcolorXX\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4651",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"fontcolor\": \"XXwhiteXX\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4652",
        "line": 52,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4653",
        "line": 54,
        "description": [
          "    if not description:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4654",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"XXwidthXX\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4655",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"XX2XX\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4656",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"XXheightXX\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4657",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"height\": \"XX1XX\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 6.451612903225806
  },
  {
    "function_name": "test_default_filename",
    "function_scope": "92-96",
    "patterns": [
      {
        "lineno": 92,
        "coloffset": 4,
        "linematch": "def test_default_filename(self):",
        "context": "            self.assertEqual(nodes - node1, node1)\n            self.assertEqual(nodes >> node1, node1)\n            self.assertEqual(nodes << node1, node1)\n\n    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 93,
        "coloffset": 8,
        "linematch": "self.name = \"example_1\"",
        "context": "            self.assertEqual(nodes >> node1, node1)\n            self.assertEqual(nodes << node1, node1)\n\n    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 94,
        "coloffset": 8,
        "linematch": "with Diagram(name=\"Example 1\", show=False):",
        "context": "            self.assertEqual(nodes << node1, node1)\n\n    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 96,
        "coloffset": 8,
        "linematch": "self.assertTrue(os.path.exists(f\"{self.name}.png\"))",
        "context": "    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 93,
        "coloffset": 8,
        "linematch": "self.name = \"example_1\"",
        "context": "            self.assertEqual(nodes >> node1, node1)\n            self.assertEqual(nodes << node1, node1)\n\n    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 94,
        "coloffset": 8,
        "linematch": "with Diagram(name=\"Example 1\", show=False):",
        "context": "            self.assertEqual(nodes << node1, node1)\n\n    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 96,
        "coloffset": 8,
        "linematch": "self.assertTrue(os.path.exists(f\"{self.name}.png\"))",
        "context": "    def test_default_filename(self):\n        self.name = \"example_1\"\n        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4689",
        "line": 95,
        "description": [
          "def Person(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description=\"\", external=False, **kwargs):\n+def Person(name, description=\"XXXX\", external=False, **kwargs):\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4690",
        "line": 95,
        "description": [
          "def Person(name, description=\"\", external=False, **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -92,7 +92,7 @@\n     return C4Node(**system_attributes)\n \n \n-def Person(name, description=\"\", external=False, **kwargs):\n+def Person(name, description=\"\", external=True, **kwargs):\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_custom_filename",
    "function_scope": "98-102",
    "patterns": [
      {
        "lineno": 98,
        "coloffset": 4,
        "linematch": "def test_custom_filename(self):",
        "context": "        with Diagram(name=\"Example 1\", show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 99,
        "coloffset": 8,
        "linematch": "self.name = \"my_custom_name\"",
        "context": "            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    # def test_empty_name(self):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 100,
        "coloffset": 8,
        "linematch": "with Diagram(name=\"Example 1\", filename=self.name, show=False):",
        "context": "        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    # def test_empty_name(self):\n    #     \"\"\"Check that providing an empty name don't crash, but save in a diagrams_image.xxx file.\"\"\"",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 102,
        "coloffset": 8,
        "linematch": "self.assertTrue(os.path.exists(f\"{self.name}.png\"))",
        "context": "    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    # def test_empty_name(self):\n    #     \"\"\"Check that providing an empty name don't crash, but save in a diagrams_image.xxx file.\"\"\"\n    #     self.name = 'diagrams_image'\n    #     with Diagram(show=False):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 99,
        "coloffset": 8,
        "linematch": "self.name = \"my_custom_name\"",
        "context": "            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    # def test_empty_name(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 100,
        "coloffset": 8,
        "linematch": "with Diagram(name=\"Example 1\", filename=self.name, show=False):",
        "context": "        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    # def test_empty_name(self):\n    #     \"\"\"Check that providing an empty name don't crash, but save in a diagrams_image.xxx file.\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 102,
        "coloffset": 8,
        "linematch": "self.assertTrue(os.path.exists(f\"{self.name}.png\"))",
        "context": "    def test_custom_filename(self):\n        self.name = \"my_custom_name\"\n        with Diagram(name=\"Example 1\", filename=self.name, show=False):\n            Node(\"node1\")\n        self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n\n    # def test_empty_name(self):\n    #     \"\"\"Check that providing an empty name don't crash, but save in a diagrams_image.xxx file.\"\"\"\n    #     self.name = 'diagrams_image'\n    #     with Diagram(show=False):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4692",
        "line": 98,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -95,7 +95,7 @@\n def Person(name, description=\"\", external=False, **kwargs):\n     person_attributes = {\n         \"name\": name,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4693",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"XXtypeXX\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4694",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"XXExternal PersonXX\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4695",
        "line": 99,
        "description": [
          "        \"type\": \"External Person\" if external else \"Person\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -96,7 +96,7 @@\n     person_attributes = {\n         \"name\": name,\n         \"description\": description,\n-        \"type\": \"External Person\" if external else \"Person\",\n+        \"type\": \"External Person\" if external else \"XXPersonXX\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4696",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"XXfillcolorXX\": \"gray60\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4697",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"XXgray60XX\" if external else \"dodgerblue4\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4698",
        "line": 100,
        "description": [
          "        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -97,7 +97,7 @@\n         \"name\": name,\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n-        \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n+        \"fillcolor\": \"gray60\" if external else \"XXdodgerblue4XX\",\n         \"style\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4699",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"XXstyleXX\": \"rounded,filled\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4700",
        "line": 101,
        "description": [
          "        \"style\": \"rounded,filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -98,7 +98,7 @@\n         \"description\": description,\n         \"type\": \"External Person\" if external else \"Person\",\n         \"fillcolor\": \"gray60\" if external else \"dodgerblue4\",\n-        \"style\": \"rounded,filled\",\n+        \"style\": \"XXrounded,filledXX\",\n     }\n     person_attributes.update(kwargs)\n     return C4Node(**person_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4701",
        "line": 102,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 10.0
  },
  {
    "function_name": "test_autolabel",
    "function_scope": "111-114",
    "patterns": [
      {
        "lineno": 111,
        "coloffset": 4,
        "linematch": "def test_autolabel(self):",
        "context": "    #     with Diagram(show=False):\n    #         Node(\"node1\")\n    #     self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n    \n    def test_autolabel(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            self.assertTrue(node1.label,\"Node\\nnode1\")\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 112,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):",
        "context": "    #         Node(\"node1\")\n    #     self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n    \n    def test_autolabel(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            self.assertTrue(node1.label,\"Node\\nnode1\")\n\n\n    # def test_outformat_list(self):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 112,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):",
        "context": "    #         Node(\"node1\")\n    #     self.assertTrue(os.path.exists(f\"{self.name}.png\"))\n    \n    def test_autolabel(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            self.assertTrue(node1.label,\"Node\\nnode1\")\n\n\n    # def test_outformat_list(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #69",
        "line": 111,
        "description": [
          "            node_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #70",
        "line": 112,
        "description": [
          "        if edge_attr is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #71",
        "line": 113,
        "description": [
          "            edge_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #72",
        "line": 114,
        "description": [
          "        self.name = name"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4705",
        "line": 111,
        "description": [
          "        \"margin\": \"16\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n-        \"margin\": \"16\",\n+        \"XXmarginXX\": \"16\",\n         \"style\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4706",
        "line": 111,
        "description": [
          "        \"margin\": \"16\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -108,7 +108,7 @@\n     graph_attributes = {\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n-        \"margin\": \"16\",\n+        \"margin\": \"XX16XX\",\n         \"style\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4707",
        "line": 112,
        "description": [
          "        \"style\": \"dashed\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -109,7 +109,7 @@\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n         \"margin\": \"16\",\n-        \"style\": \"dashed\",\n+        \"XXstyleXX\": \"dashed\",\n     }\n     graph_attributes.update(kwargs)\n     return Cluster(name, graph_attr=graph_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4708",
        "line": 112,
        "description": [
          "        \"style\": \"dashed\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -109,7 +109,7 @@\n         \"label\": html.escape(name),\n         \"bgcolor\": \"white\",\n         \"margin\": \"16\",\n-        \"style\": \"dashed\",\n+        \"style\": \"XXdashedXX\",\n     }\n     graph_attributes.update(kwargs)\n     return Cluster(name, graph_attr=graph_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4709",
        "line": 113,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 55.55555555555556
  },
  {
    "function_name": "test_validate_direction",
    "function_scope": "143-153",
    "patterns": [
      {
        "lineno": 143,
        "coloffset": 4,
        "linematch": "def test_validate_direction(self):",
        "context": "            shutil.rmtree(self.name)\n        except OSError:\n            pass\n\n    def test_validate_direction(self):\n        # Normal directions.\n        for dir in (\"TB\", \"BT\", \"LR\", \"RL\"):\n            with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                Cluster(direction=dir)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 145,
        "coloffset": 8,
        "linematch": "for dir in (\"TB\", \"BT\", \"LR\", \"RL\"):",
        "context": "            pass\n\n    def test_validate_direction(self):\n        # Normal directions.\n        for dir in (\"TB\", \"BT\", \"LR\", \"RL\"):\n            with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                Cluster(direction=dir)\n\n        # Invalid directions.\n        for dir in (\"BR\", \"TL\", \"Unknown\"):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 150,
        "coloffset": 8,
        "linematch": "for dir in (\"BR\", \"TL\", \"Unknown\"):",
        "context": "            with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                Cluster(direction=dir)\n\n        # Invalid directions.\n        for dir in (\"BR\", \"TL\", \"Unknown\"):\n            with self.assertRaises(ValueError):\n                with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                    Cluster(direction=dir)\n\n    def test_with_global_context(self):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 145,
        "coloffset": 8,
        "linematch": "for dir in (\"TB\", \"BT\", \"LR\", \"RL\"):",
        "context": "            pass\n\n    def test_validate_direction(self):\n        # Normal directions.\n        for dir in (\"TB\", \"BT\", \"LR\", \"RL\"):\n            with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                Cluster(direction=dir)\n\n        # Invalid directions.\n        for dir in (\"BR\", \"TL\", \"Unknown\"):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 150,
        "coloffset": 8,
        "linematch": "for dir in (\"BR\", \"TL\", \"Unknown\"):",
        "context": "            with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                Cluster(direction=dir)\n\n        # Invalid directions.\n        for dir in (\"BR\", \"TL\", \"Unknown\"):\n            with self.assertRaises(ValueError):\n                with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                    Cluster(direction=dir)\n\n    def test_with_global_context(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #97",
        "line": 144,
        "description": [
          "            if not self._validate_outformat(outformat):"
        ],
        "failure": []
      },
      {
        "name": "Mutant #98",
        "line": 145,
        "description": [
          "                raise ValueError(f'\"{outformat}\" is not a valid output format')"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -142,7 +142,7 @@\n                     raise ValueError(f'\"{one_format}\" is not a valid output format')\n         else:\n             if not self._validate_outformat(outformat):\n-                raise ValueError(f'\"{outformat}\" is not a valid output format')\n+                raise ValueError(f'XX\"{outformat}\" is not a valid output formatXX')\n         self.outformat = outformat\n \n         # Merge passed in attributes\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #99",
        "line": 146,
        "description": [
          "        self.outformat = outformat"
        ],
        "failure": []
      },
      {
        "name": "Mutant #100",
        "line": 153,
        "description": [
          "        self.show = show"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -150,7 +150,7 @@\n         self.dot.node_attr.update(node_attr)\n         self.dot.edge_attr.update(edge_attr)\n \n-        self.show = show\n+        self.show = None\n         self.autolabel = autolabel\n \n     def __str__(self) -> str:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 50.0
  },
  {
    "function_name": "test_with_global_context",
    "function_scope": "155-160",
    "patterns": [
      {
        "lineno": 155,
        "coloffset": 4,
        "linematch": "def test_with_global_context(self):",
        "context": "            with self.assertRaises(ValueError):\n                with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                    Cluster(direction=dir)\n\n    def test_with_global_context(self):\n        with Diagram(name=os.path.join(self.name, \"with_global_context\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster():\n                self.assertIsNotNone(getcluster())\n            self.assertIsNone(getcluster())",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 156,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"with_global_context\"), show=False):",
        "context": "                with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                    Cluster(direction=dir)\n\n    def test_with_global_context(self):\n        with Diagram(name=os.path.join(self.name, \"with_global_context\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster():\n                self.assertIsNotNone(getcluster())\n            self.assertIsNone(getcluster())\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 156,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"with_global_context\"), show=False):",
        "context": "                with Diagram(name=os.path.join(self.name, \"validate_direction\"), show=False):\n                    Cluster(direction=dir)\n\n    def test_with_global_context(self):\n        with Diagram(name=os.path.join(self.name, \"with_global_context\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster():\n                self.assertIsNotNone(getcluster())\n            self.assertIsNone(getcluster())\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #102",
        "line": 160,
        "description": [
          "        setdiagram(self)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_with_nested_cluster",
    "function_scope": "162-170",
    "patterns": [
      {
        "lineno": 162,
        "coloffset": 4,
        "linematch": "def test_with_nested_cluster(self):",
        "context": "            with Cluster():\n                self.assertIsNotNone(getcluster())\n            self.assertIsNone(getcluster())\n\n    def test_with_nested_cluster(self):\n        with Diagram(name=os.path.join(self.name, \"with_nested_cluster\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster() as c1:\n                self.assertEqual(c1, getcluster())\n                with Cluster() as c2:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 163,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"with_nested_cluster\"), show=False):",
        "context": "                self.assertIsNotNone(getcluster())\n            self.assertIsNone(getcluster())\n\n    def test_with_nested_cluster(self):\n        with Diagram(name=os.path.join(self.name, \"with_nested_cluster\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster() as c1:\n                self.assertEqual(c1, getcluster())\n                with Cluster() as c2:\n                    self.assertEqual(c2, getcluster())",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 163,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"with_nested_cluster\"), show=False):",
        "context": "                self.assertIsNotNone(getcluster())\n            self.assertIsNone(getcluster())\n\n    def test_with_nested_cluster(self):\n        with Diagram(name=os.path.join(self.name, \"with_nested_cluster\"), show=False):\n            self.assertIsNone(getcluster())\n            with Cluster() as c1:\n                self.assertEqual(c1, getcluster())\n                with Cluster() as c2:\n                    self.assertEqual(c2, getcluster())",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #103",
        "line": 170,
        "description": [
          "        return self.dot.pipe(format=\"png\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -167,7 +167,7 @@\n         setdiagram(None)\n \n     def _repr_png_(self):\n-        return self.dot.pipe(format=\"png\")\n+        return self.dot.pipe(format=\"XXpngXX\")\n \n     def _validate_direction(self, direction: str) -> bool:\n         return direction.upper() in self.__directions\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_node_not_in_diagram",
    "function_scope": "172-175",
    "patterns": [
      {
        "lineno": 172,
        "coloffset": 4,
        "linematch": "def test_node_not_in_diagram(self):",
        "context": "                    self.assertEqual(c2, getcluster())\n                self.assertEqual(c1, getcluster())\n            self.assertIsNone(getcluster())\n\n    def test_node_not_in_diagram(self):\n        # Node must be belong to a diagrams.\n        with self.assertRaises(EnvironmentError):\n            Node(\"node\")\n\n    def test_node_to_node(self):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 174,
        "coloffset": 8,
        "linematch": "with self.assertRaises(EnvironmentError):",
        "context": "            self.assertIsNone(getcluster())\n\n    def test_node_not_in_diagram(self):\n        # Node must be belong to a diagrams.\n        with self.assertRaises(EnvironmentError):\n            Node(\"node\")\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            with Cluster():",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 174,
        "coloffset": 8,
        "linematch": "with self.assertRaises(EnvironmentError):",
        "context": "            self.assertIsNone(getcluster())\n\n    def test_node_not_in_diagram(self):\n        # Node must be belong to a diagrams.\n        with self.assertRaises(EnvironmentError):\n            Node(\"node\")\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            with Cluster():",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #104",
        "line": 173,
        "description": [
          "        return direction.upper() in self.__directions"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "setUp",
    "function_scope": "206-207",
    "patterns": [
      {
        "lineno": 206,
        "coloffset": 4,
        "linematch": "def setUp(self):",
        "context": "                self.assertEqual(nodes << node1, node1)\n\n\nclass EdgeTest(unittest.TestCase):\n    def setUp(self):\n        self.name = \"edge_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 12,
        "coloffset": 4,
        "linematch": "def setUp(self):",
        "context": "from diagrams.c4 import Person, Container, Database, System, SystemBoundary, Relationship\n\n\nclass C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 12,
        "coloffset": 4,
        "linematch": "def setUp(self):",
        "context": "from diagrams.c4 import Person, Container, Database, System, SystemBoundary, Relationship\n\n\nclass C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 207,
        "coloffset": 8,
        "linematch": "self.name = \"edge_test\"",
        "context": "\n\nclass EdgeTest(unittest.TestCase):\n    def setUp(self):\n        self.name = \"edge_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 13,
        "coloffset": 8,
        "linematch": "self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()",
        "context": "\n\nclass C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #119",
        "line": 207,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"shape\": \"box\",\n+        \"XXshapeXX\": \"box\",\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #120",
        "line": 207,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"shape\": \"box\",\n+        \"shape\": \"XXboxXX\",\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "tearDown",
    "function_scope": "209-216",
    "patterns": [
      {
        "lineno": 209,
        "coloffset": 4,
        "linematch": "def tearDown(self):",
        "context": "class EdgeTest(unittest.TestCase):\n    def setUp(self):\n        self.name = \"edge_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 15,
        "coloffset": 4,
        "linematch": "def tearDown(self):",
        "context": "class C4Test(unittest.TestCase):\n    def setUp(self):\n        self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + \".png\")\n        except FileNotFoundError:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 210,
        "coloffset": 8,
        "linematch": "setdiagram(None)",
        "context": "    def setUp(self):\n        self.name = \"edge_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 211,
        "coloffset": 8,
        "linematch": "setcluster(None)",
        "context": "        self.name = \"edge_test\"\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:\n            pass",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 213,
        "coloffset": 8,
        "linematch": "try:",
        "context": "    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        # Only some tests generate the image file.\n        try:\n            shutil.rmtree(self.name)\n        except OSError:\n            pass\n\n    def test_node_to_node(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 16,
        "coloffset": 8,
        "linematch": "setdiagram(None)",
        "context": "    def setUp(self):\n        self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + \".png\")\n        except FileNotFoundError:\n            pass",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 17,
        "coloffset": 8,
        "linematch": "setcluster(None)",
        "context": "        self.name = \"diagram-\" + \"\".join([random.choice(string.hexdigits) for n in range(7)]).lower()\n\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + \".png\")\n        except FileNotFoundError:\n            pass\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 18,
        "coloffset": 8,
        "linematch": "try:",
        "context": "\n    def tearDown(self):\n        setdiagram(None)\n        setcluster(None)\n        try:\n            os.remove(self.name + \".png\")\n        except FileNotFoundError:\n            pass\n\n    def test_nodes(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #123",
        "line": 209,
        "description": [
          "        \"labeljust\": \"l\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"labeljust\": \"l\",\n+        \"XXlabeljustXX\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"12\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #124",
        "line": 209,
        "description": [
          "        \"labeljust\": \"l\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"labeljust\": \"l\",\n+        \"labeljust\": \"XXlXX\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"12\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #125",
        "line": 210,
        "description": [
          "        \"pencolor\": \"#AEB6BE\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -207,7 +207,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n-        \"pencolor\": \"#AEB6BE\",\n+        \"XXpencolorXX\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"12\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #126",
        "line": 210,
        "description": [
          "        \"pencolor\": \"#AEB6BE\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -207,7 +207,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n-        \"pencolor\": \"#AEB6BE\",\n+        \"pencolor\": \"XX#AEB6BEXX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"12\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #127",
        "line": 211,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -208,7 +208,7 @@\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"XXfontnameXX\": \"Sans-Serif\",\n         \"fontsize\": \"12\",\n     }\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #128",
        "line": 211,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -208,7 +208,7 @@\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"fontname\": \"XXSans-SerifXX\",\n         \"fontsize\": \"12\",\n     }\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #129",
        "line": 212,
        "description": [
          "        \"fontsize\": \"12\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -209,7 +209,7 @@\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"12\",\n+        \"XXfontsizeXX\": \"12\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #130",
        "line": 212,
        "description": [
          "        \"fontsize\": \"12\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -209,7 +209,7 @@\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"12\",\n+        \"fontsize\": \"XX12XX\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #131",
        "line": 213,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 11.11111111111111
  },
  {
    "function_name": "test_node_to_node",
    "function_scope": "218-222",
    "patterns": [
      {
        "lineno": 218,
        "coloffset": 4,
        "linematch": "def test_node_to_node(self):",
        "context": "            shutil.rmtree(self.name)\n        except OSError:\n            pass\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            node2 = Node(\"node2\")\n            self.assertEqual(node1 - Edge(color=\"red\") - node2, node2)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 219,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):",
        "context": "        except OSError:\n            pass\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            node2 = Node(\"node2\")\n            self.assertEqual(node1 - Edge(color=\"red\") - node2, node2)\n\n    def test_node_to_nodes(self):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 219,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):",
        "context": "        except OSError:\n            pass\n\n    def test_node_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node\"), show=False):\n            node1 = Node(\"node1\")\n            node2 = Node(\"node2\")\n            self.assertEqual(node1 - Edge(color=\"red\") - node2, node2)\n\n    def test_node_to_nodes(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #132",
        "line": 222,
        "description": [
          "        label: str = \"cluster\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -219,7 +219,7 @@\n     #  correctly for a subgraph that has a different rank direction.\n     def __init__(\n         self,\n-        label: str = \"cluster\",\n+        label: str = \"XXclusterXX\",\n         direction: str = \"LR\",\n         graph_attr: Optional[dict] = None,\n     ):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_node_to_nodes",
    "function_scope": "224-229",
    "patterns": [
      {
        "lineno": 224,
        "coloffset": 4,
        "linematch": "def test_node_to_nodes(self):",
        "context": "            node1 = Node(\"node1\")\n            node2 = Node(\"node2\")\n            self.assertEqual(node1 - Edge(color=\"red\") - node2, node2)\n\n    def test_node_to_nodes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - Edge(color=\"red\") - nodes, nodes)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 225,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):",
        "context": "            node2 = Node(\"node2\")\n            self.assertEqual(node1 - Edge(color=\"red\") - node2, node2)\n\n    def test_node_to_nodes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - Edge(color=\"red\") - nodes, nodes)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 225,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):",
        "context": "            node2 = Node(\"node2\")\n            self.assertEqual(node1 - Edge(color=\"red\") - node2, node2)\n\n    def test_node_to_nodes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_nodes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - Edge(color=\"red\") - nodes, nodes)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_nodes_to_node",
    "function_scope": "231-236",
    "patterns": [
      {
        "lineno": 231,
        "coloffset": 4,
        "linematch": "def test_nodes_to_node(self):",
        "context": "                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - Edge(color=\"red\") - nodes, nodes)\n\n    def test_nodes_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - node1, node1)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 232,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - Edge(color=\"red\") - nodes, nodes)\n\n    def test_nodes_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - node1, node1)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 232,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(node1 - Edge(color=\"red\") - nodes, nodes)\n\n    def test_nodes_to_node(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - node1, node1)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #134",
        "line": 232,
        "description": [
          "        if graph_attr is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #135",
        "line": 233,
        "description": [
          "            graph_attr = {}"
        ],
        "failure": []
      },
      {
        "name": "Mutant #136",
        "line": 234,
        "description": [
          "        self.label = label"
        ],
        "failure": []
      },
      {
        "name": "Mutant #137",
        "line": 235,
        "description": [
          "        self.name = \"cluster_\" + self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -232,7 +232,7 @@\n         if graph_attr is None:\n             graph_attr = {}\n         self.label = label\n-        self.name = \"cluster_\" + self.label\n+        self.name = \"XXcluster_XX\" + self.label\n \n         self.dot = Digraph(self.name)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #138",
        "line": 235,
        "description": [
          "        self.name = \"cluster_\" + self.label"
        ],
        "failure": []
      },
      {
        "name": "Mutant #139",
        "line": 235,
        "description": [
          "        self.name = \"cluster_\" + self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -232,7 +232,7 @@\n         if graph_attr is None:\n             graph_attr = {}\n         self.label = label\n-        self.name = \"cluster_\" + self.label\n+        self.name = None\n \n         self.dot = Digraph(self.name)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 66.66666666666666
  },
  {
    "function_name": "test_nodes_to_node_with_additional_attributes",
    "function_scope": "238-243",
    "patterns": [
      {
        "lineno": 238,
        "coloffset": 4,
        "linematch": "def test_nodes_to_node_with_additional_attributes(self):",
        "context": "                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - Edge(color=\"green\") - node1, node1)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 239,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - Edge(color=\"green\") - node1, node1)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 239,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - Edge(color=\"green\") - node1, node1)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #141",
        "line": 241,
        "description": [
          "            self.dot.graph_attr[k] = v"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -238,7 +238,7 @@\n \n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n-            self.dot.graph_attr[k] = v\n+            self.dot.graph_attr[k] = None\n         self.dot.graph_attr[\"label\"] = self.label\n \n         if not self._validate_direction(direction):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #142",
        "line": 242,
        "description": [
          "        self.dot.graph_attr[\"label\"] = self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -239,7 +239,7 @@\n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n             self.dot.graph_attr[k] = v\n-        self.dot.graph_attr[\"label\"] = self.label\n+        self.dot.graph_attr[\"XXlabelXX\"] = self.label\n \n         if not self._validate_direction(direction):\n             raise ValueError(f'\"{direction}\" is not a valid direction')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #143",
        "line": 242,
        "description": [
          "        self.dot.graph_attr[\"label\"] = self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -239,7 +239,7 @@\n         # Set attributes.\n         for k, v in self._default_graph_attrs.items():\n             self.dot.graph_attr[k] = v\n-        self.dot.graph_attr[\"label\"] = self.label\n+        self.dot.graph_attr[\"label\"] = None\n \n         if not self._validate_direction(direction):\n             raise ValueError(f'\"{direction}\" is not a valid direction')\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_node_to_node_with_attributes",
    "function_scope": "245-252",
    "patterns": [
      {
        "lineno": 245,
        "coloffset": 4,
        "linematch": "def test_node_to_node_with_attributes(self):",
        "context": "                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - Edge(color=\"green\") - node1, node1)\n\n    def test_node_to_node_with_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"1.1\") << node2, node2)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 246,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_node_with_attributes\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - Edge(color=\"green\") - node1, node1)\n\n    def test_node_to_node_with_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"1.1\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"1.2\") >> node2, node2)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 246,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_node_with_attributes\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes - Edge(color=\"red\") - Edge(color=\"green\") - node1, node1)\n\n    def test_node_to_node_with_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"1.1\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"1.2\") >> node2, node2)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #145",
        "line": 245,
        "description": [
          "            raise ValueError(f'\"{direction}\" is not a valid direction')"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -242,7 +242,7 @@\n         self.dot.graph_attr[\"label\"] = self.label\n \n         if not self._validate_direction(direction):\n-            raise ValueError(f'\"{direction}\" is not a valid direction')\n+            raise ValueError(f'XX\"{direction}\" is not a valid directionXX')\n         self.dot.graph_attr[\"rankdir\"] = direction\n \n         # Node must be belong to a diagrams.\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #146",
        "line": 246,
        "description": [
          "        self.dot.graph_attr[\"rankdir\"] = direction"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -243,7 +243,7 @@\n \n         if not self._validate_direction(direction):\n             raise ValueError(f'\"{direction}\" is not a valid direction')\n-        self.dot.graph_attr[\"rankdir\"] = direction\n+        self.dot.graph_attr[\"XXrankdirXX\"] = direction\n \n         # Node must be belong to a diagrams.\n         self._diagram = getdiagram()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #147",
        "line": 246,
        "description": [
          "        self.dot.graph_attr[\"rankdir\"] = direction"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -243,7 +243,7 @@\n \n         if not self._validate_direction(direction):\n             raise ValueError(f'\"{direction}\" is not a valid direction')\n-        self.dot.graph_attr[\"rankdir\"] = direction\n+        self.dot.graph_attr[\"rankdir\"] = None\n \n         # Node must be belong to a diagrams.\n         self._diagram = getdiagram()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #148",
        "line": 249,
        "description": [
          "        self._diagram = getdiagram()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #149",
        "line": 250,
        "description": [
          "        if self._diagram is None:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #150",
        "line": 251,
        "description": [
          "            raise EnvironmentError(\"Global diagrams context not set up\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -248,7 +248,7 @@\n         # Node must be belong to a diagrams.\n         self._diagram = getdiagram()\n         if self._diagram is None:\n-            raise EnvironmentError(\"Global diagrams context not set up\")\n+            raise EnvironmentError(\"XXGlobal diagrams context not set upXX\")\n         self._parent = getcluster()\n \n         # Set cluster depth for distinguishing the background color\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #151",
        "line": 252,
        "description": [
          "        self._parent = getcluster()"
        ],
        "failure": []
      }
    ],
    "mutation_score": 42.857142857142854
  },
  {
    "function_name": "test_node_to_node_with_additional_attributes",
    "function_scope": "254-261",
    "patterns": [
      {
        "lineno": 254,
        "coloffset": 4,
        "linematch": "def test_node_to_node_with_additional_attributes(self):",
        "context": "                self.assertEqual(node1 << Edge(color=\"red\", label=\"1.1\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"1.2\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"1.3\") >> node2, node2)\n\n    def test_node_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"2.1\") << Edge(color=\"blue\") << node2, node2)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 255,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_node_with_additional_attributes\"), show=False):",
        "context": "                self.assertEqual(node1 >> Edge(color=\"green\", label=\"1.2\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"1.3\") >> node2, node2)\n\n    def test_node_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"2.1\") << Edge(color=\"blue\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"2.2\") >> Edge(color=\"red\") >> node2, node2)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 255,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"node_to_node_with_additional_attributes\"), show=False):",
        "context": "                self.assertEqual(node1 >> Edge(color=\"green\", label=\"1.2\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"1.3\") >> node2, node2)\n\n    def test_node_to_node_with_additional_attributes(self):\n        with Diagram(name=os.path.join(self.name, \"node_to_node_with_additional_attributes\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                node2 = Node(\"node2\")\n                self.assertEqual(node1 << Edge(color=\"red\", label=\"2.1\") << Edge(color=\"blue\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"2.2\") >> Edge(color=\"red\") >> node2, node2)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #152",
        "line": 255,
        "description": [
          "        self.depth = self._parent.depth + 1 if self._parent else 0"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -252,7 +252,7 @@\n         self._parent = getcluster()\n \n         # Set cluster depth for distinguishing the background color\n-        self.depth = self._parent.depth + 1 if self._parent else 0\n+        self.depth = self._parent.depth - 1 if self._parent else 0\n         coloridx = self.depth % len(self.__bgcolors)\n         self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #153",
        "line": 255,
        "description": [
          "        self.depth = self._parent.depth + 1 if self._parent else 0"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -252,7 +252,7 @@\n         self._parent = getcluster()\n \n         # Set cluster depth for distinguishing the background color\n-        self.depth = self._parent.depth + 1 if self._parent else 0\n+        self.depth = self._parent.depth + 2 if self._parent else 0\n         coloridx = self.depth % len(self.__bgcolors)\n         self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #154",
        "line": 255,
        "description": [
          "        self.depth = self._parent.depth + 1 if self._parent else 0"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -252,7 +252,7 @@\n         self._parent = getcluster()\n \n         # Set cluster depth for distinguishing the background color\n-        self.depth = self._parent.depth + 1 if self._parent else 0\n+        self.depth = self._parent.depth + 1 if self._parent else 1\n         coloridx = self.depth % len(self.__bgcolors)\n         self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #155",
        "line": 255,
        "description": [
          "        self.depth = self._parent.depth + 1 if self._parent else 0"
        ],
        "failure": []
      },
      {
        "name": "Mutant #156",
        "line": 256,
        "description": [
          "        coloridx = self.depth % len(self.__bgcolors)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #157",
        "line": 256,
        "description": [
          "        coloridx = self.depth % len(self.__bgcolors)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #158",
        "line": 257,
        "description": [
          "        self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -254,7 +254,7 @@\n         # Set cluster depth for distinguishing the background color\n         self.depth = self._parent.depth + 1 if self._parent else 0\n         coloridx = self.depth % len(self.__bgcolors)\n-        self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]\n+        self.dot.graph_attr[\"XXbgcolorXX\"] = self.__bgcolors[coloridx]\n \n         # Merge passed in attributes\n         self.dot.graph_attr.update(graph_attr)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #159",
        "line": 257,
        "description": [
          "        self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -254,7 +254,7 @@\n         # Set cluster depth for distinguishing the background color\n         self.depth = self._parent.depth + 1 if self._parent else 0\n         coloridx = self.depth % len(self.__bgcolors)\n-        self.dot.graph_attr[\"bgcolor\"] = self.__bgcolors[coloridx]\n+        self.dot.graph_attr[\"bgcolor\"] = None\n \n         # Merge passed in attributes\n         self.dot.graph_attr.update(graph_attr)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 37.5
  },
  {
    "function_name": "test_nodes_to_node_with_attributes_loop",
    "function_scope": "263-270",
    "patterns": [
      {
        "lineno": 263,
        "coloffset": 4,
        "linematch": "def test_nodes_to_node_with_attributes_loop(self):",
        "context": "                self.assertEqual(node1 << Edge(color=\"red\", label=\"2.1\") << Edge(color=\"blue\") << node2, node2)\n                self.assertEqual(node1 >> Edge(color=\"green\", label=\"2.2\") >> Edge(color=\"red\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"2.3\") >> Edge(color=\"black\") >> node2, node2)\n\n    def test_nodes_to_node_with_attributes_loop(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_loop\"), show=False):\n            with Cluster():\n                node = Node(\"node\")\n                self.assertEqual(node >> Edge(color=\"red\", label=\"3.1\") >> node, node)\n                self.assertEqual(node << Edge(color=\"green\", label=\"3.2\") << node, node)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 264,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_loop\"), show=False):",
        "context": "                self.assertEqual(node1 >> Edge(color=\"green\", label=\"2.2\") >> Edge(color=\"red\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"2.3\") >> Edge(color=\"black\") >> node2, node2)\n\n    def test_nodes_to_node_with_attributes_loop(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_loop\"), show=False):\n            with Cluster():\n                node = Node(\"node\")\n                self.assertEqual(node >> Edge(color=\"red\", label=\"3.1\") >> node, node)\n                self.assertEqual(node << Edge(color=\"green\", label=\"3.2\") << node, node)\n                self.assertEqual(node >> Edge(color=\"blue\", label=\"3.3\") << node, node)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 264,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_loop\"), show=False):",
        "context": "                self.assertEqual(node1 >> Edge(color=\"green\", label=\"2.2\") >> Edge(color=\"red\") >> node2, node2)\n                self.assertEqual(node1 << Edge(color=\"blue\", label=\"2.3\") >> Edge(color=\"black\") >> node2, node2)\n\n    def test_nodes_to_node_with_attributes_loop(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_loop\"), show=False):\n            with Cluster():\n                node = Node(\"node\")\n                self.assertEqual(node >> Edge(color=\"red\", label=\"3.1\") >> node, node)\n                self.assertEqual(node << Edge(color=\"green\", label=\"3.2\") << node, node)\n                self.assertEqual(node >> Edge(color=\"blue\", label=\"3.3\") << node, node)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #160",
        "line": 263,
        "description": [
          "        setcluster(self)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_nodes_to_node_with_attributes_bothdirectional",
    "function_scope": "272-277",
    "patterns": [
      {
        "lineno": 272,
        "coloffset": 4,
        "linematch": "def test_nodes_to_node_with_attributes_bothdirectional(self):",
        "context": "                self.assertEqual(node << Edge(color=\"green\", label=\"3.2\") << node, node)\n                self.assertEqual(node >> Edge(color=\"blue\", label=\"3.3\") << node, node)\n                self.assertEqual(node << Edge(color=\"pink\", label=\"3.4\") >> node, node)\n\n    def test_nodes_to_node_with_attributes_bothdirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bothdirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"4\") >> node1, node1)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 273,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bothdirectional\"), show=False):",
        "context": "                self.assertEqual(node >> Edge(color=\"blue\", label=\"3.3\") << node, node)\n                self.assertEqual(node << Edge(color=\"pink\", label=\"3.4\") >> node, node)\n\n    def test_nodes_to_node_with_attributes_bothdirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bothdirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"4\") >> node1, node1)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 273,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bothdirectional\"), show=False):",
        "context": "                self.assertEqual(node >> Edge(color=\"blue\", label=\"3.3\") << node, node)\n                self.assertEqual(node << Edge(color=\"pink\", label=\"3.4\") >> node, node)\n\n    def test_nodes_to_node_with_attributes_bothdirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bothdirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"4\") >> node1, node1)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #161",
        "line": 274,
        "description": [
          "        return direction.upper() in self.__directions"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "test_nodes_to_node_with_attributes_bidirectional",
    "function_scope": "279-284",
    "patterns": [
      {
        "lineno": 279,
        "coloffset": 4,
        "linematch": "def test_nodes_to_node_with_attributes_bidirectional(self):",
        "context": "                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"4\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_bidirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bidirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"blue\", label=\"5\") >> node1, node1)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 280,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bidirectional\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"4\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_bidirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bidirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"blue\", label=\"5\") >> node1, node1)\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 280,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bidirectional\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"4\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_bidirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_bidirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"blue\", label=\"5\") >> node1, node1)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_nodes_to_node_with_attributes_onedirectional",
    "function_scope": "286-292",
    "patterns": [
      {
        "lineno": 286,
        "coloffset": 4,
        "linematch": "def test_nodes_to_node_with_attributes_onedirectional(self):",
        "context": "                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"blue\", label=\"5\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_onedirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_onedirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes >> Edge(color=\"red\", label=\"6.1\") >> node1, node1)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 287,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_onedirectional\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"blue\", label=\"5\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_onedirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_onedirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes >> Edge(color=\"red\", label=\"6.1\") >> node1, node1)\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"6.2\") << node1, node1)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 287,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_onedirectional\"), show=False):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes << Edge(color=\"blue\", label=\"5\") >> node1, node1)\n\n    def test_nodes_to_node_with_attributes_onedirectional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_attributes_onedirectional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes >> Edge(color=\"red\", label=\"6.1\") >> node1, node1)\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"6.2\") << node1, node1)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #162",
        "line": 287,
        "description": [
          "    _provider = None"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -284,7 +284,7 @@\n class Node:\n     \"\"\"Node represents a node for a specific backend service.\"\"\"\n \n-    _provider = None\n+    _provider = \"\"\n     _type = None\n \n     _icon_dir = None\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #163",
        "line": 288,
        "description": [
          "    _type = None"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -285,7 +285,7 @@\n     \"\"\"Node represents a node for a specific backend service.\"\"\"\n \n     _provider = None\n-    _type = None\n+    _type = \"\"\n \n     _icon_dir = None\n     _icon = None\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #164",
        "line": 290,
        "description": [
          "    _icon_dir = None"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -287,7 +287,7 @@\n     _provider = None\n     _type = None\n \n-    _icon_dir = None\n+    _icon_dir = \"\"\n     _icon = None\n \n     _height = 1.9\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #165",
        "line": 291,
        "description": [
          "    _icon = None"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -288,7 +288,7 @@\n     _type = None\n \n     _icon_dir = None\n-    _icon = None\n+    _icon = \"\"\n \n     _height = 1.9\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_nodes_to_node_with_additional_attributes_directional",
    "function_scope": "294-304",
    "patterns": [
      {
        "lineno": 294,
        "coloffset": 4,
        "linematch": "def test_nodes_to_node_with_additional_attributes_directional(self):",
        "context": "                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(nodes >> Edge(color=\"red\", label=\"6.1\") >> node1, node1)\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"6.2\") << node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes_directional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes_directional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 295,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes_directional\"), show=False):",
        "context": "                self.assertEqual(nodes >> Edge(color=\"red\", label=\"6.1\") >> node1, node1)\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"6.2\") << node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes_directional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes_directional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(\n                    nodes >> Edge(color=\"red\", label=\"6.1\") >> Edge(color=\"blue\", label=\"6.2\") >> node1, node1",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 295,
        "coloffset": 8,
        "linematch": "with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes_directional\"), show=False):",
        "context": "                self.assertEqual(nodes >> Edge(color=\"red\", label=\"6.1\") >> node1, node1)\n                self.assertEqual(nodes << Edge(color=\"green\", label=\"6.2\") << node1, node1)\n\n    def test_nodes_to_node_with_additional_attributes_directional(self):\n        with Diagram(name=os.path.join(self.name, \"nodes_to_node_with_additional_attributes_directional\"), show=False):\n            with Cluster():\n                node1 = Node(\"node1\")\n                nodes = [Node(\"node2\"), Node(\"node3\")]\n                self.assertEqual(\n                    nodes >> Edge(color=\"red\", label=\"6.1\") >> Edge(color=\"blue\", label=\"6.2\") >> node1, node1",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #168",
        "line": 295,
        "description": [
          "    def __init__(self, label: str = \"\", *, nodeid: str = None, **attrs: Dict):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -292,7 +292,7 @@\n \n     _height = 1.9\n \n-    def __init__(self, label: str = \"\", *, nodeid: str = None, **attrs: Dict):\n+    def __init__(self, label: str = \"XXXX\", *, nodeid: str = None, **attrs: Dict):\n         \"\"\"Node represents a system component.\n \n         :param label: Node label.\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #169",
        "line": 301,
        "description": [
          "        self._id = nodeid or self._rand_id()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #170",
        "line": 301,
        "description": [
          "        self._id = nodeid or self._rand_id()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #171",
        "line": 302,
        "description": [
          "        self.label = label"
        ],
        "failure": []
      }
    ],
    "mutation_score": 75.0
  },
  {
    "function_name": "test_folder_depth",
    "function_scope": "308-317",
    "patterns": [
      {
        "lineno": 308,
        "coloffset": 4,
        "linematch": "def test_folder_depth(self):",
        "context": "                )\n\n\nclass ResourcesTest(unittest.TestCase):\n    def test_folder_depth(self):\n        \"\"\"\n        The code currently only handles resource folders up to a dir depth of 2\n        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 309,
        "coloffset": 8,
        "linematch": "\"\"\"",
        "context": "\n\nclass ResourcesTest(unittest.TestCase):\n    def test_folder_depth(self):\n        \"\"\"\n        The code currently only handles resource folders up to a dir depth of 2\n        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 314,
        "coloffset": 8,
        "linematch": "resources_dir = pathlib.Path(__file__).parent.parent / 'resources'",
        "context": "        The code currently only handles resource folders up to a dir depth of 2\n        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'\n        max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1\n                        for d, _, _ in os.walk(resources_dir))\n        self.assertLessEqual(max_depth, 2)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 315,
        "coloffset": 8,
        "linematch": "max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1",
        "context": "        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'\n        max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1\n                        for d, _, _ in os.walk(resources_dir))\n        self.assertLessEqual(max_depth, 2)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 317,
        "coloffset": 8,
        "linematch": "self.assertLessEqual(max_depth, 2)",
        "context": "        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'\n        max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1\n                        for d, _, _ in os.walk(resources_dir))\n        self.assertLessEqual(max_depth, 2)",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 309,
        "coloffset": 8,
        "linematch": "\"\"\"",
        "context": "\n\nclass ResourcesTest(unittest.TestCase):\n    def test_folder_depth(self):\n        \"\"\"\n        The code currently only handles resource folders up to a dir depth of 2\n        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 314,
        "coloffset": 8,
        "linematch": "resources_dir = pathlib.Path(__file__).parent.parent / 'resources'",
        "context": "        The code currently only handles resource folders up to a dir depth of 2\n        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'\n        max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1\n                        for d, _, _ in os.walk(resources_dir))\n        self.assertLessEqual(max_depth, 2)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 315,
        "coloffset": 8,
        "linematch": "max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1",
        "context": "        i.e. resources/<provider>/<type>/<image>, so check that this depth isn't\n        exceeded.\n        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'\n        max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1\n                        for d, _, _ in os.walk(resources_dir))\n        self.assertLessEqual(max_depth, 2)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 317,
        "coloffset": 8,
        "linematch": "self.assertLessEqual(max_depth, 2)",
        "context": "        \"\"\"\n        resources_dir = pathlib.Path(__file__).parent.parent / 'resources'\n        max_depth = max(os.path.relpath(d, resources_dir).count(os.sep) + 1\n                        for d, _, _ in os.walk(resources_dir))\n        self.assertLessEqual(max_depth, 2)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #175",
        "line": 310,
        "description": [
          "            prefix = self.__class__.__name__"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -307,7 +307,7 @@\n             raise EnvironmentError(\"Global diagrams context not set up\")\n \n         if self._diagram.autolabel:\n-            prefix = self.__class__.__name__\n+            prefix = None\n             if self.label:\n                 self.label = prefix + \"\\n\" + self.label\n             else:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #176",
        "line": 312,
        "description": [
          "                self.label = prefix + \"\\n\" + self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -309,7 +309,7 @@\n         if self._diagram.autolabel:\n             prefix = self.__class__.__name__\n             if self.label:\n-                self.label = prefix + \"\\n\" + self.label\n+                self.label = prefix - \"\\n\" + self.label\n             else:\n                 self.label = prefix\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #177",
        "line": 312,
        "description": [
          "                self.label = prefix + \"\\n\" + self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -309,7 +309,7 @@\n         if self._diagram.autolabel:\n             prefix = self.__class__.__name__\n             if self.label:\n-                self.label = prefix + \"\\n\" + self.label\n+                self.label = prefix + \"XX\\nXX\" + self.label\n             else:\n                 self.label = prefix\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #178",
        "line": 312,
        "description": [
          "                self.label = prefix + \"\\n\" + self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -309,7 +309,7 @@\n         if self._diagram.autolabel:\n             prefix = self.__class__.__name__\n             if self.label:\n-                self.label = prefix + \"\\n\" + self.label\n+                self.label = prefix + \"\\n\" - self.label\n             else:\n                 self.label = prefix\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #179",
        "line": 312,
        "description": [
          "                self.label = prefix + \"\\n\" + self.label"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -309,7 +309,7 @@\n         if self._diagram.autolabel:\n             prefix = self.__class__.__name__\n             if self.label:\n-                self.label = prefix + \"\\n\" + self.label\n+                self.label = None\n             else:\n                 self.label = prefix\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #180",
        "line": 314,
        "description": [
          "                self.label = prefix"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -311,7 +311,7 @@\n             if self.label:\n                 self.label = prefix + \"\\n\" + self.label\n             else:\n-                self.label = prefix\n+                self.label = None\n \n         # fmt: off\n         # If a node has an icon, increase the height slightly to avoid\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_nodes",
    "function_scope": "23-27",
    "patterns": [
      {
        "lineno": 23,
        "coloffset": 4,
        "linematch": "def test_nodes(self):",
        "context": "            os.remove(self.name + \".png\")\n        except FileNotFoundError:\n            pass\n\n    def test_nodes(self):\n        with Diagram(name=self.name, show=False):\n            person = Person(\"person\", \"A person.\")\n            container = Container(\"container\", \"Java application\", \"The application.\")\n            database = Database(\"database\", \"Oracle database\", \"Stores information.\")\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 24,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "        except FileNotFoundError:\n            pass\n\n    def test_nodes(self):\n        with Diagram(name=self.name, show=False):\n            person = Person(\"person\", \"A person.\")\n            container = Container(\"container\", \"Java application\", \"The application.\")\n            database = Database(\"database\", \"Oracle database\", \"Stores information.\")\n\n    def test_external_nodes(self):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 24,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "        except FileNotFoundError:\n            pass\n\n    def test_nodes(self):\n        with Diagram(name=self.name, show=False):\n            person = Person(\"person\", \"A person.\")\n            container = Container(\"container\", \"Java application\", \"The application.\")\n            database = Database(\"database\", \"Oracle database\", \"Stores information.\")\n\n    def test_external_nodes(self):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4612",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=41, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4613",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -23,7 +23,7 @@\n     indicate that it was shortened. This will also html-escape the description so it can\n     safely be included in a HTML label.\n     \"\"\"\n-    wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=40, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4614",
        "line": 26,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=40, max_lines=3)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4615",
        "line": 27,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      }
    ],
    "mutation_score": 50.0
  },
  {
    "function_name": "test_external_nodes",
    "function_scope": "29-32",
    "patterns": [
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "def test_external_nodes(self):",
        "context": "            person = Person(\"person\", \"A person.\")\n            container = Container(\"container\", \"Java application\", \"The application.\")\n            database = Database(\"database\", \"Oracle database\", \"Stores information.\")\n\n    def test_external_nodes(self):\n        with Diagram(name=self.name, show=False):\n            external_person = Person(\"person\", external=True)\n            external_system = System(\"external\", external=True)\n\n    def test_systems(self):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 30,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            container = Container(\"container\", \"Java application\", \"The application.\")\n            database = Database(\"database\", \"Oracle database\", \"Stores information.\")\n\n    def test_external_nodes(self):\n        with Diagram(name=self.name, show=False):\n            external_person = Person(\"person\", external=True)\n            external_system = System(\"external\", external=True)\n\n    def test_systems(self):\n        with Diagram(name=self.name, show=False):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 30,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            container = Container(\"container\", \"Java application\", \"The application.\")\n            database = Database(\"database\", \"Oracle database\", \"Stores information.\")\n\n    def test_external_nodes(self):\n        with Diagram(name=self.name, show=False):\n            external_person = Person(\"person\", external=True)\n            external_system = System(\"external\", external=True)\n\n    def test_systems(self):\n        with Diagram(name=self.name, show=False):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4622",
        "line": 29,
        "description": [
          "    return \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return \"<br/>\".join(lines)\n+    return \"XX<br/>XX\".join(lines)\n \n \n def _format_edge_label(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "test_systems",
    "function_scope": "34-37",
    "patterns": [
      {
        "lineno": 34,
        "coloffset": 4,
        "linematch": "def test_systems(self):",
        "context": "        with Diagram(name=self.name, show=False):\n            external_person = Person(\"person\", external=True)\n            external_system = System(\"external\", external=True)\n\n    def test_systems(self):\n        with Diagram(name=self.name, show=False):\n            system = System(\"system\", \"The internal system.\")\n            system_without_description = System(\"unknown\")\n\n    def test_edges(self):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 35,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            external_person = Person(\"person\", external=True)\n            external_system = System(\"external\", external=True)\n\n    def test_systems(self):\n        with Diagram(name=self.name, show=False):\n            system = System(\"system\", \"The internal system.\")\n            system_without_description = System(\"unknown\")\n\n    def test_edges(self):\n        with Diagram(name=self.name, show=False):",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 35,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            external_person = Person(\"person\", external=True)\n            external_system = System(\"external\", external=True)\n\n    def test_systems(self):\n        with Diagram(name=self.name, show=False):\n            system = System(\"system\", \"The internal system.\")\n            system_without_description = System(\"unknown\")\n\n    def test_edges(self):\n        with Diagram(name=self.name, show=False):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4623",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=25, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4624",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=24, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4625",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4626",
        "line": 35,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4627",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = \"XX<br/>XX\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4628",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = None\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4629",
        "line": 37,
        "description": [
          "    return f'<<font point-size=\"10\">{text}</font>>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n-    return f'<<font point-size=\"10\">{text}</font>>'\n+    return f'XX<<font point-size=\"10\">{text}</font>>XX'\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 28.57142857142857
  },
  {
    "function_name": "test_edges",
    "function_scope": "39-44",
    "patterns": [
      {
        "lineno": 39,
        "coloffset": 4,
        "linematch": "def test_edges(self):",
        "context": "        with Diagram(name=self.name, show=False):\n            system = System(\"system\", \"The internal system.\")\n            system_without_description = System(\"unknown\")\n\n    def test_edges(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> c2",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 40,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            system = System(\"system\", \"The internal system.\")\n            system_without_description = System(\"unknown\")\n\n    def test_edges(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> c2\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 40,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            system = System(\"system\", \"The internal system.\")\n            system_without_description = System(\"unknown\")\n\n    def test_edges(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> c2\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #5",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #6",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #7",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #8",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #9",
        "line": 41,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #10",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #11",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #12",
        "line": 42,
        "description": [
          "    __curvestyles = (\"ortho\", \"curved\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #13",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #14",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #15",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #16",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #17",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #18",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4630",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"XXXX\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4631",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"XXXX\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4632",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"\", type=\"XXContainerXX\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4633",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = f\"XX{type}: {technology}XX\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4634",
        "line": 41,
        "description": [
          "    key = f\"{type}: {technology}\" if technology else type"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -38,7 +38,7 @@\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n-    key = f\"{type}: {technology}\" if technology else type\n+    key = None\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4635",
        "line": 43,
        "description": [
          "        \"label\": _format_node_label(name, key, description),"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n-        \"label\": _format_node_label(name, key, description),\n+        \"XXlabelXX\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4636",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"XXlabellocXX\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4637",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"labelloc\": \"XXcXX\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 63.63636363636363
  },
  {
    "function_name": "test_edges_with_labels",
    "function_scope": "46-52",
    "patterns": [
      {
        "lineno": 46,
        "coloffset": 4,
        "linematch": "def test_edges_with_labels(self):",
        "context": "            c2 = Container(\"container2\")\n\n            c1 >> c2\n\n    def test_edges_with_labels(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> Relationship(\"depends on\") >> c2",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 47,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "\n            c1 >> c2\n\n    def test_edges_with_labels(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> Relationship(\"depends on\") >> c2\n            c1 << Relationship(\"is depended on by\") << c2",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 47,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "\n            c1 >> c2\n\n    def test_edges_with_labels(self):\n        with Diagram(name=self.name, show=False):\n            c1 = Container(\"container1\")\n            c2 = Container(\"container2\")\n\n            c1 >> Relationship(\"depends on\") >> c2\n            c1 << Relationship(\"is depended on by\") << c2",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #19",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"XXpadXX\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #20",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"pad\": \"XX2.0XX\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #21",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"XXsplinesXX\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #22",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"splines\": \"XXorthoXX\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #23",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"XXnodesepXX\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #24",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"nodesep\": \"XX0.60XX\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #25",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"XXranksepXX\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #26",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"ranksep\": \"XX0.75XX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #27",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"XXfontnameXX\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #28",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"fontname\": \"XXSans-SerifXX\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #29",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"XXfontsizeXX\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #30",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"fontsize\": \"XX15XX\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4640",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"XXwidthXX\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4641",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"width\": \"XX2.6XX\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4642",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"XXheightXX\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4643",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"height\": \"XX1.6XX\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4644",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"XXfixedsizeXX\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4645",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"fixedsize\": \"XXtrueXX\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4646",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"XXstyleXX\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4647",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"style\": \"XXfilledXX\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4648",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"XXfillcolorXX\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4649",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"fillcolor\": \"XXdodgerblue3XX\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4650",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"XXfontcolorXX\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4651",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"fontcolor\": \"XXwhiteXX\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4652",
        "line": 52,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 4.0
  },
  {
    "function_name": "test_edge_without_constraint",
    "function_scope": "54-59",
    "patterns": [
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "def test_edge_without_constraint(self):",
        "context": "\n            c1 >> Relationship(\"depends on\") >> c2\n            c1 << Relationship(\"is depended on by\") << c2\n\n    def test_edge_without_constraint(self):\n        with Diagram(name=self.name, show=False):\n            s1 = System(\"system 1\")\n            s2 = System(\"system 2\")\n\n            s1 >> Relationship(constraint=\"False\") >> s2",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 55,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            c1 >> Relationship(\"depends on\") >> c2\n            c1 << Relationship(\"is depended on by\") << c2\n\n    def test_edge_without_constraint(self):\n        with Diagram(name=self.name, show=False):\n            s1 = System(\"system 1\")\n            s2 = System(\"system 2\")\n\n            s1 >> Relationship(constraint=\"False\") >> s2\n",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 55,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "            c1 >> Relationship(\"depends on\") >> c2\n            c1 << Relationship(\"is depended on by\") << c2\n\n    def test_edge_without_constraint(self):\n        with Diagram(name=self.name, show=False):\n            s1 = System(\"system 1\")\n            s2 = System(\"system 2\")\n\n            s1 >> Relationship(constraint=\"False\") >> s2\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #33",
        "line": 54,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #34",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"XXshapeXX\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #35",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"shape\": \"XXboxXX\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #36",
        "line": 57,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"XXstyleXX\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #37",
        "line": 57,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"style\": \"XXroundedXX\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #38",
        "line": 58,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -55,7 +55,7 @@\n     _default_node_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"fixedsize\": \"true\",\n+        \"XXfixedsizeXX\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #39",
        "line": 58,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -55,7 +55,7 @@\n     _default_node_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"fixedsize\": \"true\",\n+        \"fixedsize\": \"XXtrueXX\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #40",
        "line": 59,
        "description": [
          "        \"width\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n-        \"width\": \"1.4\",\n+        \"XXwidthXX\": \"1.4\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #41",
        "line": 59,
        "description": [
          "        \"width\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n-        \"width\": \"1.4\",\n+        \"width\": \"XX1.4XX\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4653",
        "line": 54,
        "description": [
          "    if not description:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4654",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"XXwidthXX\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4655",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"XX2XX\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4656",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"XXheightXX\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4657",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"height\": \"XX1XX\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 7.142857142857142
  },
  {
    "function_name": "test_cluster",
    "function_scope": "61-64",
    "patterns": [
      {
        "lineno": 61,
        "coloffset": 4,
        "linematch": "def test_cluster(self):",
        "context": "            s2 = System(\"system 2\")\n\n            s1 >> Relationship(constraint=\"False\") >> s2\n\n    def test_cluster(self):\n        with Diagram(name=self.name, show=False):\n            with SystemBoundary(\"System\"):\n                Container(\"container\", \"type\", \"description\")",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 62,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "\n            s1 >> Relationship(constraint=\"False\") >> s2\n\n    def test_cluster(self):\n        with Diagram(name=self.name, show=False):\n            with SystemBoundary(\"System\"):\n                Container(\"container\", \"type\", \"description\")",
        "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
        "check_id": "LOF001",
        "check_name": "count-test-method-lines"
      },
      {
        "lineno": 62,
        "coloffset": 8,
        "linematch": "with Diagram(name=self.name, show=False):",
        "context": "\n            s1 >> Relationship(constraint=\"False\") >> s2\n\n    def test_cluster(self):\n        with Diagram(name=self.name, show=False):\n            with SystemBoundary(\"System\"):\n                Container(\"container\", \"type\", \"description\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #44",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"XXlabellocXX\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #45",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"labelloc\": \"XXbXX\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4660",
        "line": 62,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4661",
        "line": 63,
        "description": [
          "        \"technology\": technology,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -60,7 +60,7 @@\n def Container(name, technology=\"\", description=\"\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n-        \"technology\": technology,\n+        \"XXtechnologyXX\": technology,\n         \"description\": description,\n         \"type\": \"Container\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4662",
        "line": 64,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -61,7 +61,7 @@\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"Container\",\n     }\n     container_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 20.0
  },
  {
    "function_name": "load_tmpl",
    "function_scope": "13-16",
    "patterns": [
      {
        "lineno": 13,
        "coloffset": 0,
        "linematch": "def load_tmpl(tmpl: str) -> Template:",
        "context": "\n_usage = \"Usage: generate.py <provider>\"\n\n\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[\"up_or_title\"] = up_or_title\n    return env.get_template(tmpl)\n\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 14,
        "coloffset": 4,
        "linematch": "env = Environment(loader=FileSystemLoader(template_dir()))",
        "context": "_usage = \"Usage: generate.py <provider>\"\n\n\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[\"up_or_title\"] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 15,
        "coloffset": 4,
        "linematch": "env.filters[\"up_or_title\"] = up_or_title",
        "context": "\n\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[\"up_or_title\"] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 16,
        "coloffset": 4,
        "linematch": "return env.get_template(tmpl)",
        "context": "\ndef load_tmpl(tmpl: str) -> Template:\n    env = Environment(loader=FileSystemLoader(template_dir()))\n    env.filters[\"up_or_title\"] = up_or_title\n    return env.get_template(tmpl)\n\n\ndef up_or_title(pvd: str, s: str) -> str:\n    if s in cfg.UPPER_WORDS.get(pvd, ()):\n        return s.upper()",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #1",
        "line": 14,
        "description": [
          "__diagram = contextvars.ContextVar(\"diagrams\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -11,7 +11,7 @@\n # These global contexts are for letting the clusters and nodes know\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n-__diagram = contextvars.ContextVar(\"diagrams\")\n+__diagram = contextvars.ContextVar(\"XXdiagramsXX\")\n __cluster = contextvars.ContextVar(\"cluster\")\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2",
        "line": 14,
        "description": [
          "__diagram = contextvars.ContextVar(\"diagrams\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #3",
        "line": 15,
        "description": [
          "__cluster = contextvars.ContextVar(\"cluster\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -12,7 +12,7 @@\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n __diagram = contextvars.ContextVar(\"diagrams\")\n-__cluster = contextvars.ContextVar(\"cluster\")\n+__cluster = contextvars.ContextVar(\"XXclusterXX\")\n \n \n def getdiagram() -> \"Diagram\":\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4",
        "line": 15,
        "description": [
          "__cluster = contextvars.ContextVar(\"cluster\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4608",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = f'XX<br/><font point-size=\"10\">{_format_description(description)}</font>XX' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4609",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"XXXX\"\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4610",
        "line": 13,
        "description": [
          "    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -10,7 +10,7 @@\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n-    text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n+    text = None\n     return f\"<{title}{subtitle}{text}>\"\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4611",
        "line": 14,
        "description": [
          "    return f\"<{title}{subtitle}{text}>\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -11,7 +11,7 @@\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n-    return f\"<{title}{subtitle}{text}>\"\n+    return f\"XX<{title}{subtitle}{text}>XX\"\n \n \n def _format_description(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4723",
        "line": 13,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = \"custom\"\n     _icon_dir = None\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n     def _load_icon(self):\n         return self._icon\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4724",
        "line": 13,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -10,7 +10,7 @@\n     _type = \"custom\"\n     _icon_dir = None\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n     def _load_icon(self):\n         return self._icon\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 20.0
  },
  {
    "function_name": "gen_classes",
    "function_scope": "27-40",
    "patterns": [
      {
        "lineno": 27,
        "coloffset": 0,
        "linematch": "def gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:",
        "context": "        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    \"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "def _gen_class_meta(path: str) -> dict:",
        "context": "    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 27,
        "coloffset": 0,
        "linematch": "def gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:",
        "context": "        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    \"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "def _gen_class_meta(path: str) -> dict:",
        "context": "    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 27,
        "coloffset": 0,
        "linematch": "def gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:",
        "context": "        return cfg.TITLE_WORDS[pvd][s]\n    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    \"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 28,
        "coloffset": 4,
        "linematch": "\"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"",
        "context": "    return s.title()\n\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    \"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "tmpl = load_tmpl(cfg.TMPL_MODULE)",
        "context": "\n\ndef gen_classes(pvd: str, typ: str, paths: Iterable[str]) -> str:\n    \"\"\"Generate all service node classes based on resources paths with class templates.\"\"\"\n    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "def _gen_class_meta(path: str) -> dict:",
        "context": "    tmpl = load_tmpl(cfg.TMPL_MODULE)\n\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 34,
        "coloffset": 8,
        "linematch": "base = os.path.splitext(path)[0]",
        "context": "\n    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 35,
        "coloffset": 8,
        "linematch": "name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])",
        "context": "    # TODO: extract the gen class metas for sharing\n    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 36,
        "coloffset": 8,
        "linematch": "return {\"name\": name, \"icon\": path}",
        "context": "    # TODO: independent function for generating all pvd/typ/paths pairs\n    def _gen_class_meta(path: str) -> dict:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "metas = map(_gen_class_meta, paths)",
        "context": "        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 39,
        "coloffset": 4,
        "linematch": "aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}",
        "context": "        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 40,
        "coloffset": 4,
        "linematch": "return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)",
        "context": "        return {\"name\": name, \"icon\": path}\n\n    metas = map(_gen_class_meta, paths)\n    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split('.')",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4615",
        "line": 27,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4616",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines = [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4617",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4618",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"XXXX\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4619",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4620",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"\"] * (4 - len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4621",
        "line": 28,
        "description": [
          "    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -25,7 +25,7 @@\n     \"\"\"\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n+    lines += [\"\"] * (3 + len(lines))  # fill up with empty lines so it is always three\n     return \"<br/>\".join(lines)\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4622",
        "line": 29,
        "description": [
          "    return \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -26,7 +26,7 @@\n     wrapper = textwrap.TextWrapper(width=40, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     lines += [\"\"] * (3 - len(lines))  # fill up with empty lines so it is always three\n-    return \"<br/>\".join(lines)\n+    return \"XX<br/>XX\".join(lines)\n \n \n def _format_edge_label(description):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4623",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=25, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4624",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -31,7 +31,7 @@\n \n def _format_edge_label(description):\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n-    wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n+    wrapper = textwrap.TextWrapper(width=24, max_lines=4)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4625",
        "line": 34,
        "description": [
          "    wrapper = textwrap.TextWrapper(width=24, max_lines=3)"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4626",
        "line": 35,
        "description": [
          "    lines = [html.escape(line) for line in wrapper.wrap(description)]"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4627",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = \"XX<br/>XX\".join(lines)\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4628",
        "line": 36,
        "description": [
          "    text = \"<br/>\".join(lines)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -33,7 +33,7 @@\n     \"\"\"Create a graphviz label string for a C4 edge\"\"\"\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n-    text = \"<br/>\".join(lines)\n+    text = None\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4629",
        "line": 37,
        "description": [
          "    return f'<<font point-size=\"10\">{text}</font>>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -34,7 +34,7 @@\n     wrapper = textwrap.TextWrapper(width=24, max_lines=3)\n     lines = [html.escape(line) for line in wrapper.wrap(description)]\n     text = \"<br/>\".join(lines)\n-    return f'<<font point-size=\"10\">{text}</font>>'\n+    return f'XX<<font point-size=\"10\">{text}</font>>XX'\n \n \n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4630",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"XXXX\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4631",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"XXXX\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4632",
        "line": 40,
        "description": [
          "def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -37,7 +37,7 @@\n     return f'<<font point-size=\"10\">{text}</font>>'\n \n \n-def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n+def C4Node(name, technology=\"\", description=\"\", type=\"XXContainerXX\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 27.77777777777778
  },
  {
    "function_name": "gen_apidoc",
    "function_scope": "43-65",
    "patterns": [
      {
        "lineno": 43,
        "coloffset": 0,
        "linematch": "def gen_apidoc(pvd: str, typ_paths: dict) -> str:",
        "context": "    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split('.')\n      tmpl_file = f\"{default_tmp[0]}_{pvd}.{default_tmp[1]}\"\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 52,
        "coloffset": 4,
        "linematch": "def _gen_class_name(path: str) -> str:",
        "context": "    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 43,
        "coloffset": 0,
        "linematch": "def gen_apidoc(pvd: str, typ_paths: dict) -> str:",
        "context": "    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split('.')\n      tmpl_file = f\"{default_tmp[0]}_{pvd}.{default_tmp[1]}\"\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 52,
        "coloffset": 4,
        "linematch": "def _gen_class_name(path: str) -> str:",
        "context": "    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 43,
        "coloffset": 0,
        "linematch": "def gen_apidoc(pvd: str, typ_paths: dict) -> str:",
        "context": "    aliases = cfg.ALIASES[pvd][typ] if typ in cfg.ALIASES[pvd] else {}\n    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split('.')\n      tmpl_file = f\"{default_tmp[0]}_{pvd}.{default_tmp[1]}\"\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 58,
        "coloffset": 4,
        "linematch": "for typ, (paths, resource_root) in sorted(typ_paths.items()):",
        "context": "        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:\n            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)\n            alias = cfg.ALIASES[pvd].get(typ, {}).get(name)",
        "pattern": ".//FunctionDef//For[.//For]",
        "check_id": "F001",
        "check_name": "nested-loop-conditions-ff"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "try:",
        "context": "    return tmpl.render(pvd=pvd, typ=typ, metas=metas, aliases=aliases)\n\n\ndef gen_apidoc(pvd: str, typ_paths: dict) -> str:\n    try:\n      default_tmp = cfg.TMPL_APIDOC.split('.')\n      tmpl_file = f\"{default_tmp[0]}_{pvd}.{default_tmp[1]}\"\n      tmpl = load_tmpl(tmpl_file)\n    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 52,
        "coloffset": 4,
        "linematch": "def _gen_class_name(path: str) -> str:",
        "context": "    except exceptions.TemplateNotFound:\n      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 53,
        "coloffset": 8,
        "linematch": "base = os.path.splitext(path)[0]",
        "context": "      tmpl = load_tmpl(cfg.TMPL_APIDOC)\n\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 54,
        "coloffset": 8,
        "linematch": "name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])",
        "context": "\n    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 55,
        "coloffset": 8,
        "linematch": "return name",
        "context": "    # TODO: remove\n    def _gen_class_name(path: str) -> str:\n        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 57,
        "coloffset": 4,
        "linematch": "typ_classes = {}",
        "context": "        base = os.path.splitext(path)[0]\n        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:\n            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 58,
        "coloffset": 4,
        "linematch": "for typ, (paths, resource_root) in sorted(typ_paths.items()):",
        "context": "        name = \"\".join([up_or_title(pvd, s) for s in base.split(\"-\")])\n        return name\n\n    typ_classes = {}\n    for typ, (paths, resource_root) in sorted(typ_paths.items()):\n        typ_classes[typ] = []\n        for path in paths:\n            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)\n            alias = cfg.ALIASES[pvd].get(typ, {}).get(name)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 65,
        "coloffset": 4,
        "linematch": "return tmpl.render(pvd=pvd, typ_classes=typ_classes)",
        "context": "            name = _gen_class_name(path)\n            resource_path = os.path.join(resource_root, path)\n            alias = cfg.ALIASES[pvd].get(typ, {}).get(name)\n            typ_classes[typ].append({\"name\": name, \"alias\": alias, \"resource_path\": resource_path})\n    return tmpl.render(pvd=pvd, typ_classes=typ_classes)\n\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    \"\"\"Create a module file\"\"\"\n    mod_path = os.path.join(app_root_dir(pvd), f\"{typ}.py\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #13",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #14",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #15",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #16",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #17",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #18",
        "line": 43,
        "description": [
          "    __outformats = (\"png\", \"jpg\", \"svg\", \"pdf\", \"dot\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #19",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"XXpadXX\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #20",
        "line": 47,
        "description": [
          "        \"pad\": \"2.0\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -44,7 +44,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"pad\": \"2.0\",\n+        \"pad\": \"XX2.0XX\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #21",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"XXsplinesXX\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #22",
        "line": 48,
        "description": [
          "        \"splines\": \"ortho\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -45,7 +45,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n-        \"splines\": \"ortho\",\n+        \"splines\": \"XXorthoXX\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #23",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"XXnodesepXX\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #24",
        "line": 49,
        "description": [
          "        \"nodesep\": \"0.60\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -46,7 +46,7 @@\n     _default_graph_attrs = {\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n-        \"nodesep\": \"0.60\",\n+        \"nodesep\": \"XX0.60XX\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #25",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"XXranksepXX\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #26",
        "line": 50,
        "description": [
          "        \"ranksep\": \"0.75\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -47,7 +47,7 @@\n         \"pad\": \"2.0\",\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n-        \"ranksep\": \"0.75\",\n+        \"ranksep\": \"XX0.75XX\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #27",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"XXfontnameXX\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #28",
        "line": 51,
        "description": [
          "        \"fontname\": \"Sans-Serif\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -48,7 +48,7 @@\n         \"splines\": \"ortho\",\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n-        \"fontname\": \"Sans-Serif\",\n+        \"fontname\": \"XXSans-SerifXX\",\n         \"fontsize\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #29",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"XXfontsizeXX\": \"15\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #30",
        "line": 52,
        "description": [
          "        \"fontsize\": \"15\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -49,7 +49,7 @@\n         \"nodesep\": \"0.60\",\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"15\",\n+        \"fontsize\": \"XX15XX\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #31",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"XXfontcolorXX\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #32",
        "line": 53,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -50,7 +50,7 @@\n         \"ranksep\": \"0.75\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"15\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"fontcolor\": \"XX#2D3436XX\",\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #33",
        "line": 54,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #34",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"XXshapeXX\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #35",
        "line": 56,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -53,7 +53,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_node_attrs = {\n-        \"shape\": \"box\",\n+        \"shape\": \"XXboxXX\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #36",
        "line": 57,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"XXstyleXX\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #37",
        "line": 57,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -54,7 +54,7 @@\n     }\n     _default_node_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"style\": \"XXroundedXX\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #38",
        "line": 58,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -55,7 +55,7 @@\n     _default_node_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"fixedsize\": \"true\",\n+        \"XXfixedsizeXX\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #39",
        "line": 58,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -55,7 +55,7 @@\n     _default_node_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"fixedsize\": \"true\",\n+        \"fixedsize\": \"XXtrueXX\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #40",
        "line": 59,
        "description": [
          "        \"width\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n-        \"width\": \"1.4\",\n+        \"XXwidthXX\": \"1.4\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #41",
        "line": 59,
        "description": [
          "        \"width\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -56,7 +56,7 @@\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n-        \"width\": \"1.4\",\n+        \"width\": \"XX1.4XX\",\n         \"height\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #42",
        "line": 60,
        "description": [
          "        \"height\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n-        \"height\": \"1.4\",\n+        \"XXheightXX\": \"1.4\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #43",
        "line": 60,
        "description": [
          "        \"height\": \"1.4\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -57,7 +57,7 @@\n         \"style\": \"rounded\",\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n-        \"height\": \"1.4\",\n+        \"height\": \"XX1.4XX\",\n         \"labelloc\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #44",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"XXlabellocXX\": \"b\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #45",
        "line": 61,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -58,7 +58,7 @@\n         \"fixedsize\": \"true\",\n         \"width\": \"1.4\",\n         \"height\": \"1.4\",\n-        \"labelloc\": \"b\",\n+        \"labelloc\": \"XXbXX\",\n         # imagepos attribute is not backward compatible\n         # TODO: check graphviz version to see if \"imagepos\" is available >= 2.40\n         # https://github.com/xflr6/graphviz/blob/master/graphviz/backend.py#L248\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4635",
        "line": 43,
        "description": [
          "        \"label\": _format_node_label(name, key, description),"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -40,7 +40,7 @@\n def C4Node(name, technology=\"\", description=\"\", type=\"Container\", **kwargs):\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n-        \"label\": _format_node_label(name, key, description),\n+        \"XXlabelXX\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4636",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"XXlabellocXX\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4637",
        "line": 44,
        "description": [
          "        \"labelloc\": \"c\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -41,7 +41,7 @@\n     key = f\"{type}: {technology}\" if technology else type\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n-        \"labelloc\": \"c\",\n+        \"labelloc\": \"XXcXX\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4638",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"XXshapeXX\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4639",
        "line": 45,
        "description": [
          "        \"shape\": \"rect\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -42,7 +42,7 @@\n     node_attributes = {\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n-        \"shape\": \"rect\",\n+        \"shape\": \"XXrectXX\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4640",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"XXwidthXX\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4641",
        "line": 46,
        "description": [
          "        \"width\": \"2.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -43,7 +43,7 @@\n         \"label\": _format_node_label(name, key, description),\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n-        \"width\": \"2.6\",\n+        \"width\": \"XX2.6XX\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4642",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"XXheightXX\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4643",
        "line": 47,
        "description": [
          "        \"height\": \"1.6\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -44,7 +44,7 @@\n         \"labelloc\": \"c\",\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n-        \"height\": \"1.6\",\n+        \"height\": \"XX1.6XX\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4644",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"XXfixedsizeXX\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4645",
        "line": 48,
        "description": [
          "        \"fixedsize\": \"true\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -45,7 +45,7 @@\n         \"shape\": \"rect\",\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n-        \"fixedsize\": \"true\",\n+        \"fixedsize\": \"XXtrueXX\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4646",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"XXstyleXX\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4647",
        "line": 49,
        "description": [
          "        \"style\": \"filled\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -46,7 +46,7 @@\n         \"width\": \"2.6\",\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n-        \"style\": \"filled\",\n+        \"style\": \"XXfilledXX\",\n         \"fillcolor\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4648",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"XXfillcolorXX\": \"dodgerblue3\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4649",
        "line": 50,
        "description": [
          "        \"fillcolor\": \"dodgerblue3\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -47,7 +47,7 @@\n         \"height\": \"1.6\",\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n-        \"fillcolor\": \"dodgerblue3\",\n+        \"fillcolor\": \"XXdodgerblue3XX\",\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4650",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"XXfontcolorXX\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4651",
        "line": 51,
        "description": [
          "        \"fontcolor\": \"white\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -48,7 +48,7 @@\n         \"fixedsize\": \"true\",\n         \"style\": \"filled\",\n         \"fillcolor\": \"dodgerblue3\",\n-        \"fontcolor\": \"white\",\n+        \"fontcolor\": \"XXwhiteXX\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4652",
        "line": 52,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4653",
        "line": 54,
        "description": [
          "    if not description:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -51,7 +51,7 @@\n         \"fontcolor\": \"white\",\n     }\n     # collapse boxes to a smaller form if they don't have a description\n-    if not description:\n+    if  description:\n         node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4654",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"XXwidthXX\": \"2\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4655",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"XX2XX\", \"height\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4656",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"XXheightXX\": \"1\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4657",
        "line": 55,
        "description": [
          "        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -52,7 +52,7 @@\n     }\n     # collapse boxes to a smaller form if they don't have a description\n     if not description:\n-        node_attributes.update({\"width\": \"2\", \"height\": \"1\"})\n+        node_attributes.update({\"width\": \"2\", \"height\": \"XX1XX\"})\n     node_attributes.update(kwargs)\n     return Node(**node_attributes)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4658",
        "line": 60,
        "description": [
          "def Container(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology=\"\", description=\"\", **kwargs):\n+def Container(name, technology=\"XXXX\", description=\"\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4659",
        "line": 60,
        "description": [
          "def Container(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -57,7 +57,7 @@\n     return Node(**node_attributes)\n \n \n-def Container(name, technology=\"\", description=\"\", **kwargs):\n+def Container(name, technology=\"\", description=\"XXXX\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4660",
        "line": 62,
        "description": [
          "        \"name\": name,"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4661",
        "line": 63,
        "description": [
          "        \"technology\": technology,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -60,7 +60,7 @@\n def Container(name, technology=\"\", description=\"\", **kwargs):\n     container_attributes = {\n         \"name\": name,\n-        \"technology\": technology,\n+        \"XXtechnologyXX\": technology,\n         \"description\": description,\n         \"type\": \"Container\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4662",
        "line": 64,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -61,7 +61,7 @@\n     container_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"Container\",\n     }\n     container_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4663",
        "line": 65,
        "description": [
          "        \"type\": \"Container\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Container\",\n+        \"XXtypeXX\": \"Container\",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4664",
        "line": 65,
        "description": [
          "        \"type\": \"Container\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -62,7 +62,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Container\",\n+        \"type\": \"XXContainerXX\",\n     }\n     container_attributes.update(kwargs)\n     return C4Node(**container_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 14.285714285714285
  },
  {
    "function_name": "make_module",
    "function_scope": "68-72",
    "patterns": [
      {
        "lineno": 68,
        "coloffset": 0,
        "linematch": "def make_module(pvd: str, typ: str, classes: str) -> None:",
        "context": "            typ_classes[typ].append({\"name\": name, \"alias\": alias, \"resource_path\": resource_path})\n    return tmpl.render(pvd=pvd, typ_classes=typ_classes)\n\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    \"\"\"Create a module file\"\"\"\n    mod_path = os.path.join(app_root_dir(pvd), f\"{typ}.py\")\n    with open(mod_path, \"w+\") as f:\n        f.write(classes)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 69,
        "coloffset": 4,
        "linematch": "\"\"\"Create a module file\"\"\"",
        "context": "    return tmpl.render(pvd=pvd, typ_classes=typ_classes)\n\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    \"\"\"Create a module file\"\"\"\n    mod_path = os.path.join(app_root_dir(pvd), f\"{typ}.py\")\n    with open(mod_path, \"w+\") as f:\n        f.write(classes)\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 70,
        "coloffset": 4,
        "linematch": "mod_path = os.path.join(app_root_dir(pvd), f\"{typ}.py\")",
        "context": "\n\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    \"\"\"Create a module file\"\"\"\n    mod_path = os.path.join(app_root_dir(pvd), f\"{typ}.py\")\n    with open(mod_path, \"w+\") as f:\n        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 71,
        "coloffset": 4,
        "linematch": "with open(mod_path, \"w+\") as f:",
        "context": "\ndef make_module(pvd: str, typ: str, classes: str) -> None:\n    \"\"\"Create a module file\"\"\"\n    mod_path = os.path.join(app_root_dir(pvd), f\"{typ}.py\")\n    with open(mod_path, \"w+\") as f:\n        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    \"\"\"Create an api documentation file\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #50",
        "line": 68,
        "description": [
          "        \"fontsize\": \"13\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # \"imagepos\": \"tc\",\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"13\",\n+        \"XXfontsizeXX\": \"13\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #51",
        "line": 68,
        "description": [
          "        \"fontsize\": \"13\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -65,7 +65,7 @@\n         # \"imagepos\": \"tc\",\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n-        \"fontsize\": \"13\",\n+        \"fontsize\": \"XX13XX\",\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #52",
        "line": 69,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"XXfontcolorXX\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n         \"color\": \"#7B8894\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #53",
        "line": 69,
        "description": [
          "        \"fontcolor\": \"#2D3436\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -66,7 +66,7 @@\n         \"imagescale\": \"true\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"13\",\n-        \"fontcolor\": \"#2D3436\",\n+        \"fontcolor\": \"XX#2D3436XX\",\n     }\n     _default_edge_attrs = {\n         \"color\": \"#7B8894\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #54",
        "line": 70,
        "description": [
          "    }"
        ],
        "failure": []
      },
      {
        "name": "Mutant #55",
        "line": 72,
        "description": [
          "        \"color\": \"#7B8894\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n-        \"color\": \"#7B8894\",\n+        \"XXcolorXX\": \"#7B8894\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #56",
        "line": 72,
        "description": [
          "        \"color\": \"#7B8894\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -69,7 +69,7 @@\n         \"fontcolor\": \"#2D3436\",\n     }\n     _default_edge_attrs = {\n-        \"color\": \"#7B8894\",\n+        \"color\": \"XX#7B8894XX\",\n     }\n \n     # fmt: on\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4666",
        "line": 71,
        "description": [
          "def Database(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology=\"\", description=\"\", **kwargs):\n+def Database(name, technology=\"XXXX\", description=\"\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4667",
        "line": 71,
        "description": [
          "def Database(name, technology=\"\", description=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -68,7 +68,7 @@\n     return C4Node(**container_attributes)\n \n \n-def Database(name, technology=\"\", description=\"\", **kwargs):\n+def Database(name, technology=\"\", description=\"XXXX\", **kwargs):\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 11.11111111111111
  },
  {
    "function_name": "make_apidoc",
    "function_scope": "75-79",
    "patterns": [
      {
        "lineno": 75,
        "coloffset": 0,
        "linematch": "def make_apidoc(pvd: str, content: str) -> None:",
        "context": "    with open(mod_path, \"w+\") as f:\n        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    \"\"\"Create an api documentation file\"\"\"\n    mod_path = os.path.join(doc_root_dir(), f\"{pvd}.md\")\n    with open(mod_path, \"w+\") as f:\n        f.write(content)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 76,
        "coloffset": 4,
        "linematch": "\"\"\"Create an api documentation file\"\"\"",
        "context": "        f.write(classes)\n\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    \"\"\"Create an api documentation file\"\"\"\n    mod_path = os.path.join(doc_root_dir(), f\"{pvd}.md\")\n    with open(mod_path, \"w+\") as f:\n        f.write(content)\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 77,
        "coloffset": 4,
        "linematch": "mod_path = os.path.join(doc_root_dir(), f\"{pvd}.md\")",
        "context": "\n\ndef make_apidoc(pvd: str, content: str) -> None:\n    \"\"\"Create an api documentation file\"\"\"\n    mod_path = os.path.join(doc_root_dir(), f\"{pvd}.md\")\n    with open(mod_path, \"w+\") as f:\n        f.write(content)\n\n\ndef generate(pvd: str) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 78,
        "coloffset": 4,
        "linematch": "with open(mod_path, \"w+\") as f:",
        "context": "\ndef make_apidoc(pvd: str, content: str) -> None:\n    \"\"\"Create an api documentation file\"\"\"\n    mod_path = os.path.join(doc_root_dir(), f\"{pvd}.md\")\n    with open(mod_path, \"w+\") as f:\n        f.write(content)\n\n\ndef generate(pvd: str) -> None:\n    \"\"\"Generates a service node classes.\"\"\"",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4670",
        "line": 75,
        "description": [
          "        \"description\": description,"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -72,7 +72,7 @@\n     database_attributes = {\n         \"name\": name,\n         \"technology\": technology,\n-        \"description\": description,\n+        \"XXdescriptionXX\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4671",
        "line": 76,
        "description": [
          "        \"type\": \"Database\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Database\",\n+        \"XXtypeXX\": \"Database\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4672",
        "line": 76,
        "description": [
          "        \"type\": \"Database\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -73,7 +73,7 @@\n         \"name\": name,\n         \"technology\": technology,\n         \"description\": description,\n-        \"type\": \"Database\",\n+        \"type\": \"XXDatabaseXX\",\n         \"shape\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4673",
        "line": 77,
        "description": [
          "        \"shape\": \"cylinder\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         \"technology\": technology,\n         \"description\": description,\n         \"type\": \"Database\",\n-        \"shape\": \"cylinder\",\n+        \"XXshapeXX\": \"cylinder\",\n         \"labelloc\": \"b\",\n     }\n     database_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4674",
        "line": 77,
        "description": [
          "        \"shape\": \"cylinder\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -74,7 +74,7 @@\n         \"technology\": technology,\n         \"description\": description,\n         \"type\": \"Database\",\n-        \"shape\": \"cylinder\",\n+        \"shape\": \"XXcylinderXX\",\n         \"labelloc\": \"b\",\n     }\n     database_attributes.update(kwargs)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4675",
        "line": 78,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         \"description\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n-        \"labelloc\": \"b\",\n+        \"XXlabellocXX\": \"b\",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4676",
        "line": 78,
        "description": [
          "        \"labelloc\": \"b\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -75,7 +75,7 @@\n         \"description\": description,\n         \"type\": \"Database\",\n         \"shape\": \"cylinder\",\n-        \"labelloc\": \"b\",\n+        \"labelloc\": \"XXbXX\",\n     }\n     database_attributes.update(kwargs)\n     return C4Node(**database_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4677",
        "line": 79,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 12.5
  },
  {
    "function_name": "cleaner_onprem",
    "function_scope": "19-21",
    "patterns": [
      {
        "lineno": 19,
        "coloffset": 0,
        "linematch": "def cleaner_onprem(f):",
        "context": "\n_usage = \"Usage: resource.py <cmd> <pvd>\"\n\n\ndef cleaner_onprem(f):\n    f = f.replace(\"_\", \"-\")\n    return f.lower()\n\n\ndef cleaner_aws(f):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "f = f.replace(\"_\", \"-\")",
        "context": "_usage = \"Usage: resource.py <cmd> <pvd>\"\n\n\ndef cleaner_onprem(f):\n    f = f.replace(\"_\", \"-\")\n    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 21,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "\n\ndef cleaner_onprem(f):\n    f = f.replace(\"_\", \"-\")\n    return f.lower()\n\n\ndef cleaner_aws(f):\n    f = f.replace(\"_\", \"-\")\n    f = f.replace(\"@4x\", \"\")",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4725",
        "line": 19,
        "description": [
          "        self._icon = icon_path"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "cleaner_programming",
    "function_scope": "114-115",
    "patterns": [
      {
        "lineno": 114,
        "coloffset": 0,
        "linematch": "def cleaner_programming(f):",
        "context": "            break\n    return f.lower()\n\n\ndef cleaner_programming(f):\n    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 115,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    return f.lower()\n\n\ndef cleaner_programming(f):\n    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #72",
        "line": 114,
        "description": [
          "        self.name = name"
        ],
        "failure": []
      },
      {
        "name": "Mutant #73",
        "line": 115,
        "description": [
          "        if not name and not filename:"
        ],
        "failure": []
      },
      {
        "name": "Mutant #74",
        "line": 115,
        "description": [
          "        if not name and not filename:"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -112,7 +112,7 @@\n         if edge_attr is None:\n             edge_attr = {}\n         self.name = name\n-        if not name and not filename:\n+        if not name and  filename:\n             filename = None\n         elif not filename:\n             filename = \"_\".join(self.name.split()).lower()\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #75",
        "line": 115,
        "description": [
          "        if not name and not filename:"
        ],
        "failure": []
      }
    ],
    "mutation_score": 75.0
  },
  {
    "function_name": "cleaner_generic",
    "function_scope": "118-119",
    "patterns": [
      {
        "lineno": 118,
        "coloffset": 0,
        "linematch": "def cleaner_generic(f):",
        "context": "def cleaner_programming(f):\n    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 119,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    return f.lower()\n\n\ndef cleaner_generic(f):\n    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #78",
        "line": 118,
        "description": [
          "            filename = \"_\".join(self.name.split()).lower()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #79",
        "line": 118,
        "description": [
          "            filename = \"_\".join(self.name.split()).lower()"
        ],
        "failure": []
      },
      {
        "name": "Mutant #80",
        "line": 119,
        "description": [
          "        self.filename = filename"
        ],
        "failure": []
      },
      {
        "name": "Mutant #4710",
        "line": 118,
        "description": [
          "def Relationship(label=\"\", **kwargs):"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -115,7 +115,7 @@\n     return Cluster(name, graph_attr=graph_attributes)\n \n \n-def Relationship(label=\"\", **kwargs):\n+def Relationship(label=\"XXXX\", **kwargs):\n     edge_attributes = {\n         \"style\": \"dashed\",\n         \"color\": \"gray60\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 75.0
  },
  {
    "function_name": "cleaner_saas",
    "function_scope": "122-123",
    "patterns": [
      {
        "lineno": 122,
        "coloffset": 0,
        "linematch": "def cleaner_saas(f):",
        "context": "def cleaner_generic(f):\n    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 123,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    return f.lower()\n\n\ndef cleaner_saas(f):\n    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4715",
        "line": 122,
        "description": [
          "        \"label\": _format_edge_label(label) if label else \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         \"style\": \"dashed\",\n         \"color\": \"gray60\",\n-        \"label\": _format_edge_label(label) if label else \"\",\n+        \"XXlabelXX\": _format_edge_label(label) if label else \"\",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4716",
        "line": 122,
        "description": [
          "        \"label\": _format_edge_label(label) if label else \"\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -119,7 +119,7 @@\n     edge_attributes = {\n         \"style\": \"dashed\",\n         \"color\": \"gray60\",\n-        \"label\": _format_edge_label(label) if label else \"\",\n+        \"label\": _format_edge_label(label) if label else \"XXXX\",\n     }\n     edge_attributes.update(kwargs)\n     return Edge(**edge_attributes)\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4717",
        "line": 123,
        "description": [
          "    }"
        ],
        "failure": []
      }
    ],
    "mutation_score": 33.33333333333333
  },
  {
    "function_name": "cleaner_elastic",
    "function_scope": "126-127",
    "patterns": [
      {
        "lineno": 126,
        "coloffset": 0,
        "linematch": "def cleaner_elastic(f):",
        "context": "def cleaner_saas(f):\n    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 127,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    return f.lower()\n\n\ndef cleaner_elastic(f):\n    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #85",
        "line": 127,
        "description": [
          "            self.dot.node_attr[k] = v"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "cleaner_outscale",
    "function_scope": "130-131",
    "patterns": [
      {
        "lineno": 130,
        "coloffset": 0,
        "linematch": "def cleaner_outscale(f):",
        "context": "def cleaner_elastic(f):\n    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 131,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    return f.lower()\n\n\ndef cleaner_outscale(f):\n    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #87",
        "line": 131,
        "description": [
          "        if not self._validate_direction(direction):"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "cleaner_openstack",
    "function_scope": "134-135",
    "patterns": [
      {
        "lineno": 134,
        "coloffset": 0,
        "linematch": "def cleaner_openstack(f):",
        "context": "def cleaner_outscale(f):\n    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()\n\n\ncleaners = {\n    \"onprem\": cleaner_onprem,",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 135,
        "coloffset": 4,
        "linematch": "return f.lower()",
        "context": "    return f.lower()\n\n\ndef cleaner_openstack(f):\n    return f.lower()\n\n\ncleaners = {\n    \"onprem\": cleaner_onprem,\n    \"aws\": cleaner_aws,",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #91",
        "line": 135,
        "description": [
          "        if not self._validate_curvestyle(curvestyle):"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "clean_png",
    "function_scope": "158-169",
    "patterns": [
      {
        "lineno": 158,
        "coloffset": 0,
        "linematch": "def clean_png(pvd: str) -> None:",
        "context": "    \"openstack\": cleaner_openstack,\n}\n\n\ndef clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 161,
        "coloffset": 4,
        "linematch": "def _rename(base: str, png: str):",
        "context": "\ndef clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 158,
        "coloffset": 0,
        "linematch": "def clean_png(pvd: str) -> None:",
        "context": "    \"openstack\": cleaner_openstack,\n}\n\n\ndef clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 158,
        "coloffset": 0,
        "linematch": "def clean_png(pvd: str) -> None:",
        "context": "    \"openstack\": cleaner_openstack,\n}\n\n\ndef clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 159,
        "coloffset": 4,
        "linematch": "\"\"\"Refine the resources files names.\"\"\"",
        "context": "}\n\n\ndef clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 161,
        "coloffset": 4,
        "linematch": "def _rename(base: str, png: str):",
        "context": "\ndef clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 162,
        "coloffset": 8,
        "linematch": "new = cleaners[pvd](png)",
        "context": "def clean_png(pvd: str) -> None:\n    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 163,
        "coloffset": 8,
        "linematch": "old_path = os.path.join(base, png)",
        "context": "    \"\"\"Refine the resources files names.\"\"\"\n\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 164,
        "coloffset": 8,
        "linematch": "new_path = os.path.join(base, new)",
        "context": "\n    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        [_rename(root, png) for png in pngs]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 165,
        "coloffset": 8,
        "linematch": "os.rename(old_path, new_path)",
        "context": "    def _rename(base: str, png: str):\n        new = cleaners[pvd](png)\n        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        [_rename(root, png) for png in pngs]\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 167,
        "coloffset": 4,
        "linematch": "for root, _, files in os.walk(resource_dir(pvd)):",
        "context": "        old_path = os.path.join(base, png)\n        new_path = os.path.join(base, new)\n        os.rename(old_path, new_path)\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #102",
        "line": 160,
        "description": [
          "        setdiagram(self)"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "round_png",
    "function_scope": "172-182",
    "patterns": [
      {
        "lineno": 172,
        "coloffset": 0,
        "linematch": "def round_png(pvd: str) -> None:",
        "context": "        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 175,
        "coloffset": 4,
        "linematch": "def _round(base: str, path: str):",
        "context": "\ndef round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 172,
        "coloffset": 0,
        "linematch": "def round_png(pvd: str) -> None:",
        "context": "        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 172,
        "coloffset": 0,
        "linematch": "def round_png(pvd: str) -> None:",
        "context": "        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 173,
        "coloffset": 4,
        "linematch": "\"\"\"Round the images.\"\"\"",
        "context": "        [_rename(root, png) for png in pngs]\n\n\ndef round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 175,
        "coloffset": 4,
        "linematch": "def _round(base: str, path: str):",
        "context": "\ndef round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 176,
        "coloffset": 8,
        "linematch": "path = os.path.join(base, path)",
        "context": "def round_png(pvd: str) -> None:\n    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        paths = filter(lambda f: \"rounded\" not in f, pngs)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 177,
        "coloffset": 8,
        "linematch": "subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])",
        "context": "    \"\"\"Round the images.\"\"\"\n\n    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        paths = filter(lambda f: \"rounded\" not in f, pngs)\n        [_round(root, path) for path in paths]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 179,
        "coloffset": 4,
        "linematch": "for root, _, files in os.walk(resource_dir(pvd)):",
        "context": "    def _round(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_ROUND, *cfg.CMD_ROUND_OPTS, path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        pngs = filter(lambda f: f.endswith(\".png\"), files)\n        paths = filter(lambda f: \"rounded\" not in f, pngs)\n        [_round(root, path) for path in paths]\n\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #104",
        "line": 173,
        "description": [
          "        return direction.upper() in self.__directions"
        ],
        "failure": []
      },
      {
        "name": "Mutant #105",
        "line": 176,
        "description": [
          "        return curvestyle.lower() in self.__curvestyles"
        ],
        "failure": []
      },
      {
        "name": "Mutant #106",
        "line": 179,
        "description": [
          "        return outformat.lower() in self.__outformats"
        ],
        "failure": []
      }
    ],
    "mutation_score": 100.0
  },
  {
    "function_name": "svg2png",
    "function_scope": "185-195",
    "patterns": [
      {
        "lineno": 185,
        "coloffset": 0,
        "linematch": "def svg2png(pvd: str) -> None:",
        "context": "        paths = filter(lambda f: \"rounded\" not in f, pngs)\n        [_round(root, path) for path in paths]\n\n\ndef svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 188,
        "coloffset": 4,
        "linematch": "def _convert(base: str, path: str):",
        "context": "\ndef svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 185,
        "coloffset": 0,
        "linematch": "def svg2png(pvd: str) -> None:",
        "context": "        paths = filter(lambda f: \"rounded\" not in f, pngs)\n        [_round(root, path) for path in paths]\n\n\ndef svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 185,
        "coloffset": 0,
        "linematch": "def svg2png(pvd: str) -> None:",
        "context": "        paths = filter(lambda f: \"rounded\" not in f, pngs)\n        [_round(root, path) for path in paths]\n\n\ndef svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 186,
        "coloffset": 4,
        "linematch": "\"\"\"Convert the svg into png\"\"\"",
        "context": "        [_round(root, path) for path in paths]\n\n\ndef svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 188,
        "coloffset": 4,
        "linematch": "def _convert(base: str, path: str):",
        "context": "\ndef svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 189,
        "coloffset": 8,
        "linematch": "path = os.path.join(base, path)",
        "context": "def svg2png(pvd: str) -> None:\n    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 190,
        "coloffset": 8,
        "linematch": "subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])",
        "context": "    \"\"\"Convert the svg into png\"\"\"\n\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 191,
        "coloffset": 8,
        "linematch": "subprocess.run([\"rm\", path])",
        "context": "\n    def _convert(base: str, path: str):\n        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 193,
        "coloffset": 4,
        "linematch": "for root, _, files in os.walk(resource_dir(pvd)):",
        "context": "        path = os.path.join(base, path)\n        subprocess.run([cfg.CMD_SVG2PNG, *cfg.CMD_SVG2PNG_OPTS, path])\n        subprocess.run([\"rm\", path])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "svg2png2",
    "function_scope": "198-209",
    "patterns": [
      {
        "lineno": 198,
        "coloffset": 0,
        "linematch": "def svg2png2(pvd: str) -> None:",
        "context": "        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 201,
        "coloffset": 4,
        "linematch": "def _convert(base: str, path: str):",
        "context": "\ndef svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 198,
        "coloffset": 0,
        "linematch": "def svg2png2(pvd: str) -> None:",
        "context": "        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")",
        "pattern": ".//FunctionDef[body//comprehension/target/Name]",
        "check_id": "FLV001",
        "check_name": "function-uses-loop-variable"
      },
      {
        "lineno": 198,
        "coloffset": 0,
        "linematch": "def svg2png2(pvd: str) -> None:",
        "context": "        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")",
        "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
        "check_id": "F001",
        "check_name": "nested-depth"
      },
      {
        "lineno": 199,
        "coloffset": 4,
        "linematch": "\"\"\"Convert the svg into png using image magick\"\"\"",
        "context": "        [_convert(root, path) for path in svgs]\n\n\ndef svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 201,
        "coloffset": 4,
        "linematch": "def _convert(base: str, path: str):",
        "context": "\ndef svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 202,
        "coloffset": 8,
        "linematch": "path_src = os.path.join(base, path)",
        "context": "def svg2png2(pvd: str) -> None:\n    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 203,
        "coloffset": 8,
        "linematch": "path_dest = path_src.replace(\".svg\", \".png\")",
        "context": "    \"\"\"Convert the svg into png using image magick\"\"\"\n\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 204,
        "coloffset": 8,
        "linematch": "subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])",
        "context": "\n    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 205,
        "coloffset": 8,
        "linematch": "subprocess.run([\"rm\", path_src])",
        "context": "    def _convert(base: str, path: str):\n        path_src = os.path.join(base, path)\n        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      },
      {
        "lineno": 207,
        "coloffset": 4,
        "linematch": "for root, _, files in os.walk(resource_dir(pvd)):",
        "context": "        path_dest = path_src.replace(\".svg\", \".png\")\n        subprocess.run([cfg.CMD_SVG2PNG_IM, *cfg.CMD_SVG2PNG_IM_OPTS, path_src, path_dest])\n        subprocess.run([\"rm\", path_src])\n\n    for root, _, files in os.walk(resource_dir(pvd)):\n        svgs = filter(lambda f: f.endswith(\".svg\"), files)\n        [_convert(root, path) for path in svgs]\n\n\n# fmt: off",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #108",
        "line": 198,
        "description": [
          "            self.dot.render(format=self.outformat, view=self.show, quiet=True)"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -195,7 +195,7 @@\n             for one_format in self.outformat:\n                 self.dot.render(format=one_format, view=self.show, quiet=True)\n         else:\n-            self.dot.render(format=self.outformat, view=self.show, quiet=True)\n+            self.dot.render(format=self.outformat, view=self.show, quiet=False)\n \n \n class Cluster:\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #109",
        "line": 202,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #110",
        "line": 202,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #111",
        "line": 202,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #112",
        "line": 202,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #113",
        "line": 202,
        "description": [
          "    __directions = (\"TB\", \"BT\", \"LR\", \"RL\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #114",
        "line": 203,
        "description": [
          "    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (\"TB\", \"BT\", \"LR\", \"RL\")\n-    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")\n+    __bgcolors = (\"XX#E5F5FDXX\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")\n \n     # fmt: off\n     _default_graph_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #115",
        "line": 203,
        "description": [
          "    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (\"TB\", \"BT\", \"LR\", \"RL\")\n-    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")\n+    __bgcolors = (\"#E5F5FD\", \"XX#EBF3E7XX\", \"#ECE8F6\", \"#FDF7E3\")\n \n     # fmt: off\n     _default_graph_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #116",
        "line": 203,
        "description": [
          "    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (\"TB\", \"BT\", \"LR\", \"RL\")\n-    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")\n+    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"XX#ECE8F6XX\", \"#FDF7E3\")\n \n     # fmt: off\n     _default_graph_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #117",
        "line": 203,
        "description": [
          "    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -200,7 +200,7 @@\n \n class Cluster:\n     __directions = (\"TB\", \"BT\", \"LR\", \"RL\")\n-    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")\n+    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"XX#FDF7E3XX\")\n \n     # fmt: off\n     _default_graph_attrs = {\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #118",
        "line": 203,
        "description": [
          "    __bgcolors = (\"#E5F5FD\", \"#EBF3E7\", \"#ECE8F6\", \"#FDF7E3\")"
        ],
        "failure": []
      },
      {
        "name": "Mutant #119",
        "line": 207,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"shape\": \"box\",\n+        \"XXshapeXX\": \"box\",\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #120",
        "line": 207,
        "description": [
          "        \"shape\": \"box\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -204,7 +204,7 @@\n \n     # fmt: off\n     _default_graph_attrs = {\n-        \"shape\": \"box\",\n+        \"shape\": \"XXboxXX\",\n         \"style\": \"rounded\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #121",
        "line": 208,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -205,7 +205,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"XXstyleXX\": \"rounded\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #122",
        "line": 208,
        "description": [
          "        \"style\": \"rounded\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -205,7 +205,7 @@\n     # fmt: off\n     _default_graph_attrs = {\n         \"shape\": \"box\",\n-        \"style\": \"rounded\",\n+        \"style\": \"XXroundedXX\",\n         \"labeljust\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #123",
        "line": 209,
        "description": [
          "        \"labeljust\": \"l\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"labeljust\": \"l\",\n+        \"XXlabeljustXX\": \"l\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"12\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #124",
        "line": 209,
        "description": [
          "        \"labeljust\": \"l\","
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -206,7 +206,7 @@\n     _default_graph_attrs = {\n         \"shape\": \"box\",\n         \"style\": \"rounded\",\n-        \"labeljust\": \"l\",\n+        \"labeljust\": \"XXlXX\",\n         \"pencolor\": \"#AEB6BE\",\n         \"fontname\": \"Sans-Serif\",\n         \"fontsize\": \"12\",\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 35.294117647058826
  },
  {
    "function_name": "base_dir",
    "function_scope": "7-8",
    "patterns": [
      {
        "lineno": 7,
        "coloffset": 0,
        "linematch": "def base_dir() -> str:",
        "context": "\nimport config as cfg\n\n\ndef base_dir() -> str:\n    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 8,
        "coloffset": 4,
        "linematch": "return Path(os.path.abspath(os.path.dirname(__file__))).parent",
        "context": "import config as cfg\n\n\ndef base_dir() -> str:\n    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #477",
        "line": 8,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = \"outscale\"\n     _icon_dir = \"resources/outscale\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #478",
        "line": 8,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/outscale/__init__.py\n+++ diagrams/outscale/__init__.py\n@@ -5,5 +5,5 @@\n     _provider = \"outscale\"\n     _icon_dir = \"resources/outscale\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "app_root_dir",
    "function_scope": "11-12",
    "patterns": [
      {
        "lineno": 11,
        "coloffset": 0,
        "linematch": "def app_root_dir(pvd: str) -> str:",
        "context": "def base_dir() -> str:\n    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 12,
        "coloffset": 4,
        "linematch": "return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)",
        "context": "    return Path(os.path.abspath(os.path.dirname(__file__))).parent\n\n\ndef app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #371",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"openstack\"\n     _icon_dir = \"resources/openstack\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #372",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/openstack/__init__.py\n+++ diagrams/openstack/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"openstack\"\n     _icon_dir = \"resources/openstack\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #570",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"elastic\"\n     _icon_dir = \"resources/elastic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #571",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/elastic/__init__.py\n+++ diagrams/elastic/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"elastic\"\n     _icon_dir = \"resources/elastic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #748",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"azure\"\n     _icon_dir = \"resources/azure\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #749",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/azure/__init__.py\n+++ diagrams/azure/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"azure\"\n     _icon_dir = \"resources/azure\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1406",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"onprem\"\n     _icon_dir = \"resources/onprem\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1407",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/onprem/__init__.py\n+++ diagrams/onprem/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"onprem\"\n     _icon_dir = \"resources/onprem\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1714",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"k8s\"\n     _icon_dir = \"resources/k8s\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = \"XX#2d3436XX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1715",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/k8s/__init__.py\n+++ diagrams/k8s/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"k8s\"\n     _icon_dir = \"resources/k8s\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1832",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"digitalocean\"\n     _icon_dir = \"resources/digitalocean\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #1833",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/digitalocean/__init__.py\n+++ diagrams/digitalocean/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"digitalocean\"\n     _icon_dir = \"resources/digitalocean\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2052",
        "line": 12,
        "description": [
          "    fontcolor = \"#312D2A\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"oci\"\n     _icon_dir = \"resources/oci\"\n \n-    fontcolor = \"#312D2A\"\n+    fontcolor = \"XX#312D2AXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2053",
        "line": 12,
        "description": [
          "    fontcolor = \"#312D2A\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/oci/__init__.py\n+++ diagrams/oci/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"oci\"\n     _icon_dir = \"resources/oci\"\n \n-    fontcolor = \"#312D2A\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2261",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"gcp\"\n     _icon_dir = \"resources/gcp\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = \"XX#2d3436XX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2262",
        "line": 12,
        "description": [
          "    fontcolor = \"#2d3436\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/gcp/__init__.py\n+++ diagrams/gcp/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"gcp\"\n     _icon_dir = \"resources/gcp\"\n \n-    fontcolor = \"#2d3436\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2576",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"alibabacloud\"\n     _icon_dir = \"resources/alibabacloud\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2577",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/alibabacloud/__init__.py\n+++ diagrams/alibabacloud/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"alibabacloud\"\n     _icon_dir = \"resources/alibabacloud\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2893",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"ibm\"\n     _icon_dir = \"resources/ibm\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #2894",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/ibm/__init__.py\n+++ diagrams/ibm/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"ibm\"\n     _icon_dir = \"resources/ibm\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3198",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"firebase\"\n     _icon_dir = \"resources/firebase\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3199",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/firebase/__init__.py\n+++ diagrams/firebase/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"firebase\"\n     _icon_dir = \"resources/firebase\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3280",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"programming\"\n     _icon_dir = \"resources/programming\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3281",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/programming/__init__.py\n+++ diagrams/programming/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"programming\"\n     _icon_dir = \"resources/programming\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3450",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = \"generic\"\n     _icon_dir = \"resources/generic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3451",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/generic/__init__.py\n+++ diagrams/generic/__init__.py\n@@ -9,5 +9,5 @@\n     provider = \"generic\"\n     _icon_dir = \"resources/generic\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3767",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"aws\"\n     _icon_dir = \"resources/aws\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #3768",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/aws/__init__.py\n+++ diagrams/aws/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"aws\"\n     _icon_dir = \"resources/aws\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4603",
        "line": 11,
        "description": [
          "    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n-    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n+    title = f'XX<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>XX'\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4604",
        "line": 11,
        "description": [
          "    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'"
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -8,7 +8,7 @@\n \n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n-    title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n+    title = None\n     subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4605",
        "line": 12,
        "description": [
          "    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n-    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n+    subtitle = f'XX<font point-size=\"9\">[{html.escape(key)}]<br/></font>XX' if key else \"\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4606",
        "line": 12,
        "description": [
          "    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n-    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n+    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"XXXX\"\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4607",
        "line": 12,
        "description": [
          "    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/c4/__init__.py\n+++ diagrams/c4/__init__.py\n@@ -9,7 +9,7 @@\n def _format_node_label(name, key, description):\n     \"\"\"Create a graphviz label string for a C4 node\"\"\"\n     title = f'<font point-size=\"12\"><b>{html.escape(name)}</b></font><br/>'\n-    subtitle = f'<font point-size=\"9\">[{html.escape(key)}]<br/></font>' if key else \"\"\n+    subtitle = None\n     text = f'<br/><font point-size=\"10\">{_format_description(description)}</font>' if description else \"\"\n     return f\"<{title}{subtitle}{text}>\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4722",
        "line": 11,
        "description": [
          "    _icon_dir = None"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -8,7 +8,7 @@\n class Custom(Node):\n     _provider = \"custom\"\n     _type = \"custom\"\n-    _icon_dir = None\n+    _icon_dir = \"\"\n \n     fontcolor = \"#ffffff\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4762",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"saas\"\n     _icon_dir = \"resources/saas\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4763",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/saas/__init__.py\n+++ diagrams/saas/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"saas\"\n     _icon_dir = \"resources/saas\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4842",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"base\"\n     _icon_dir = \"resources/base\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = \"XX#ffffffXX\"\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4843",
        "line": 12,
        "description": [
          "    fontcolor = \"#ffffff\""
        ],
        "failure": [
          {
            "inner": "--- diagrams/base/__init__.py\n+++ diagrams/base/__init__.py\n@@ -9,5 +9,5 @@\n     _provider = \"base\"\n     _icon_dir = \"resources/base\"\n \n-    fontcolor = \"#ffffff\"\n+    fontcolor = None\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "doc_root_dir",
    "function_scope": "15-16",
    "patterns": [
      {
        "lineno": 15,
        "coloffset": 0,
        "linematch": "def doc_root_dir() -> str:",
        "context": "def app_root_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 16,
        "coloffset": 4,
        "linematch": "return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)",
        "context": "    return os.path.join(base_dir(), cfg.DIR_APP_ROOT, pvd)\n\n\ndef doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #3",
        "line": 15,
        "description": [
          "__cluster = contextvars.ContextVar(\"cluster\")"
        ],
        "failure": [
          {
            "inner": "--- diagrams/__init__.py\n+++ diagrams/__init__.py\n@@ -12,7 +12,7 @@\n # where context they are belong to. So the all clusters and nodes does\n # not need to specify the current diagrams or cluster via parameters.\n __diagram = contextvars.ContextVar(\"diagrams\")\n-__cluster = contextvars.ContextVar(\"cluster\")\n+__cluster = contextvars.ContextVar(\"XXclusterXX\")\n \n \n def getdiagram() -> \"Diagram\":\n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      },
      {
        "name": "Mutant #4",
        "line": 15,
        "description": [
          "__cluster = contextvars.ContextVar(\"cluster\")"
        ],
        "failure": []
      }
    ],
    "mutation_score": 50.0
  },
  {
    "function_name": "resource_dir",
    "function_scope": "19-20",
    "patterns": [
      {
        "lineno": 19,
        "coloffset": 0,
        "linematch": "def resource_dir(pvd: str) -> str:",
        "context": "def doc_root_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n\n\ndef template_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_TEMPLATE)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 20,
        "coloffset": 4,
        "linematch": "return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)",
        "context": "    return os.path.join(base_dir(), cfg.DIR_DOC_ROOT)\n\n\ndef resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n\n\ndef template_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_TEMPLATE)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [
      {
        "name": "Mutant #4725",
        "line": 19,
        "description": [
          "        self._icon = icon_path"
        ],
        "failure": [
          {
            "inner": "--- diagrams/custom/__init__.py\n+++ diagrams/custom/__init__.py\n@@ -16,6 +16,6 @@\n         return self._icon\n \n     def __init__(self, label, icon_path, *args, **kwargs):\n-        self._icon = icon_path\n+        self._icon = None\n         super().__init__(label, *args, **kwargs)\n \n",
            "type": "failure",
            "message": "bad_survived"
          }
        ]
      }
    ],
    "mutation_score": 0.0
  },
  {
    "function_name": "template_dir",
    "function_scope": "23-24",
    "patterns": [
      {
        "lineno": 23,
        "coloffset": 0,
        "linematch": "def template_dir() -> str:",
        "context": "def resource_dir(pvd: str) -> str:\n    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n\n\ndef template_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_TEMPLATE)",
        "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
        "check_id": "ANNOT001",
        "check_name": "missing-annotations"
      },
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "return os.path.join(base_dir(), cfg.DIR_TEMPLATE)",
        "context": "    return os.path.join(base_dir(), cfg.DIR_RESOURCE, pvd)\n\n\ndef template_dir() -> str:\n    return os.path.join(base_dir(), cfg.DIR_TEMPLATE)",
        "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
        "check_id": "CML001",
        "check_name": "count-method-lines"
      }
    ],
    "mutants": [],
    "mutation_score": null
  }
]