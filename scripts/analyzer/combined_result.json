{
  "chasten_result": {
    "configuration": {
      "chastenversion": "1.0.0",
      "debuglevel": "ERROR",
      "debugdestination": "CONSOLE",
      "projectname": "lazytracker",
      "configdirectory": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/Config",
      "searchpath": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test",
      "fileuuid": "530882c017ee4d22857b70c5a6e5020d",
      "datetime": "2024-06-23 23:39:21.089395",
      "checkinclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      },
      "checkexclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      }
    },
    "sources": [
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "CL001",
          "name": "single-nested-if",
          "description": "Ensure the presence of single nested 'if' statements within function bodies.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef/body//If",
          "passed": true,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "if shape == \"rectangle\":",
              "linematch_context": "        - No exception type (EXC)\n        - Missing type annotation (ANNOT)\n        - Unused Variables (UNUSED)\n    \"\"\"\n    if shape == \"rectangle\":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == \"circle\":\n            radius = dimensions[0]"
            },
            {
              "lineno": 18,
              "coloffset": 8,
              "linematch": "if shape == \"circle\":",
              "linematch_context": "    if shape == \"rectangle\":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == \"circle\":\n            radius = dimensions[0]\n            return 3.14 * dimensions[0] ** 2\n        else:\n            raise ValueError(\"Unsupported shape\")\n"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "if value is not None:",
              "linematch_context": "\n    Contains Pattern:\n        - none comparision (NONE)\n    \"\"\"\n    if value is not None:\n        return False\n    return True\n\n# TODO: Not passing check id: 'EXC001', name: 'no-exception-type', pattern: './/FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]'\ndef handle_file(filename):"
            },
            {
              "lineno": 67,
              "coloffset": 4,
              "linematch": "if value is True:",
              "linematch_context": "\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    \"\"\"\n    if value is True:\n        return \"true value\"\n    else:\n        return \"false value\"\n\n# TODO: not passing check id: 'MVKL001', name: 'multi-value-key-literal', pattern: './/FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]"
            },
            {
              "lineno": 82,
              "coloffset": 4,
              "linematch": "if \"name\" in user_data.keys():",
              "linematch_context": "        - Key Function (KFUN)\n        - Single Nested If (SNI)\n        - Multi-value key literal (MVKL)\n    \"\"\"\n    if \"name\" in user_data.keys():\n        return user_data[\"name\"]\n    else:\n        return None\n\n"
            },
            {
              "lineno": 134,
              "coloffset": 4,
              "linematch": "if method == \"GET\":",
              "linematch_context": "    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\"\n        else:"
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "elif method == \"POST\":",
              "linematch_context": "def handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\"\n        else:\n            return \"Processing POST request without data\"\n    else:"
            },
            {
              "lineno": 137,
              "coloffset": 8,
              "linematch": "if data is not None:",
              "linematch_context": "    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\"\n        else:\n            return \"Processing POST request without data\"\n    else:\n        return \"Unsupported method\""
            },
            {
              "lineno": 148,
              "coloffset": 4,
              "linematch": "if condition:",
              "linematch_context": "# TODO: not passing check id: 'CL002', name: 'nested-condition-loops', pattern: './/FunctionDef//if//For'\ndef filter_data(data, condition):\n    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n"
            },
            {
              "lineno": 150,
              "coloffset": 12,
              "linematch": "if item is not None:",
              "linematch_context": "    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\""
            },
            {
              "lineno": 161,
              "coloffset": 4,
              "linematch": "if number > 0:",
              "linematch_context": "\n    Contains Patterns:\n    - Nested condition (IFIF)\n    \"\"\"\n    if number > 0:\n        if number > 100:\n            return \"Large positive number\"\n        else:\n            return \"Positive number\"\n    else:"
            },
            {
              "lineno": 162,
              "coloffset": 8,
              "linematch": "if number > 100:",
              "linematch_context": "    Contains Patterns:\n    - Nested condition (IFIF)\n    \"\"\"\n    if number > 0:\n        if number > 100:\n            return \"Large positive number\"\n        else:\n            return \"Positive number\"\n    else:\n        if number < 0:"
            },
            {
              "lineno": 167,
              "coloffset": 8,
              "linematch": "if number < 0:",
              "linematch_context": "            return \"Large positive number\"\n        else:\n            return \"Positive number\"\n    else:\n        if number < 0:\n            return \"Negative number\"\n        else:\n            return \"Zero\"\n\ndef calculate_factorial(n, start=1):"
            },
            {
              "lineno": 178,
              "coloffset": 4,
              "linematch": "if n < 0:",
              "linematch_context": "    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j"
            },
            {
              "lineno": 212,
              "coloffset": 4,
              "linematch": "if score >= 90:",
              "linematch_context": "    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\"\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    else:\n        if score >= 70:"
            },
            {
              "lineno": 214,
              "coloffset": 4,
              "linematch": "elif score >= 80:",
              "linematch_context": "    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\"\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    else:\n        if score >= 70:\n            return \"C\"\n        else:"
            },
            {
              "lineno": 217,
              "coloffset": 8,
              "linematch": "if score >= 70:",
              "linematch_context": "        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    else:\n        if score >= 70:\n            return \"C\"\n        else:\n            return \"F\"\n\n# TODO: id: 'COMPLEX001', name: 'complex-expressions', pattern: './/FunctionDef//BinOp[count(descendant::BinOp) > 2]"
            },
            {
              "lineno": 231,
              "coloffset": 4,
              "linematch": "if loyalty_points > 100:",
              "linematch_context": "    Contains Pattern: Complex Expressions (COMPLEX)\n    \"\"\"\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper\n"
            },
            {
              "lineno": 264,
              "coloffset": 4,
              "linematch": "if len(filtered_data) > 0:",
              "linematch_context": "            print(f\"Item {item['id']} does not meet the value thresholds\")\n        pass\n\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item['discounted_price'] < 0:\n                item['discounted_price'] = 0\n        global_variable += 1\n    else:"
            },
            {
              "lineno": 250,
              "coloffset": 8,
              "linematch": "if item['value1'] > threshold1 and item['value2'] < threshold2:",
              "linematch_context": "    \"\"\"\n    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount"
            },
            {
              "lineno": 251,
              "coloffset": 12,
              "linematch": "if item['price'] > min_order_value:",
              "linematch_context": "    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)"
            },
            {
              "lineno": 253,
              "coloffset": 16,
              "linematch": "if loyalty_points > 100:",
              "linematch_context": "    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)\n            else:\n                print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")"
            },
            {
              "lineno": 266,
              "coloffset": 12,
              "linematch": "if item['discounted_price'] < 0:",
              "linematch_context": "\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item['discounted_price'] < 0:\n                item['discounted_price'] = 0\n        global_variable += 1\n    else:\n        print(\"No items met the filtering criteria.\")\n"
            },
            {
              "lineno": 291,
              "coloffset": 8,
              "linematch": "if not name:",
              "linematch_context": "        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")"
            },
            {
              "lineno": 295,
              "coloffset": 12,
              "linematch": "if not char.isalpha() and not char.isspace():",
              "linematch_context": "        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:"
            },
            {
              "lineno": 300,
              "coloffset": 8,
              "linematch": "if age < 0:",
              "linematch_context": "                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(\"Age cannot be negative\")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)"
            },
            {
              "lineno": 320,
              "coloffset": 8,
              "linematch": "if not self.ssn:",
              "linematch_context": "        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:"
            },
            {
              "lineno": 322,
              "coloffset": 8,
              "linematch": "if len(self.ssn) != 11:",
              "linematch_context": "        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:"
            },
            {
              "lineno": 325,
              "coloffset": 8,
              "linematch": "if len(parts) != 3:",
              "linematch_context": "            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])"
            },
            {
              "lineno": 335,
              "coloffset": 8,
              "linematch": "if age >= 0:",
              "linematch_context": "        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:"
            },
            {
              "lineno": 336,
              "coloffset": 12,
              "linematch": "if age == 0:",
              "linematch_context": "            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\""
            },
            {
              "lineno": 338,
              "coloffset": 12,
              "linematch": "elif age == 1:",
              "linematch_context": "    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\""
            },
            {
              "lineno": 340,
              "coloffset": 12,
              "linematch": "elif age == 2:",
              "linematch_context": "            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\""
            },
            {
              "lineno": 342,
              "coloffset": 12,
              "linematch": "elif age == 3:",
              "linematch_context": "            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\""
            },
            {
              "lineno": 344,
              "coloffset": 12,
              "linematch": "elif age == 4:",
              "linematch_context": "            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\""
            },
            {
              "lineno": 346,
              "coloffset": 12,
              "linematch": "elif age == 5:",
              "linematch_context": "            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\""
            },
            {
              "lineno": 348,
              "coloffset": 12,
              "linematch": "elif age == 6:",
              "linematch_context": "            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\""
            },
            {
              "lineno": 350,
              "coloffset": 12,
              "linematch": "elif age == 7:",
              "linematch_context": "            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\""
            },
            {
              "lineno": 352,
              "coloffset": 12,
              "linematch": "elif age == 8:",
              "linematch_context": "            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\""
            },
            {
              "lineno": 354,
              "coloffset": 12,
              "linematch": "elif age == 9:",
              "linematch_context": "            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\""
            },
            {
              "lineno": 356,
              "coloffset": 12,
              "linematch": "elif age == 10:",
              "linematch_context": "            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\""
            },
            {
              "lineno": 358,
              "coloffset": 12,
              "linematch": "elif age == 11:",
              "linematch_context": "            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\""
            },
            {
              "lineno": 360,
              "coloffset": 12,
              "linematch": "elif age == 12:",
              "linematch_context": "            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\""
            },
            {
              "lineno": 362,
              "coloffset": 12,
              "linematch": "elif age == 13:",
              "linematch_context": "            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\""
            },
            {
              "lineno": 364,
              "coloffset": 12,
              "linematch": "elif age == 14:",
              "linematch_context": "            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\""
            },
            {
              "lineno": 366,
              "coloffset": 12,
              "linematch": "elif age == 15:",
              "linematch_context": "            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\""
            },
            {
              "lineno": 368,
              "coloffset": 12,
              "linematch": "elif age == 16:",
              "linematch_context": "            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\""
            },
            {
              "lineno": 370,
              "coloffset": 12,
              "linematch": "elif age == 17:",
              "linematch_context": "            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\""
            },
            {
              "lineno": 372,
              "coloffset": 12,
              "linematch": "elif age == 18:",
              "linematch_context": "            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\""
            },
            {
              "lineno": 374,
              "coloffset": 12,
              "linematch": "elif age == 19:",
              "linematch_context": "            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\""
            },
            {
              "lineno": 376,
              "coloffset": 12,
              "linematch": "elif age == 20:",
              "linematch_context": "            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\""
            },
            {
              "lineno": 378,
              "coloffset": 12,
              "linematch": "elif age == 21:",
              "linematch_context": "            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\""
            },
            {
              "lineno": 380,
              "coloffset": 12,
              "linematch": "elif age == 22:",
              "linematch_context": "            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\""
            },
            {
              "lineno": 382,
              "coloffset": 12,
              "linematch": "elif age == 23:",
              "linematch_context": "            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\""
            },
            {
              "lineno": 384,
              "coloffset": 12,
              "linematch": "elif age == 24:",
              "linematch_context": "            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\""
            },
            {
              "lineno": 386,
              "coloffset": 12,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "CL002",
          "name": "double-nested-if",
          "description": "Ensure the presence of double nested 'if' statements within function bodies.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef/body//If[ancestor::If and not(parent::orelse)]",
          "passed": true,
          "matches": [
            {
              "lineno": 137,
              "coloffset": 8,
              "linematch": "if data is not None:",
              "linematch_context": "    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\"\n        else:\n            return \"Processing POST request without data\"\n    else:\n        return \"Unsupported method\""
            },
            {
              "lineno": 150,
              "coloffset": 12,
              "linematch": "if item is not None:",
              "linematch_context": "    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\""
            },
            {
              "lineno": 162,
              "coloffset": 8,
              "linematch": "if number > 100:",
              "linematch_context": "    Contains Patterns:\n    - Nested condition (IFIF)\n    \"\"\"\n    if number > 0:\n        if number > 100:\n            return \"Large positive number\"\n        else:\n            return \"Positive number\"\n    else:\n        if number < 0:"
            },
            {
              "lineno": 251,
              "coloffset": 12,
              "linematch": "if item['price'] > min_order_value:",
              "linematch_context": "    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)"
            },
            {
              "lineno": 253,
              "coloffset": 16,
              "linematch": "if loyalty_points > 100:",
              "linematch_context": "    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)\n            else:\n                print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")"
            },
            {
              "lineno": 266,
              "coloffset": 12,
              "linematch": "if item['discounted_price'] < 0:",
              "linematch_context": "\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item['discounted_price'] < 0:\n                item['discounted_price'] = 0\n        global_variable += 1\n    else:\n        print(\"No items met the filtering criteria.\")\n"
            },
            {
              "lineno": 336,
              "coloffset": 12,
              "linematch": "if age == 0:",
              "linematch_context": "            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "RET001",
          "name": "explicit-return-in-init",
          "description": "Using an explicit return statement in the __init__ function",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef[@name=\"__init__\"]/body/Return",
          "passed": true,
          "matches": [
            {
              "lineno": 33,
              "coloffset": 8,
              "linematch": "return",
              "linematch_context": "    \"\"\"\n    def __init__(self,name,email):\n        self.name = name\n        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'\ndef check_none(value):\n    \"\"\"This function checks if a value is None.\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/test/test_dummy.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
          "passed": true,
          "matches": [
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 209,
              "coloffset": 11,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            },
            {
              "lineno": 61,
              "coloffset": 15,
              "linematch": "assert f.read() == \"This is some test data.\"",
              "linematch_context": "    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
          "passed": true,
          "matches": [
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 67,
              "coloffset": 7,
              "linematch": "if value is True:",
              "linematch_context": "\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    \"\"\"\n    if value is True:\n        return \"true value\"\n    else:\n        return \"false value\"\n\n# TODO: not passing check id: 'MVKL001', name: 'multi-value-key-literal', pattern: './/FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            },
            {
              "lineno": 386,
              "coloffset": 17,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/test/test_dummy.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": true,
          "matches": [
            {
              "lineno": 9,
              "coloffset": 0,
              "linematch": "def test_version():",
              "linematch_context": "from src import __version__\nfrom src import main\n\n\ndef test_version():\n    \"\"\"Confirm that the version of the program is correct.\"\"\"\n    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():"
            },
            {
              "lineno": 14,
              "coloffset": 0,
              "linematch": "def test_rectangle_area():",
              "linematch_context": "    \"\"\"Confirm that the version of the program is correct.\"\"\"\n    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n"
            },
            {
              "lineno": 17,
              "coloffset": 0,
              "linematch": "def test_circle_area():",
              "linematch_context": "# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):"
            },
            {
              "lineno": 20,
              "coloffset": 0,
              "linematch": "def test_unsupported_shape():",
              "linematch_context": "\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])\n\n# class User"
            },
            {
              "lineno": 26,
              "coloffset": 0,
              "linematch": "def test_user_init_with_name_and_email():",
              "linematch_context": "    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])\n\n# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n"
            },
            {
              "lineno": 33,
              "coloffset": 0,
              "linematch": "def test_check_none_with_none():",
              "linematch_context": "    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\""
            },
            {
              "lineno": 37,
              "coloffset": 0,
              "linematch": "def test_check_none_with_none():",
              "linematch_context": "def test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\""
            },
            {
              "lineno": 41,
              "coloffset": 0,
              "linematch": "def test_check_none_with_value():",
              "linematch_context": "def test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\""
            },
            {
              "lineno": 45,
              "coloffset": 0,
              "linematch": "def test_check_none_with_zero():",
              "linematch_context": "def test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\""
            },
            {
              "lineno": 49,
              "coloffset": 0,
              "linematch": "def test_check_none_with_empty_string():",
              "linematch_context": "def test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):"
            },
            {
              "lineno": 54,
              "coloffset": 0,
              "linematch": "def test_handle_file_success(tmp_path):",
              "linematch_context": "    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))"
            },
            {
              "lineno": 64,
              "coloffset": 0,
              "linematch": "def test_is_valid_true():",
              "linematch_context": "    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\""
            },
            {
              "lineno": 68,
              "coloffset": 0,
              "linematch": "def test_is_valid_false():",
              "linematch_context": "def test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():"
            },
            {
              "lineno": 73,
              "coloffset": 0,
              "linematch": "def test_get_user_data():",
              "linematch_context": "    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n"
            },
            {
              "lineno": 79,
              "coloffset": 0,
              "linematch": "def test_get_user_data_without_name():",
              "linematch_context": "    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():"
            },
            {
              "lineno": 84,
              "coloffset": 0,
              "linematch": "def test_get_user_data_empty_dict():",
              "linematch_context": "    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():"
            },
            {
              "lineno": 89,
              "coloffset": 0,
              "linematch": "def test_validate_data_with_tuple():",
              "linematch_context": "    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():"
            },
            {
              "lineno": 94,
              "coloffset": 0,
              "linematch": "def test_validate_data_with_non_tuple():",
              "linematch_context": "    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():"
            },
            {
              "lineno": 99,
              "coloffset": 0,
              "linematch": "def test_validate_data_with_none():",
              "linematch_context": "    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data(None)\n\n# modify_list"
            },
            {
              "lineno": 105,
              "coloffset": 0,
              "linematch": "def test_modify_list():",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_data(None)\n\n# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]"
            },
            {
              "lineno": 113,
              "coloffset": 0,
              "linematch": "def test_calculate_sum_empty():",
              "linematch_context": "    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\""
            },
            {
              "lineno": 117,
              "coloffset": 0,
              "linematch": "def test_calculate_sum_positive():",
              "linematch_context": "def test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\""
            },
            {
              "lineno": 121,
              "coloffset": 0,
              "linematch": "def test_calculate_sum_negative():",
              "linematch_context": "def test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\""
            },
            {
              "lineno": 125,
              "coloffset": 0,
              "linematch": "def test_calculate_sum_mixed():",
              "linematch_context": "def test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():"
            },
            {
              "lineno": 130,
              "coloffset": 0,
              "linematch": "def test_handle_get_request():",
              "linematch_context": "    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\""
            },
            {
              "lineno": 134,
              "coloffset": 0,
              "linematch": "def test_handle_post_request_with_data():",
              "linematch_context": "def test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\""
            },
            {
              "lineno": 138,
              "coloffset": 0,
              "linematch": "def test_handle_post_request_without_data():",
              "linematch_context": "def test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\""
            },
            {
              "lineno": 142,
              "coloffset": 0,
              "linematch": "def test_handle_unsupported_method():",
              "linematch_context": "def test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():"
            },
            {
              "lineno": 147,
              "coloffset": 0,
              "linematch": "def test_filter_data_with_condition_and_data():",
              "linematch_context": "    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]"
            },
            {
              "lineno": 154,
              "coloffset": 0,
              "linematch": "def test_filter_data_with_condition_and_no_data():",
              "linematch_context": "    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []"
            },
            {
              "lineno": 161,
              "coloffset": 0,
              "linematch": "def test_filter_data_with_false_condition():",
              "linematch_context": "    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []"
            },
            {
              "lineno": 168,
              "coloffset": 0,
              "linematch": "def test_filter_data_with_all_none():",
              "linematch_context": "    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []"
            },
            {
              "lineno": 176,
              "coloffset": 0,
              "linematch": "def test_classify_positive_number():",
              "linematch_context": "    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\""
            },
            {
              "lineno": 180,
              "coloffset": 0,
              "linematch": "def test_classify_large_positive_number():",
              "linematch_context": "def test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\""
            },
            {
              "lineno": 184,
              "coloffset": 0,
              "linematch": "def test_classify_negative_number():",
              "linematch_context": "def test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\""
            },
            {
              "lineno": 188,
              "coloffset": 0,
              "linematch": "def test_classify_zero():",
              "linematch_context": "def test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():"
            },
            {
              "lineno": 193,
              "coloffset": 0,
              "linematch": "def test_factorial_zero():",
              "linematch_context": "    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\""
            },
            {
              "lineno": 197,
              "coloffset": 0,
              "linematch": "def test_factorial_negative():",
              "linematch_context": "def test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():"
            },
            {
              "lineno": 202,
              "coloffset": 0,
              "linematch": "def test_factorial_custom_start():",
              "linematch_context": "    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():"
            },
            {
              "lineno": 207,
              "coloffset": 0,
              "linematch": "def test_valid_user_input():",
              "linematch_context": "    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\""
            },
            {
              "lineno": 211,
              "coloffset": 0,
              "linematch": "def test_invalid_name_with_numbers():",
              "linematch_context": "def test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():"
            },
            {
              "lineno": 216,
              "coloffset": 0,
              "linematch": "def test_invalid_name_with_symbols():",
              "linematch_context": "    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():"
            },
            {
              "lineno": 221,
              "coloffset": 0,
              "linematch": "def test_invalid_email_without_at():",
              "linematch_context": "    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file"
            },
            {
              "lineno": 227,
              "coloffset": 0,
              "linematch": "def test_write_to_file_content(tmpdir):",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:"
            },
            {
              "lineno": 237,
              "coloffset": 0,
              "linematch": "def test_grade_a():",
              "linematch_context": "        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():"
            },
            {
              "lineno": 242,
              "coloffset": 0,
              "linematch": "def test_grade_b():",
              "linematch_context": "    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():"
            },
            {
              "lineno": 247,
              "coloffset": 0,
              "linematch": "def test_grade_c():",
              "linematch_context": "    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():"
            },
            {
              "lineno": 252,
              "coloffset": 0,
              "linematch": "def test_grade_f():",
              "linematch_context": "    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount"
            },
            {
              "lineno": 258,
              "coloffset": 0,
              "linematch": "def test_no_discount_no_loyalty():",
              "linematch_context": "    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price"
            },
            {
              "lineno": 265,
              "coloffset": 0,
              "linematch": "def test_with_discount_no_loyalty():",
              "linematch_context": "    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)"
            },
            {
              "lineno": 273,
              "coloffset": 0,
              "linematch": "def test_with_discount_and_loyalty():",
              "linematch_context": "    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)"
            },
            {
              "lineno": 281,
              "coloffset": 0,
              "linematch": "def test_edge_case_loyalty_points():",
              "linematch_context": "    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)"
            },
            {
              "lineno": 290,
              "coloffset": 0,
              "linematch": "def test_valid_item_above_min_order():",
              "linematch_context": "    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)"
            },
            {
              "lineno": 299,
              "coloffset": 0,
              "linematch": "def test_valid_item_with_loyalty_discount():",
              "linematch_context": "    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)"
            },
            {
              "lineno": 309,
              "coloffset": 0,
              "linematch": "def test_odd_even_valid_input():",
              "linematch_context": "    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n"
            },
            {
              "lineno": 315,
              "coloffset": 0,
              "linematch": "def test_odd_even_invalid_input():",
              "linematch_context": "    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": true,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def calculate_area(shape,dimensions):",
              "linematch_context": "\"\"\" Config Checks Project. \"\"\"\nfrom typing import Tuple\n\ndef calculate_area(shape,dimensions):\n    \"\"\"This function calculates the area of a shape based on its dimensions.\n\n    Contains Patterns:\n        - Double Nested If (DNI)\n        - Magic Number (MN)"
            },
            {
              "lineno": 36,
              "coloffset": 0,
              "linematch": "def check_none(value):",
              "linematch_context": "        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'\ndef check_none(value):\n    \"\"\"This function checks if a value is None.\n\n    Contains Pattern:\n        - none comparision (NONE)\n    \"\"\""
            },
            {
              "lineno": 47,
              "coloffset": 0,
              "linematch": "def handle_file(filename):",
              "linematch_context": "        return False\n    return True\n\n# TODO: Not passing check id: 'EXC001', name: 'no-exception-type', pattern: './/FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]'\ndef handle_file(filename):\n    \"\"\"\n    This function attempts to read a file but does not handle specific exception\n\n    Contains Patterns:\n        - No Exception type (EXC)"
            },
            {
              "lineno": 60,
              "coloffset": 0,
              "linematch": "def is_valid(value):",
              "linematch_context": "            data = f.read()\n    except IOError as e:\n        print(f\"Error reading file: {e}\")\n\ndef is_valid(value):\n    \"\"\"\n    This function checks if a value is true.\n\n    Contains Patterns:\n        - Boolean Comparison (BOOL)"
            },
            {
              "lineno": 73,
              "coloffset": 0,
              "linematch": "def get_user_data(user_data):",
              "linematch_context": "    else:\n        return \"false value\"\n\n# TODO: not passing check id: 'MVKL001', name: 'multi-value-key-literal', pattern: './/FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]\ndef get_user_data(user_data):\n    \"\"\"\n    This function retrieves a user's name from a dictionary using the keys() function\n\n    Contains Patterns:\n        - Key Function (KFUN)"
            },
            {
              "lineno": 92,
              "coloffset": 0,
              "linematch": "def validate_data(data):",
              "linematch_context": "# Multi-value key literal (MVKL)- outside function scope\nuser_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n\n# TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\ndef validate_data(data):\n    \"\"\" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    \"\"\"\n    assert type(data) == tuple, \"Data must be a tuple\""
            },
            {
              "lineno": 100,
              "coloffset": 0,
              "linematch": "def modify_list(data):",
              "linematch_context": "    \"\"\"\n    assert type(data) == tuple, \"Data must be a tuple\"\n\n# TODO: not passing check id: 'LVITOI001', name: 'loop-variable-iterates-overrides-iterator', pattern: './/FunctionDef/body/For[target/Name/@id = iter/Name/@id]'\ndef modify_list(data):\n    \"\"\"\n    This function modifies a list by overiding its elements.\n\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)"
            },
            {
              "lineno": 114,
              "coloffset": 0,
              "linematch": "def calculate_sum(numbers):",
              "linematch_context": "        modified_data.append(item)\n    return modified_data\n\n# TODO: id: 'FLV001', name: 'function-uses-loop-variable', pattern: './/FunctionDef[body//comprehension/target/Name]'\ndef calculate_sum(numbers):\n    \"\"\"\n    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)\"\"\""
            },
            {
              "lineno": 125,
              "coloffset": 0,
              "linematch": "def nested_function_1():",
              "linematch_context": "    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()"
            },
            {
              "lineno": 132,
              "coloffset": 0,
              "linematch": "def handle_request(method, data):",
              "linematch_context": "        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:"
            },
            {
              "lineno": 145,
              "coloffset": 0,
              "linematch": "def filter_data(data, condition):",
              "linematch_context": "    else:\n        return \"Unsupported method\"\n\n# TODO: not passing check id: 'CL002', name: 'nested-condition-loops', pattern: './/FunctionDef//if//For'\ndef filter_data(data, condition):\n    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:"
            },
            {
              "lineno": 154,
              "coloffset": 0,
              "linematch": "def classify_number(number):",
              "linematch_context": "            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\"\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)"
            },
            {
              "lineno": 172,
              "coloffset": 0,
              "linematch": "def calculate_factorial(n, start=1):",
              "linematch_context": "            return \"Negative number\"\n        else:\n            return \"Zero\"\n\ndef calculate_factorial(n, start=1):\n    \"\"\"\n    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    \"\"\""
            },
            {
              "lineno": 186,
              "coloffset": 0,
              "linematch": "def validate_user_input(name, email):",
              "linematch_context": "        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    \"\"\"\n    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    \"\"\""
            },
            {
              "lineno": 197,
              "coloffset": 0,
              "linematch": "def write_to_file(filename, data):",
              "linematch_context": "    assert \"@\" in email, \"Email must contain an '@' symbol\"\n    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):\n    \"\"\"\n    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    \"\"\""
            },
            {
              "lineno": 206,
              "coloffset": 0,
              "linematch": "def calculate_grade(score):",
              "linematch_context": "    \"\"\"\n    with open(filename, \"w\") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    \"\"\"\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\""
            },
            {
              "lineno": 223,
              "coloffset": 0,
              "linematch": "def calculate_discount(price, discount_rate, loyalty_points):",
              "linematch_context": "        else:\n            return \"F\"\n\n# TODO: id: 'COMPLEX001', name: 'complex-expressions', pattern: './/FunctionDef//BinOp[count(descendant::BinOp) > 2]\ndef calculate_discount(price, discount_rate, loyalty_points):\n    \"\"\"\n    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    \"\"\""
            },
            {
              "lineno": 237,
              "coloffset": 0,
              "linematch": "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):",
              "linematch_context": "    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    \"\"\"\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals."
            },
            {
              "lineno": 394,
              "coloffset": 0,
              "linematch": "def calculate_something(data):",
              "linematch_context": "\n\nglobal_var = 0  # This is a global variable\n\ndef calculate_something(data):\n    \"\"\"\n    This function demonstrates the use of a global variable.\n\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable 'global_var'."
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "def __init__(self,name,email):",
              "linematch_context": "\n    Contains Patterns:\n        - Explicit Return in __init__(RET)\n    \"\"\"\n    def __init__(self,name,email):\n        self.name = name\n        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'"
            },
            {
              "lineno": 127,
              "coloffset": 4,
              "linematch": "def nested_function_2():",
              "linematch_context": "    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):"
            },
            {
              "lineno": 128,
              "coloffset": 8,
              "linematch": "def nested_function_3():",
              "linematch_context": "\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\""
            },
            {
              "lineno": 284,
              "coloffset": 4,
              "linematch": "def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):",
              "linematch_context": "        - Include empty catch block (ECB)\n        - Long Scope Chaining (LSC)\n        - Number of Conditions in Function (COND)\n    \"\"\"\n    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address"
            },
            {
              "lineno": 290,
              "coloffset": 4,
              "linematch": "def setName(self, name):",
              "linematch_context": "        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():"
            },
            {
              "lineno": 299,
              "coloffset": 4,
              "linematch": "def setAge(self, age):",
              "linematch_context": "            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(\"Age cannot be negative\")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:"
            },
            {
              "lineno": 306,
              "coloffset": 4,
              "linematch": "def setSSN(self, ssn):",
              "linematch_context": "        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self"
            },
            {
              "lineno": 309,
              "coloffset": 4,
              "linematch": "def setEmail(self,email):",
              "linematch_context": "            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self"
            },
            {
              "lineno": 312,
              "coloffset": 4,
              "linematch": "def setAddress(self,address):",
              "linematch_context": "        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")"
            },
            {
              "lineno": 315,
              "coloffset": 4,
              "linematch": "def create_person():",
              "linematch_context": "        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:"
            },
            {
              "lineno": 319,
              "coloffset": 4,
              "linematch": "def validate_ssn(self):",
              "linematch_context": "    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")"
            },
            {
              "lineno": 334,
              "coloffset": 4,
              "linematch": "def odd_even(self,age):",
              "linematch_context": "            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "KF001",
          "name": "key-function",
          "description": "The use of .keys() function",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//Call/func/Attribute[@attr=\"keys\"]",
          "passed": true,
          "matches": [
            {
              "lineno": 82,
              "coloffset": 17,
              "linematch": "if \"name\" in user_data.keys():",
              "linematch_context": "        - Key Function (KFUN)\n        - Single Nested If (SNI)\n        - Multi-value key literal (MVKL)\n    \"\"\"\n    if \"name\" in user_data.keys():\n        return user_data[\"name\"]\n    else:\n        return None\n\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "F001",
          "name": "nested-depth",
          "description": "Ensure the depth of nesting within functions does not exceed the set value.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
          "passed": true,
          "matches": [
            {
              "lineno": 125,
              "coloffset": 0,
              "linematch": "def nested_function_1():",
              "linematch_context": "    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()"
            },
            {
              "lineno": 127,
              "coloffset": 4,
              "linematch": "def nested_function_2():",
              "linematch_context": "    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "F002",
          "name": "number-of-conditions-in-function",
          "description": "Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//If/following-sibling::If | .//FunctionDef//If/following-sibling::Elif | .//FunctionDef//If/following-sibling::Else",
          "passed": true,
          "matches": [
            {
              "lineno": 322,
              "coloffset": 8,
              "linematch": "if len(self.ssn) != 11:",
              "linematch_context": "        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:"
            },
            {
              "lineno": 325,
              "coloffset": 8,
              "linematch": "if len(parts) != 3:",
              "linematch_context": "            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "CL001",
          "name": "nested-conditions",
          "description": "Ensure there is at least one nested condition (e.g., if{if{}}) in a function.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//If/descendant::If",
          "passed": true,
          "matches": [
            {
              "lineno": 18,
              "coloffset": 8,
              "linematch": "if shape == \"circle\":",
              "linematch_context": "    if shape == \"rectangle\":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == \"circle\":\n            radius = dimensions[0]\n            return 3.14 * dimensions[0] ** 2\n        else:\n            raise ValueError(\"Unsupported shape\")\n"
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "elif method == \"POST\":",
              "linematch_context": "def handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\"\n        else:\n            return \"Processing POST request without data\"\n    else:"
            },
            {
              "lineno": 137,
              "coloffset": 8,
              "linematch": "if data is not None:",
              "linematch_context": "    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\"\n        else:\n            return \"Processing POST request without data\"\n    else:\n        return \"Unsupported method\""
            },
            {
              "lineno": 150,
              "coloffset": 12,
              "linematch": "if item is not None:",
              "linematch_context": "    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\""
            },
            {
              "lineno": 162,
              "coloffset": 8,
              "linematch": "if number > 100:",
              "linematch_context": "    Contains Patterns:\n    - Nested condition (IFIF)\n    \"\"\"\n    if number > 0:\n        if number > 100:\n            return \"Large positive number\"\n        else:\n            return \"Positive number\"\n    else:\n        if number < 0:"
            },
            {
              "lineno": 167,
              "coloffset": 8,
              "linematch": "if number < 0:",
              "linematch_context": "            return \"Large positive number\"\n        else:\n            return \"Positive number\"\n    else:\n        if number < 0:\n            return \"Negative number\"\n        else:\n            return \"Zero\"\n\ndef calculate_factorial(n, start=1):"
            },
            {
              "lineno": 214,
              "coloffset": 4,
              "linematch": "elif score >= 80:",
              "linematch_context": "    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\"\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    else:\n        if score >= 70:\n            return \"C\"\n        else:"
            },
            {
              "lineno": 217,
              "coloffset": 8,
              "linematch": "if score >= 70:",
              "linematch_context": "        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    else:\n        if score >= 70:\n            return \"C\"\n        else:\n            return \"F\"\n\n# TODO: id: 'COMPLEX001', name: 'complex-expressions', pattern: './/FunctionDef//BinOp[count(descendant::BinOp) > 2]"
            },
            {
              "lineno": 266,
              "coloffset": 12,
              "linematch": "if item['discounted_price'] < 0:",
              "linematch_context": "\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item['discounted_price'] < 0:\n                item['discounted_price'] = 0\n        global_variable += 1\n    else:\n        print(\"No items met the filtering criteria.\")\n"
            },
            {
              "lineno": 251,
              "coloffset": 12,
              "linematch": "if item['price'] > min_order_value:",
              "linematch_context": "    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)"
            },
            {
              "lineno": 253,
              "coloffset": 16,
              "linematch": "if loyalty_points > 100:",
              "linematch_context": "    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 \n                item['discounted_price'] = item['price'] - discount\n                filtered_data.append(item)\n            else:\n                print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")"
            },
            {
              "lineno": 336,
              "coloffset": 12,
              "linematch": "if age == 0:",
              "linematch_context": "            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\""
            },
            {
              "lineno": 338,
              "coloffset": 12,
              "linematch": "elif age == 1:",
              "linematch_context": "    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\""
            },
            {
              "lineno": 340,
              "coloffset": 12,
              "linematch": "elif age == 2:",
              "linematch_context": "            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\""
            },
            {
              "lineno": 342,
              "coloffset": 12,
              "linematch": "elif age == 3:",
              "linematch_context": "            elif age == 1:\n                return \"odd\"\n            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\""
            },
            {
              "lineno": 344,
              "coloffset": 12,
              "linematch": "elif age == 4:",
              "linematch_context": "            elif age == 2:\n                return \"even\"\n            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\""
            },
            {
              "lineno": 346,
              "coloffset": 12,
              "linematch": "elif age == 5:",
              "linematch_context": "            elif age == 3:\n                return \"odd\"\n            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\""
            },
            {
              "lineno": 348,
              "coloffset": 12,
              "linematch": "elif age == 6:",
              "linematch_context": "            elif age == 4:\n                return \"even\"\n            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\""
            },
            {
              "lineno": 350,
              "coloffset": 12,
              "linematch": "elif age == 7:",
              "linematch_context": "            elif age == 5:\n                return \"odd\"\n            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\""
            },
            {
              "lineno": 352,
              "coloffset": 12,
              "linematch": "elif age == 8:",
              "linematch_context": "            elif age == 6:\n                return \"even\"\n            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\""
            },
            {
              "lineno": 354,
              "coloffset": 12,
              "linematch": "elif age == 9:",
              "linematch_context": "            elif age == 7:\n                return \"odd\"\n            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\""
            },
            {
              "lineno": 356,
              "coloffset": 12,
              "linematch": "elif age == 10:",
              "linematch_context": "            elif age == 8:\n                return \"even\"\n            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\""
            },
            {
              "lineno": 358,
              "coloffset": 12,
              "linematch": "elif age == 11:",
              "linematch_context": "            elif age == 9:\n                return \"odd\"\n            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\""
            },
            {
              "lineno": 360,
              "coloffset": 12,
              "linematch": "elif age == 12:",
              "linematch_context": "            elif age == 10:\n                return \"even\"\n            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\""
            },
            {
              "lineno": 362,
              "coloffset": 12,
              "linematch": "elif age == 13:",
              "linematch_context": "            elif age == 11:\n                return \"odd\"\n            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\""
            },
            {
              "lineno": 364,
              "coloffset": 12,
              "linematch": "elif age == 14:",
              "linematch_context": "            elif age == 12:\n                return \"even\"\n            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\""
            },
            {
              "lineno": 366,
              "coloffset": 12,
              "linematch": "elif age == 15:",
              "linematch_context": "            elif age == 13:\n                return \"odd\"\n            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\""
            },
            {
              "lineno": 368,
              "coloffset": 12,
              "linematch": "elif age == 16:",
              "linematch_context": "            elif age == 14:\n                return \"even\"\n            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\""
            },
            {
              "lineno": 370,
              "coloffset": 12,
              "linematch": "elif age == 17:",
              "linematch_context": "            elif age == 15:\n                return \"odd\"\n            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\""
            },
            {
              "lineno": 372,
              "coloffset": 12,
              "linematch": "elif age == 18:",
              "linematch_context": "            elif age == 16:\n                return \"even\"\n            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\""
            },
            {
              "lineno": 374,
              "coloffset": 12,
              "linematch": "elif age == 19:",
              "linematch_context": "            elif age == 17:\n                return \"odd\"\n            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\""
            },
            {
              "lineno": 376,
              "coloffset": 12,
              "linematch": "elif age == 20:",
              "linematch_context": "            elif age == 18:\n                return \"even\"\n            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\""
            },
            {
              "lineno": 378,
              "coloffset": 12,
              "linematch": "elif age == 21:",
              "linematch_context": "            elif age == 19:\n                return \"odd\"\n            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\""
            },
            {
              "lineno": 380,
              "coloffset": 12,
              "linematch": "elif age == 22:",
              "linematch_context": "            elif age == 20:\n                return \"even\"\n            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\""
            },
            {
              "lineno": 382,
              "coloffset": 12,
              "linematch": "elif age == 23:",
              "linematch_context": "            elif age == 21:\n                return \"odd\"\n            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\""
            },
            {
              "lineno": 384,
              "coloffset": 12,
              "linematch": "elif age == 24:",
              "linematch_context": "            elif age == 22:\n                return \"even\"\n            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\""
            },
            {
              "lineno": 386,
              "coloffset": 12,
              "linematch": "elif age == 25:",
              "linematch_context": "            elif age == 23:\n                return \"odd\"\n            elif age == 24:\n                return \"even\"\n            elif age == 25:\n                return \"odd\"\n        else:\n            return \"Invalid age\"\n\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "C002",
          "name": "nested-loop-conditions",
          "description": "Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
          "passed": true,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def calculate_area(shape,dimensions):",
              "linematch_context": "\"\"\" Config Checks Project. \"\"\"\nfrom typing import Tuple\n\ndef calculate_area(shape,dimensions):\n    \"\"\"This function calculates the area of a shape based on its dimensions.\n\n    Contains Patterns:\n        - Double Nested If (DNI)\n        - Magic Number (MN)"
            },
            {
              "lineno": 36,
              "coloffset": 0,
              "linematch": "def check_none(value):",
              "linematch_context": "        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'\ndef check_none(value):\n    \"\"\"This function checks if a value is None.\n\n    Contains Pattern:\n        - none comparision (NONE)\n    \"\"\""
            },
            {
              "lineno": 47,
              "coloffset": 0,
              "linematch": "def handle_file(filename):",
              "linematch_context": "        return False\n    return True\n\n# TODO: Not passing check id: 'EXC001', name: 'no-exception-type', pattern: './/FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]'\ndef handle_file(filename):\n    \"\"\"\n    This function attempts to read a file but does not handle specific exception\n\n    Contains Patterns:\n        - No Exception type (EXC)"
            },
            {
              "lineno": 60,
              "coloffset": 0,
              "linematch": "def is_valid(value):",
              "linematch_context": "            data = f.read()\n    except IOError as e:\n        print(f\"Error reading file: {e}\")\n\ndef is_valid(value):\n    \"\"\"\n    This function checks if a value is true.\n\n    Contains Patterns:\n        - Boolean Comparison (BOOL)"
            },
            {
              "lineno": 73,
              "coloffset": 0,
              "linematch": "def get_user_data(user_data):",
              "linematch_context": "    else:\n        return \"false value\"\n\n# TODO: not passing check id: 'MVKL001', name: 'multi-value-key-literal', pattern: './/FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]\ndef get_user_data(user_data):\n    \"\"\"\n    This function retrieves a user's name from a dictionary using the keys() function\n\n    Contains Patterns:\n        - Key Function (KFUN)"
            },
            {
              "lineno": 92,
              "coloffset": 0,
              "linematch": "def validate_data(data):",
              "linematch_context": "# Multi-value key literal (MVKL)- outside function scope\nuser_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n\n# TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\ndef validate_data(data):\n    \"\"\" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    \"\"\"\n    assert type(data) == tuple, \"Data must be a tuple\""
            },
            {
              "lineno": 100,
              "coloffset": 0,
              "linematch": "def modify_list(data):",
              "linematch_context": "    \"\"\"\n    assert type(data) == tuple, \"Data must be a tuple\"\n\n# TODO: not passing check id: 'LVITOI001', name: 'loop-variable-iterates-overrides-iterator', pattern: './/FunctionDef/body/For[target/Name/@id = iter/Name/@id]'\ndef modify_list(data):\n    \"\"\"\n    This function modifies a list by overiding its elements.\n\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)"
            },
            {
              "lineno": 114,
              "coloffset": 0,
              "linematch": "def calculate_sum(numbers):",
              "linematch_context": "        modified_data.append(item)\n    return modified_data\n\n# TODO: id: 'FLV001', name: 'function-uses-loop-variable', pattern: './/FunctionDef[body//comprehension/target/Name]'\ndef calculate_sum(numbers):\n    \"\"\"\n    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)\"\"\""
            },
            {
              "lineno": 125,
              "coloffset": 0,
              "linematch": "def nested_function_1():",
              "linematch_context": "    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()"
            },
            {
              "lineno": 132,
              "coloffset": 0,
              "linematch": "def handle_request(method, data):",
              "linematch_context": "        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:"
            },
            {
              "lineno": 145,
              "coloffset": 0,
              "linematch": "def filter_data(data, condition):",
              "linematch_context": "    else:\n        return \"Unsupported method\"\n\n# TODO: not passing check id: 'CL002', name: 'nested-condition-loops', pattern: './/FunctionDef//if//For'\ndef filter_data(data, condition):\n    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:"
            },
            {
              "lineno": 154,
              "coloffset": 0,
              "linematch": "def classify_number(number):",
              "linematch_context": "            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\"\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)"
            },
            {
              "lineno": 172,
              "coloffset": 0,
              "linematch": "def calculate_factorial(n, start=1):",
              "linematch_context": "            return \"Negative number\"\n        else:\n            return \"Zero\"\n\ndef calculate_factorial(n, start=1):\n    \"\"\"\n    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    \"\"\""
            },
            {
              "lineno": 186,
              "coloffset": 0,
              "linematch": "def validate_user_input(name, email):",
              "linematch_context": "        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    \"\"\"\n    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    \"\"\""
            },
            {
              "lineno": 197,
              "coloffset": 0,
              "linematch": "def write_to_file(filename, data):",
              "linematch_context": "    assert \"@\" in email, \"Email must contain an '@' symbol\"\n    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):\n    \"\"\"\n    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    \"\"\""
            },
            {
              "lineno": 206,
              "coloffset": 0,
              "linematch": "def calculate_grade(score):",
              "linematch_context": "    \"\"\"\n    with open(filename, \"w\") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    \"\"\"\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\""
            },
            {
              "lineno": 223,
              "coloffset": 0,
              "linematch": "def calculate_discount(price, discount_rate, loyalty_points):",
              "linematch_context": "        else:\n            return \"F\"\n\n# TODO: id: 'COMPLEX001', name: 'complex-expressions', pattern: './/FunctionDef//BinOp[count(descendant::BinOp) > 2]\ndef calculate_discount(price, discount_rate, loyalty_points):\n    \"\"\"\n    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    \"\"\""
            },
            {
              "lineno": 237,
              "coloffset": 0,
              "linematch": "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):",
              "linematch_context": "    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    \"\"\"\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals."
            },
            {
              "lineno": 394,
              "coloffset": 0,
              "linematch": "def calculate_something(data):",
              "linematch_context": "\n\nglobal_var = 0  # This is a global variable\n\ndef calculate_something(data):\n    \"\"\"\n    This function demonstrates the use of a global variable.\n\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable 'global_var'."
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "def __init__(self,name,email):",
              "linematch_context": "\n    Contains Patterns:\n        - Explicit Return in __init__(RET)\n    \"\"\"\n    def __init__(self,name,email):\n        self.name = name\n        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'"
            },
            {
              "lineno": 127,
              "coloffset": 4,
              "linematch": "def nested_function_2():",
              "linematch_context": "    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):"
            },
            {
              "lineno": 128,
              "coloffset": 8,
              "linematch": "def nested_function_3():",
              "linematch_context": "\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\""
            },
            {
              "lineno": 284,
              "coloffset": 4,
              "linematch": "def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):",
              "linematch_context": "        - Include empty catch block (ECB)\n        - Long Scope Chaining (LSC)\n        - Number of Conditions in Function (COND)\n    \"\"\"\n    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address"
            },
            {
              "lineno": 290,
              "coloffset": 4,
              "linematch": "def setName(self, name):",
              "linematch_context": "        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():"
            },
            {
              "lineno": 299,
              "coloffset": 4,
              "linematch": "def setAge(self, age):",
              "linematch_context": "            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(\"Age cannot be negative\")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:"
            },
            {
              "lineno": 306,
              "coloffset": 4,
              "linematch": "def setSSN(self, ssn):",
              "linematch_context": "        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self"
            },
            {
              "lineno": 309,
              "coloffset": 4,
              "linematch": "def setEmail(self,email):",
              "linematch_context": "            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self"
            },
            {
              "lineno": 312,
              "coloffset": 4,
              "linematch": "def setAddress(self,address):",
              "linematch_context": "        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")"
            },
            {
              "lineno": 315,
              "coloffset": 4,
              "linematch": "def create_person():",
              "linematch_context": "        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:"
            },
            {
              "lineno": 319,
              "coloffset": 4,
              "linematch": "def validate_ssn(self):",
              "linematch_context": "    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")"
            },
            {
              "lineno": 334,
              "coloffset": 4,
              "linematch": "def odd_even(self,age):",
              "linematch_context": "            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "F001",
          "name": "nested-loop-conditions-ff",
          "description": "Ensure the presence of nested loop-conditions (e.g., for{for{}}) in a function.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//For[.//For]",
          "passed": true,
          "matches": [
            {
              "lineno": 181,
              "coloffset": 4,
              "linematch": "for i in range(start, n + 1):",
              "linematch_context": "    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/test/test_dummy.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef/body/Assert",
          "passed": true,
          "matches": [
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "assert __version__ == \"0.1.0\"",
              "linematch_context": "\n\ndef test_version():\n    \"\"\"Confirm that the version of the program is correct.\"\"\"\n    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n"
            },
            {
              "lineno": 15,
              "coloffset": 4,
              "linematch": "assert main.calculate_area(\"rectangle\",[2,3]) == 6",
              "linematch_context": "    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():"
            },
            {
              "lineno": 18,
              "coloffset": 4,
              "linematch": "assert main.calculate_area(\"circle\",[2]) == 12.56",
              "linematch_context": "def test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "assert user.name == \"Alice\"",
              "linematch_context": "# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\""
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert user.email == \"alice@example.com\"",
              "linematch_context": "def test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True"
            },
            {
              "lineno": 35,
              "coloffset": 4,
              "linematch": "assert main.check_none(None) is True",
              "linematch_context": "\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n"
            },
            {
              "lineno": 39,
              "coloffset": 4,
              "linematch": "assert main.check_none(None) is True",
              "linematch_context": "    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n"
            },
            {
              "lineno": 43,
              "coloffset": 4,
              "linematch": "assert main.check_none(\"data\") is False",
              "linematch_context": "    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "assert main.check_none(0) is False",
              "linematch_context": "    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n"
            },
            {
              "lineno": 51,
              "coloffset": 4,
              "linematch": "assert main.check_none(\"\") is False",
              "linematch_context": "    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content"
            },
            {
              "lineno": 66,
              "coloffset": 4,
              "linematch": "assert main.is_valid(True) == \"true value\"",
              "linematch_context": "\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n"
            },
            {
              "lineno": 70,
              "coloffset": 4,
              "linematch": "assert main.is_valid(False) == \"false value\"",
              "linematch_context": "    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            },
            {
              "lineno": 77,
              "coloffset": 4,
              "linematch": "assert name in (\"Alice\", \"Bob\")",
              "linematch_context": "def test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None"
            },
            {
              "lineno": 82,
              "coloffset": 4,
              "linematch": "assert main.get_user_data(user_data) is None",
              "linematch_context": "\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n"
            },
            {
              "lineno": 86,
              "coloffset": 4,
              "linematch": "assert main.get_user_data({}) is None",
              "linematch_context": "    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)"
            },
            {
              "lineno": 109,
              "coloffset": 4,
              "linematch": "assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]",
              "linematch_context": "def test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\""
            },
            {
              "lineno": 110,
              "coloffset": 4,
              "linematch": "assert original_data == [1, 2, 3]",
              "linematch_context": "    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0"
            },
            {
              "lineno": 115,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([]) == 0",
              "linematch_context": "\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n"
            },
            {
              "lineno": 119,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([1, 2, 3]) == 6",
              "linematch_context": "    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n"
            },
            {
              "lineno": 123,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([-1, -2, -3]) == -6",
              "linematch_context": "    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n"
            },
            {
              "lineno": 127,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([1, -2, 3]) == 2",
              "linematch_context": "    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\""
            },
            {
              "lineno": 132,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"GET\", None) == \"Processing GET request\"",
              "linematch_context": "\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n"
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"",
              "linematch_context": "    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n"
            },
            {
              "lineno": 140,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"",
              "linematch_context": "    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n"
            },
            {
              "lineno": 144,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"PUT\", None) == \"Unsupported method\"",
              "linematch_context": "    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]"
            },
            {
              "lineno": 152,
              "coloffset": 4,
              "linematch": "assert filtered_data == [1, \"hello\", 2.5]",
              "linematch_context": "    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True"
            },
            {
              "lineno": 159,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False"
            },
            {
              "lineno": 166,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True"
            },
            {
              "lineno": 173,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\""
            },
            {
              "lineno": 178,
              "coloffset": 4,
              "linematch": "assert main.classify_number(50) == \"Positive number\"",
              "linematch_context": "\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n"
            },
            {
              "lineno": 182,
              "coloffset": 4,
              "linematch": "assert main.classify_number(120) == \"Large positive number\"",
              "linematch_context": "    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n"
            },
            {
              "lineno": 186,
              "coloffset": 4,
              "linematch": "assert main.classify_number(-30) == \"Negative number\"",
              "linematch_context": "    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n"
            },
            {
              "lineno": 190,
              "coloffset": 4,
              "linematch": "assert main.classify_number(0) == \"Zero\"",
              "linematch_context": "    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1"
            },
            {
              "lineno": 195,
              "coloffset": 4,
              "linematch": "assert main.calculate_factorial(0) == 1",
              "linematch_context": "\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)"
            },
            {
              "lineno": 204,
              "coloffset": 4,
              "linematch": "assert main.calculate_factorial(3, start=2) == 12",
              "linematch_context": "        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True"
            },
            {
              "lineno": 209,
              "coloffset": 4,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 234,
              "coloffset": 4,
              "linematch": "assert written_data == data",
              "linematch_context": "    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\""
            },
            {
              "lineno": 239,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(90) == \"A\"",
              "linematch_context": "\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\""
            },
            {
              "lineno": 240,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(100) == \"A\"",
              "linematch_context": "#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\""
            },
            {
              "lineno": 244,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(80) == \"B\"",
              "linematch_context": "    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\""
            },
            {
              "lineno": 245,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(89) == \"B\"",
              "linematch_context": "\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\""
            },
            {
              "lineno": 249,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(70) == \"C\"",
              "linematch_context": "    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\""
            },
            {
              "lineno": 250,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(79) == \"C\"",
              "linematch_context": "\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\""
            },
            {
              "lineno": 254,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(69) == \"F\"",
              "linematch_context": "    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\""
            },
            {
              "lineno": 255,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(0) == \"F\"",
              "linematch_context": "\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100"
            },
            {
              "lineno": 263,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == price",
              "linematch_context": "    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 271,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 279,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 287,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = ["
            },
            {
              "lineno": 296,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = ["
            },
            {
              "lineno": 297,
              "coloffset": 4,
              "linematch": "assert filtered_data[0]['discounted_price'] == 108  # Discount applied",
              "linematch_context": "        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},"
            },
            {
              "lineno": 305,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()"
            },
            {
              "lineno": 306,
              "coloffset": 4,
              "linematch": "assert filtered_data[0]['discounted_price'] == 102",
              "linematch_context": "        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\""
            },
            {
              "lineno": 311,
              "coloffset": 4,
              "linematch": "assert person.odd_even(0) == \"even\"",
              "linematch_context": "\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()"
            },
            {
              "lineno": 312,
              "coloffset": 4,
              "linematch": "assert person.odd_even(1) == \"odd\"",
              "linematch_context": "#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 313,
              "coloffset": 4,
              "linematch": "assert person.odd_even(10) == \"even\"",
              "linematch_context": "def test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 317,
              "coloffset": 4,
              "linematch": "assert person.odd_even(-1) == \"Invalid age\"",
              "linematch_context": "    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef/body/Assert",
          "passed": true,
          "matches": [
            {
              "lineno": 97,
              "coloffset": 4,
              "linematch": "assert type(data) == tuple, \"Data must be a tuple\"",
              "linematch_context": "    \"\"\" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    \"\"\"\n    assert type(data) == tuple, \"Data must be a tuple\"\n\n# TODO: not passing check id: 'LVITOI001', name: 'loop-variable-iterates-overrides-iterator', pattern: './/FunctionDef/body/For[target/Name/@id = iter/Name/@id]'\ndef modify_list(data):\n    \"\"\"\n    This function modifies a list by overiding its elements."
            },
            {
              "lineno": 192,
              "coloffset": 4,
              "linematch": "assert name.isalpha(), \"Name must only contain letters\"",
              "linematch_context": "    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    \"\"\"\n    assert name.isalpha(), \"Name must only contain letters\"\n    assert \"@\" in email, \"Email must contain an '@' symbol\"\n    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):"
            },
            {
              "lineno": 193,
              "coloffset": 4,
              "linematch": "assert \"@\" in email, \"Email must contain an '@' symbol\"",
              "linematch_context": "\n    Contains Pattern: Number of Assertions (NOA)\n    \"\"\"\n    assert name.isalpha(), \"Name must only contain letters\"\n    assert \"@\" in email, \"Email must contain an '@' symbol\"\n    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):\n    \"\"\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/test/test_dummy.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods that start with 'test_'.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
          "passed": true,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 4,
              "linematch": "\"\"\"Confirm that the version of the program is correct.\"\"\"",
              "linematch_context": "from src import main\n\n\ndef test_version():\n    \"\"\"Confirm that the version of the program is correct.\"\"\"\n    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6"
            },
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "assert __version__ == \"0.1.0\"",
              "linematch_context": "\n\ndef test_version():\n    \"\"\"Confirm that the version of the program is correct.\"\"\"\n    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n"
            },
            {
              "lineno": 15,
              "coloffset": 4,
              "linematch": "assert main.calculate_area(\"rectangle\",[2,3]) == 6",
              "linematch_context": "    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():"
            },
            {
              "lineno": 18,
              "coloffset": 4,
              "linematch": "assert main.calculate_area(\"circle\",[2]) == 12.56",
              "linematch_context": "def test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])"
            },
            {
              "lineno": 21,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if an error is raised for unsupported shapes.\"\"\"",
              "linematch_context": "def test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])\n\n# class User\ndef test_user_init_with_name_and_email():"
            },
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "with pytest.raises(ValueError):",
              "linematch_context": "    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])\n\n# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\""
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if User class initializes correctly with name and email.\"\"\"",
              "linematch_context": "        main.calculate_area(\"square\", [4])\n\n# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none"
            },
            {
              "lineno": 28,
              "coloffset": 4,
              "linematch": "user = main.User(\"Alice\", \"alice@example.com\")",
              "linematch_context": "\n# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "assert user.name == \"Alice\"",
              "linematch_context": "# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\""
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert user.email == \"alice@example.com\"",
              "linematch_context": "def test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True"
            },
            {
              "lineno": 34,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns True for None.\"\"\"",
              "linematch_context": "    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True"
            },
            {
              "lineno": 35,
              "coloffset": 4,
              "linematch": "assert main.check_none(None) is True",
              "linematch_context": "\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns True for None.\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False"
            },
            {
              "lineno": 39,
              "coloffset": 4,
              "linematch": "assert main.check_none(None) is True",
              "linematch_context": "    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns False for a value.\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False"
            },
            {
              "lineno": 43,
              "coloffset": 4,
              "linematch": "assert main.check_none(\"data\") is False",
              "linematch_context": "    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n"
            },
            {
              "lineno": 46,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "assert main.check_none(0) is False",
              "linematch_context": "    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\""
            },
            {
              "lineno": 51,
              "coloffset": 4,
              "linematch": "assert main.check_none(\"\") is False",
              "linematch_context": "    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content"
            },
            {
              "lineno": 55,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_file reads a file successfully.\"\"\"",
              "linematch_context": "    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:"
            },
            {
              "lineno": 57,
              "coloffset": 4,
              "linematch": "test_file = tmp_path / \"test_file.txt\"",
              "linematch_context": "# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n"
            },
            {
              "lineno": 58,
              "coloffset": 4,
              "linematch": "test_file.write_text(\"This is some test data.\")",
              "linematch_context": "def test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid"
            },
            {
              "lineno": 59,
              "coloffset": 4,
              "linematch": "main.handle_file(str(test_file))",
              "linematch_context": "    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():"
            },
            {
              "lineno": 60,
              "coloffset": 4,
              "linematch": "with open(str(test_file)) as f:",
              "linematch_context": "    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\""
            },
            {
              "lineno": 65,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if is_valid returns 'true value' for True.\"\"\"",
              "linematch_context": "        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\""
            },
            {
              "lineno": 66,
              "coloffset": 4,
              "linematch": "assert main.is_valid(True) == \"true value\"",
              "linematch_context": "\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n"
            },
            {
              "lineno": 69,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if is_valid returns 'false value' for False.\"\"\"",
              "linematch_context": "    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\""
            },
            {
              "lineno": 70,
              "coloffset": 4,
              "linematch": "assert main.is_valid(False) == \"false value\"",
              "linematch_context": "    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            },
            {
              "lineno": 74,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if get_user_data returns a user's name.\"\"\"",
              "linematch_context": "    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():"
            },
            {
              "lineno": 75,
              "coloffset": 4,
              "linematch": "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}",
              "linematch_context": "\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\""
            },
            {
              "lineno": 76,
              "coloffset": 4,
              "linematch": "name = main.get_user_data(user_data)",
              "linematch_context": "# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}"
            },
            {
              "lineno": 77,
              "coloffset": 4,
              "linematch": "assert name in (\"Alice\", \"Bob\")",
              "linematch_context": "def test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None"
            },
            {
              "lineno": 80,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"",
              "linematch_context": "    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\""
            },
            {
              "lineno": 81,
              "coloffset": 4,
              "linematch": "user_data = {\"email\": \"alice@example.com\"}",
              "linematch_context": "    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None"
            },
            {
              "lineno": 82,
              "coloffset": 4,
              "linematch": "assert main.get_user_data(user_data) is None",
              "linematch_context": "\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n"
            },
            {
              "lineno": 85,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"",
              "linematch_context": "    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\""
            },
            {
              "lineno": 86,
              "coloffset": 4,
              "linematch": "assert main.get_user_data({}) is None",
              "linematch_context": "    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)"
            },
            {
              "lineno": 90,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_data passes with a tuple.\"\"\"",
              "linematch_context": "    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\""
            },
            {
              "lineno": 91,
              "coloffset": 4,
              "linematch": "data = (1, 2, 3)",
              "linematch_context": "\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 92,
              "coloffset": 4,
              "linematch": "main.validate_data(data)",
              "linematch_context": "# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])"
            },
            {
              "lineno": 95,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"",
              "linematch_context": "    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\""
            },
            {
              "lineno": 96,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 100,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data(None)\n\n# modify_list\ndef test_modify_list():"
            },
            {
              "lineno": 101,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data(None)\n\n# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\""
            },
            {
              "lineno": 106,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"",
              "linematch_context": "        main.validate_data(None)\n\n# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n"
            },
            {
              "lineno": 107,
              "coloffset": 4,
              "linematch": "original_data = [1, 2, 3]",
              "linematch_context": "\n# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum"
            },
            {
              "lineno": 108,
              "coloffset": 4,
              "linematch": "modified_data = main.modify_list(original_data)",
              "linematch_context": "# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():"
            },
            {
              "lineno": 109,
              "coloffset": 4,
              "linematch": "assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]",
              "linematch_context": "def test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\""
            },
            {
              "lineno": 110,
              "coloffset": 4,
              "linematch": "assert original_data == [1, 2, 3]",
              "linematch_context": "    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0"
            },
            {
              "lineno": 114,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"",
              "linematch_context": "    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6"
            },
            {
              "lineno": 115,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([]) == 0",
              "linematch_context": "\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n"
            },
            {
              "lineno": 118,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6"
            },
            {
              "lineno": 119,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([1, 2, 3]) == 6",
              "linematch_context": "    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n"
            },
            {
              "lineno": 122,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2"
            },
            {
              "lineno": 123,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([-1, -2, -3]) == -6",
              "linematch_context": "    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n"
            },
            {
              "lineno": 126,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\""
            },
            {
              "lineno": 127,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([1, -2, 3]) == 2",
              "linematch_context": "    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\""
            },
            {
              "lineno": 131,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"",
              "linematch_context": "    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\""
            },
            {
              "lineno": 132,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"GET\", None) == \"Processing GET request\"",
              "linematch_context": "\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n"
            },
            {
              "lineno": 135,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"",
              "linematch_context": "    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\""
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"",
              "linematch_context": "    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n"
            },
            {
              "lineno": 139,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"",
              "linematch_context": "    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\""
            },
            {
              "lineno": 140,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"",
              "linematch_context": "    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n"
            },
            {
              "lineno": 143,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"",
              "linematch_context": "    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\""
            },
            {
              "lineno": 144,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"PUT\", None) == \"Unsupported method\"",
              "linematch_context": "    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]"
            },
            {
              "lineno": 148,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"",
              "linematch_context": "    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n"
            },
            {
              "lineno": 149,
              "coloffset": 4,
              "linematch": "data = [1, None, \"hello\", 2.5]",
              "linematch_context": "\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():"
            },
            {
              "lineno": 150,
              "coloffset": 4,
              "linematch": "condition = True",
              "linematch_context": "# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\""
            },
            {
              "lineno": 151,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []"
            },
            {
              "lineno": 152,
              "coloffset": 4,
              "linematch": "assert filtered_data == [1, \"hello\", 2.5]",
              "linematch_context": "    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True"
            },
            {
              "lineno": 155,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"",
              "linematch_context": "    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n"
            },
            {
              "lineno": 156,
              "coloffset": 4,
              "linematch": "data = []",
              "linematch_context": "    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():"
            },
            {
              "lineno": 157,
              "coloffset": 4,
              "linematch": "condition = True",
              "linematch_context": "\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\""
            },
            {
              "lineno": 158,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]"
            },
            {
              "lineno": 159,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False"
            },
            {
              "lineno": 162,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"",
              "linematch_context": "    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n"
            },
            {
              "lineno": 163,
              "coloffset": 4,
              "linematch": "data = [1, None, \"hello\", 2.5]",
              "linematch_context": "    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():"
            },
            {
              "lineno": 164,
              "coloffset": 4,
              "linematch": "condition = False",
              "linematch_context": "\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\""
            },
            {
              "lineno": 165,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]"
            },
            {
              "lineno": 166,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True"
            },
            {
              "lineno": 169,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"",
              "linematch_context": "    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n"
            },
            {
              "lineno": 170,
              "coloffset": 4,
              "linematch": "data = [None, None, None]",
              "linematch_context": "    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number"
            },
            {
              "lineno": 171,
              "coloffset": 4,
              "linematch": "condition = True",
              "linematch_context": "\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():"
            },
            {
              "lineno": 172,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\""
            },
            {
              "lineno": 173,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\""
            },
            {
              "lineno": 177,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"",
              "linematch_context": "    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\""
            },
            {
              "lineno": 178,
              "coloffset": 4,
              "linematch": "assert main.classify_number(50) == \"Positive number\"",
              "linematch_context": "\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n"
            },
            {
              "lineno": 181,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"",
              "linematch_context": "    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\""
            },
            {
              "lineno": 182,
              "coloffset": 4,
              "linematch": "assert main.classify_number(120) == \"Large positive number\"",
              "linematch_context": "    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n"
            },
            {
              "lineno": 185,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"",
              "linematch_context": "    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\""
            },
            {
              "lineno": 186,
              "coloffset": 4,
              "linematch": "assert main.classify_number(-30) == \"Negative number\"",
              "linematch_context": "    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n"
            },
            {
              "lineno": 189,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"",
              "linematch_context": "    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\""
            },
            {
              "lineno": 190,
              "coloffset": 4,
              "linematch": "assert main.classify_number(0) == \"Zero\"",
              "linematch_context": "    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1"
            },
            {
              "lineno": 194,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"",
              "linematch_context": "    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):"
            },
            {
              "lineno": 195,
              "coloffset": 4,
              "linematch": "assert main.calculate_factorial(0) == 1",
              "linematch_context": "\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)"
            },
            {
              "lineno": 198,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\""
            },
            {
              "lineno": 199,
              "coloffset": 4,
              "linematch": "with pytest.raises(ValueError):",
              "linematch_context": "    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12"
            },
            {
              "lineno": 203,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"",
              "linematch_context": "    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\""
            },
            {
              "lineno": 204,
              "coloffset": 4,
              "linematch": "assert main.calculate_factorial(3, start=2) == 12",
              "linematch_context": "        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True"
            },
            {
              "lineno": 208,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"",
              "linematch_context": "    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 209,
              "coloffset": 4,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 212,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\""
            },
            {
              "lineno": 213,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 217,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\""
            },
            {
              "lineno": 218,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 222,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file\ndef test_write_to_file_content(tmpdir):"
            },
            {
              "lineno": 223,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\""
            },
            {
              "lineno": 228,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"",
              "linematch_context": "        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()"
            },
            {
              "lineno": 229,
              "coloffset": 4,
              "linematch": "data = \"This is some test data.\"",
              "linematch_context": "\n#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data"
            },
            {
              "lineno": 230,
              "coloffset": 4,
              "linematch": "filename = os.path.join(tmpdir, \"test_file.txt\")",
              "linematch_context": "#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n"
            },
            {
              "lineno": 231,
              "coloffset": 4,
              "linematch": "main.write_to_file(filename, data)",
              "linematch_context": "def test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade"
            },
            {
              "lineno": 232,
              "coloffset": 4,
              "linematch": "with open(filename, \"r\") as f:",
              "linematch_context": "    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():"
            },
            {
              "lineno": 234,
              "coloffset": 4,
              "linematch": "assert written_data == data",
              "linematch_context": "    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\""
            },
            {
              "lineno": 238,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"",
              "linematch_context": "    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\""
            },
            {
              "lineno": 239,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(90) == \"A\"",
              "linematch_context": "\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\""
            },
            {
              "lineno": 240,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(100) == \"A\"",
              "linematch_context": "#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\""
            },
            {
              "lineno": 243,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"",
              "linematch_context": "    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\""
            },
            {
              "lineno": 244,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(80) == \"B\"",
              "linematch_context": "    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\""
            },
            {
              "lineno": 245,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(89) == \"B\"",
              "linematch_context": "\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\""
            },
            {
              "lineno": 248,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"",
              "linematch_context": "    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\""
            },
            {
              "lineno": 249,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(70) == \"C\"",
              "linematch_context": "    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\""
            },
            {
              "lineno": 250,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(79) == \"C\"",
              "linematch_context": "\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\""
            },
            {
              "lineno": 253,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"",
              "linematch_context": "    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():"
            },
            {
              "lineno": 254,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(69) == \"F\"",
              "linematch_context": "    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\""
            },
            {
              "lineno": 255,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(0) == \"F\"",
              "linematch_context": "\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100"
            },
            {
              "lineno": 259,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"",
              "linematch_context": "    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n"
            },
            {
              "lineno": 260,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():"
            },
            {
              "lineno": 261,
              "coloffset": 4,
              "linematch": "discount_rate = 0",
              "linematch_context": "#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\""
            },
            {
              "lineno": 262,
              "coloffset": 4,
              "linematch": "loyalty_points = 0",
              "linematch_context": "def test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100"
            },
            {
              "lineno": 263,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == price",
              "linematch_context": "    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 266,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"",
              "linematch_context": "    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price"
            },
            {
              "lineno": 267,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n"
            },
            {
              "lineno": 268,
              "coloffset": 4,
              "linematch": "discount_rate = 0.1  # 10% discount",
              "linematch_context": "\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():"
            },
            {
              "lineno": 269,
              "coloffset": 4,
              "linematch": "loyalty_points = 0",
              "linematch_context": "def test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\""
            },
            {
              "lineno": 270,
              "coloffset": 4,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)",
              "linematch_context": "    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100"
            },
            {
              "lineno": 271,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 274,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"",
              "linematch_context": "    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price"
            },
            {
              "lineno": 275,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n"
            },
            {
              "lineno": 276,
              "coloffset": 4,
              "linematch": "discount_rate = 0.1  # 10% discount",
              "linematch_context": "\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():"
            },
            {
              "lineno": 277,
              "coloffset": 4,
              "linematch": "loyalty_points = 150",
              "linematch_context": "def test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\""
            },
            {
              "lineno": 278,
              "coloffset": 4,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)",
              "linematch_context": "    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100"
            },
            {
              "lineno": 279,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 282,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"",
              "linematch_context": "    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price"
            },
            {
              "lineno": 283,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n"
            },
            {
              "lineno": 284,
              "coloffset": 4,
              "linematch": "discount_rate = 0.1  # 10% discount",
              "linematch_context": "\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function"
            },
            {
              "lineno": 285,
              "coloffset": 4,
              "linematch": "loyalty_points = 100",
              "linematch_context": "def test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():"
            },
            {
              "lineno": 286,
              "coloffset": 4,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)",
              "linematch_context": "    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\""
            },
            {
              "lineno": 287,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = ["
            },
            {
              "lineno": 291,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1"
            },
            {
              "lineno": 292,
              "coloffset": 4,
              "linematch": "data = [",
              "linematch_context": "\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied"
            },
            {
              "lineno": 295,
              "coloffset": 4,
              "linematch": "filtered_data = main.overly_complex_function(data)",
              "linematch_context": "    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\""
            },
            {
              "lineno": 296,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = ["
            },
            {
              "lineno": 297,
              "coloffset": 4,
              "linematch": "assert filtered_data[0]['discounted_price'] == 108  # Discount applied",
              "linematch_context": "        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},"
            },
            {
              "lineno": 300,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"",
              "linematch_context": "    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1"
            },
            {
              "lineno": 301,
              "coloffset": 4,
              "linematch": "data = [",
              "linematch_context": "    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102"
            },
            {
              "lineno": 304,
              "coloffset": 4,
              "linematch": "filtered_data = main.overly_complex_function(data, loyalty_points=120)",
              "linematch_context": "    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():"
            },
            {
              "lineno": 305,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()"
            },
            {
              "lineno": 306,
              "coloffset": 4,
              "linematch": "assert filtered_data[0]['discounted_price'] == 102",
              "linematch_context": "        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\""
            },
            {
              "lineno": 310,
              "coloffset": 4,
              "linematch": "person = main.Person()",
              "linematch_context": "    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():"
            },
            {
              "lineno": 311,
              "coloffset": 4,
              "linematch": "assert person.odd_even(0) == \"even\"",
              "linematch_context": "\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()"
            },
            {
              "lineno": 312,
              "coloffset": 4,
              "linematch": "assert person.odd_even(1) == \"odd\"",
              "linematch_context": "#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 313,
              "coloffset": 4,
              "linematch": "assert person.odd_even(10) == \"even\"",
              "linematch_context": "def test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 316,
              "coloffset": 4,
              "linematch": "person = main.Person()",
              "linematch_context": "    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 317,
              "coloffset": 4,
              "linematch": "assert person.odd_even(-1) == \"Invalid age\"",
              "linematch_context": "    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/test/test_dummy.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": true,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 4,
              "linematch": "\"\"\"Confirm that the version of the program is correct.\"\"\"",
              "linematch_context": "from src import main\n\n\ndef test_version():\n    \"\"\"Confirm that the version of the program is correct.\"\"\"\n    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6"
            },
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "assert __version__ == \"0.1.0\"",
              "linematch_context": "\n\ndef test_version():\n    \"\"\"Confirm that the version of the program is correct.\"\"\"\n    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n"
            },
            {
              "lineno": 15,
              "coloffset": 4,
              "linematch": "assert main.calculate_area(\"rectangle\",[2,3]) == 6",
              "linematch_context": "    assert __version__ == \"0.1.0\"\n\n# calculate_area\ndef test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():"
            },
            {
              "lineno": 18,
              "coloffset": 4,
              "linematch": "assert main.calculate_area(\"circle\",[2]) == 12.56",
              "linematch_context": "def test_rectangle_area():\n    assert main.calculate_area(\"rectangle\",[2,3]) == 6\n\ndef test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])"
            },
            {
              "lineno": 21,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if an error is raised for unsupported shapes.\"\"\"",
              "linematch_context": "def test_circle_area():\n    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])\n\n# class User\ndef test_user_init_with_name_and_email():"
            },
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "with pytest.raises(ValueError):",
              "linematch_context": "    assert main.calculate_area(\"circle\",[2]) == 12.56\n\ndef test_unsupported_shape():\n    \"\"\"Tests if an error is raised for unsupported shapes.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_area(\"square\", [4])\n\n# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\""
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if User class initializes correctly with name and email.\"\"\"",
              "linematch_context": "        main.calculate_area(\"square\", [4])\n\n# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none"
            },
            {
              "lineno": 28,
              "coloffset": 4,
              "linematch": "user = main.User(\"Alice\", \"alice@example.com\")",
              "linematch_context": "\n# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "assert user.name == \"Alice\"",
              "linematch_context": "# class User\ndef test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\""
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert user.email == \"alice@example.com\"",
              "linematch_context": "def test_user_init_with_name_and_email():\n    \"\"\"Tests if User class initializes correctly with name and email.\"\"\"\n    user = main.User(\"Alice\", \"alice@example.com\")\n    assert user.name == \"Alice\"\n    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True"
            },
            {
              "lineno": 34,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns True for None.\"\"\"",
              "linematch_context": "    assert user.email == \"alice@example.com\"\n\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True"
            },
            {
              "lineno": 35,
              "coloffset": 4,
              "linematch": "assert main.check_none(None) is True",
              "linematch_context": "\n# check_none\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns True for None.\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False"
            },
            {
              "lineno": 39,
              "coloffset": 4,
              "linematch": "assert main.check_none(None) is True",
              "linematch_context": "    assert main.check_none(None) is True\n\ndef test_check_none_with_none():\n    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns False for a value.\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns True for None.\"\"\"\n    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False"
            },
            {
              "lineno": 43,
              "coloffset": 4,
              "linematch": "assert main.check_none(\"data\") is False",
              "linematch_context": "    assert main.check_none(None) is True\n\ndef test_check_none_with_value():\n    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n"
            },
            {
              "lineno": 46,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns False for a value.\"\"\"\n    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "assert main.check_none(0) is False",
              "linematch_context": "    assert main.check_none(\"data\") is False\n\ndef test_check_none_with_zero():\n    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"",
              "linematch_context": "    \"\"\"Tests if check_none returns False for zero (falsy but not None).\"\"\"\n    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\""
            },
            {
              "lineno": 51,
              "coloffset": 4,
              "linematch": "assert main.check_none(\"\") is False",
              "linematch_context": "    assert main.check_none(0) is False\n\ndef test_check_none_with_empty_string():\n    \"\"\"Tests if check_none returns False for an empty string (falsy but not None).\"\"\"\n    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content"
            },
            {
              "lineno": 55,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_file reads a file successfully.\"\"\"",
              "linematch_context": "    assert main.check_none(\"\") is False\n\n# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:"
            },
            {
              "lineno": 57,
              "coloffset": 4,
              "linematch": "test_file = tmp_path / \"test_file.txt\"",
              "linematch_context": "# handle_file\ndef test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n"
            },
            {
              "lineno": 58,
              "coloffset": 4,
              "linematch": "test_file.write_text(\"This is some test data.\")",
              "linematch_context": "def test_handle_file_success(tmp_path):\n    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid"
            },
            {
              "lineno": 59,
              "coloffset": 4,
              "linematch": "main.handle_file(str(test_file))",
              "linematch_context": "    \"\"\"Tests if handle_file reads a file successfully.\"\"\"\n    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():"
            },
            {
              "lineno": 60,
              "coloffset": 4,
              "linematch": "with open(str(test_file)) as f:",
              "linematch_context": "    # Create a temporary file with some content\n    test_file = tmp_path / \"test_file.txt\"\n    test_file.write_text(\"This is some test data.\")\n    main.handle_file(str(test_file))\n    with open(str(test_file)) as f:\n        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\""
            },
            {
              "lineno": 65,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if is_valid returns 'true value' for True.\"\"\"",
              "linematch_context": "        assert f.read() == \"This is some test data.\"\n\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\""
            },
            {
              "lineno": 66,
              "coloffset": 4,
              "linematch": "assert main.is_valid(True) == \"true value\"",
              "linematch_context": "\n# is_valid\ndef test_is_valid_true():\n    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n"
            },
            {
              "lineno": 69,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if is_valid returns 'false value' for False.\"\"\"",
              "linematch_context": "    \"\"\"Tests if is_valid returns 'true value' for True.\"\"\"\n    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\""
            },
            {
              "lineno": 70,
              "coloffset": 4,
              "linematch": "assert main.is_valid(False) == \"false value\"",
              "linematch_context": "    assert main.is_valid(True) == \"true value\"\n\ndef test_is_valid_false():\n    \"\"\"Tests if is_valid returns 'false value' for False.\"\"\"\n    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            },
            {
              "lineno": 74,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if get_user_data returns a user's name.\"\"\"",
              "linematch_context": "    assert main.is_valid(False) == \"false value\"\n\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():"
            },
            {
              "lineno": 75,
              "coloffset": 4,
              "linematch": "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}",
              "linematch_context": "\n# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\""
            },
            {
              "lineno": 76,
              "coloffset": 4,
              "linematch": "name = main.get_user_data(user_data)",
              "linematch_context": "# get_user_data\ndef test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}"
            },
            {
              "lineno": 77,
              "coloffset": 4,
              "linematch": "assert name in (\"Alice\", \"Bob\")",
              "linematch_context": "def test_get_user_data():\n    \"\"\"Tests if get_user_data returns a user's name.\"\"\"\n    user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None"
            },
            {
              "lineno": 80,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"",
              "linematch_context": "    name = main.get_user_data(user_data)\n    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\""
            },
            {
              "lineno": 81,
              "coloffset": 4,
              "linematch": "user_data = {\"email\": \"alice@example.com\"}",
              "linematch_context": "    assert name in (\"Alice\", \"Bob\")\n\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None"
            },
            {
              "lineno": 82,
              "coloffset": 4,
              "linematch": "assert main.get_user_data(user_data) is None",
              "linematch_context": "\ndef test_get_user_data_without_name():\n    \"\"\"Tests if get_user_data returns None when 'name' is missing.\"\"\"\n    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n"
            },
            {
              "lineno": 85,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"",
              "linematch_context": "    user_data = {\"email\": \"alice@example.com\"}\n    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\""
            },
            {
              "lineno": 86,
              "coloffset": 4,
              "linematch": "assert main.get_user_data({}) is None",
              "linematch_context": "    assert main.get_user_data(user_data) is None\n\ndef test_get_user_data_empty_dict():\n    \"\"\"Tests if get_user_data returns None for an empty dictionary.\"\"\"\n    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)"
            },
            {
              "lineno": 90,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_data passes with a tuple.\"\"\"",
              "linematch_context": "    assert main.get_user_data({}) is None\n\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\""
            },
            {
              "lineno": 91,
              "coloffset": 4,
              "linematch": "data = (1, 2, 3)",
              "linematch_context": "\n# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 92,
              "coloffset": 4,
              "linematch": "main.validate_data(data)",
              "linematch_context": "# validate_data\ndef test_validate_data_with_tuple():\n    \"\"\"Tests if validate_data passes with a tuple.\"\"\"\n    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])"
            },
            {
              "lineno": 95,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"",
              "linematch_context": "    data = (1, 2, 3)\n    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\""
            },
            {
              "lineno": 96,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "    main.validate_data(data)\n\ndef test_validate_data_with_non_tuple():\n    \"\"\"Tests if validate_data raises an AssertionError for non-tuple data.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 100,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data(None)\n\n# modify_list\ndef test_modify_list():"
            },
            {
              "lineno": 101,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "        main.validate_data([1, 2, 3])\n\ndef test_validate_data_with_none():\n    \"\"\"Tests if validate_data raises an AssertionError for None.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_data(None)\n\n# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\""
            },
            {
              "lineno": 106,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"",
              "linematch_context": "        main.validate_data(None)\n\n# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n"
            },
            {
              "lineno": 107,
              "coloffset": 4,
              "linematch": "original_data = [1, 2, 3]",
              "linematch_context": "\n# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum"
            },
            {
              "lineno": 108,
              "coloffset": 4,
              "linematch": "modified_data = main.modify_list(original_data)",
              "linematch_context": "# modify_list\ndef test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():"
            },
            {
              "lineno": 109,
              "coloffset": 4,
              "linematch": "assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]",
              "linematch_context": "def test_modify_list():\n    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\""
            },
            {
              "lineno": 110,
              "coloffset": 4,
              "linematch": "assert original_data == [1, 2, 3]",
              "linematch_context": "    \"\"\"Tests if modify_list modifies a copy of the list and returns it.\"\"\"\n    original_data = [1, 2, 3]\n    modified_data = main.modify_list(original_data)\n    assert modified_data == [\"Modified\", \"Modified\", \"Modified\"]\n    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0"
            },
            {
              "lineno": 114,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"",
              "linematch_context": "    assert original_data == [1, 2, 3]\n\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6"
            },
            {
              "lineno": 115,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([]) == 0",
              "linematch_context": "\n# calculate_sum\ndef test_calculate_sum_empty():\n    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n"
            },
            {
              "lineno": 118,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_sum returns 0 for an empty list.\"\"\"\n    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6"
            },
            {
              "lineno": 119,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([1, 2, 3]) == 6",
              "linematch_context": "    assert main.calculate_sum([]) == 0\n\ndef test_calculate_sum_positive():\n    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n"
            },
            {
              "lineno": 122,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_sum returns the correct sum for positive numbers.\"\"\"\n    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2"
            },
            {
              "lineno": 123,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([-1, -2, -3]) == -6",
              "linematch_context": "    assert main.calculate_sum([1, 2, 3]) == 6\n\ndef test_calculate_sum_negative():\n    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n"
            },
            {
              "lineno": 126,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_sum returns the correct sum for negative numbers.\"\"\"\n    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\""
            },
            {
              "lineno": 127,
              "coloffset": 4,
              "linematch": "assert main.calculate_sum([1, -2, 3]) == 2",
              "linematch_context": "    assert main.calculate_sum([-1, -2, -3]) == -6\n\ndef test_calculate_sum_mixed():\n    \"\"\"Tests if calculate_sum returns the correct sum for mixed numbers.\"\"\"\n    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\""
            },
            {
              "lineno": 131,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"",
              "linematch_context": "    assert main.calculate_sum([1, -2, 3]) == 2\n\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\""
            },
            {
              "lineno": 132,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"GET\", None) == \"Processing GET request\"",
              "linematch_context": "\n# handle_request\ndef test_handle_get_request():\n    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n"
            },
            {
              "lineno": 135,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"",
              "linematch_context": "    \"\"\"Tests if handle_request returns the correct message for a GET request.\"\"\"\n    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\""
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"",
              "linematch_context": "    assert main.handle_request(\"GET\", None) == \"Processing GET request\"\n\ndef test_handle_post_request_with_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n"
            },
            {
              "lineno": 139,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"",
              "linematch_context": "    \"\"\"Tests if handle_request returns the correct message for a POST request with data.\"\"\"\n    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\""
            },
            {
              "lineno": 140,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"",
              "linematch_context": "    assert main.handle_request(\"POST\", {\"data\": \"value\"}) == \"Processing POST request with data\"\n\ndef test_handle_post_request_without_data():\n    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n"
            },
            {
              "lineno": 143,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"",
              "linematch_context": "    \"\"\"Tests if handle_request returns the correct message for a POST request without data.\"\"\"\n    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\""
            },
            {
              "lineno": 144,
              "coloffset": 4,
              "linematch": "assert main.handle_request(\"PUT\", None) == \"Unsupported method\"",
              "linematch_context": "    assert main.handle_request(\"POST\", None) == \"Processing POST request without data\"\n\ndef test_handle_unsupported_method():\n    \"\"\"Tests if handle_request returns the correct message for an unsupported method.\"\"\"\n    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]"
            },
            {
              "lineno": 148,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"",
              "linematch_context": "    assert main.handle_request(\"PUT\", None) == \"Unsupported method\"\n\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n"
            },
            {
              "lineno": 149,
              "coloffset": 4,
              "linematch": "data = [1, None, \"hello\", 2.5]",
              "linematch_context": "\n# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():"
            },
            {
              "lineno": 150,
              "coloffset": 4,
              "linematch": "condition = True",
              "linematch_context": "# filter_data\ndef test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\""
            },
            {
              "lineno": 151,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_condition_and_data():\n    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []"
            },
            {
              "lineno": 152,
              "coloffset": 4,
              "linematch": "assert filtered_data == [1, \"hello\", 2.5]",
              "linematch_context": "    \"\"\"Tests if filter_data returns all non-None elements with a True condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True"
            },
            {
              "lineno": 155,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"",
              "linematch_context": "    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n"
            },
            {
              "lineno": 156,
              "coloffset": 4,
              "linematch": "data = []",
              "linematch_context": "    assert filtered_data == [1, \"hello\", 2.5]\n\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():"
            },
            {
              "lineno": 157,
              "coloffset": 4,
              "linematch": "condition = True",
              "linematch_context": "\ndef test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\""
            },
            {
              "lineno": 158,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_condition_and_no_data():\n    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]"
            },
            {
              "lineno": 159,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with a True condition and empty data.\"\"\"\n    data = []\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False"
            },
            {
              "lineno": 162,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"",
              "linematch_context": "    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n"
            },
            {
              "lineno": 163,
              "coloffset": 4,
              "linematch": "data = [1, None, \"hello\", 2.5]",
              "linematch_context": "    assert filtered_data == []\n\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():"
            },
            {
              "lineno": 164,
              "coloffset": 4,
              "linematch": "condition = False",
              "linematch_context": "\ndef test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\""
            },
            {
              "lineno": 165,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_false_condition():\n    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]"
            },
            {
              "lineno": 166,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with a False condition.\"\"\"\n    data = [1, None, \"hello\", 2.5]\n    condition = False\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True"
            },
            {
              "lineno": 169,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"",
              "linematch_context": "    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n"
            },
            {
              "lineno": 170,
              "coloffset": 4,
              "linematch": "data = [None, None, None]",
              "linematch_context": "    assert filtered_data == []\n\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number"
            },
            {
              "lineno": 171,
              "coloffset": 4,
              "linematch": "condition = True",
              "linematch_context": "\ndef test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():"
            },
            {
              "lineno": 172,
              "coloffset": 4,
              "linematch": "filtered_data = main.filter_data(data, condition)",
              "linematch_context": "def test_filter_data_with_all_none():\n    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\""
            },
            {
              "lineno": 173,
              "coloffset": 4,
              "linematch": "assert filtered_data == []",
              "linematch_context": "    \"\"\"Tests if filter_data returns an empty list with all None elements.\"\"\"\n    data = [None, None, None]\n    condition = True\n    filtered_data = main.filter_data(data, condition)\n    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\""
            },
            {
              "lineno": 177,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"",
              "linematch_context": "    assert filtered_data == []\n\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\""
            },
            {
              "lineno": 178,
              "coloffset": 4,
              "linematch": "assert main.classify_number(50) == \"Positive number\"",
              "linematch_context": "\n# classify_number\ndef test_classify_positive_number():\n    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n"
            },
            {
              "lineno": 181,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"",
              "linematch_context": "    \"\"\"Tests if classify_number returns 'Positive number' for a positive number less than 100.\"\"\"\n    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\""
            },
            {
              "lineno": 182,
              "coloffset": 4,
              "linematch": "assert main.classify_number(120) == \"Large positive number\"",
              "linematch_context": "    assert main.classify_number(50) == \"Positive number\"\n\ndef test_classify_large_positive_number():\n    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n"
            },
            {
              "lineno": 185,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"",
              "linematch_context": "    \"\"\"Tests if classify_number returns 'Large positive number' for a number greater than 100.\"\"\"\n    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\""
            },
            {
              "lineno": 186,
              "coloffset": 4,
              "linematch": "assert main.classify_number(-30) == \"Negative number\"",
              "linematch_context": "    assert main.classify_number(120) == \"Large positive number\"\n\ndef test_classify_negative_number():\n    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n"
            },
            {
              "lineno": 189,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"",
              "linematch_context": "    \"\"\"Tests if classify_number returns 'Negative number' for a negative number.\"\"\"\n    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\""
            },
            {
              "lineno": 190,
              "coloffset": 4,
              "linematch": "assert main.classify_number(0) == \"Zero\"",
              "linematch_context": "    assert main.classify_number(-30) == \"Negative number\"\n\ndef test_classify_zero():\n    \"\"\"Tests if classify_number returns 'Zero' for zero.\"\"\"\n    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1"
            },
            {
              "lineno": 194,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"",
              "linematch_context": "    assert main.classify_number(0) == \"Zero\"\n\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):"
            },
            {
              "lineno": 195,
              "coloffset": 4,
              "linematch": "assert main.calculate_factorial(0) == 1",
              "linematch_context": "\n# calculate_factorial\ndef test_factorial_zero():\n    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)"
            },
            {
              "lineno": 198,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"",
              "linematch_context": "    \"\"\"Tests if calculate_factorial returns 1 for factorial of 0.\"\"\"\n    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\""
            },
            {
              "lineno": 199,
              "coloffset": 4,
              "linematch": "with pytest.raises(ValueError):",
              "linematch_context": "    assert main.calculate_factorial(0) == 1\n\ndef test_factorial_negative():\n    \"\"\"Tests if calculate_factorial raises an error for a negative number.\"\"\"\n    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12"
            },
            {
              "lineno": 203,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"",
              "linematch_context": "    with pytest.raises(ValueError):\n        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\""
            },
            {
              "lineno": 204,
              "coloffset": 4,
              "linematch": "assert main.calculate_factorial(3, start=2) == 12",
              "linematch_context": "        main.calculate_factorial(-3)\n\ndef test_factorial_custom_start():\n    \"\"\"Tests if calculate_factorial returns the correct factorial with a custom starting value.\"\"\"\n    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True"
            },
            {
              "lineno": 208,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"",
              "linematch_context": "    assert main.calculate_factorial(3, start=2) == 12\n\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 209,
              "coloffset": 4,
              "linematch": "assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True",
              "linematch_context": "\n#validate_user_input\ndef test_valid_user_input():\n    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")"
            },
            {
              "lineno": 212,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"",
              "linematch_context": "    \"\"\"Tests if validate_user_input returns True for valid name and email.\"\"\"\n    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\""
            },
            {
              "lineno": 213,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "    assert main.validate_user_input(\"Alice\", \"alice@example.com\") is True\n\ndef test_invalid_name_with_numbers():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with numbers.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 217,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\""
            },
            {
              "lineno": 218,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "        main.validate_user_input(\"Alice123\", \"alice@example.com\")\n\ndef test_invalid_name_with_symbols():\n    \"\"\"Tests if validate_user_input raises an AssertionError for name with symbols.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"\n    with pytest.raises(AssertionError):"
            },
            {
              "lineno": 222,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"",
              "linematch_context": "    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file\ndef test_write_to_file_content(tmpdir):"
            },
            {
              "lineno": 223,
              "coloffset": 4,
              "linematch": "with pytest.raises(AssertionError):",
              "linematch_context": "        main.validate_user_input(\"Alice!\", \"alice@example.com\")\n\ndef test_invalid_email_without_at():\n    \"\"\"Tests if validate_user_input raises an AssertionError for email without '@'.\"\"\"\n    with pytest.raises(AssertionError):\n        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\""
            },
            {
              "lineno": 228,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"",
              "linematch_context": "        main.validate_user_input(\"Alice\", \"alice.example.com\")\n\n#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()"
            },
            {
              "lineno": 229,
              "coloffset": 4,
              "linematch": "data = \"This is some test data.\"",
              "linematch_context": "\n#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data"
            },
            {
              "lineno": 230,
              "coloffset": 4,
              "linematch": "filename = os.path.join(tmpdir, \"test_file.txt\")",
              "linematch_context": "#write_to_file\ndef test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n"
            },
            {
              "lineno": 231,
              "coloffset": 4,
              "linematch": "main.write_to_file(filename, data)",
              "linematch_context": "def test_write_to_file_content(tmpdir):\n    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade"
            },
            {
              "lineno": 232,
              "coloffset": 4,
              "linematch": "with open(filename, \"r\") as f:",
              "linematch_context": "    \"\"\"Tests if the written data is present in the file (using a temporary directory).\"\"\"\n    data = \"This is some test data.\"\n    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():"
            },
            {
              "lineno": 234,
              "coloffset": 4,
              "linematch": "assert written_data == data",
              "linematch_context": "    filename = os.path.join(tmpdir, \"test_file.txt\")\n    main.write_to_file(filename, data)\n    with open(filename, \"r\") as f:\n        written_data = f.read()\n    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\""
            },
            {
              "lineno": 238,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"",
              "linematch_context": "    assert written_data == data\n\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\""
            },
            {
              "lineno": 239,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(90) == \"A\"",
              "linematch_context": "\n#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\""
            },
            {
              "lineno": 240,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(100) == \"A\"",
              "linematch_context": "#calculate_grade\ndef test_grade_a():\n    \"\"\"Tests if calculate_grade returns 'A' for a score above or equal to 90.\"\"\"\n    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\""
            },
            {
              "lineno": 243,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"",
              "linematch_context": "    assert main.calculate_grade(90) == \"A\"\n    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\""
            },
            {
              "lineno": 244,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(80) == \"B\"",
              "linematch_context": "    assert main.calculate_grade(100) == \"A\"\n\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\""
            },
            {
              "lineno": 245,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(89) == \"B\"",
              "linematch_context": "\ndef test_grade_b():\n    \"\"\"Tests if calculate_grade returns 'B' for a score between 80 (inclusive) and 89 (exclusive).\"\"\"\n    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\""
            },
            {
              "lineno": 248,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"",
              "linematch_context": "    assert main.calculate_grade(80) == \"B\"\n    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\""
            },
            {
              "lineno": 249,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(70) == \"C\"",
              "linematch_context": "    assert main.calculate_grade(89) == \"B\"\n\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\""
            },
            {
              "lineno": 250,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(79) == \"C\"",
              "linematch_context": "\ndef test_grade_c():\n    \"\"\"Tests if calculate_grade returns 'C' for a score between 70 (inclusive) and 79 (exclusive).\"\"\"\n    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\""
            },
            {
              "lineno": 253,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"",
              "linematch_context": "    assert main.calculate_grade(70) == \"C\"\n    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():"
            },
            {
              "lineno": 254,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(69) == \"F\"",
              "linematch_context": "    assert main.calculate_grade(79) == \"C\"\n\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\""
            },
            {
              "lineno": 255,
              "coloffset": 4,
              "linematch": "assert main.calculate_grade(0) == \"F\"",
              "linematch_context": "\ndef test_grade_f():\n    \"\"\"Tests if calculate_grade returns 'F' for a score below 70.\"\"\"\n    assert main.calculate_grade(69) == \"F\"\n    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100"
            },
            {
              "lineno": 259,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"",
              "linematch_context": "    assert main.calculate_grade(0) == \"F\"\n\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n"
            },
            {
              "lineno": 260,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "\n#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():"
            },
            {
              "lineno": 261,
              "coloffset": 4,
              "linematch": "discount_rate = 0",
              "linematch_context": "#calculate_discount\ndef test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\""
            },
            {
              "lineno": 262,
              "coloffset": 4,
              "linematch": "loyalty_points = 0",
              "linematch_context": "def test_no_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100"
            },
            {
              "lineno": 263,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == price",
              "linematch_context": "    \"\"\"Tests if calculate_discount returns the original price without discount or loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0\n    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 266,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"",
              "linematch_context": "    loyalty_points = 0\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price"
            },
            {
              "lineno": 267,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == price\n\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n"
            },
            {
              "lineno": 268,
              "coloffset": 4,
              "linematch": "discount_rate = 0.1  # 10% discount",
              "linematch_context": "\ndef test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():"
            },
            {
              "lineno": 269,
              "coloffset": 4,
              "linematch": "loyalty_points = 0",
              "linematch_context": "def test_with_discount_no_loyalty():\n    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\""
            },
            {
              "lineno": 270,
              "coloffset": 4,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)",
              "linematch_context": "    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100"
            },
            {
              "lineno": 271,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 274,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"",
              "linematch_context": "    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price"
            },
            {
              "lineno": 275,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n"
            },
            {
              "lineno": 276,
              "coloffset": 4,
              "linematch": "discount_rate = 0.1  # 10% discount",
              "linematch_context": "\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():"
            },
            {
              "lineno": 277,
              "coloffset": 4,
              "linematch": "loyalty_points = 150",
              "linematch_context": "def test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\""
            },
            {
              "lineno": 278,
              "coloffset": 4,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)",
              "linematch_context": "    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100"
            },
            {
              "lineno": 279,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount"
            },
            {
              "lineno": 282,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"",
              "linematch_context": "    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price"
            },
            {
              "lineno": 283,
              "coloffset": 4,
              "linematch": "price = 100",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n"
            },
            {
              "lineno": 284,
              "coloffset": 4,
              "linematch": "discount_rate = 0.1  # 10% discount",
              "linematch_context": "\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function"
            },
            {
              "lineno": 285,
              "coloffset": 4,
              "linematch": "loyalty_points = 100",
              "linematch_context": "def test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():"
            },
            {
              "lineno": 286,
              "coloffset": 4,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)",
              "linematch_context": "    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\""
            },
            {
              "lineno": 287,
              "coloffset": 4,
              "linematch": "assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price",
              "linematch_context": "    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = ["
            },
            {
              "lineno": 291,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"",
              "linematch_context": "    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1"
            },
            {
              "lineno": 292,
              "coloffset": 4,
              "linematch": "data = [",
              "linematch_context": "\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied"
            },
            {
              "lineno": 295,
              "coloffset": 4,
              "linematch": "filtered_data = main.overly_complex_function(data)",
              "linematch_context": "    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\""
            },
            {
              "lineno": 296,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = ["
            },
            {
              "lineno": 297,
              "coloffset": 4,
              "linematch": "assert filtered_data[0]['discounted_price'] == 108  # Discount applied",
              "linematch_context": "        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},"
            },
            {
              "lineno": 300,
              "coloffset": 4,
              "linematch": "\"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"",
              "linematch_context": "    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1"
            },
            {
              "lineno": 301,
              "coloffset": 4,
              "linematch": "data = [",
              "linematch_context": "    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102"
            },
            {
              "lineno": 304,
              "coloffset": 4,
              "linematch": "filtered_data = main.overly_complex_function(data, loyalty_points=120)",
              "linematch_context": "    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():"
            },
            {
              "lineno": 305,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()"
            },
            {
              "lineno": 306,
              "coloffset": 4,
              "linematch": "assert filtered_data[0]['discounted_price'] == 102",
              "linematch_context": "        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\""
            },
            {
              "lineno": 310,
              "coloffset": 4,
              "linematch": "person = main.Person()",
              "linematch_context": "    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():"
            },
            {
              "lineno": 311,
              "coloffset": 4,
              "linematch": "assert person.odd_even(0) == \"even\"",
              "linematch_context": "\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()"
            },
            {
              "lineno": 312,
              "coloffset": 4,
              "linematch": "assert person.odd_even(1) == \"odd\"",
              "linematch_context": "#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 313,
              "coloffset": 4,
              "linematch": "assert person.odd_even(10) == \"even\"",
              "linematch_context": "def test_odd_even_valid_input():\n    person = main.Person()\n    assert person.odd_even(0) == \"even\"\n    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 316,
              "coloffset": 4,
              "linematch": "person = main.Person()",
              "linematch_context": "    assert person.odd_even(1) == \"odd\"\n    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            },
            {
              "lineno": 317,
              "coloffset": 4,
              "linematch": "assert person.odd_even(-1) == \"Invalid age\"",
              "linematch_context": "    assert person.odd_even(10) == \"even\"\n\ndef test_odd_even_invalid_input():\n    person = main.Person()\n    assert person.odd_even(-1) == \"Invalid age\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": true,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "\"\"\"This function calculates the area of a shape based on its dimensions.",
              "linematch_context": "\"\"\" Config Checks Project. \"\"\"\nfrom typing import Tuple\n\ndef calculate_area(shape,dimensions):\n    \"\"\"This function calculates the area of a shape based on its dimensions.\n\n    Contains Patterns:\n        - Double Nested If (DNI)\n        - Magic Number (MN)\n        - No exception type (EXC)"
            },
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "if shape == \"rectangle\":",
              "linematch_context": "        - No exception type (EXC)\n        - Missing type annotation (ANNOT)\n        - Unused Variables (UNUSED)\n    \"\"\"\n    if shape == \"rectangle\":\n        area = dimensions[0] * dimensions[1]\n        return area\n    else:\n        if shape == \"circle\":\n            radius = dimensions[0]"
            },
            {
              "lineno": 31,
              "coloffset": 8,
              "linematch": "self.name = name",
              "linematch_context": "    Contains Patterns:\n        - Explicit Return in __init__(RET)\n    \"\"\"\n    def __init__(self,name,email):\n        self.name = name\n        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'\ndef check_none(value):"
            },
            {
              "lineno": 32,
              "coloffset": 8,
              "linematch": "self.email = email",
              "linematch_context": "        - Explicit Return in __init__(RET)\n    \"\"\"\n    def __init__(self,name,email):\n        self.name = name\n        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'\ndef check_none(value):\n    \"\"\"This function checks if a value is None."
            },
            {
              "lineno": 33,
              "coloffset": 8,
              "linematch": "return",
              "linematch_context": "    \"\"\"\n    def __init__(self,name,email):\n        self.name = name\n        self.email = email\n        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'\ndef check_none(value):\n    \"\"\"This function checks if a value is None.\n"
            },
            {
              "lineno": 37,
              "coloffset": 4,
              "linematch": "\"\"\"This function checks if a value is None.",
              "linematch_context": "        return\n\n# TODO: Not passing pattern check id: 'NONE001', name: 'none-comparison'\ndef check_none(value):\n    \"\"\"This function checks if a value is None.\n\n    Contains Pattern:\n        - none comparision (NONE)\n    \"\"\"\n    if value is not None:"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "if value is not None:",
              "linematch_context": "\n    Contains Pattern:\n        - none comparision (NONE)\n    \"\"\"\n    if value is not None:\n        return False\n    return True\n\n# TODO: Not passing check id: 'EXC001', name: 'no-exception-type', pattern: './/FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]'\ndef handle_file(filename):"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "return True",
              "linematch_context": "        - none comparision (NONE)\n    \"\"\"\n    if value is not None:\n        return False\n    return True\n\n# TODO: Not passing check id: 'EXC001', name: 'no-exception-type', pattern: './/FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]'\ndef handle_file(filename):\n    \"\"\"\n    This function attempts to read a file but does not handle specific exception"
            },
            {
              "lineno": 48,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    return True\n\n# TODO: Not passing check id: 'EXC001', name: 'no-exception-type', pattern: './/FunctionDef//Try/ExceptHandler[not(ExceptHandler/type)]'\ndef handle_file(filename):\n    \"\"\"\n    This function attempts to read a file but does not handle specific exception\n\n    Contains Patterns:\n        - No Exception type (EXC)\n    \"\"\""
            },
            {
              "lineno": 54,
              "coloffset": 4,
              "linematch": "try:",
              "linematch_context": "\n    Contains Patterns:\n        - No Exception type (EXC)\n    \"\"\"\n    try:\n        with open(filename) as f:\n            data = f.read()\n    except IOError as e:\n        print(f\"Error reading file: {e}\")\n"
            },
            {
              "lineno": 61,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    except IOError as e:\n        print(f\"Error reading file: {e}\")\n\ndef is_valid(value):\n    \"\"\"\n    This function checks if a value is true.\n\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    \"\"\""
            },
            {
              "lineno": 67,
              "coloffset": 4,
              "linematch": "if value is True:",
              "linematch_context": "\n    Contains Patterns:\n        - Boolean Comparison (BOOL)\n    \"\"\"\n    if value is True:\n        return \"true value\"\n    else:\n        return \"false value\"\n\n# TODO: not passing check id: 'MVKL001', name: 'multi-value-key-literal', pattern: './/FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]"
            },
            {
              "lineno": 74,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "        return \"false value\"\n\n# TODO: not passing check id: 'MVKL001', name: 'multi-value-key-literal', pattern: './/FunctionDef/body/Assign/value/Dict/keys/Name[preceding-sibling::Name/@id= @id]\ndef get_user_data(user_data):\n    \"\"\"\n    This function retrieves a user's name from a dictionary using the keys() function\n\n    Contains Patterns:\n        - Key Function (KFUN)\n        - Single Nested If (SNI)"
            },
            {
              "lineno": 82,
              "coloffset": 4,
              "linematch": "if \"name\" in user_data.keys():",
              "linematch_context": "        - Key Function (KFUN)\n        - Single Nested If (SNI)\n        - Multi-value key literal (MVKL)\n    \"\"\"\n    if \"name\" in user_data.keys():\n        return user_data[\"name\"]\n    else:\n        return None\n\n"
            },
            {
              "lineno": 93,
              "coloffset": 4,
              "linematch": "\"\"\" Asserts on tuple.",
              "linematch_context": "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n\n# TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\ndef validate_data(data):\n    \"\"\" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    \"\"\"\n    assert type(data) == tuple, \"Data must be a tuple\"\n"
            },
            {
              "lineno": 97,
              "coloffset": 4,
              "linematch": "assert type(data) == tuple, \"Data must be a tuple\"",
              "linematch_context": "    \"\"\" Asserts on tuple.\n        Contains Patterns:\n        - Assertion (AT)\n    \"\"\"\n    assert type(data) == tuple, \"Data must be a tuple\"\n\n# TODO: not passing check id: 'LVITOI001', name: 'loop-variable-iterates-overrides-iterator', pattern: './/FunctionDef/body/For[target/Name/@id = iter/Name/@id]'\ndef modify_list(data):\n    \"\"\"\n    This function modifies a list by overiding its elements."
            },
            {
              "lineno": 101,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert type(data) == tuple, \"Data must be a tuple\"\n\n# TODO: not passing check id: 'LVITOI001', name: 'loop-variable-iterates-overrides-iterator', pattern: './/FunctionDef/body/For[target/Name/@id = iter/Name/@id]'\ndef modify_list(data):\n    \"\"\"\n    This function modifies a list by overiding its elements.\n\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)\n    \"\"\""
            },
            {
              "lineno": 107,
              "coloffset": 4,
              "linematch": "modified_data = []",
              "linematch_context": "\n    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)\n    \"\"\"\n    modified_data = []\n    for item in data:\n        item = \"Modified\"\n        modified_data.append(item)\n    return modified_data\n"
            },
            {
              "lineno": 108,
              "coloffset": 4,
              "linematch": "for item in data:",
              "linematch_context": "    Contains Patterns:\n    - Loop variable iterates and overrides iterator (LVITOI)\n    \"\"\"\n    modified_data = []\n    for item in data:\n        item = \"Modified\"\n        modified_data.append(item)\n    return modified_data\n\n# TODO: id: 'FLV001', name: 'function-uses-loop-variable', pattern: './/FunctionDef[body//comprehension/target/Name]'"
            },
            {
              "lineno": 111,
              "coloffset": 4,
              "linematch": "return modified_data",
              "linematch_context": "    modified_data = []\n    for item in data:\n        item = \"Modified\"\n        modified_data.append(item)\n    return modified_data\n\n# TODO: id: 'FLV001', name: 'function-uses-loop-variable', pattern: './/FunctionDef[body//comprehension/target/Name]'\ndef calculate_sum(numbers):\n    \"\"\"\n    This function calculate the sum of a integer list"
            },
            {
              "lineno": 115,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    return modified_data\n\n# TODO: id: 'FLV001', name: 'function-uses-loop-variable', pattern: './/FunctionDef[body//comprehension/target/Name]'\ndef calculate_sum(numbers):\n    \"\"\"\n    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)\"\"\"\n    total = 0"
            },
            {
              "lineno": 120,
              "coloffset": 4,
              "linematch": "total = 0",
              "linematch_context": "    This function calculate the sum of a integer list\n\n    Contains Patterns:\n        - Function using loop variable (FLV)\"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():"
            },
            {
              "lineno": 121,
              "coloffset": 4,
              "linematch": "for num in numbers:",
              "linematch_context": "\n    Contains Patterns:\n        - Function using loop variable (FLV)\"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\""
            },
            {
              "lineno": 123,
              "coloffset": 4,
              "linematch": "return total",
              "linematch_context": "        - Function using loop variable (FLV)\"\"\"\n    total = 0\n    for num in numbers:\n        total += num\n    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():"
            },
            {
              "lineno": 126,
              "coloffset": 4,
              "linematch": "\"\"\" Function with nested depth (ND)\"\"\"",
              "linematch_context": "        total += num\n    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n"
            },
            {
              "lineno": 127,
              "coloffset": 4,
              "linematch": "def nested_function_2():",
              "linematch_context": "    return total\n\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):"
            },
            {
              "lineno": 128,
              "coloffset": 8,
              "linematch": "def nested_function_3():",
              "linematch_context": "\ndef nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\""
            },
            {
              "lineno": 129,
              "coloffset": 12,
              "linematch": "pass",
              "linematch_context": "def nested_function_1():\n    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":"
            },
            {
              "lineno": 130,
              "coloffset": 4,
              "linematch": "nested_function_2()",
              "linematch_context": "    \"\"\" Function with nested depth (ND)\"\"\"\n    def nested_function_2():\n        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\""
            },
            {
              "lineno": 133,
              "coloffset": 4,
              "linematch": "\"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"",
              "linematch_context": "            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\""
            },
            {
              "lineno": 134,
              "coloffset": 4,
              "linematch": "if method == \"GET\":",
              "linematch_context": "    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:\n            return \"Processing POST request with data\"\n        else:"
            },
            {
              "lineno": 146,
              "coloffset": 4,
              "linematch": "\"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"",
              "linematch_context": "        return \"Unsupported method\"\n\n# TODO: not passing check id: 'CL002', name: 'nested-condition-loops', pattern: './/FunctionDef//if//For'\ndef filter_data(data, condition):\n    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)"
            },
            {
              "lineno": 147,
              "coloffset": 4,
              "linematch": "filtered_data = []",
              "linematch_context": "\n# TODO: not passing check id: 'CL002', name: 'nested-condition-loops', pattern: './/FunctionDef//if//For'\ndef filter_data(data, condition):\n    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data"
            },
            {
              "lineno": 148,
              "coloffset": 4,
              "linematch": "if condition:",
              "linematch_context": "# TODO: not passing check id: 'CL002', name: 'nested-condition-loops', pattern: './/FunctionDef//if//For'\ndef filter_data(data, condition):\n    \"\"\"Function with nested condition-loop if{for{}} (IFOR) and (VFF) for{if{}}\"\"\"\n    filtered_data = []\n    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n"
            },
            {
              "lineno": 152,
              "coloffset": 4,
              "linematch": "return filtered_data",
              "linematch_context": "    if condition:\n        for item in data:\n            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\"\n    This function classifies a number as positive, negative, or zero.\n"
            },
            {
              "lineno": 155,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\"\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)\n    \"\"\""
            },
            {
              "lineno": 161,
              "coloffset": 4,
              "linematch": "if number > 0:",
              "linematch_context": "\n    Contains Patterns:\n    - Nested condition (IFIF)\n    \"\"\"\n    if number > 0:\n        if number > 100:\n            return \"Large positive number\"\n        else:\n            return \"Positive number\"\n    else:"
            },
            {
              "lineno": 173,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "        else:\n            return \"Zero\"\n\ndef calculate_factorial(n, start=1):\n    \"\"\"\n    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    \"\"\"\n    if n < 0:"
            },
            {
              "lineno": 178,
              "coloffset": 4,
              "linematch": "if n < 0:",
              "linematch_context": "    This function calculates the factorial of a number n, optionally starting from a specific value.\n\n    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j"
            },
            {
              "lineno": 180,
              "coloffset": 4,
              "linematch": "factorial = 1",
              "linematch_context": "    Contains Pattern: Nested Loop-Conditions (FF) for{for{}}\n    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n"
            },
            {
              "lineno": 181,
              "coloffset": 4,
              "linematch": "for i in range(start, n + 1):",
              "linematch_context": "    \"\"\"\n    if n < 0:\n        raise ValueError(\"Factorial is not defined for negative numbers\")\n    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):"
            },
            {
              "lineno": 184,
              "coloffset": 4,
              "linematch": "return factorial",
              "linematch_context": "    factorial = 1\n    for i in range(start, n + 1):\n        for j in range(2, i + 1):\n            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    \"\"\"\n    This function validates user input for name and email. (Simple example)\n"
            },
            {
              "lineno": 187,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "            factorial *= j\n    return factorial\n\ndef validate_user_input(name, email):\n    \"\"\"\n    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    \"\"\"\n    assert name.isalpha(), \"Name must only contain letters\""
            },
            {
              "lineno": 192,
              "coloffset": 4,
              "linematch": "assert name.isalpha(), \"Name must only contain letters\"",
              "linematch_context": "    This function validates user input for name and email. (Simple example)\n\n    Contains Pattern: Number of Assertions (NOA)\n    \"\"\"\n    assert name.isalpha(), \"Name must only contain letters\"\n    assert \"@\" in email, \"Email must contain an '@' symbol\"\n    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):"
            },
            {
              "lineno": 193,
              "coloffset": 4,
              "linematch": "assert \"@\" in email, \"Email must contain an '@' symbol\"",
              "linematch_context": "\n    Contains Pattern: Number of Assertions (NOA)\n    \"\"\"\n    assert name.isalpha(), \"Name must only contain letters\"\n    assert \"@\" in email, \"Email must contain an '@' symbol\"\n    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):\n    \"\"\""
            },
            {
              "lineno": 194,
              "coloffset": 4,
              "linematch": "return True",
              "linematch_context": "    Contains Pattern: Number of Assertions (NOA)\n    \"\"\"\n    assert name.isalpha(), \"Name must only contain letters\"\n    assert \"@\" in email, \"Email must contain an '@' symbol\"\n    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):\n    \"\"\"\n    This function writes data to a file without using a context manager."
            },
            {
              "lineno": 198,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    return True\n\n# TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\ndef write_to_file(filename, data):\n    \"\"\"\n    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    \"\"\"\n    with open(filename, \"w\") as f:"
            },
            {
              "lineno": 203,
              "coloffset": 4,
              "linematch": "with open(filename, \"w\") as f:",
              "linematch_context": "    This function writes data to a file without using a context manager.\n\n    Contains Pattern: Not Using Context Manager (DUCM)\n    \"\"\"\n    with open(filename, \"w\") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    \"\"\"\n    This function calculates a letter grade based on a score. (Simple example)"
            },
            {
              "lineno": 207,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    with open(filename, \"w\") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    \"\"\"\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\"\n    if score >= 90:"
            },
            {
              "lineno": 212,
              "coloffset": 4,
              "linematch": "if score >= 90:",
              "linematch_context": "    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\"\n    if score >= 90:\n        return \"A\"\n    elif score >= 80:\n        return \"B\"\n    else:\n        if score >= 70:"
            },
            {
              "lineno": 224,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "            return \"F\"\n\n# TODO: id: 'COMPLEX001', name: 'complex-expressions', pattern: './/FunctionDef//BinOp[count(descendant::BinOp) > 2]\ndef calculate_discount(price, discount_rate, loyalty_points):\n    \"\"\"\n    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    \"\"\"\n    discount = price * discount_rate"
            },
            {
              "lineno": 229,
              "coloffset": 4,
              "linematch": "discount = price * discount_rate",
              "linematch_context": "    This function calculates a discounted price with complex logic.\n\n    Contains Pattern: Complex Expressions (COMPLEX)\n    \"\"\"\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n"
            },
            {
              "lineno": 230,
              "coloffset": 4,
              "linematch": "final_price = price - discount - (discount * 0.1)",
              "linematch_context": "\n    Contains Pattern: Complex Expressions (COMPLEX)\n    \"\"\"\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper"
            },
            {
              "lineno": 231,
              "coloffset": 4,
              "linematch": "if loyalty_points > 100:",
              "linematch_context": "    Contains Pattern: Complex Expressions (COMPLEX)\n    \"\"\"\n    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper\n"
            },
            {
              "lineno": 233,
              "coloffset": 4,
              "linematch": "return final_price",
              "linematch_context": "    discount = price * discount_rate\n    final_price = price - discount - (discount * 0.1)\n    if loyalty_points > 100:\n        final_price -= price * 0.05\n    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    \"\"\""
            },
            {
              "lineno": 238,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    \"\"\"\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals.\n        - Long Parameter List (LPL): Has 7 parameters."
            },
            {
              "lineno": 247,
              "coloffset": 4,
              "linematch": "filtered_data = []",
              "linematch_context": "        - Long Parameter List (LPL): Has 7 parameters.\n        - Deeply Nested Control Structures (DNCS): Uses nested ifs and fors.\n        - Magic Numbers: Uses hardcoded values (thresholds, discount rate).\n    \"\"\"\n    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate"
            },
            {
              "lineno": 249,
              "coloffset": 4,
              "linematch": "for item in data:",
              "linematch_context": "        - Magic Numbers: Uses hardcoded values (thresholds, discount rate).\n    \"\"\"\n    filtered_data = []\n\n    for item in data:\n        if item['value1'] > threshold1 and item['value2'] < threshold2:\n            if item['price'] > min_order_value:\n                discount = item['price'] * discount_rate\n                if loyalty_points > 100:\n                    discount += item['price'] * 0.05 "
            },
            {
              "lineno": 264,
              "coloffset": 4,
              "linematch": "if len(filtered_data) > 0:",
              "linematch_context": "            print(f\"Item {item['id']} does not meet the value thresholds\")\n        pass\n\n    # Deeply nested control structures (can be further nested for DNCS)\n    if len(filtered_data) > 0:\n        for item in filtered_data:\n            if item['discounted_price'] < 0:\n                item['discounted_price'] = 0\n        global_variable += 1\n    else:"
            },
            {
              "lineno": 272,
              "coloffset": 4,
              "linematch": "return filtered_data",
              "linematch_context": "        global_variable += 1\n    else:\n        print(\"No items met the filtering criteria.\")\n\n    return filtered_data\n\nclass Person:\n    \"\"\"A complex class\n    Contains Patterns:\n        - God Object (GO): Has many responsibilities."
            },
            {
              "lineno": 285,
              "coloffset": 8,
              "linematch": "self.name = name",
              "linematch_context": "        - Long Scope Chaining (LSC)\n        - Number of Conditions in Function (COND)\n    \"\"\"\n    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):"
            },
            {
              "lineno": 286,
              "coloffset": 8,
              "linematch": "self.age = age",
              "linematch_context": "        - Number of Conditions in Function (COND)\n    \"\"\"\n    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:"
            },
            {
              "lineno": 287,
              "coloffset": 8,
              "linematch": "self.ssn = ssn",
              "linematch_context": "    \"\"\"\n    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")"
            },
            {
              "lineno": 288,
              "coloffset": 8,
              "linematch": "self.email = email",
              "linematch_context": "    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):\n        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)"
            },
            {
              "lineno": 289,
              "coloffset": 8,
              "linematch": "self.address = address",
              "linematch_context": "        self.name = name\n        self.age = age\n        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:"
            },
            {
              "lineno": 291,
              "coloffset": 8,
              "linematch": "if not name:",
              "linematch_context": "        self.ssn = ssn\n        self.email = email\n        self.address = address\n    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")"
            },
            {
              "lineno": 294,
              "coloffset": 8,
              "linematch": "for char in name:",
              "linematch_context": "    def setName(self, name):\n        if not name:\n            raise ValueError(\"Name cannot be empty\")\n        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):"
            },
            {
              "lineno": 297,
              "coloffset": 8,
              "linematch": "self.name = name",
              "linematch_context": "        # Simulate unnecessary validation logic (for LM)\n        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(\"Age cannot be negative\")\n        try:"
            },
            {
              "lineno": 298,
              "coloffset": 8,
              "linematch": "return self",
              "linematch_context": "        for char in name:\n            if not char.isalpha() and not char.isspace():\n                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(\"Age cannot be negative\")\n        try:\n            self.age = int(age)  # Potential for type conversion errors"
            },
            {
              "lineno": 300,
              "coloffset": 8,
              "linematch": "if age < 0:",
              "linematch_context": "                raise ValueError(\"Name can only contain letters and spaces\")\n        self.name = name\n        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(\"Age cannot be negative\")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)"
            },
            {
              "lineno": 302,
              "coloffset": 8,
              "linematch": "try:",
              "linematch_context": "        return self\n    def setAge(self, age):\n        if age < 0:\n            raise ValueError(\"Age cannot be negative\")\n        try:\n            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn"
            },
            {
              "lineno": 307,
              "coloffset": 8,
              "linematch": "self.ssn = ssn",
              "linematch_context": "            self.age = int(age)  # Potential for type conversion errors\n        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):"
            },
            {
              "lineno": 308,
              "coloffset": 8,
              "linematch": "return self",
              "linematch_context": "        except ValueError:\n            pass  # Empty catch block (ECB)\n    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address"
            },
            {
              "lineno": 310,
              "coloffset": 8,
              "linematch": "self.email = email",
              "linematch_context": "    def setSSN(self, ssn):\n        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():"
            },
            {
              "lineno": 311,
              "coloffset": 8,
              "linematch": "return self",
              "linematch_context": "        self.ssn = ssn\n        return self\n    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()"
            },
            {
              "lineno": 313,
              "coloffset": 8,
              "linematch": "self.address = address",
              "linematch_context": "    def setEmail(self,email):\n        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p"
            },
            {
              "lineno": 314,
              "coloffset": 8,
              "linematch": "return self",
              "linematch_context": "        self.email = email\n        return self\n    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):"
            },
            {
              "lineno": 316,
              "coloffset": 8,
              "linematch": "p = Person()",
              "linematch_context": "    def setAddress(self,address):\n        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False"
            },
            {
              "lineno": 317,
              "coloffset": 8,
              "linematch": "p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")",
              "linematch_context": "        self.address = address\n        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:"
            },
            {
              "lineno": 318,
              "coloffset": 8,
              "linematch": "return p",
              "linematch_context": "        return self\n    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False"
            },
            {
              "lineno": 320,
              "coloffset": 8,
              "linematch": "if not self.ssn:",
              "linematch_context": "        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:"
            },
            {
              "lineno": 322,
              "coloffset": 8,
              "linematch": "if len(self.ssn) != 11:",
              "linematch_context": "        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:"
            },
            {
              "lineno": 324,
              "coloffset": 8,
              "linematch": "parts = self.ssn.split(\"-\")",
              "linematch_context": "        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])"
            },
            {
              "lineno": 325,
              "coloffset": 8,
              "linematch": "if len(parts) != 3:",
              "linematch_context": "            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])"
            },
            {
              "lineno": 327,
              "coloffset": 8,
              "linematch": "try:",
              "linematch_context": "            return False\n        parts = self.ssn.split(\"-\")\n        if len(parts) != 3:\n            return False\n        try:\n            int(parts[0])\n            int(parts[1])\n            int(parts[2])\n        except ValueError:\n            return False"
            },
            {
              "lineno": 333,
              "coloffset": 8,
              "linematch": "return True",
              "linematch_context": "            int(parts[1])\n            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:"
            },
            {
              "lineno": 335,
              "coloffset": 8,
              "linematch": "if age >= 0:",
              "linematch_context": "        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\"\n            elif age == 2:"
            },
            {
              "lineno": 395,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "\nglobal_var = 0  # This is a global variable\n\ndef calculate_something(data):\n    \"\"\"\n    This function demonstrates the use of a global variable.\n\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable 'global_var'.\n    \"\"\""
            },
            {
              "lineno": 401,
              "coloffset": 4,
              "linematch": "result = data['field1'] * data['field2'] * 2",
              "linematch_context": "\n    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable 'global_var'.\n    \"\"\"\n    result = data['field1'] * data['field2'] * 2\n    global_var += 1  # Modifying global variable\n    return result + global_var"
            },
            {
              "lineno": 402,
              "coloffset": 4,
              "linematch": "global_var += 1  # Modifying global variable",
              "linematch_context": "    Contains Pattern (and code smell):\n        - Use of Global Variables (UGV): Uses a global variable 'global_var'.\n    \"\"\"\n    result = data['field1'] * data['field2'] * 2\n    global_var += 1  # Modifying global variable\n    return result + global_var"
            },
            {
              "lineno": 403,
              "coloffset": 4,
              "linematch": "return result + global_var",
              "linematch_context": "        - Use of Global Variables (UGV): Uses a global variable 'global_var'.\n    \"\"\"\n    result = data['field1'] * data['field2'] * 2\n    global_var += 1  # Modifying global variable\n    return result + global_var"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "MRET001",
          "name": "multiple-returns-in-function",
          "description": "Detect functions with multiple return statements.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef[count(body//Return) > 2]",
          "passed": true,
          "matches": [
            {
              "lineno": 132,
              "coloffset": 0,
              "linematch": "def handle_request(method, data):",
              "linematch_context": "        def nested_function_3():\n            pass\n    nested_function_2()\n\ndef handle_request(method, data):\n    \"\"\"Function with multiple conditions (COND) and count method lines (CML)\"\"\"\n    if method == \"GET\":\n        return \"Processing GET request\"\n    elif method == \"POST\":\n        if data is not None:"
            },
            {
              "lineno": 154,
              "coloffset": 0,
              "linematch": "def classify_number(number):",
              "linematch_context": "            if item is not None:\n                filtered_data.append(item)\n    return filtered_data\n\ndef classify_number(number):\n    \"\"\"\n    This function classifies a number as positive, negative, or zero.\n\n    Contains Patterns:\n    - Nested condition (IFIF)"
            },
            {
              "lineno": 206,
              "coloffset": 0,
              "linematch": "def calculate_grade(score):",
              "linematch_context": "    \"\"\"\n    with open(filename, \"w\") as f:\n        f.write(data)\n\ndef calculate_grade(score):\n    \"\"\"\n    This function calculates a letter grade based on a score. (Simple example)\n\n    Contains Pattern: Multiple Returns in Function (MRET)\n    \"\"\""
            },
            {
              "lineno": 319,
              "coloffset": 4,
              "linematch": "def validate_ssn(self):",
              "linematch_context": "    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")"
            },
            {
              "lineno": 334,
              "coloffset": 4,
              "linematch": "def odd_even(self,age):",
              "linematch_context": "            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/test/test_dummy.py",
        "check": {
          "id": "COMPLEX001",
          "name": "complex-expressions",
          "description": "Detect complex expressions with multiple operators.",
          "min": 1,
          "max": 500,
          "pattern": ".//FunctionDef//BinOp[count(descendant::BinOp) > 2]",
          "passed": true,
          "matches": [
            {
              "lineno": 270,
              "coloffset": 21,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)",
              "linematch_context": "    \"\"\"Tests if calculate_discount applies the discount correctly without loyalty points.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 0\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_with_discount_and_loyalty():\n    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100"
            },
            {
              "lineno": 278,
              "coloffset": 21,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)",
              "linematch_context": "    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100"
            },
            {
              "lineno": 278,
              "coloffset": 21,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)",
              "linematch_context": "    \"\"\"Tests if calculate_discount applies both discount and loyalty bonus.\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 150\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1) - (price * 0.05)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\ndef test_edge_case_loyalty_points():\n    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100"
            },
            {
              "lineno": 286,
              "coloffset": 21,
              "linematch": "expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)",
              "linematch_context": "    \"\"\"Tests if calculate_discount handles loyalty points exactly at the threshold (100).\"\"\"\n    price = 100\n    discount_rate = 0.1  # 10% discount\n    loyalty_points = 100\n    expected_price = price - (price * discount_rate) - ((price * discount_rate) * 0.1)\n    assert main.calculate_discount(price, discount_rate, loyalty_points) == expected_price\n\n#overly_complex_function\ndef test_valid_item_above_min_order():\n    \"\"\"Tests if the function filters an item above min_order_value and applies discount.\"\"\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/test/test_dummy.py",
        "check": {
          "id": "UNUSED001",
          "name": "unused-variables",
          "description": "Detect variables that are defined but not used.",
          "min": null,
          "max": null,
          "pattern": "//FunctionDef[starts-with(@name, \"test_\")]//Assert[count(.//Call[func/Name]) > 0]",
          "passed": true,
          "matches": [
            {
              "lineno": 296,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 108  # Discount applied\n\ndef test_valid_item_with_loyalty_discount():\n    \"\"\"Tests if the function applies loyalty discount for high loyalty_points.\"\"\"\n    data = ["
            },
            {
              "lineno": 305,
              "coloffset": 4,
              "linematch": "assert len(filtered_data) == 1",
              "linematch_context": "    data = [\n        {'id': 1, 'value1': 15, 'value2': 3, 'price': 120},\n    ]\n    filtered_data = main.overly_complex_function(data, loyalty_points=120)\n    assert len(filtered_data) == 1\n    assert filtered_data[0]['discounted_price'] == 102\n\n#class Person\ndef test_odd_even_valid_input():\n    person = main.Person()"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "F027",
          "name": "high-cyclomatic-complexity",
          "description": "Methods with high cyclomatic complexity are hard to test and understand.",
          "min": null,
          "max": null,
          "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//And | .//Or) > 10]",
          "passed": true,
          "matches": [
            {
              "lineno": 334,
              "coloffset": 4,
              "linematch": "def odd_even(self,age):",
              "linematch_context": "            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "F030",
          "name": "deeply-nested-control-structures",
          "description": "Deeply nested control structures make the code hard to read and understand.",
          "min": null,
          "max": null,
          "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
          "passed": true,
          "matches": [
            {
              "lineno": 237,
              "coloffset": 0,
              "linematch": "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):",
              "linematch_context": "    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    \"\"\"\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals."
            },
            {
              "lineno": 319,
              "coloffset": 4,
              "linematch": "def validate_ssn(self):",
              "linematch_context": "    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")"
            },
            {
              "lineno": 334,
              "coloffset": 4,
              "linematch": "def odd_even(self,age):",
              "linematch_context": "            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/dummy_test/src/main.py",
        "check": {
          "id": "P005",
          "name": "long-scope-chaining",
          "description": "A multiply-nested method or function.",
          "min": null,
          "max": null,
          "pattern": ".//FunctionDef[count(.//If | .//For | .//While | .//Try) > 3]",
          "passed": true,
          "matches": [
            {
              "lineno": 237,
              "coloffset": 0,
              "linematch": "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):",
              "linematch_context": "    return final_price\n\n# JSS paper\n\ndef overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n    \"\"\"\n    This function demonstrates a combination of code smells for demonstration purposes.\n\n    Contains Patterns:\n        - High Cyclomatic Complexity (HCC): Uses multiple nested conditionals."
            },
            {
              "lineno": 319,
              "coloffset": 4,
              "linematch": "def validate_ssn(self):",
              "linematch_context": "    def create_person():\n        p = Person()\n        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")\n        return p\n    def validate_ssn(self):\n        if not self.ssn:\n            return False\n        if len(self.ssn) != 11:\n            return False\n        parts = self.ssn.split(\"-\")"
            },
            {
              "lineno": 334,
              "coloffset": 4,
              "linematch": "def odd_even(self,age):",
              "linematch_context": "            int(parts[2])\n        except ValueError:\n            return False\n        return True\n    def odd_even(self,age):\n        if age >= 0:\n            if age == 0:\n                return \"even\"\n            elif age == 1:\n                return \"odd\""
            }
          ]
        }
      }
    ]
  },
  "mutmut_result": {
    "disabled": 0,
    "errors": 0,
    "failures": 35,
    "tests": 288,
    "time": 0,
    "testsuite": [
      {
        "disabled": 0,
        "errors": 0,
        "failures": 35,
        "name": "mutmut",
        "skipped": 0,
        "tests": 288,
        "time": 0,
        "testcase": [
          {
            "name": "Mutant #1",
            "file": "src/main.py",
            "line": 14,
            "system-out": [
              "    if shape == \"rectangle\":"
            ]
          },
          {
            "name": "Mutant #2",
            "file": "src/main.py",
            "line": 14,
            "system-out": [
              "    if shape == \"rectangle\":"
            ]
          },
          {
            "name": "Mutant #3",
            "file": "src/main.py",
            "line": 15,
            "system-out": [
              "        area = dimensions[0] * dimensions[1]"
            ]
          },
          {
            "name": "Mutant #4",
            "file": "src/main.py",
            "line": 15,
            "system-out": [
              "        area = dimensions[0] * dimensions[1]"
            ]
          },
          {
            "name": "Mutant #5",
            "file": "src/main.py",
            "line": 15,
            "system-out": [
              "        area = dimensions[0] * dimensions[1]"
            ]
          },
          {
            "name": "Mutant #6",
            "file": "src/main.py",
            "line": 15,
            "system-out": [
              "        area = dimensions[0] * dimensions[1]"
            ]
          },
          {
            "name": "Mutant #7",
            "file": "src/main.py",
            "line": 18,
            "system-out": [
              "        if shape == \"circle\":"
            ]
          },
          {
            "name": "Mutant #8",
            "file": "src/main.py",
            "line": 18,
            "system-out": [
              "        if shape == \"circle\":"
            ]
          },
          {
            "name": "Mutant #9",
            "file": "src/main.py",
            "line": 19,
            "system-out": [
              "            radius = dimensions[0]"
            ]
          },
          {
            "name": "Mutant #10",
            "file": "src/main.py",
            "line": 19,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -16,7 +16,7 @@\n         return area\n     else:\n         if shape == \"circle\":\n-            radius = dimensions[0]\n+            radius = None\n             return 3.14 * dimensions[0] ** 2\n         else:\n             raise ValueError(\"Unsupported shape\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            radius = dimensions[0]"
            ]
          },
          {
            "name": "Mutant #11",
            "file": "src/main.py",
            "line": 20,
            "system-out": [
              "            return 3.14 * dimensions[0] ** 2"
            ]
          },
          {
            "name": "Mutant #12",
            "file": "src/main.py",
            "line": 20,
            "system-out": [
              "            return 3.14 * dimensions[0] ** 2"
            ]
          },
          {
            "name": "Mutant #13",
            "file": "src/main.py",
            "line": 20,
            "system-out": [
              "            return 3.14 * dimensions[0] ** 2"
            ]
          },
          {
            "name": "Mutant #14",
            "file": "src/main.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -17,7 +17,7 @@\n     else:\n         if shape == \"circle\":\n             radius = dimensions[0]\n-            return 3.14 * dimensions[0] ** 2\n+            return 3.14 * dimensions[0] * 2\n         else:\n             raise ValueError(\"Unsupported shape\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            return 3.14 * dimensions[0] ** 2"
            ]
          },
          {
            "name": "Mutant #15",
            "file": "src/main.py",
            "line": 20,
            "system-out": [
              "            return 3.14 * dimensions[0] ** 2"
            ]
          },
          {
            "name": "Mutant #16",
            "file": "src/main.py",
            "line": 22,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -19,7 +19,7 @@\n             radius = dimensions[0]\n             return 3.14 * dimensions[0] ** 2\n         else:\n-            raise ValueError(\"Unsupported shape\")\n+            raise ValueError(\"XXUnsupported shapeXX\")\n \n class User:\n     \"\"\"This class represents a user with a name and email address.\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            raise ValueError(\"Unsupported shape\")"
            ]
          },
          {
            "name": "Mutant #17",
            "file": "src/main.py",
            "line": 31,
            "system-out": [
              "        self.name = name"
            ]
          },
          {
            "name": "Mutant #18",
            "file": "src/main.py",
            "line": 32,
            "system-out": [
              "        self.email = email"
            ]
          },
          {
            "name": "Mutant #21",
            "file": "src/main.py",
            "line": 56,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -53,7 +53,7 @@\n     \"\"\"\n     try:\n         with open(filename) as f:\n-            data = f.read()\n+            data = None\n     except IOError as e:\n         print(f\"Error reading file: {e}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            data = f.read()"
            ]
          },
          {
            "name": "Mutant #23",
            "file": "src/main.py",
            "line": 67,
            "system-out": [
              "    if value is True:"
            ]
          },
          {
            "name": "Mutant #24",
            "file": "src/main.py",
            "line": 67,
            "system-out": [
              "    if value is True:"
            ]
          },
          {
            "name": "Mutant #25",
            "file": "src/main.py",
            "line": 68,
            "system-out": [
              "        return \"true value\""
            ]
          },
          {
            "name": "Mutant #26",
            "file": "src/main.py",
            "line": 70,
            "system-out": [
              "        return \"false value\""
            ]
          },
          {
            "name": "Mutant #34",
            "file": "src/main.py",
            "line": 83,
            "system-out": [
              "        return user_data[\"name\"]"
            ]
          },
          {
            "name": "Mutant #35",
            "file": "src/main.py",
            "line": 89,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -86,7 +86,7 @@\n \n \n # Multi-value key literal (MVKL)- outside function scope\n-user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n+user_data = {\"XXnameXX\": \"Alice\", \"name\":\"Bob\"}\n \n # TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\n def validate_data(data):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            ]
          },
          {
            "name": "Mutant #36",
            "file": "src/main.py",
            "line": 89,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -86,7 +86,7 @@\n \n \n # Multi-value key literal (MVKL)- outside function scope\n-user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n+user_data = {\"name\": \"XXAliceXX\", \"name\":\"Bob\"}\n \n # TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\n def validate_data(data):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            ]
          },
          {
            "name": "Mutant #37",
            "file": "src/main.py",
            "line": 89,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -86,7 +86,7 @@\n \n \n # Multi-value key literal (MVKL)- outside function scope\n-user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n+user_data = {\"name\": \"Alice\", \"XXnameXX\":\"Bob\"}\n \n # TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\n def validate_data(data):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            ]
          },
          {
            "name": "Mutant #38",
            "file": "src/main.py",
            "line": 89,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -86,7 +86,7 @@\n \n \n # Multi-value key literal (MVKL)- outside function scope\n-user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n+user_data = {\"name\": \"Alice\", \"name\":\"XXBobXX\"}\n \n # TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\n def validate_data(data):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            ]
          },
          {
            "name": "Mutant #39",
            "file": "src/main.py",
            "line": 89,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -86,7 +86,7 @@\n \n \n # Multi-value key literal (MVKL)- outside function scope\n-user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}\n+user_data = None\n \n # TODO: not passing check id: 'AT001', name: 'assert-tuple', pattern: './/FunctionDef[./body/Assert/test/Tuple]'\n def validate_data(data):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "user_data = {\"name\": \"Alice\", \"name\":\"Bob\"}"
            ]
          },
          {
            "name": "Mutant #41",
            "file": "src/main.py",
            "line": 109,
            "system-out": [
              "        item = \"Modified\""
            ]
          },
          {
            "name": "Mutant #42",
            "file": "src/main.py",
            "line": 109,
            "system-out": [
              "        item = \"Modified\""
            ]
          },
          {
            "name": "Mutant #43",
            "file": "src/main.py",
            "line": 120,
            "system-out": [
              "    total = 0"
            ]
          },
          {
            "name": "Mutant #44",
            "file": "src/main.py",
            "line": 120,
            "system-out": [
              "    total = 0"
            ]
          },
          {
            "name": "Mutant #45",
            "file": "src/main.py",
            "line": 122,
            "system-out": [
              "        total += num"
            ]
          },
          {
            "name": "Mutant #46",
            "file": "src/main.py",
            "line": 122,
            "system-out": [
              "        total += num"
            ]
          },
          {
            "name": "Mutant #47",
            "file": "src/main.py",
            "line": 134,
            "system-out": [
              "    if method == \"GET\":"
            ]
          },
          {
            "name": "Mutant #48",
            "file": "src/main.py",
            "line": 134,
            "system-out": [
              "    if method == \"GET\":"
            ]
          },
          {
            "name": "Mutant #49",
            "file": "src/main.py",
            "line": 135,
            "system-out": [
              "        return \"Processing GET request\""
            ]
          },
          {
            "name": "Mutant #50",
            "file": "src/main.py",
            "line": 136,
            "system-out": [
              "    elif method == \"POST\":"
            ]
          },
          {
            "name": "Mutant #51",
            "file": "src/main.py",
            "line": 136,
            "system-out": [
              "    elif method == \"POST\":"
            ]
          },
          {
            "name": "Mutant #52",
            "file": "src/main.py",
            "line": 137,
            "system-out": [
              "        if data is not None:"
            ]
          },
          {
            "name": "Mutant #53",
            "file": "src/main.py",
            "line": 138,
            "system-out": [
              "            return \"Processing POST request with data\""
            ]
          },
          {
            "name": "Mutant #54",
            "file": "src/main.py",
            "line": 140,
            "system-out": [
              "            return \"Processing POST request without data\""
            ]
          },
          {
            "name": "Mutant #55",
            "file": "src/main.py",
            "line": 142,
            "system-out": [
              "        return \"Unsupported method\""
            ]
          },
          {
            "name": "Mutant #56",
            "file": "src/main.py",
            "line": 147,
            "system-out": [
              "    filtered_data = []"
            ]
          },
          {
            "name": "Mutant #58",
            "file": "src/main.py",
            "line": 161,
            "system-out": [
              "    if number > 0:"
            ]
          },
          {
            "name": "Mutant #59",
            "file": "src/main.py",
            "line": 161,
            "system-out": [
              "    if number > 0:"
            ]
          },
          {
            "name": "Mutant #60",
            "file": "src/main.py",
            "line": 162,
            "system-out": [
              "        if number > 100:"
            ]
          },
          {
            "name": "Mutant #61",
            "file": "src/main.py",
            "line": 162,
            "system-out": [
              "        if number > 100:"
            ]
          },
          {
            "name": "Mutant #62",
            "file": "src/main.py",
            "line": 163,
            "system-out": [
              "            return \"Large positive number\""
            ]
          },
          {
            "name": "Mutant #63",
            "file": "src/main.py",
            "line": 165,
            "system-out": [
              "            return \"Positive number\""
            ]
          },
          {
            "name": "Mutant #64",
            "file": "src/main.py",
            "line": 167,
            "system-out": [
              "        if number < 0:"
            ]
          },
          {
            "name": "Mutant #65",
            "file": "src/main.py",
            "line": 167,
            "system-out": [
              "        if number < 0:"
            ]
          },
          {
            "name": "Mutant #66",
            "file": "src/main.py",
            "line": 168,
            "system-out": [
              "            return \"Negative number\""
            ]
          },
          {
            "name": "Mutant #67",
            "file": "src/main.py",
            "line": 170,
            "system-out": [
              "            return \"Zero\""
            ]
          },
          {
            "name": "Mutant #68",
            "file": "src/main.py",
            "line": 172,
            "system-out": [
              "def calculate_factorial(n, start=1):"
            ]
          },
          {
            "name": "Mutant #69",
            "file": "src/main.py",
            "line": 178,
            "system-out": [
              "    if n < 0:"
            ]
          },
          {
            "name": "Mutant #70",
            "file": "src/main.py",
            "line": 178,
            "system-out": [
              "    if n < 0:"
            ]
          },
          {
            "name": "Mutant #71",
            "file": "src/main.py",
            "line": 179,
            "system-out": [
              "        raise ValueError(\"Factorial is not defined for negative numbers\")"
            ]
          },
          {
            "name": "Mutant #72",
            "file": "src/main.py",
            "line": 180,
            "system-out": [
              "    factorial = 1"
            ]
          },
          {
            "name": "Mutant #73",
            "file": "src/main.py",
            "line": 180,
            "system-out": [
              "    factorial = 1"
            ]
          },
          {
            "name": "Mutant #74",
            "file": "src/main.py",
            "line": 181,
            "system-out": [
              "    for i in range(start, n + 1):"
            ]
          },
          {
            "name": "Mutant #75",
            "file": "src/main.py",
            "line": 181,
            "system-out": [
              "    for i in range(start, n + 1):"
            ]
          },
          {
            "name": "Mutant #79",
            "file": "src/main.py",
            "line": 183,
            "system-out": [
              "            factorial *= j"
            ]
          },
          {
            "name": "Mutant #80",
            "file": "src/main.py",
            "line": 183,
            "system-out": [
              "            factorial *= j"
            ]
          },
          {
            "name": "Mutant #81",
            "file": "src/main.py",
            "line": 192,
            "system-out": [
              "    assert name.isalpha(), \"Name must only contain letters\""
            ]
          },
          {
            "name": "Mutant #82",
            "file": "src/main.py",
            "line": 193,
            "system-out": [
              "    assert \"@\" in email, \"Email must contain an '@' symbol\""
            ]
          },
          {
            "name": "Mutant #83",
            "file": "src/main.py",
            "line": 193,
            "system-out": [
              "    assert \"@\" in email, \"Email must contain an '@' symbol\""
            ]
          },
          {
            "name": "Mutant #84",
            "file": "src/main.py",
            "line": 193,
            "system-out": [
              "    assert \"@\" in email, \"Email must contain an '@' symbol\""
            ]
          },
          {
            "name": "Mutant #85",
            "file": "src/main.py",
            "line": 194,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -191,7 +191,7 @@\n     \"\"\"\n     assert name.isalpha(), \"Name must only contain letters\"\n     assert \"@\" in email, \"Email must contain an '@' symbol\"\n-    return True\n+    return False\n \n # TODO: not passing check id: 'DUCM001', name: 'not-using-context-manager', pattern: './/FunctionDef//*[starts-with(., \"with open\")]'\n def write_to_file(filename, data):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return True"
            ]
          },
          {
            "name": "Mutant #88",
            "file": "src/main.py",
            "line": 212,
            "system-out": [
              "    if score >= 90:"
            ]
          },
          {
            "name": "Mutant #89",
            "file": "src/main.py",
            "line": 212,
            "system-out": [
              "    if score >= 90:"
            ]
          },
          {
            "name": "Mutant #90",
            "file": "src/main.py",
            "line": 213,
            "system-out": [
              "        return \"A\""
            ]
          },
          {
            "name": "Mutant #91",
            "file": "src/main.py",
            "line": 214,
            "system-out": [
              "    elif score >= 80:"
            ]
          },
          {
            "name": "Mutant #92",
            "file": "src/main.py",
            "line": 214,
            "system-out": [
              "    elif score >= 80:"
            ]
          },
          {
            "name": "Mutant #93",
            "file": "src/main.py",
            "line": 215,
            "system-out": [
              "        return \"B\""
            ]
          },
          {
            "name": "Mutant #94",
            "file": "src/main.py",
            "line": 217,
            "system-out": [
              "        if score >= 70:"
            ]
          },
          {
            "name": "Mutant #95",
            "file": "src/main.py",
            "line": 217,
            "system-out": [
              "        if score >= 70:"
            ]
          },
          {
            "name": "Mutant #96",
            "file": "src/main.py",
            "line": 218,
            "system-out": [
              "            return \"C\""
            ]
          },
          {
            "name": "Mutant #97",
            "file": "src/main.py",
            "line": 220,
            "system-out": [
              "            return \"F\""
            ]
          },
          {
            "name": "Mutant #98",
            "file": "src/main.py",
            "line": 229,
            "system-out": [
              "    discount = price * discount_rate"
            ]
          },
          {
            "name": "Mutant #99",
            "file": "src/main.py",
            "line": 229,
            "system-out": [
              "    discount = price * discount_rate"
            ]
          },
          {
            "name": "Mutant #100",
            "file": "src/main.py",
            "line": 231,
            "system-out": [
              "    if loyalty_points > 100:"
            ]
          },
          {
            "name": "Mutant #101",
            "file": "src/main.py",
            "line": 231,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -228,7 +228,7 @@\n     \"\"\"\n     discount = price * discount_rate\n     final_price = price - discount - (discount * 0.1)\n-    if loyalty_points > 100:\n+    if loyalty_points > 101:\n         final_price -= price * 0.05\n     return final_price\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if loyalty_points > 100:"
            ]
          },
          {
            "name": "Mutant #111",
            "file": "src/main.py",
            "line": 237,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=11, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n     \"\"\"\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):"
            ]
          },
          {
            "name": "Mutant #112",
            "file": "src/main.py",
            "line": 237,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=6, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n     \"\"\"\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):"
            ]
          },
          {
            "name": "Mutant #113",
            "file": "src/main.py",
            "line": 237,
            "system-out": [
              "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):"
            ]
          },
          {
            "name": "Mutant #114",
            "file": "src/main.py",
            "line": 237,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=1, min_order_value=100, global_variable=1):\n     \"\"\"\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):"
            ]
          },
          {
            "name": "Mutant #115",
            "file": "src/main.py",
            "line": 237,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=101, global_variable=1):\n     \"\"\"\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):"
            ]
          },
          {
            "name": "Mutant #116",
            "file": "src/main.py",
            "line": 237,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -234,7 +234,7 @@\n \n # JSS paper\n \n-def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):\n+def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=2):\n     \"\"\"\n     This function demonstrates a combination of code smells for demonstration purposes.\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def overly_complex_function(data, threshold1=10, threshold2=5, discount_rate=0.1, loyalty_points=0, min_order_value=100, global_variable=1):"
            ]
          },
          {
            "name": "Mutant #117",
            "file": "src/main.py",
            "line": 247,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -244,7 +244,7 @@\n         - Deeply Nested Control Structures (DNCS): Uses nested ifs and fors.\n         - Magic Numbers: Uses hardcoded values (thresholds, discount rate).\n     \"\"\"\n-    filtered_data = []\n+    filtered_data = None\n \n     for item in data:\n         if item['value1'] > threshold1 and item['value2'] < threshold2:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    filtered_data = []"
            ]
          },
          {
            "name": "Mutant #118",
            "file": "src/main.py",
            "line": 250,
            "system-out": [
              "        if item['value1'] > threshold1 and item['value2'] < threshold2:"
            ]
          },
          {
            "name": "Mutant #119",
            "file": "src/main.py",
            "line": 250,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -247,7 +247,7 @@\n     filtered_data = []\n \n     for item in data:\n-        if item['value1'] > threshold1 and item['value2'] < threshold2:\n+        if item['value1'] >= threshold1 and item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if item['value1'] > threshold1 and item['value2'] < threshold2:"
            ]
          },
          {
            "name": "Mutant #120",
            "file": "src/main.py",
            "line": 250,
            "system-out": [
              "        if item['value1'] > threshold1 and item['value2'] < threshold2:"
            ]
          },
          {
            "name": "Mutant #121",
            "file": "src/main.py",
            "line": 250,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -247,7 +247,7 @@\n     filtered_data = []\n \n     for item in data:\n-        if item['value1'] > threshold1 and item['value2'] < threshold2:\n+        if item['value1'] > threshold1 and item['value2'] <= threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if item['value1'] > threshold1 and item['value2'] < threshold2:"
            ]
          },
          {
            "name": "Mutant #122",
            "file": "src/main.py",
            "line": 250,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -247,7 +247,7 @@\n     filtered_data = []\n \n     for item in data:\n-        if item['value1'] > threshold1 and item['value2'] < threshold2:\n+        if item['value1'] > threshold1 or item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if item['value1'] > threshold1 and item['value2'] < threshold2:"
            ]
          },
          {
            "name": "Mutant #123",
            "file": "src/main.py",
            "line": 251,
            "system-out": [
              "            if item['price'] > min_order_value:"
            ]
          },
          {
            "name": "Mutant #124",
            "file": "src/main.py",
            "line": 251,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -248,7 +248,7 @@\n \n     for item in data:\n         if item['value1'] > threshold1 and item['value2'] < threshold2:\n-            if item['price'] > min_order_value:\n+            if item['price'] >= min_order_value:\n                 discount = item['price'] * discount_rate\n                 if loyalty_points > 100:\n                     discount += item['price'] * 0.05 \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            if item['price'] > min_order_value:"
            ]
          },
          {
            "name": "Mutant #125",
            "file": "src/main.py",
            "line": 252,
            "system-out": [
              "                discount = item['price'] * discount_rate"
            ]
          },
          {
            "name": "Mutant #126",
            "file": "src/main.py",
            "line": 252,
            "system-out": [
              "                discount = item['price'] * discount_rate"
            ]
          },
          {
            "name": "Mutant #127",
            "file": "src/main.py",
            "line": 252,
            "system-out": [
              "                discount = item['price'] * discount_rate"
            ]
          },
          {
            "name": "Mutant #128",
            "file": "src/main.py",
            "line": 253,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -250,7 +250,7 @@\n         if item['value1'] > threshold1 and item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n-                if loyalty_points > 100:\n+                if loyalty_points >= 100:\n                     discount += item['price'] * 0.05 \n                 item['discounted_price'] = item['price'] - discount\n                 filtered_data.append(item)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                if loyalty_points > 100:"
            ]
          },
          {
            "name": "Mutant #129",
            "file": "src/main.py",
            "line": 253,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -250,7 +250,7 @@\n         if item['value1'] > threshold1 and item['value2'] < threshold2:\n             if item['price'] > min_order_value:\n                 discount = item['price'] * discount_rate\n-                if loyalty_points > 100:\n+                if loyalty_points > 101:\n                     discount += item['price'] * 0.05 \n                 item['discounted_price'] = item['price'] - discount\n                 filtered_data.append(item)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                if loyalty_points > 100:"
            ]
          },
          {
            "name": "Mutant #130",
            "file": "src/main.py",
            "line": 254,
            "system-out": [
              "                    discount += item['price'] * 0.05 "
            ]
          },
          {
            "name": "Mutant #131",
            "file": "src/main.py",
            "line": 254,
            "system-out": [
              "                    discount += item['price'] * 0.05 "
            ]
          },
          {
            "name": "Mutant #132",
            "file": "src/main.py",
            "line": 254,
            "system-out": [
              "                    discount += item['price'] * 0.05 "
            ]
          },
          {
            "name": "Mutant #133",
            "file": "src/main.py",
            "line": 254,
            "system-out": [
              "                    discount += item['price'] * 0.05 "
            ]
          },
          {
            "name": "Mutant #134",
            "file": "src/main.py",
            "line": 254,
            "system-out": [
              "                    discount += item['price'] * 0.05 "
            ]
          },
          {
            "name": "Mutant #135",
            "file": "src/main.py",
            "line": 255,
            "system-out": [
              "                item['discounted_price'] = item['price'] - discount"
            ]
          },
          {
            "name": "Mutant #136",
            "file": "src/main.py",
            "line": 255,
            "system-out": [
              "                item['discounted_price'] = item['price'] - discount"
            ]
          },
          {
            "name": "Mutant #137",
            "file": "src/main.py",
            "line": 255,
            "system-out": [
              "                item['discounted_price'] = item['price'] - discount"
            ]
          },
          {
            "name": "Mutant #138",
            "file": "src/main.py",
            "line": 255,
            "system-out": [
              "                item['discounted_price'] = item['price'] - discount"
            ]
          },
          {
            "name": "Mutant #139",
            "file": "src/main.py",
            "line": 258,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -255,7 +255,7 @@\n                 item['discounted_price'] = item['price'] - discount\n                 filtered_data.append(item)\n             else:\n-                print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")\n+                print(f\"Order value for item {item['XXidXX']} is below minimum ({min_order_value})\")\n         else:\n             print(f\"Item {item['id']} does not meet the value thresholds\")\n         pass\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")"
            ]
          },
          {
            "name": "Mutant #140",
            "file": "src/main.py",
            "line": 258,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -255,7 +255,7 @@\n                 item['discounted_price'] = item['price'] - discount\n                 filtered_data.append(item)\n             else:\n-                print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")\n+                print(f\"XXOrder value for item {item['id']} is below minimum ({min_order_value})XX\")\n         else:\n             print(f\"Item {item['id']} does not meet the value thresholds\")\n         pass\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")"
            ]
          },
          {
            "name": "Mutant #141",
            "file": "src/main.py",
            "line": 260,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -257,7 +257,7 @@\n             else:\n                 print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")\n         else:\n-            print(f\"Item {item['id']} does not meet the value thresholds\")\n+            print(f\"Item {item['XXidXX']} does not meet the value thresholds\")\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            print(f\"Item {item['id']} does not meet the value thresholds\")"
            ]
          },
          {
            "name": "Mutant #142",
            "file": "src/main.py",
            "line": 260,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -257,7 +257,7 @@\n             else:\n                 print(f\"Order value for item {item['id']} is below minimum ({min_order_value})\")\n         else:\n-            print(f\"Item {item['id']} does not meet the value thresholds\")\n+            print(f\"XXItem {item['id']} does not meet the value thresholdsXX\")\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            print(f\"Item {item['id']} does not meet the value thresholds\")"
            ]
          },
          {
            "name": "Mutant #143",
            "file": "src/main.py",
            "line": 264,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -261,7 +261,7 @@\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n-    if len(filtered_data) > 0:\n+    if len(filtered_data) >= 0:\n         for item in filtered_data:\n             if item['discounted_price'] < 0:\n                 item['discounted_price'] = 0\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(filtered_data) > 0:"
            ]
          },
          {
            "name": "Mutant #144",
            "file": "src/main.py",
            "line": 264,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -261,7 +261,7 @@\n         pass\n \n     # Deeply nested control structures (can be further nested for DNCS)\n-    if len(filtered_data) > 0:\n+    if len(filtered_data) > 1:\n         for item in filtered_data:\n             if item['discounted_price'] < 0:\n                 item['discounted_price'] = 0\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(filtered_data) > 0:"
            ]
          },
          {
            "name": "Mutant #145",
            "file": "src/main.py",
            "line": 266,
            "system-out": [
              "            if item['discounted_price'] < 0:"
            ]
          },
          {
            "name": "Mutant #146",
            "file": "src/main.py",
            "line": 266,
            "system-out": [
              "            if item['discounted_price'] < 0:"
            ]
          },
          {
            "name": "Mutant #147",
            "file": "src/main.py",
            "line": 266,
            "system-out": [
              "            if item['discounted_price'] < 0:"
            ]
          },
          {
            "name": "Mutant #148",
            "file": "src/main.py",
            "line": 267,
            "system-out": [
              "                item['discounted_price'] = 0"
            ]
          },
          {
            "name": "Mutant #149",
            "file": "src/main.py",
            "line": 267,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -264,7 +264,7 @@\n     if len(filtered_data) > 0:\n         for item in filtered_data:\n             if item['discounted_price'] < 0:\n-                item['discounted_price'] = 0\n+                item['discounted_price'] = 1\n         global_variable += 1\n     else:\n         print(\"No items met the filtering criteria.\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                item['discounted_price'] = 0"
            ]
          },
          {
            "name": "Mutant #150",
            "file": "src/main.py",
            "line": 267,
            "system-out": [
              "                item['discounted_price'] = 0"
            ]
          },
          {
            "name": "Mutant #151",
            "file": "src/main.py",
            "line": 268,
            "system-out": [
              "        global_variable += 1"
            ]
          },
          {
            "name": "Mutant #152",
            "file": "src/main.py",
            "line": 268,
            "system-out": [
              "        global_variable += 1"
            ]
          },
          {
            "name": "Mutant #153",
            "file": "src/main.py",
            "line": 268,
            "system-out": [
              "        global_variable += 1"
            ]
          },
          {
            "name": "Mutant #154",
            "file": "src/main.py",
            "line": 270,
            "system-out": [
              "        print(\"No items met the filtering criteria.\")"
            ]
          },
          {
            "name": "Mutant #155",
            "file": "src/main.py",
            "line": 284,
            "system-out": [
              "    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):"
            ]
          },
          {
            "name": "Mutant #156",
            "file": "src/main.py",
            "line": 284,
            "system-out": [
              "    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):"
            ]
          },
          {
            "name": "Mutant #157",
            "file": "src/main.py",
            "line": 284,
            "system-out": [
              "    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):"
            ]
          },
          {
            "name": "Mutant #158",
            "file": "src/main.py",
            "line": 284,
            "system-out": [
              "    def __init__(self, name=\"\", age= 0, ssn=None, email=\"\", address = \"\"):"
            ]
          },
          {
            "name": "Mutant #159",
            "file": "src/main.py",
            "line": 285,
            "system-out": [
              "        self.name = name"
            ]
          },
          {
            "name": "Mutant #160",
            "file": "src/main.py",
            "line": 286,
            "system-out": [
              "        self.age = age"
            ]
          },
          {
            "name": "Mutant #161",
            "file": "src/main.py",
            "line": 287,
            "system-out": [
              "        self.ssn = ssn"
            ]
          },
          {
            "name": "Mutant #162",
            "file": "src/main.py",
            "line": 288,
            "system-out": [
              "        self.email = email"
            ]
          },
          {
            "name": "Mutant #163",
            "file": "src/main.py",
            "line": 289,
            "system-out": [
              "        self.address = address"
            ]
          },
          {
            "name": "Mutant #164",
            "file": "src/main.py",
            "line": 291,
            "system-out": [
              "        if not name:"
            ]
          },
          {
            "name": "Mutant #165",
            "file": "src/main.py",
            "line": 292,
            "system-out": [
              "            raise ValueError(\"Name cannot be empty\")"
            ]
          },
          {
            "name": "Mutant #166",
            "file": "src/main.py",
            "line": 295,
            "system-out": [
              "            if not char.isalpha() and not char.isspace():"
            ]
          },
          {
            "name": "Mutant #167",
            "file": "src/main.py",
            "line": 295,
            "system-out": [
              "            if not char.isalpha() and not char.isspace():"
            ]
          },
          {
            "name": "Mutant #168",
            "file": "src/main.py",
            "line": 295,
            "system-out": [
              "            if not char.isalpha() and not char.isspace():"
            ]
          },
          {
            "name": "Mutant #169",
            "file": "src/main.py",
            "line": 296,
            "system-out": [
              "                raise ValueError(\"Name can only contain letters and spaces\")"
            ]
          },
          {
            "name": "Mutant #170",
            "file": "src/main.py",
            "line": 297,
            "system-out": [
              "        self.name = name"
            ]
          },
          {
            "name": "Mutant #171",
            "file": "src/main.py",
            "line": 300,
            "system-out": [
              "        if age < 0:"
            ]
          },
          {
            "name": "Mutant #172",
            "file": "src/main.py",
            "line": 300,
            "system-out": [
              "        if age < 0:"
            ]
          },
          {
            "name": "Mutant #173",
            "file": "src/main.py",
            "line": 301,
            "system-out": [
              "            raise ValueError(\"Age cannot be negative\")"
            ]
          },
          {
            "name": "Mutant #174",
            "file": "src/main.py",
            "line": 303,
            "system-out": [
              "            self.age = int(age)  # Potential for type conversion errors"
            ]
          },
          {
            "name": "Mutant #175",
            "file": "src/main.py",
            "line": 307,
            "system-out": [
              "        self.ssn = ssn"
            ]
          },
          {
            "name": "Mutant #176",
            "file": "src/main.py",
            "line": 310,
            "system-out": [
              "        self.email = email"
            ]
          },
          {
            "name": "Mutant #177",
            "file": "src/main.py",
            "line": 313,
            "system-out": [
              "        self.address = address"
            ]
          },
          {
            "name": "Mutant #178",
            "file": "src/main.py",
            "line": 316,
            "system-out": [
              "        p = Person()"
            ]
          },
          {
            "name": "Mutant #179",
            "file": "src/main.py",
            "line": 317,
            "system-out": [
              "        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")"
            ]
          },
          {
            "name": "Mutant #180",
            "file": "src/main.py",
            "line": 317,
            "system-out": [
              "        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")"
            ]
          },
          {
            "name": "Mutant #181",
            "file": "src/main.py",
            "line": 317,
            "system-out": [
              "        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")"
            ]
          },
          {
            "name": "Mutant #182",
            "file": "src/main.py",
            "line": 317,
            "system-out": [
              "        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")"
            ]
          },
          {
            "name": "Mutant #183",
            "file": "src/main.py",
            "line": 317,
            "system-out": [
              "        p.setName(\"John\").setAge(30).setSSN(\"123-45-678\").setEmail(\"johndoe@gmail.com\").setAddress(\"123Street\")"
            ]
          },
          {
            "name": "Mutant #184",
            "file": "src/main.py",
            "line": 320,
            "system-out": [
              "        if not self.ssn:"
            ]
          },
          {
            "name": "Mutant #185",
            "file": "src/main.py",
            "line": 321,
            "system-out": [
              "            return False"
            ]
          },
          {
            "name": "Mutant #186",
            "file": "src/main.py",
            "line": 322,
            "system-out": [
              "        if len(self.ssn) != 11:"
            ]
          },
          {
            "name": "Mutant #187",
            "file": "src/main.py",
            "line": 322,
            "system-out": [
              "        if len(self.ssn) != 11:"
            ]
          },
          {
            "name": "Mutant #188",
            "file": "src/main.py",
            "line": 323,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -320,7 +320,7 @@\n         if not self.ssn:\n             return False\n         if len(self.ssn) != 11:\n-            return False\n+            return True\n         parts = self.ssn.split(\"-\")\n         if len(parts) != 3:\n             return False\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            return False"
            ]
          },
          {
            "name": "Mutant #189",
            "file": "src/main.py",
            "line": 324,
            "system-out": [
              "        parts = self.ssn.split(\"-\")"
            ]
          },
          {
            "name": "Mutant #190",
            "file": "src/main.py",
            "line": 324,
            "system-out": [
              "        parts = self.ssn.split(\"-\")"
            ]
          },
          {
            "name": "Mutant #191",
            "file": "src/main.py",
            "line": 325,
            "system-out": [
              "        if len(parts) != 3:"
            ]
          },
          {
            "name": "Mutant #192",
            "file": "src/main.py",
            "line": 325,
            "system-out": [
              "        if len(parts) != 3:"
            ]
          },
          {
            "name": "Mutant #193",
            "file": "src/main.py",
            "line": 326,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -323,7 +323,7 @@\n             return False\n         parts = self.ssn.split(\"-\")\n         if len(parts) != 3:\n-            return False\n+            return True\n         try:\n             int(parts[0])\n             int(parts[1])\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            return False"
            ]
          },
          {
            "name": "Mutant #194",
            "file": "src/main.py",
            "line": 328,
            "system-out": [
              "            int(parts[0])"
            ]
          },
          {
            "name": "Mutant #195",
            "file": "src/main.py",
            "line": 329,
            "system-out": [
              "            int(parts[1])"
            ]
          },
          {
            "name": "Mutant #196",
            "file": "src/main.py",
            "line": 330,
            "system-out": [
              "            int(parts[2])"
            ]
          },
          {
            "name": "Mutant #197",
            "file": "src/main.py",
            "line": 332,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -329,7 +329,7 @@\n             int(parts[1])\n             int(parts[2])\n         except ValueError:\n-            return False\n+            return True\n         return True\n     def odd_even(self,age):\n         if age >= 0:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            return False"
            ]
          },
          {
            "name": "Mutant #198",
            "file": "src/main.py",
            "line": 333,
            "system-out": [
              "        return True"
            ]
          },
          {
            "name": "Mutant #199",
            "file": "src/main.py",
            "line": 335,
            "system-out": [
              "        if age >= 0:"
            ]
          },
          {
            "name": "Mutant #200",
            "file": "src/main.py",
            "line": 335,
            "system-out": [
              "        if age >= 0:"
            ]
          },
          {
            "name": "Mutant #201",
            "file": "src/main.py",
            "line": 336,
            "system-out": [
              "            if age == 0:"
            ]
          },
          {
            "name": "Mutant #202",
            "file": "src/main.py",
            "line": 336,
            "system-out": [
              "            if age == 0:"
            ]
          },
          {
            "name": "Mutant #203",
            "file": "src/main.py",
            "line": 337,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #204",
            "file": "src/main.py",
            "line": 338,
            "system-out": [
              "            elif age == 1:"
            ]
          },
          {
            "name": "Mutant #205",
            "file": "src/main.py",
            "line": 338,
            "system-out": [
              "            elif age == 1:"
            ]
          },
          {
            "name": "Mutant #206",
            "file": "src/main.py",
            "line": 339,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #207",
            "file": "src/main.py",
            "line": 340,
            "system-out": [
              "            elif age == 2:"
            ]
          },
          {
            "name": "Mutant #208",
            "file": "src/main.py",
            "line": 340,
            "system-out": [
              "            elif age == 2:"
            ]
          },
          {
            "name": "Mutant #209",
            "file": "src/main.py",
            "line": 341,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #210",
            "file": "src/main.py",
            "line": 342,
            "system-out": [
              "            elif age == 3:"
            ]
          },
          {
            "name": "Mutant #211",
            "file": "src/main.py",
            "line": 342,
            "system-out": [
              "            elif age == 3:"
            ]
          },
          {
            "name": "Mutant #212",
            "file": "src/main.py",
            "line": 343,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #213",
            "file": "src/main.py",
            "line": 344,
            "system-out": [
              "            elif age == 4:"
            ]
          },
          {
            "name": "Mutant #214",
            "file": "src/main.py",
            "line": 344,
            "system-out": [
              "            elif age == 4:"
            ]
          },
          {
            "name": "Mutant #215",
            "file": "src/main.py",
            "line": 345,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #216",
            "file": "src/main.py",
            "line": 346,
            "system-out": [
              "            elif age == 5:"
            ]
          },
          {
            "name": "Mutant #217",
            "file": "src/main.py",
            "line": 346,
            "system-out": [
              "            elif age == 5:"
            ]
          },
          {
            "name": "Mutant #218",
            "file": "src/main.py",
            "line": 347,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #219",
            "file": "src/main.py",
            "line": 348,
            "system-out": [
              "            elif age == 6:"
            ]
          },
          {
            "name": "Mutant #220",
            "file": "src/main.py",
            "line": 348,
            "system-out": [
              "            elif age == 6:"
            ]
          },
          {
            "name": "Mutant #221",
            "file": "src/main.py",
            "line": 349,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #222",
            "file": "src/main.py",
            "line": 350,
            "system-out": [
              "            elif age == 7:"
            ]
          },
          {
            "name": "Mutant #223",
            "file": "src/main.py",
            "line": 350,
            "system-out": [
              "            elif age == 7:"
            ]
          },
          {
            "name": "Mutant #224",
            "file": "src/main.py",
            "line": 351,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #225",
            "file": "src/main.py",
            "line": 352,
            "system-out": [
              "            elif age == 8:"
            ]
          },
          {
            "name": "Mutant #226",
            "file": "src/main.py",
            "line": 352,
            "system-out": [
              "            elif age == 8:"
            ]
          },
          {
            "name": "Mutant #227",
            "file": "src/main.py",
            "line": 353,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #228",
            "file": "src/main.py",
            "line": 354,
            "system-out": [
              "            elif age == 9:"
            ]
          },
          {
            "name": "Mutant #229",
            "file": "src/main.py",
            "line": 354,
            "system-out": [
              "            elif age == 9:"
            ]
          },
          {
            "name": "Mutant #230",
            "file": "src/main.py",
            "line": 355,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #231",
            "file": "src/main.py",
            "line": 356,
            "system-out": [
              "            elif age == 10:"
            ]
          },
          {
            "name": "Mutant #232",
            "file": "src/main.py",
            "line": 356,
            "system-out": [
              "            elif age == 10:"
            ]
          },
          {
            "name": "Mutant #233",
            "file": "src/main.py",
            "line": 357,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #234",
            "file": "src/main.py",
            "line": 358,
            "system-out": [
              "            elif age == 11:"
            ]
          },
          {
            "name": "Mutant #235",
            "file": "src/main.py",
            "line": 358,
            "system-out": [
              "            elif age == 11:"
            ]
          },
          {
            "name": "Mutant #236",
            "file": "src/main.py",
            "line": 359,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #237",
            "file": "src/main.py",
            "line": 360,
            "system-out": [
              "            elif age == 12:"
            ]
          },
          {
            "name": "Mutant #238",
            "file": "src/main.py",
            "line": 360,
            "system-out": [
              "            elif age == 12:"
            ]
          },
          {
            "name": "Mutant #239",
            "file": "src/main.py",
            "line": 361,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #240",
            "file": "src/main.py",
            "line": 362,
            "system-out": [
              "            elif age == 13:"
            ]
          },
          {
            "name": "Mutant #241",
            "file": "src/main.py",
            "line": 362,
            "system-out": [
              "            elif age == 13:"
            ]
          },
          {
            "name": "Mutant #242",
            "file": "src/main.py",
            "line": 363,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #243",
            "file": "src/main.py",
            "line": 364,
            "system-out": [
              "            elif age == 14:"
            ]
          },
          {
            "name": "Mutant #244",
            "file": "src/main.py",
            "line": 364,
            "system-out": [
              "            elif age == 14:"
            ]
          },
          {
            "name": "Mutant #245",
            "file": "src/main.py",
            "line": 365,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #246",
            "file": "src/main.py",
            "line": 366,
            "system-out": [
              "            elif age == 15:"
            ]
          },
          {
            "name": "Mutant #247",
            "file": "src/main.py",
            "line": 366,
            "system-out": [
              "            elif age == 15:"
            ]
          },
          {
            "name": "Mutant #248",
            "file": "src/main.py",
            "line": 367,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #249",
            "file": "src/main.py",
            "line": 368,
            "system-out": [
              "            elif age == 16:"
            ]
          },
          {
            "name": "Mutant #250",
            "file": "src/main.py",
            "line": 368,
            "system-out": [
              "            elif age == 16:"
            ]
          },
          {
            "name": "Mutant #251",
            "file": "src/main.py",
            "line": 369,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #252",
            "file": "src/main.py",
            "line": 370,
            "system-out": [
              "            elif age == 17:"
            ]
          },
          {
            "name": "Mutant #253",
            "file": "src/main.py",
            "line": 370,
            "system-out": [
              "            elif age == 17:"
            ]
          },
          {
            "name": "Mutant #254",
            "file": "src/main.py",
            "line": 371,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #255",
            "file": "src/main.py",
            "line": 372,
            "system-out": [
              "            elif age == 18:"
            ]
          },
          {
            "name": "Mutant #256",
            "file": "src/main.py",
            "line": 372,
            "system-out": [
              "            elif age == 18:"
            ]
          },
          {
            "name": "Mutant #257",
            "file": "src/main.py",
            "line": 373,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #258",
            "file": "src/main.py",
            "line": 374,
            "system-out": [
              "            elif age == 19:"
            ]
          },
          {
            "name": "Mutant #259",
            "file": "src/main.py",
            "line": 374,
            "system-out": [
              "            elif age == 19:"
            ]
          },
          {
            "name": "Mutant #260",
            "file": "src/main.py",
            "line": 375,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #261",
            "file": "src/main.py",
            "line": 376,
            "system-out": [
              "            elif age == 20:"
            ]
          },
          {
            "name": "Mutant #262",
            "file": "src/main.py",
            "line": 376,
            "system-out": [
              "            elif age == 20:"
            ]
          },
          {
            "name": "Mutant #263",
            "file": "src/main.py",
            "line": 377,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #264",
            "file": "src/main.py",
            "line": 378,
            "system-out": [
              "            elif age == 21:"
            ]
          },
          {
            "name": "Mutant #265",
            "file": "src/main.py",
            "line": 378,
            "system-out": [
              "            elif age == 21:"
            ]
          },
          {
            "name": "Mutant #266",
            "file": "src/main.py",
            "line": 379,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #267",
            "file": "src/main.py",
            "line": 380,
            "system-out": [
              "            elif age == 22:"
            ]
          },
          {
            "name": "Mutant #268",
            "file": "src/main.py",
            "line": 380,
            "system-out": [
              "            elif age == 22:"
            ]
          },
          {
            "name": "Mutant #269",
            "file": "src/main.py",
            "line": 381,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #270",
            "file": "src/main.py",
            "line": 382,
            "system-out": [
              "            elif age == 23:"
            ]
          },
          {
            "name": "Mutant #271",
            "file": "src/main.py",
            "line": 382,
            "system-out": [
              "            elif age == 23:"
            ]
          },
          {
            "name": "Mutant #272",
            "file": "src/main.py",
            "line": 383,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #273",
            "file": "src/main.py",
            "line": 384,
            "system-out": [
              "            elif age == 24:"
            ]
          },
          {
            "name": "Mutant #274",
            "file": "src/main.py",
            "line": 384,
            "system-out": [
              "            elif age == 24:"
            ]
          },
          {
            "name": "Mutant #275",
            "file": "src/main.py",
            "line": 385,
            "system-out": [
              "                return \"even\""
            ]
          },
          {
            "name": "Mutant #276",
            "file": "src/main.py",
            "line": 386,
            "system-out": [
              "            elif age == 25:"
            ]
          },
          {
            "name": "Mutant #277",
            "file": "src/main.py",
            "line": 386,
            "system-out": [
              "            elif age == 25:"
            ]
          },
          {
            "name": "Mutant #278",
            "file": "src/main.py",
            "line": 387,
            "system-out": [
              "                return \"odd\""
            ]
          },
          {
            "name": "Mutant #279",
            "file": "src/main.py",
            "line": 389,
            "system-out": [
              "            return \"Invalid age\""
            ]
          },
          {
            "name": "Mutant #282",
            "file": "src/main.py",
            "line": 401,
            "system-out": [
              "    result = data['field1'] * data['field2'] * 2"
            ]
          },
          {
            "name": "Mutant #283",
            "file": "src/main.py",
            "line": 401,
            "system-out": [
              "    result = data['field1'] * data['field2'] * 2"
            ]
          },
          {
            "name": "Mutant #284",
            "file": "src/main.py",
            "line": 401,
            "system-out": [
              "    result = data['field1'] * data['field2'] * 2"
            ]
          },
          {
            "name": "Mutant #285",
            "file": "src/main.py",
            "line": 401,
            "system-out": [
              "    result = data['field1'] * data['field2'] * 2"
            ]
          },
          {
            "name": "Mutant #286",
            "file": "src/main.py",
            "line": 401,
            "system-out": [
              "    result = data['field1'] * data['field2'] * 2"
            ]
          },
          {
            "name": "Mutant #287",
            "file": "src/main.py",
            "line": 401,
            "system-out": [
              "    result = data['field1'] * data['field2'] * 2"
            ]
          },
          {
            "name": "Mutant #288",
            "file": "src/main.py",
            "line": 402,
            "system-out": [
              "    global_var += 1  # Modifying global variable"
            ]
          },
          {
            "name": "Mutant #289",
            "file": "src/main.py",
            "line": 402,
            "system-out": [
              "    global_var += 1  # Modifying global variable"
            ]
          },
          {
            "name": "Mutant #290",
            "file": "src/main.py",
            "line": 402,
            "system-out": [
              "    global_var += 1  # Modifying global variable"
            ]
          },
          {
            "name": "Mutant #291",
            "file": "src/main.py",
            "line": 403,
            "system-out": [
              "    return result + global_var"
            ]
          },
          {
            "name": "Mutant #293",
            "file": "src/main.py",
            "line": 58,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -55,7 +55,7 @@\n         with open(filename) as f:\n             data = f.read()\n     except IOError as e:\n-        print(f\"Error reading file: {e}\")\n+        print(f\"XXError reading file: {e}XX\")\n \n def is_valid(value):\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        print(f\"Error reading file: {e}\")"
            ]
          },
          {
            "name": "Mutant #305",
            "file": "src/main.py",
            "line": 82,
            "system-out": [
              "    if \"name\" in user_data.keys():"
            ]
          },
          {
            "name": "Mutant #306",
            "file": "src/main.py",
            "line": 82,
            "system-out": [
              "    if \"name\" in user_data.keys():"
            ]
          },
          {
            "name": "Mutant #309",
            "file": "src/main.py",
            "line": 150,
            "system-out": [
              "            if item is not None:"
            ]
          },
          {
            "name": "Mutant #310",
            "file": "src/main.py",
            "line": 203,
            "system-out": [
              "    with open(filename, \"w\") as f:"
            ]
          },
          {
            "name": "Mutant #311",
            "file": "src/main.py",
            "line": 230,
            "system-out": [
              "    final_price = price - discount - (discount * 0.1)"
            ]
          },
          {
            "name": "Mutant #312",
            "file": "src/main.py",
            "line": 230,
            "system-out": [
              "    final_price = price - discount - (discount * 0.1)"
            ]
          },
          {
            "name": "Mutant #313",
            "file": "src/main.py",
            "line": 230,
            "system-out": [
              "    final_price = price - discount - (discount * 0.1)"
            ]
          },
          {
            "name": "Mutant #314",
            "file": "src/main.py",
            "line": 230,
            "system-out": [
              "    final_price = price - discount - (discount * 0.1)"
            ]
          },
          {
            "name": "Mutant #315",
            "file": "src/main.py",
            "line": 230,
            "system-out": [
              "    final_price = price - discount - (discount * 0.1)"
            ]
          },
          {
            "name": "Mutant #316",
            "file": "src/main.py",
            "line": 232,
            "system-out": [
              "        final_price -= price * 0.05"
            ]
          },
          {
            "name": "Mutant #317",
            "file": "src/main.py",
            "line": 232,
            "system-out": [
              "        final_price -= price * 0.05"
            ]
          },
          {
            "name": "Mutant #318",
            "file": "src/main.py",
            "line": 232,
            "system-out": [
              "        final_price -= price * 0.05"
            ]
          },
          {
            "name": "Mutant #319",
            "file": "src/main.py",
            "line": 232,
            "system-out": [
              "        final_price -= price * 0.05"
            ]
          },
          {
            "name": "Mutant #320",
            "file": "src/main.py",
            "line": 392,
            "system-out": [
              "global_var = 0  # This is a global variable"
            ]
          },
          {
            "name": "Mutant #321",
            "file": "src/main.py",
            "line": 392,
            "system-out": [
              "global_var = 0  # This is a global variable"
            ]
          },
          {
            "name": "Mutant #322",
            "file": "src/main.py",
            "line": 42,
            "system-out": [
              "    if value is not None:"
            ]
          },
          {
            "name": "Mutant #323",
            "file": "src/main.py",
            "line": 43,
            "system-out": [
              "        return False"
            ]
          },
          {
            "name": "Mutant #324",
            "file": "src/main.py",
            "line": 44,
            "system-out": [
              "    return True"
            ]
          },
          {
            "name": "Mutant #328",
            "file": "src/main.py",
            "line": 107,
            "system-out": [
              "    modified_data = []"
            ]
          },
          {
            "name": "Mutant #329",
            "file": "src/main.py",
            "line": 182,
            "system-out": [
              "        for j in range(2, i + 1):"
            ]
          },
          {
            "name": "Mutant #330",
            "file": "src/main.py",
            "line": 182,
            "system-out": [
              "        for j in range(2, i + 1):"
            ]
          },
          {
            "name": "Mutant #331",
            "file": "src/main.py",
            "line": 182,
            "system-out": [
              "        for j in range(2, i + 1):"
            ]
          },
          {
            "name": "Mutant #333",
            "file": "src/main.py",
            "line": 97,
            "system-out": [
              "    assert type(data) == tuple, \"Data must be a tuple\""
            ]
          },
          {
            "name": "Mutant #334",
            "file": "src/main.py",
            "line": 97,
            "failure": [
              {
                "inner": "--- src/main.py\n+++ src/main.py\n@@ -94,7 +94,7 @@\n         Contains Patterns:\n         - Assertion (AT)\n     \"\"\"\n-    assert type(data) == tuple, \"Data must be a tuple\"\n+    assert type(data) == tuple, \"XXData must be a tupleXX\"\n \n # TODO: not passing check id: 'LVITOI001', name: 'loop-variable-iterates-overrides-iterator', pattern: './/FunctionDef/body/For[target/Name/@id = iter/Name/@id]'\n def modify_list(data):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert type(data) == tuple, \"Data must be a tuple\""
            ]
          }
        ]
      }
    ]
  }
}