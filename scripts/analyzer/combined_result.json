{
  "chasten_result": {
    "configuration": {
      "chastenversion": "0.2.0",
      "debuglevel": "ERROR",
      "debugdestination": "CONSOLE",
      "projectname": "lazytracker",
      "configdirectory": "/home/caleb/.config/chasten",
      "searchpath": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker",
      "fileuuid": "a5566faabf7d469a9e610256b64858ad",
      "datetime": "2024-02-21 21:52:12.288634",
      "checkinclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      },
      "checkexclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      }
    },
    "sources": [
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py",
        "check": {
          "id": "C001",
          "name": "class-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//ClassDef",
          "passed": true,
          "matches": [
            {
              "lineno": 8,
              "coloffset": 0,
              "linematch": "class LazyTracker:",
              "linematch_context": "import dill\nfrom pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 6,
              "coloffset": 0,
              "linematch": "def test_hparams():",
              "linematch_context": "import shutil\nfrom tempfile import TemporaryDirectory, tempdir\nfrom lazytracker import LazyTracker\n\ndef test_hparams():\n    hparams_1 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 1"
            },
            {
              "lineno": 35,
              "coloffset": 0,
              "linematch": "def test_picable_function():",
              "linematch_context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n"
            },
            {
              "lineno": 53,
              "coloffset": 0,
              "linematch": "def test_files():",
              "linematch_context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n\n        with open(f'{tmpdir}/b.txt', 'w') as f:"
            },
            {
              "lineno": 76,
              "coloffset": 0,
              "linematch": "def test_directories():",
              "linematch_context": "\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()\n\ndef test_directories():\n    with TemporaryDirectory() as tmpdir:\n        os.makedirs(f\"{tmpdir}/1\", exist_ok=True)\n\n        with open(f'{tmpdir}/1/a.txt', 'w') as f:\n            f.write(\"test file 1\")"
            },
            {
              "lineno": 36,
              "coloffset": 4,
              "linematch": "def func_1(x):",
              "linematch_context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "def func_2(x):",
              "linematch_context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/tests/test_tracked.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 0,
              "linematch": "def test_cached():",
              "linematch_context": "from tempfile import TemporaryDirectory\nfrom lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,"
            },
            {
              "lineno": 14,
              "coloffset": 8,
              "linematch": "def test_function(input_dir: str, output_dir: str, parameter: int):",
              "linematch_context": "            cache_dir=cache_dir,\n            input_dirs=[\"input_dir\"],\n            output_dirs=[\"output_dir\"]\n        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "def __init__(self):",
              "linematch_context": "from pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "def add_directories(self, directories: List[str], chunk_num_blocks=128):",
              "linematch_context": "    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128."
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "def add_files(self, filepaths: List[str], chunk_num_blocks=128):",
              "linematch_context": "        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files\n\n        Args:\n            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128."
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "def add_hparams(self, hparams: dict):",
              "linematch_context": "                        self._hasher.update(chunk)\n            else:\n                self._hasher.update(dill.dumps(None))\n\n    def add_hparams(self, hparams: dict):\n        \"\"\"Add hash of python dictionary. Utility function for storing pickable\n\n        Args:\n            hparams (dict): A dictionary to be included\n        \"\"\""
            },
            {
              "lineno": 52,
              "coloffset": 4,
              "linematch": "def add_picklables(self, objects: List[Any], recursive: bool=False):",
              "linematch_context": "            hparams (dict): A dictionary to be included\n        \"\"\"\n        self.add_picklables([hparams])\n\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\n        \"\"\"Include hash of any picklable python objects (pickable by dill)\n\n        Args:\n            objects (List[Any]): List of python objects to hash\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if "
            },
            {
              "lineno": 63,
              "coloffset": 4,
              "linematch": "def hash(self) -> str:",
              "linematch_context": "        \"\"\"\n        for obj in objects:\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\n\n    def hash(self) -> str:\n        \"\"\"Compute hash\n\n        Returns:\n            str: Computed checksum of all things tracked\n        \"\"\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 0,
              "linematch": "def cached(",
              "linematch_context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,"
            },
            {
              "lineno": 31,
              "coloffset": 4,
              "linematch": "def inner_func(function: Callable):",
              "linematch_context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)"
            },
            {
              "lineno": 33,
              "coloffset": 8,
              "linematch": "def wrapper(*args, **kwargs):",
              "linematch_context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
        "check": {
          "id": "F002",
          "name": "non-test-function-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 36,
              "coloffset": 4,
              "linematch": "def func_1(x):",
              "linematch_context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "def func_2(x):",
              "linematch_context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py",
        "check": {
          "id": "F002",
          "name": "non-test-function-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "def __init__(self):",
              "linematch_context": "from pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "def add_directories(self, directories: List[str], chunk_num_blocks=128):",
              "linematch_context": "    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128."
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "def add_files(self, filepaths: List[str], chunk_num_blocks=128):",
              "linematch_context": "        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files\n\n        Args:\n            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128."
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "def add_hparams(self, hparams: dict):",
              "linematch_context": "                        self._hasher.update(chunk)\n            else:\n                self._hasher.update(dill.dumps(None))\n\n    def add_hparams(self, hparams: dict):\n        \"\"\"Add hash of python dictionary. Utility function for storing pickable\n\n        Args:\n            hparams (dict): A dictionary to be included\n        \"\"\""
            },
            {
              "lineno": 52,
              "coloffset": 4,
              "linematch": "def add_picklables(self, objects: List[Any], recursive: bool=False):",
              "linematch_context": "            hparams (dict): A dictionary to be included\n        \"\"\"\n        self.add_picklables([hparams])\n\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\n        \"\"\"Include hash of any picklable python objects (pickable by dill)\n\n        Args:\n            objects (List[Any]): List of python objects to hash\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if "
            },
            {
              "lineno": 63,
              "coloffset": 4,
              "linematch": "def hash(self) -> str:",
              "linematch_context": "        \"\"\"\n        for obj in objects:\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\n\n    def hash(self) -> str:\n        \"\"\"Compute hash\n\n        Returns:\n            str: Computed checksum of all things tracked\n        \"\"\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py",
        "check": {
          "id": "F002",
          "name": "non-test-function-definition",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 0,
              "linematch": "def cached(",
              "linematch_context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,"
            },
            {
              "lineno": 31,
              "coloffset": 4,
              "linematch": "def inner_func(function: Callable):",
              "linematch_context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)"
            },
            {
              "lineno": 33,
              "coloffset": 8,
              "linematch": "def wrapper(*args, **kwargs):",
              "linematch_context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py",
        "check": {
          "id": "CL001",
          "name": "single-nested-if",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body//If",
          "passed": true,
          "matches": [
            {
              "lineno": 37,
              "coloffset": 12,
              "linematch": "if os.path.exists(p):",
              "linematch_context": "            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\n        \"\"\"\n        for p in filepaths:\n            if os.path.exists(p):\n                with open(p, \"rb\") as f:\n                    while chunk := f.read(chunk_num_blocks * self._hasher.block_size):\n                        self._hasher.update(chunk)\n            else:\n                self._hasher.update(dill.dumps(None))"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py",
        "check": {
          "id": "CL001",
          "name": "single-nested-if",
          "description": "",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body//If",
          "passed": true,
          "matches": [
            {
              "lineno": 41,
              "coloffset": 16,
              "linematch": "if input_dirs is not None:",
              "linematch_context": "            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()\n                input_tracker.add_picklables([function], recursive=True)\n                input_tracker.add_hparams(kwargs)\n                if input_dirs is not None:\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\n                    input_tracker.add_directories(input_dirs_values)\n                if input_files is not None:\n                    input_files_values = [\n                        kwargs[input_file] for input_file in input_files"
            },
            {
              "lineno": 44,
              "coloffset": 16,
              "linematch": "if input_files is not None:",
              "linematch_context": "                input_tracker.add_hparams(kwargs)\n                if input_dirs is not None:\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\n                    input_tracker.add_directories(input_dirs_values)\n                if input_files is not None:\n                    input_files_values = [\n                        kwargs[input_file] for input_file in input_files\n                    ]\n                    input_tracker.add_files(input_files_values)\n"
            },
            {
              "lineno": 51,
              "coloffset": 16,
              "linematch": "if output_dirs is not None:",
              "linematch_context": "                    ]\n                    input_tracker.add_files(input_files_values)\n\n                test_output_tracker = LazyTracker()\n                if output_dirs is not None:\n                    output_dirs_values = [\n                        kwargs[output_dir] for output_dir in output_dirs\n                    ]\n                    test_output_tracker.add_directories(output_dirs_values)\n                if output_files is not None:"
            },
            {
              "lineno": 56,
              "coloffset": 16,
              "linematch": "if output_files is not None:",
              "linematch_context": "                    output_dirs_values = [\n                        kwargs[output_dir] for output_dir in output_dirs\n                    ]\n                    test_output_tracker.add_directories(output_dirs_values)\n                if output_files is not None:\n                    output_files_values = [\n                        kwargs[output_file] for output_file in output_files\n                    ]\n                    test_output_tracker.add_files(output_files_values)\n"
            },
            {
              "lineno": 65,
              "coloffset": 16,
              "linematch": "if input_hash in db and db[input_hash][\"hash\"] == output_hash:",
              "linematch_context": "\n                input_hash = input_tracker.hash()\n                output_hash = test_output_tracker.hash()\n\n                if input_hash in db and db[input_hash][\"hash\"] == output_hash:\n                    return db[input_hash][\"return_value\"]\n                else:\n                    return_value = function(**kwargs)\n\n                    output_tracker = LazyTracker()"
            },
            {
              "lineno": 71,
              "coloffset": 20,
              "linematch": "if output_dirs is not None:",
              "linematch_context": "                else:\n                    return_value = function(**kwargs)\n\n                    output_tracker = LazyTracker()\n                    if output_dirs is not None:\n                        output_dirs_values = [\n                            kwargs[output_dir] for output_dir in output_dirs\n                        ]\n                        output_tracker.add_directories(output_dirs_values)\n                    if output_files is not None:"
            },
            {
              "lineno": 76,
              "coloffset": 20,
              "linematch": "if output_files is not None:",
              "linematch_context": "                        output_dirs_values = [\n                            kwargs[output_dir] for output_dir in output_dirs\n                        ]\n                        output_tracker.add_directories(output_dirs_values)\n                    if output_files is not None:\n                        output_files_values = [\n                            kwargs[output_file] for output_file in output_files\n                        ]\n                        output_tracker.add_files(output_files_values)\n"
            }
          ]
        }
      }
    ]
  },
  "mutmut_result": {
    "disabled": 0,
    "errors": 0,
    "failures": 10,
    "tests": 44,
    "time": 0,
    "testsuite": [
      {
        "disabled": 0,
        "errors": 0,
        "failures": 10,
        "name": "mutmut",
        "skipped": 0,
        "tests": 44,
        "time": 0,
        "testcase": [
          {
            "name": "Mutant #1",
            "file": "lazytracker/lazytracker.py",
            "line": 11,
            "system-out": [
              "        self._hasher = hashlib.md5()"
            ]
          },
          {
            "name": "Mutant #2",
            "file": "lazytracker/lazytracker.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- lazytracker/lazytracker.py\n+++ lazytracker/lazytracker.py\n@@ -10,7 +10,7 @@\n         \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n         self._hasher = hashlib.md5()\n \n-    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n+    def add_directories(self, directories: List[str], chunk_num_blocks=129):\n         \"\"\"Include hash of all files inside directory (including files in subdirectories)\n \n         Args:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    def add_directories(self, directories: List[str], chunk_num_blocks=128):"
            ]
          },
          {
            "name": "Mutant #3",
            "file": "lazytracker/lazytracker.py",
            "line": 20,
            "system-out": [
              "        files_to_check = []"
            ]
          },
          {
            "name": "Mutant #4",
            "file": "lazytracker/lazytracker.py",
            "line": 23,
            "system-out": [
              "            files_to_check.extend(list(Path(directory).rglob(\"*\")))"
            ]
          },
          {
            "name": "Mutant #5",
            "file": "lazytracker/lazytracker.py",
            "line": 25,
            "system-out": [
              "        files_to_check = sorted(files_to_check)"
            ]
          },
          {
            "name": "Mutant #6",
            "file": "lazytracker/lazytracker.py",
            "line": 29,
            "failure": [
              {
                "inner": "--- lazytracker/lazytracker.py\n+++ lazytracker/lazytracker.py\n@@ -26,7 +26,7 @@\n \n         self.add_files(files_to_check, chunk_num_blocks)\n \n-    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n+    def add_files(self, filepaths: List[str], chunk_num_blocks=129):\n         \"\"\"Include hash of files\n \n         Args:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    def add_files(self, filepaths: List[str], chunk_num_blocks=128):"
            ]
          },
          {
            "name": "Mutant #7",
            "file": "lazytracker/lazytracker.py",
            "line": 38,
            "system-out": [
              "                with open(p, \"rb\") as f:"
            ]
          },
          {
            "name": "Mutant #8",
            "file": "lazytracker/lazytracker.py",
            "line": 39,
            "system-out": [
              "                    while chunk := f.read(chunk_num_blocks * self._hasher.block_size):"
            ]
          },
          {
            "name": "Mutant #9",
            "file": "lazytracker/lazytracker.py",
            "line": 52,
            "failure": [
              {
                "inner": "--- lazytracker/lazytracker.py\n+++ lazytracker/lazytracker.py\n@@ -49,7 +49,7 @@\n         \"\"\"\n         self.add_picklables([hparams])\n \n-    def add_picklables(self, objects: List[Any], recursive: bool=False):\n+    def add_picklables(self, objects: List[Any], recursive: bool=True):\n         \"\"\"Include hash of any picklable python objects (pickable by dill)\n \n         Args:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    def add_picklables(self, objects: List[Any], recursive: bool=False):"
            ]
          },
          {
            "name": "Mutant #10",
            "file": "lazytracker/tracked.py",
            "line": 10,
            "system-out": [
              "shelve.Pickler = Pickler"
            ]
          },
          {
            "name": "Mutant #11",
            "file": "lazytracker/tracked.py",
            "line": 11,
            "system-out": [
              "shelve.Unpickler = Unpickler"
            ]
          },
          {
            "name": "Mutant #12",
            "file": "lazytracker/tracked.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- lazytracker/tracked.py\n+++ lazytracker/tracked.py\n@@ -12,7 +12,7 @@\n \n \n def cached(\n-    cache_dir: str = \".lazytracker\",\n+    cache_dir: str = \"XX.lazytrackerXX\",\n     input_files: Optional[List[str]] = None,\n     input_dirs: Optional[List[str]] = None,\n     output_dirs: Optional[List[str]] = None,\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    cache_dir: str = \".lazytracker\","
            ]
          },
          {
            "name": "Mutant #13",
            "file": "lazytracker/tracked.py",
            "line": 32,
            "failure": [
              {
                "inner": "--- lazytracker/tracked.py\n+++ lazytracker/tracked.py\n@@ -29,7 +29,7 @@\n     \"\"\"\n \n     def inner_func(function: Callable):\n-        @wraps(function)\n+\n         def wrapper(*args, **kwargs):\n             kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        @wraps(function)"
            ]
          },
          {
            "name": "Mutant #14",
            "file": "lazytracker/tracked.py",
            "line": 36,
            "failure": [
              {
                "inner": "--- lazytracker/tracked.py\n+++ lazytracker/tracked.py\n@@ -33,7 +33,7 @@\n         def wrapper(*args, **kwargs):\n             kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n \n-            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n+            os.makedirs(f\"XX{cache_dir}XX\", exist_ok=True)\n             with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                 input_tracker = LazyTracker()\n                 input_tracker.add_picklables([function], recursive=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            os.makedirs(f\"{cache_dir}\", exist_ok=True)"
            ]
          },
          {
            "name": "Mutant #15",
            "file": "lazytracker/tracked.py",
            "line": 36,
            "system-out": [
              "            os.makedirs(f\"{cache_dir}\", exist_ok=True)"
            ]
          },
          {
            "name": "Mutant #16",
            "file": "lazytracker/tracked.py",
            "line": 37,
            "system-out": [
              "            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:"
            ]
          },
          {
            "name": "Mutant #17",
            "file": "lazytracker/tracked.py",
            "line": 37,
            "system-out": [
              "            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:"
            ]
          },
          {
            "name": "Mutant #18",
            "file": "lazytracker/tracked.py",
            "line": 38,
            "system-out": [
              "                input_tracker = LazyTracker()"
            ]
          },
          {
            "name": "Mutant #19",
            "file": "lazytracker/tracked.py",
            "line": 39,
            "failure": [
              {
                "inner": "--- lazytracker/tracked.py\n+++ lazytracker/tracked.py\n@@ -36,7 +36,7 @@\n             os.makedirs(f\"{cache_dir}\", exist_ok=True)\n             with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                 input_tracker = LazyTracker()\n-                input_tracker.add_picklables([function], recursive=True)\n+                input_tracker.add_picklables([function], recursive=False)\n                 input_tracker.add_hparams(kwargs)\n                 if input_dirs is not None:\n                     input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                input_tracker.add_picklables([function], recursive=True)"
            ]
          },
          {
            "name": "Mutant #20",
            "file": "lazytracker/tracked.py",
            "line": 41,
            "system-out": [
              "                if input_dirs is not None:"
            ]
          },
          {
            "name": "Mutant #21",
            "file": "lazytracker/tracked.py",
            "line": 42,
            "system-out": [
              "                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]"
            ]
          },
          {
            "name": "Mutant #22",
            "file": "lazytracker/tracked.py",
            "line": 44,
            "system-out": [
              "                if input_files is not None:"
            ]
          },
          {
            "name": "Mutant #23",
            "file": "lazytracker/tracked.py",
            "line": 47,
            "failure": [
              {
                "inner": "--- lazytracker/tracked.py\n+++ lazytracker/tracked.py\n@@ -42,9 +42,7 @@\n                     input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\n                     input_tracker.add_directories(input_dirs_values)\n                 if input_files is not None:\n-                    input_files_values = [\n-                        kwargs[input_file] for input_file in input_files\n-                    ]\n+                    input_files_values = None\n                     input_tracker.add_files(input_files_values)\n \n                 test_output_tracker = LazyTracker()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                    ]"
            ]
          },
          {
            "name": "Mutant #24",
            "file": "lazytracker/tracked.py",
            "line": 50,
            "system-out": [
              "                test_output_tracker = LazyTracker()"
            ]
          },
          {
            "name": "Mutant #25",
            "file": "lazytracker/tracked.py",
            "line": 51,
            "system-out": [
              "                if output_dirs is not None:"
            ]
          },
          {
            "name": "Mutant #26",
            "file": "lazytracker/tracked.py",
            "line": 54,
            "system-out": [
              "                    ]"
            ]
          },
          {
            "name": "Mutant #27",
            "file": "lazytracker/tracked.py",
            "line": 56,
            "system-out": [
              "                if output_files is not None:"
            ]
          },
          {
            "name": "Mutant #28",
            "file": "lazytracker/tracked.py",
            "line": 59,
            "failure": [
              {
                "inner": "--- lazytracker/tracked.py\n+++ lazytracker/tracked.py\n@@ -54,9 +54,7 @@\n                     ]\n                     test_output_tracker.add_directories(output_dirs_values)\n                 if output_files is not None:\n-                    output_files_values = [\n-                        kwargs[output_file] for output_file in output_files\n-                    ]\n+                    output_files_values = None\n                     test_output_tracker.add_files(output_files_values)\n \n                 input_hash = input_tracker.hash()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                    ]"
            ]
          },
          {
            "name": "Mutant #29",
            "file": "lazytracker/tracked.py",
            "line": 62,
            "system-out": [
              "                input_hash = input_tracker.hash()"
            ]
          },
          {
            "name": "Mutant #30",
            "file": "lazytracker/tracked.py",
            "line": 63,
            "system-out": [
              "                output_hash = test_output_tracker.hash()"
            ]
          },
          {
            "name": "Mutant #31",
            "file": "lazytracker/tracked.py",
            "line": 65,
            "system-out": [
              "                if input_hash in db and db[input_hash][\"hash\"] == output_hash:"
            ]
          },
          {
            "name": "Mutant #32",
            "file": "lazytracker/tracked.py",
            "line": 65,
            "system-out": [
              "                if input_hash in db and db[input_hash][\"hash\"] == output_hash:"
            ]
          },
          {
            "name": "Mutant #33",
            "file": "lazytracker/tracked.py",
            "line": 65,
            "system-out": [
              "                if input_hash in db and db[input_hash][\"hash\"] == output_hash:"
            ]
          },
          {
            "name": "Mutant #34",
            "file": "lazytracker/tracked.py",
            "line": 65,
            "system-out": [
              "                if input_hash in db and db[input_hash][\"hash\"] == output_hash:"
            ]
          },
          {
            "name": "Mutant #35",
            "file": "lazytracker/tracked.py",
            "line": 66,
            "system-out": [
              "                    return db[input_hash][\"return_value\"]"
            ]
          },
          {
            "name": "Mutant #36",
            "file": "lazytracker/tracked.py",
            "line": 68,
            "system-out": [
              "                    return_value = function(**kwargs)"
            ]
          },
          {
            "name": "Mutant #37",
            "file": "lazytracker/tracked.py",
            "line": 70,
            "system-out": [
              "                    output_tracker = LazyTracker()"
            ]
          },
          {
            "name": "Mutant #38",
            "file": "lazytracker/tracked.py",
            "line": 71,
            "system-out": [
              "                    if output_dirs is not None:"
            ]
          },
          {
            "name": "Mutant #39",
            "file": "lazytracker/tracked.py",
            "line": 74,
            "system-out": [
              "                        ]"
            ]
          },
          {
            "name": "Mutant #40",
            "file": "lazytracker/tracked.py",
            "line": 76,
            "system-out": [
              "                    if output_files is not None:"
            ]
          },
          {
            "name": "Mutant #41",
            "file": "lazytracker/tracked.py",
            "line": 79,
            "failure": [
              {
                "inner": "--- lazytracker/tracked.py\n+++ lazytracker/tracked.py\n@@ -74,9 +74,7 @@\n                         ]\n                         output_tracker.add_directories(output_dirs_values)\n                     if output_files is not None:\n-                        output_files_values = [\n-                            kwargs[output_file] for output_file in output_files\n-                        ]\n+                        output_files_values = None\n                         output_tracker.add_files(output_files_values)\n \n                     db[input_hash] = {\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                        ]"
            ]
          },
          {
            "name": "Mutant #42",
            "file": "lazytracker/tracked.py",
            "line": 83,
            "system-out": [
              "                        \"return_value\": return_value,"
            ]
          },
          {
            "name": "Mutant #43",
            "file": "lazytracker/tracked.py",
            "line": 84,
            "system-out": [
              "                        \"hash\": output_tracker.hash(),"
            ]
          },
          {
            "name": "Mutant #44",
            "file": "lazytracker/tracked.py",
            "line": 85,
            "system-out": [
              "                    }"
            ]
          }
        ]
      }
    ]
  }
}