{
  "chasten_result": {
    "configuration": {
      "chastenversion": "0.2.0",
      "debuglevel": "ERROR",
      "debugdestination": "CONSOLE",
      "projectname": "ultiplayground",
      "configdirectory": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/Config",
      "searchpath": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground",
      "fileuuid": "0627b3ce9fe7483d82b3685815b049f1",
      "datetime": "2024-02-29 23:31:13.935817",
      "checkinclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      },
      "checkexclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      }
    },
    "sources": [
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
        "check": {
          "id": "C001",
          "name": "class-definition",
          "description": "Ensure the presence of class definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//ClassDef",
          "passed": true,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "class Rabbit(GenericAnimal):",
              "linematch_context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
        "check": {
          "id": "C001",
          "name": "class-definition",
          "description": "Ensure the presence of class definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//ClassDef",
          "passed": true,
          "matches": [
            {
              "lineno": 1,
              "coloffset": 0,
              "linematch": "class GenericAnimal:",
              "linematch_context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def multiplier(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 6,
              "coloffset": 0,
              "linematch": "def use_incrementer() -> None:",
              "linematch_context": "from .multiplier import multiply_five\nfrom .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:"
            },
            {
              "lineno": 11,
              "coloffset": 0,
              "linematch": "def use_multiplier() -> None:",
              "linematch_context": "    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:"
            },
            {
              "lineno": 16,
              "coloffset": 0,
              "linematch": "def use_returner() -> None:",
              "linematch_context": "    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def increment_by(num: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def incrementer(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def returner() -> str:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 0,
              "linematch": "def read_all_lines(file_path: str):",
              "linematch_context": "import json\nimport os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()"
            },
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def grouped(iterable, times: int):",
              "linematch_context": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def use_pokemons():",
              "linematch_context": "from .random_pokemon import POKEMON, POKEMONS_NAME\nfrom .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            },
            {
              "lineno": 14,
              "coloffset": 0,
              "linematch": "def use_quotes():",
              "linematch_context": "def use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def get_session():",
              "linematch_context": "\nthread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n"
            },
            {
              "lineno": 16,
              "coloffset": 0,
              "linematch": "def download_site(url):",
              "linematch_context": "        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):"
            },
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def download_all_sites(sites):",
              "linematch_context": "    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def __init__(self, name, speed=0) -> None:",
              "linematch_context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "def hide(self):",
              "linematch_context": "class Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 2,
              "coloffset": 4,
              "linematch": "def __init__(self, name, speed=0) -> None:",
              "linematch_context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\""
            },
            {
              "lineno": 6,
              "coloffset": 4,
              "linematch": "def __str__(self):",
              "linematch_context": "    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "def run(self, speed):",
              "linematch_context": "\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "def stop(self):",
              "linematch_context": "    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def test_incrementer():",
              "linematch_context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\""
            },
            {
              "lineno": 8,
              "coloffset": 0,
              "linematch": "def test_multiplier():",
              "linematch_context": "def test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            },
            {
              "lineno": 12,
              "coloffset": 0,
              "linematch": "def test_print():",
              "linematch_context": "def test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def test_version():",
              "linematch_context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            },
            {
              "lineno": 8,
              "coloffset": 0,
              "linematch": "def test_authors():",
              "linematch_context": "def test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def test_pokemon():",
              "linematch_context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\""
            },
            {
              "lineno": 8,
              "coloffset": 0,
              "linematch": "def test_pokemons():",
              "linematch_context": "def test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            },
            {
              "lineno": 12,
              "coloffset": 0,
              "linematch": "def test_quotes():",
              "linematch_context": "def test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def multiplier(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 6,
              "coloffset": 0,
              "linematch": "def use_incrementer() -> None:",
              "linematch_context": "from .multiplier import multiply_five\nfrom .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:"
            },
            {
              "lineno": 11,
              "coloffset": 0,
              "linematch": "def use_multiplier() -> None:",
              "linematch_context": "    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:"
            },
            {
              "lineno": 16,
              "coloffset": 0,
              "linematch": "def use_returner() -> None:",
              "linematch_context": "    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def increment_by(num: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def incrementer(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def returner() -> str:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 0,
              "linematch": "def read_all_lines(file_path: str):",
              "linematch_context": "import json\nimport os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()"
            },
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def grouped(iterable, times: int):",
              "linematch_context": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def use_pokemons():",
              "linematch_context": "from .random_pokemon import POKEMON, POKEMONS_NAME\nfrom .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            },
            {
              "lineno": 14,
              "coloffset": 0,
              "linematch": "def use_quotes():",
              "linematch_context": "def use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def get_session():",
              "linematch_context": "\nthread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n"
            },
            {
              "lineno": 16,
              "coloffset": 0,
              "linematch": "def download_site(url):",
              "linematch_context": "        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):"
            },
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def download_all_sites(sites):",
              "linematch_context": "    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def __init__(self, name, speed=0) -> None:",
              "linematch_context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "def hide(self):",
              "linematch_context": "class Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 2,
              "coloffset": 4,
              "linematch": "def __init__(self, name, speed=0) -> None:",
              "linematch_context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\""
            },
            {
              "lineno": 6,
              "coloffset": 4,
              "linematch": "def __str__(self):",
              "linematch_context": "    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "def run(self, speed):",
              "linematch_context": "\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "def stop(self):",
              "linematch_context": "    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
        "check": {
          "id": "CL001",
          "name": "dummy-test-single-nested-if",
          "description": "Ensure the presence of single nested 'if' statements within function bodies.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body//If",
          "passed": true,
          "matches": [
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "if not hasattr(thread_local, \"session\"):",
              "linematch_context": "thread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 15,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "multiply_three = make_multiplier_of(3)\n\nmultiply_five = make_multiplier_of(5)\n\nif __name__ == \"__main__\":\n    print(multiply_three(9))\n    print(multiply_five(3))\n    print(multiply_five(multiply_three(2)))"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "\nincrement_by_ten = increment_by(10)\n\n\nif __name__ == \"__main__\":\n    ONE_HUNDRED = increment_by_ten(90)\n    print(ONE_HUNDRED)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 15,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "say_cheese = return_msg(\"cheese\")\n\nsay_hello = return_msg()\n\nif __name__ == \"__main__\":\n    print(say_hello())\n    print(say_cheese())"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/random_pokemon.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "POKEMONS_NAME = [pokemon[\"name\"] for pokemon in POKEMON_DATA[\"results\"]]\n\nPOKEMON = choice(POKEMONS_NAME).capitalize()\n\nif __name__ == \"__main__\":\n    print(f\"A Wild {POKEMON} Has Appeared!\")"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/random_quotes.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 7,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "\nQUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()\n\n\nif __name__ == \"__main__\":\n    print(QUOTES_DATA[\"content\"])\n    print(f\" - {QUOTES_DATA['author']}\")"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 26,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":\n    sites = [\n        \"https://jython.org\",\n        \"http://olympus.realpython.org/dice\",\n        \"https://github.com/UltiRequiem/python\",\n    ] * 100"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 12,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")\n    print(my_rabbit)\n    my_rabbit.hide()"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 18,
              "coloffset": 3,
              "linematch": "if __name__ == \"__main__\":",
              "linematch_context": "        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":\n    my_generic_animal = GenericAnimal(\"A generic animal\")\n    print(my_generic_animal)\n    my_generic_animal.run(3)\n    my_generic_animal.stop()"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 11,
              "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
              "linematch_context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            },
            {
              "lineno": 13,
              "coloffset": 11,
              "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
              "linematch_context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            },
            {
              "lineno": 13,
              "coloffset": 11,
              "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
              "linematch_context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def multiplier(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 6,
              "coloffset": 0,
              "linematch": "def use_incrementer() -> None:",
              "linematch_context": "from .multiplier import multiply_five\nfrom .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:"
            },
            {
              "lineno": 11,
              "coloffset": 0,
              "linematch": "def use_multiplier() -> None:",
              "linematch_context": "    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:"
            },
            {
              "lineno": 16,
              "coloffset": 0,
              "linematch": "def use_returner() -> None:",
              "linematch_context": "    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def increment_by(num: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def incrementer(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n"
            },
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def returner() -> str:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 0,
              "linematch": "def read_all_lines(file_path: str):",
              "linematch_context": "import json\nimport os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()"
            },
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def grouped(iterable, times: int):",
              "linematch_context": "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def use_pokemons():",
              "linematch_context": "from .random_pokemon import POKEMON, POKEMONS_NAME\nfrom .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            },
            {
              "lineno": 14,
              "coloffset": 0,
              "linematch": "def use_quotes():",
              "linematch_context": "def use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def get_session():",
              "linematch_context": "\nthread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n"
            },
            {
              "lineno": 16,
              "coloffset": 0,
              "linematch": "def download_site(url):",
              "linematch_context": "        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):"
            },
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def download_all_sites(sites):",
              "linematch_context": "    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def __init__(self, name, speed=0) -> None:",
              "linematch_context": "from .animal import GenericAnimal\n\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "def hide(self):",
              "linematch_context": "class Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 2,
              "coloffset": 4,
              "linematch": "def __init__(self, name, speed=0) -> None:",
              "linematch_context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\""
            },
            {
              "lineno": 6,
              "coloffset": 4,
              "linematch": "def __str__(self):",
              "linematch_context": "    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "def run(self, speed):",
              "linematch_context": "\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "def stop(self):",
              "linematch_context": "    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def test_incrementer():",
              "linematch_context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\""
            },
            {
              "lineno": 8,
              "coloffset": 0,
              "linematch": "def test_multiplier():",
              "linematch_context": "def test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            },
            {
              "lineno": 12,
              "coloffset": 0,
              "linematch": "def test_print():",
              "linematch_context": "def test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def test_version():",
              "linematch_context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            },
            {
              "lineno": 8,
              "coloffset": 0,
              "linematch": "def test_authors():",
              "linematch_context": "def test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def test_pokemon():",
              "linematch_context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\""
            },
            {
              "lineno": 8,
              "coloffset": 0,
              "linematch": "def test_pokemons():",
              "linematch_context": "def test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            },
            {
              "lineno": 12,
              "coloffset": 0,
              "linematch": "def test_quotes():",
              "linematch_context": "def test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
        "check": {
          "id": "F001",
          "name": "Nested Depth (Set value)",
          "description": "Ensure the depth of nesting within functions does not exceed the set value.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef//FunctionDef/ancestor::*",
          "passed": true,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def make_multiplier_of(num_one: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
        "check": {
          "id": "F001",
          "name": "Nested Depth (Set value)",
          "description": "Ensure the depth of nesting within functions does not exceed the set value.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef//FunctionDef/ancestor::*",
          "passed": true,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def increment_by(num: int) -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
        "check": {
          "id": "F001",
          "name": "Nested Depth (Set value)",
          "description": "Ensure the depth of nesting within functions does not exceed the set value.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef//FunctionDef/ancestor::*",
          "passed": true,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def return_msg(msg: str = \"Hello\") -> Callable:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/Assert",
          "passed": true,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
              "linematch_context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
              "linematch_context": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
              "linematch_context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/Assert",
          "passed": true,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert isinstance(__version__, str), \"The version value is invalid!\"",
              "linematch_context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert isinstance(__version__, str), \"The authors value is invalid!\"",
              "linematch_context": "    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/Assert",
          "passed": true,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
              "linematch_context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
              "linematch_context": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
              "linematch_context": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
          "passed": true,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
              "linematch_context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
              "linematch_context": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
              "linematch_context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
          "passed": true,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert isinstance(__version__, str), \"The version value is invalid!\"",
              "linematch_context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert isinstance(__version__, str), \"The authors value is invalid!\"",
              "linematch_context": "    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
          "passed": true,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
              "linematch_context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
              "linematch_context": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
              "linematch_context": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/multiplier.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def multiplier(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n"
            },
            {
              "lineno": 6,
              "coloffset": 8,
              "linematch": "return num_two * num_one",
              "linematch_context": "\n\ndef make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n\nmultiply_three = make_multiplier_of(3)"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "return multiplier",
              "linematch_context": "def make_multiplier_of(num_one: int) -> Callable:\n    def multiplier(num_two: int) -> int:\n        return num_two * num_one\n\n    return multiplier\n\n\nmultiply_three = make_multiplier_of(3)\n\nmultiply_five = make_multiplier_of(5)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/__init__.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 7,
              "coloffset": 4,
              "linematch": "ten = increment_by_ten(0)",
              "linematch_context": "from .returner import say_cheese, say_hello\n\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "print(ten)",
              "linematch_context": "\n\ndef use_incrementer() -> None:\n    ten = increment_by_ten(0)\n    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)"
            },
            {
              "lineno": 12,
              "coloffset": 4,
              "linematch": "fifty = multiply_five(10)",
              "linematch_context": "    print(ten)\n\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "print(fifty)",
              "linematch_context": "\n\ndef use_multiplier() -> None:\n    fifty = multiply_five(10)\n    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()"
            },
            {
              "lineno": 17,
              "coloffset": 4,
              "linematch": "cheese = say_cheese()",
              "linematch_context": "    print(fifty)\n\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)"
            },
            {
              "lineno": 18,
              "coloffset": 4,
              "linematch": "hello = say_hello()",
              "linematch_context": "\n\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)"
            },
            {
              "lineno": 19,
              "coloffset": 4,
              "linematch": "print(cheese, hello)",
              "linematch_context": "\ndef use_returner() -> None:\n    cheese = say_cheese()\n    hello = say_hello()\n    print(cheese, hello)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/incrementer.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def incrementer(num_two: int) -> int:",
              "linematch_context": "from typing import Callable\n\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n"
            },
            {
              "lineno": 6,
              "coloffset": 8,
              "linematch": "return num_two + num",
              "linematch_context": "\n\ndef increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n\nincrement_by_ten = increment_by(10)"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "return incrementer",
              "linematch_context": "def increment_by(num: int) -> Callable:\n    def incrementer(num_two: int) -> int:\n        return num_two + num\n\n    return incrementer\n\n\nincrement_by_ten = increment_by(10)\n\n"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/closures/returner.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "def returner() -> str:",
              "linematch_context": "from typing import Callable\n\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n"
            },
            {
              "lineno": 6,
              "coloffset": 8,
              "linematch": "return msg",
              "linematch_context": "\n\ndef return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n\nsay_cheese = return_msg(\"cheese\")"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "return returner",
              "linematch_context": "def return_msg(msg: str = \"Hello\") -> Callable:\n    def returner() -> str:\n        return msg\n\n    return returner\n\n\nsay_cheese = return_msg(\"cheese\")\n\nsay_hello = return_msg()"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/extras/match_text.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 6,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "import os\n\n\ndef read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "with open(file_path, \"r\", encoding=\"UTF-8\") as file:",
              "linematch_context": "def read_all_lines(file_path: str):\n    \"\"\"\n    Parse a CSV file and return a list of dictionaries.\n    \"\"\"\n    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)"
            },
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "return zip(*[iter(iterable)] * times)",
              "linematch_context": "        return file.read().splitlines()\n\n\ndef grouped(iterable, times: int):\n    return zip(*[iter(iterable)] * times)\n\n\ndata = [\n    {\"shortname\": shortname.upper(), \"fullname\": fullname}\n    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/snippets/__init__.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "return POKEMON in POKEMONS_NAME",
              "linematch_context": "from .random_quotes import QUOTES_DATA\n\n\ndef use_pokemons():\n    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            },
            {
              "lineno": 15,
              "coloffset": 4,
              "linematch": "return isinstance(QUOTES_DATA, dict)",
              "linematch_context": "    return POKEMON in POKEMONS_NAME\n\n\ndef use_quotes():\n    return isinstance(QUOTES_DATA, dict)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/async/threads.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "if not hasattr(thread_local, \"session\"):",
              "linematch_context": "thread_local = threading.local()\n\n\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "return thread_local.session",
              "linematch_context": "\ndef get_session():\n    if not hasattr(thread_local, \"session\"):\n        thread_local.session = requests.Session()\n    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)"
            },
            {
              "lineno": 17,
              "coloffset": 4,
              "linematch": "session = get_session()",
              "linematch_context": "    return thread_local.session\n\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:"
            },
            {
              "lineno": 18,
              "coloffset": 4,
              "linematch": "session.get(url)",
              "linematch_context": "\n\ndef download_site(url):\n    session = get_session()\n    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)"
            },
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "with ThreadPoolExecutor(max_workers=5) as executor:",
              "linematch_context": "    session.get(url)\n\n\ndef download_all_sites(sites):\n    with ThreadPoolExecutor(max_workers=5) as executor:\n        executor.map(download_site, sites)\n\n\nif __name__ == \"__main__\":\n    sites = ["
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/rabit.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 6,
              "coloffset": 8,
              "linematch": "super().__init__(name, speed=speed)",
              "linematch_context": "\n\nclass Rabbit(GenericAnimal):\n    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n"
            },
            {
              "lineno": 9,
              "coloffset": 8,
              "linematch": "print(f\"{self.name} hides!\")",
              "linematch_context": "    def __init__(self, name, speed=0) -> None:\n        super().__init__(name, speed=speed)\n\n    def hide(self):\n        print(f\"{self.name} hides!\")\n\n\nif __name__ == \"__main__\":\n    my_rabbit = Rabbit(\"Alen\")\n    print(my_rabbit)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/ultiplayground/oop/animal.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 3,
              "coloffset": 8,
              "linematch": "self.name = name",
              "linematch_context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n"
            },
            {
              "lineno": 4,
              "coloffset": 8,
              "linematch": "self.speed = speed",
              "linematch_context": "class GenericAnimal:\n    def __init__(self, name, speed=0) -> None:\n        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):"
            },
            {
              "lineno": 7,
              "coloffset": 8,
              "linematch": "return f\"{self.name} is happy :)\"",
              "linematch_context": "        self.name = name\n        self.speed = speed\n\n    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n"
            },
            {
              "lineno": 10,
              "coloffset": 8,
              "linematch": "self.speed = speed",
              "linematch_context": "    def __str__(self):\n        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")"
            },
            {
              "lineno": 11,
              "coloffset": 8,
              "linematch": "print(f\"{self.name} runs with speed {self.speed}.\")",
              "linematch_context": "        return f\"{self.name} is happy :)\"\n\n    def run(self, speed):\n        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n"
            },
            {
              "lineno": 14,
              "coloffset": 8,
              "linematch": "self.speed = 0",
              "linematch_context": "        self.speed = speed\n        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":\n    my_generic_animal = GenericAnimal(\"A generic animal\")"
            },
            {
              "lineno": 15,
              "coloffset": 8,
              "linematch": "print(f\"{self.name} stands still.\")",
              "linematch_context": "        print(f\"{self.name} runs with speed {self.speed}.\")\n\n    def stop(self):\n        self.speed = 0\n        print(f\"{self.name} stands still.\")\n\n\nif __name__ == \"__main__\":\n    my_generic_animal = GenericAnimal(\"A generic animal\")\n    print(my_generic_animal)"
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_closures.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"",
              "linematch_context": "from ultiplayground.closures import increment_by_ten, multiply_five, say_cheese\n\n\ndef test_incrementer():\n    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert multiply_five(10) == 50, \"Multiplier is invalid!\"",
              "linematch_context": "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n\n\ndef test_multiplier():\n    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "assert say_cheese() == \"cheese\", \"Incorrect message!\"",
              "linematch_context": "    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n\n\ndef test_print():\n    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_playground.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert isinstance(__version__, str), \"The version value is invalid!\"",
              "linematch_context": "from ultiplayground import __authors__, __version__\n\n\ndef test_version():\n    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert isinstance(__version__, str), \"The authors value is invalid!\"",
              "linematch_context": "    assert isinstance(__version__, str), \"The version value is invalid!\"\n\n\ndef test_authors():\n    assert isinstance(__version__, str), \"The authors value is invalid!\""
            }
          ]
        }
      },
      {
        "filename": "/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/python-playground/tests/test_snippets.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"",
              "linematch_context": "from ultiplayground.snippets import POKEMON, POKEMONS_NAME, QUOTES_DATA\n\n\ndef test_pokemon():\n    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n"
            },
            {
              "lineno": 9,
              "coloffset": 4,
              "linematch": "assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"",
              "linematch_context": "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n\n\ndef test_pokemons():\n    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"",
              "linematch_context": "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n\n\ndef test_quotes():\n    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            }
          ]
        }
      }
    ]
  },
  "mutmut_result": {
    "disabled": 0,
    "errors": 0,
    "failures": 182,
    "tests": 207,
    "time": 0,
    "testsuite": [
      {
        "disabled": 0,
        "errors": 0,
        "failures": 182,
        "name": "mutmut",
        "skipped": 0,
        "tests": 207,
        "time": 0,
        "testcase": [
          {
            "name": "Mutant #1",
            "file": "ultiplayground/__init__.py",
            "line": 6,
            "failure": [
              {
                "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = [\"XXEliaz Bobadilla <eliaz.bobadilladev@gmail.com>XX\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]"
            ]
          },
          {
            "name": "Mutant #2",
            "file": "ultiplayground/__init__.py",
            "line": 6,
            "failure": [
              {
                "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -3,7 +3,7 @@\n \"\"\"\n \n __version__ = \"0.1.4\"\n-__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n+__authors__ = None\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "__authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]"
            ]
          },
          {
            "name": "Mutant #3",
            "file": "ultiplayground/__init__.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -4,7 +4,7 @@\n \n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n-__author_email__ = \"eliaz.bobadilladev@gmail.com\"\n+__author_email__ = \"XXeliaz.bobadilladev@gmail.comXX\"\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "__author_email__ = \"eliaz.bobadilladev@gmail.com\""
            ]
          },
          {
            "name": "Mutant #4",
            "file": "ultiplayground/__init__.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -4,7 +4,7 @@\n \n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n-__author_email__ = \"eliaz.bobadilladev@gmail.com\"\n+__author_email__ = None\n __url__ = \"https://github.com/UltiRequiem/python\"\n __package_name__ = \"ultiplayground\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "__author_email__ = \"eliaz.bobadilladev@gmail.com\""
            ]
          },
          {
            "name": "Mutant #5",
            "file": "ultiplayground/__init__.py",
            "line": 8,
            "failure": [
              {
                "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -5,6 +5,6 @@\n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n-__url__ = \"https://github.com/UltiRequiem/python\"\n+__url__ = \"XXhttps://github.com/UltiRequiem/pythonXX\"\n __package_name__ = \"ultiplayground\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "__url__ = \"https://github.com/UltiRequiem/python\""
            ]
          },
          {
            "name": "Mutant #6",
            "file": "ultiplayground/__init__.py",
            "line": 8,
            "failure": [
              {
                "inner": "--- ultiplayground/__init__.py\n+++ ultiplayground/__init__.py\n@@ -5,6 +5,6 @@\n __version__ = \"0.1.4\"\n __authors__ = [\"Eliaz Bobadilla <eliaz.bobadilladev@gmail.com>\"]\n __author_email__ = \"eliaz.bobadilladev@gmail.com\"\n-__url__ = \"https://github.com/UltiRequiem/python\"\n+__url__ = None\n __package_name__ = \"ultiplayground\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "__url__ = \"https://github.com/UltiRequiem/python\""
            ]
          },
          {
            "name": "Mutant #7",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -1,7 +1,7 @@\n from bs4 import BeautifulSoup\n from requests import get\n \n-BASE_URL = \"https://docs.rs/axum/latest/axum\"\n+BASE_URL = \"XXhttps://docs.rs/axum/latest/axumXX\"\n \n response = get(BASE_URL)\n soup = BeautifulSoup(response.text, \"html.parser\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "BASE_URL = \"https://docs.rs/axum/latest/axum\""
            ]
          },
          {
            "name": "Mutant #8",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -1,7 +1,7 @@\n from bs4 import BeautifulSoup\n from requests import get\n \n-BASE_URL = \"https://docs.rs/axum/latest/axum\"\n+BASE_URL = None\n \n response = get(BASE_URL)\n soup = BeautifulSoup(response.text, \"html.parser\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "BASE_URL = \"https://docs.rs/axum/latest/axum\""
            ]
          },
          {
            "name": "Mutant #9",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 6,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -3,7 +3,7 @@\n \n BASE_URL = \"https://docs.rs/axum/latest/axum\"\n \n-response = get(BASE_URL)\n+response = None\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n block = soup.find_all(\"h2\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "response = get(BASE_URL)"
            ]
          },
          {
            "name": "Mutant #10",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -4,7 +4,7 @@\n BASE_URL = \"https://docs.rs/axum/latest/axum\"\n \n response = get(BASE_URL)\n-soup = BeautifulSoup(response.text, \"html.parser\")\n+soup = BeautifulSoup(response.text, \"XXhtml.parserXX\")\n \n block = soup.find_all(\"h2\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(response.text, \"html.parser\")"
            ]
          },
          {
            "name": "Mutant #11",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -4,7 +4,7 @@\n BASE_URL = \"https://docs.rs/axum/latest/axum\"\n \n response = get(BASE_URL)\n-soup = BeautifulSoup(response.text, \"html.parser\")\n+soup = None\n \n block = soup.find_all(\"h2\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(response.text, \"html.parser\")"
            ]
          },
          {
            "name": "Mutant #12",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -6,7 +6,7 @@\n response = get(BASE_URL)\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find_all(\"h2\")\n+block = soup.find_all(\"XXh2XX\")\n \n for link in [url.find(\"a\") for url in block[3:-4]]:\n     print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find_all(\"h2\")"
            ]
          },
          {
            "name": "Mutant #13",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -6,7 +6,7 @@\n response = get(BASE_URL)\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find_all(\"h2\")\n+block = None\n \n for link in [url.find(\"a\") for url in block[3:-4]]:\n     print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find_all(\"h2\")"
            ]
          },
          {
            "name": "Mutant #14",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -8,6 +8,6 @@\n \n block = soup.find_all(\"h2\")\n \n-for link in [url.find(\"a\") for url in block[3:-4]]:\n+for link in [url.find(\"XXaXX\") for url in block[3:-4]]:\n     print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for link in [url.find(\"a\") for url in block[3:-4]]:"
            ]
          },
          {
            "name": "Mutant #15",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -8,6 +8,6 @@\n \n block = soup.find_all(\"h2\")\n \n-for link in [url.find(\"a\") for url in block[3:-4]]:\n+for link in [url.find(\"a\") for url in block[4:-4]]:\n     print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for link in [url.find(\"a\") for url in block[3:-4]]:"
            ]
          },
          {
            "name": "Mutant #16",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -8,6 +8,6 @@\n \n block = soup.find_all(\"h2\")\n \n-for link in [url.find(\"a\") for url in block[3:-4]]:\n+for link in [url.find(\"a\") for url in block[3:+4]]:\n     print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for link in [url.find(\"a\") for url in block[3:-4]]:"
            ]
          },
          {
            "name": "Mutant #17",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -8,6 +8,6 @@\n \n block = soup.find_all(\"h2\")\n \n-for link in [url.find(\"a\") for url in block[3:-4]]:\n+for link in [url.find(\"a\") for url in block[3:-5]]:\n     print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for link in [url.find(\"a\") for url in block[3:-4]]:"
            ]
          },
          {
            "name": "Mutant #18",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -9,5 +9,5 @@\n block = soup.find_all(\"h2\")\n \n for link in [url.find(\"a\") for url in block[3:-4]]:\n-    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n+    print(f\"- [ ] [{link.text}]({BASE_URL-'/'+link.get('href')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")"
            ]
          },
          {
            "name": "Mutant #19",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -9,5 +9,5 @@\n block = soup.find_all(\"h2\")\n \n for link in [url.find(\"a\") for url in block[3:-4]]:\n-    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n+    print(f\"- [ ] [{link.text}]({BASE_URL+'XX/XX'+link.get('href')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")"
            ]
          },
          {
            "name": "Mutant #20",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -9,5 +9,5 @@\n block = soup.find_all(\"h2\")\n \n for link in [url.find(\"a\") for url in block[3:-4]]:\n-    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n+    print(f\"- [ ] [{link.text}]({BASE_URL+'/'-link.get('href')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")"
            ]
          },
          {
            "name": "Mutant #21",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -9,5 +9,5 @@\n block = soup.find_all(\"h2\")\n \n for link in [url.find(\"a\") for url in block[3:-4]]:\n-    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n+    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('XXhrefXX')})\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")"
            ]
          },
          {
            "name": "Mutant #22",
            "file": "ultiplayground/scrapping/axum.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/axum.py\n+++ ultiplayground/scrapping/axum.py\n@@ -9,5 +9,5 @@\n block = soup.find_all(\"h2\")\n \n for link in [url.find(\"a\") for url in block[3:-4]]:\n-    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")\n+    print(f\"XX- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"- [ ] [{link.text}]({BASE_URL+'/'+link.get('href')})\")"
            ]
          },
          {
            "name": "Mutant #23",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -1,7 +1,7 @@\n from bs4 import BeautifulSoup\n from requests import get\n \n-response = get(\"https://fastify.io/docs/latest\")\n+response = get(\"XXhttps://fastify.io/docs/latestXX\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "response = get(\"https://fastify.io/docs/latest\")"
            ]
          },
          {
            "name": "Mutant #24",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -1,7 +1,7 @@\n from bs4 import BeautifulSoup\n from requests import get\n \n-response = get(\"https://fastify.io/docs/latest\")\n+response = None\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "response = get(\"https://fastify.io/docs/latest\")"
            ]
          },
          {
            "name": "Mutant #25",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -2,7 +2,7 @@\n from requests import get\n \n response = get(\"https://fastify.io/docs/latest\")\n-soup = BeautifulSoup(response.text, \"html.parser\")\n+soup = BeautifulSoup(response.text, \"XXhtml.parserXX\")\n \n block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(response.text, \"html.parser\")"
            ]
          },
          {
            "name": "Mutant #26",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -2,7 +2,7 @@\n from requests import get\n \n response = get(\"https://fastify.io/docs/latest\")\n-soup = BeautifulSoup(response.text, \"html.parser\")\n+soup = None\n \n block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(response.text, \"html.parser\")"
            ]
          },
          {
            "name": "Mutant #27",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -4,7 +4,7 @@\n response = get(\"https://fastify.io/docs/latest\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n+block = soup.find(\"XXdivXX\", class_=\"column is-3 is-hidden-mobile\")\n \n for point in block.find_all(\"a\"):\n     print(f\"- [ ] {point.text}\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")"
            ]
          },
          {
            "name": "Mutant #28",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -4,7 +4,7 @@\n response = get(\"https://fastify.io/docs/latest\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n+block = soup.find(\"div\", class_=\"XXcolumn is-3 is-hidden-mobileXX\")\n \n for point in block.find_all(\"a\"):\n     print(f\"- [ ] {point.text}\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")"
            ]
          },
          {
            "name": "Mutant #29",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -4,7 +4,7 @@\n response = get(\"https://fastify.io/docs/latest\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n+block = None\n \n for point in block.find_all(\"a\"):\n     print(f\"- [ ] {point.text}\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")"
            ]
          },
          {
            "name": "Mutant #30",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -6,6 +6,6 @@\n \n block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n \n-for point in block.find_all(\"a\"):\n+for point in block.find_all(\"XXaXX\"):\n     print(f\"- [ ] {point.text}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for point in block.find_all(\"a\"):"
            ]
          },
          {
            "name": "Mutant #31",
            "file": "ultiplayground/scrapping/fastify.py",
            "line": 10,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/fastify.py\n+++ ultiplayground/scrapping/fastify.py\n@@ -7,5 +7,5 @@\n block = soup.find(\"div\", class_=\"column is-3 is-hidden-mobile\")\n \n for point in block.find_all(\"a\"):\n-    print(f\"- [ ] {point.text}\")\n+    print(f\"XX- [ ] {point.text}XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"- [ ] {point.text}\")"
            ]
          },
          {
            "name": "Mutant #32",
            "file": "ultiplayground/scrapping/react.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -1,7 +1,7 @@\n from bs4 import BeautifulSoup\n from requests import get\n \n-BASE_URL = \"https://reactjs.org\"\n+BASE_URL = \"XXhttps://reactjs.orgXX\"\n \n response = get(f\"{BASE_URL}/docs/getting-started.html\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "BASE_URL = \"https://reactjs.org\""
            ]
          },
          {
            "name": "Mutant #33",
            "file": "ultiplayground/scrapping/react.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -1,7 +1,7 @@\n from bs4 import BeautifulSoup\n from requests import get\n \n-BASE_URL = \"https://reactjs.org\"\n+BASE_URL = None\n \n response = get(f\"{BASE_URL}/docs/getting-started.html\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "BASE_URL = \"https://reactjs.org\""
            ]
          },
          {
            "name": "Mutant #34",
            "file": "ultiplayground/scrapping/react.py",
            "line": 6,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -3,7 +3,7 @@\n \n BASE_URL = \"https://reactjs.org\"\n \n-response = get(f\"{BASE_URL}/docs/getting-started.html\")\n+response = get(f\"XX{BASE_URL}/docs/getting-started.htmlXX\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n block = soup.find(\"div\", class_=\"css-1sdm35g\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "response = get(f\"{BASE_URL}/docs/getting-started.html\")"
            ]
          },
          {
            "name": "Mutant #35",
            "file": "ultiplayground/scrapping/react.py",
            "line": 6,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -3,7 +3,7 @@\n \n BASE_URL = \"https://reactjs.org\"\n \n-response = get(f\"{BASE_URL}/docs/getting-started.html\")\n+response = None\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n block = soup.find(\"div\", class_=\"css-1sdm35g\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "response = get(f\"{BASE_URL}/docs/getting-started.html\")"
            ]
          },
          {
            "name": "Mutant #36",
            "file": "ultiplayground/scrapping/react.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -4,7 +4,7 @@\n BASE_URL = \"https://reactjs.org\"\n \n response = get(f\"{BASE_URL}/docs/getting-started.html\")\n-soup = BeautifulSoup(response.text, \"html.parser\")\n+soup = BeautifulSoup(response.text, \"XXhtml.parserXX\")\n \n block = soup.find(\"div\", class_=\"css-1sdm35g\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(response.text, \"html.parser\")"
            ]
          },
          {
            "name": "Mutant #37",
            "file": "ultiplayground/scrapping/react.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -4,7 +4,7 @@\n BASE_URL = \"https://reactjs.org\"\n \n response = get(f\"{BASE_URL}/docs/getting-started.html\")\n-soup = BeautifulSoup(response.text, \"html.parser\")\n+soup = None\n \n block = soup.find(\"div\", class_=\"css-1sdm35g\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(response.text, \"html.parser\")"
            ]
          },
          {
            "name": "Mutant #38",
            "file": "ultiplayground/scrapping/react.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -6,7 +6,7 @@\n response = get(f\"{BASE_URL}/docs/getting-started.html\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find(\"div\", class_=\"css-1sdm35g\")\n+block = soup.find(\"XXdivXX\", class_=\"css-1sdm35g\")\n \n for category in block.find_all(\"button\"):\n     print(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"css-1sdm35g\")"
            ]
          },
          {
            "name": "Mutant #39",
            "file": "ultiplayground/scrapping/react.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -6,7 +6,7 @@\n response = get(f\"{BASE_URL}/docs/getting-started.html\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find(\"div\", class_=\"css-1sdm35g\")\n+block = soup.find(\"div\", class_=\"XXcss-1sdm35gXX\")\n \n for category in block.find_all(\"button\"):\n     print(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"css-1sdm35g\")"
            ]
          },
          {
            "name": "Mutant #40",
            "file": "ultiplayground/scrapping/react.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -6,7 +6,7 @@\n response = get(f\"{BASE_URL}/docs/getting-started.html\")\n soup = BeautifulSoup(response.text, \"html.parser\")\n \n-block = soup.find(\"div\", class_=\"css-1sdm35g\")\n+block = None\n \n for category in block.find_all(\"button\"):\n     print(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"css-1sdm35g\")"
            ]
          },
          {
            "name": "Mutant #41",
            "file": "ultiplayground/scrapping/react.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -8,7 +8,7 @@\n \n block = soup.find(\"div\", class_=\"css-1sdm35g\")\n \n-for category in block.find_all(\"button\"):\n+for category in block.find_all(\"XXbuttonXX\"):\n     print(\n         f\"\"\"\\n <details>\n   <summary>{category.text}</summary>\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for category in block.find_all(\"button\"):"
            ]
          },
          {
            "name": "Mutant #42",
            "file": "ultiplayground/scrapping/react.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -10,9 +10,9 @@\n \n for category in block.find_all(\"button\"):\n     print(\n-        f\"\"\"\\n <details>\n+        f\"\"\"XX\\n <details>\n   <summary>{category.text}</summary>\n-  \"\"\"\n+  XX\"\"\"\n     )\n     for point in category.parent(\"a\"):\n         print(f\"- [ ] [{point.text}]({BASE_URL}{point['href']})\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "  \"\"\""
            ]
          },
          {
            "name": "Mutant #43",
            "file": "ultiplayground/scrapping/react.py",
            "line": 17,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -14,7 +14,7 @@\n   <summary>{category.text}</summary>\n   \"\"\"\n     )\n-    for point in category.parent(\"a\"):\n+    for point in category.parent(\"XXaXX\"):\n         print(f\"- [ ] [{point.text}]({BASE_URL}{point['href']})\")\n \n     print(\"</details>\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for point in category.parent(\"a\"):"
            ]
          },
          {
            "name": "Mutant #44",
            "file": "ultiplayground/scrapping/react.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -15,7 +15,7 @@\n   \"\"\"\n     )\n     for point in category.parent(\"a\"):\n-        print(f\"- [ ] [{point.text}]({BASE_URL}{point['href']})\")\n+        print(f\"- [ ] [{point.text}]({BASE_URL}{point['XXhrefXX']})\")\n \n     print(\"</details>\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        print(f\"- [ ] [{point.text}]({BASE_URL}{point['href']})\")"
            ]
          },
          {
            "name": "Mutant #45",
            "file": "ultiplayground/scrapping/react.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -15,7 +15,7 @@\n   \"\"\"\n     )\n     for point in category.parent(\"a\"):\n-        print(f\"- [ ] [{point.text}]({BASE_URL}{point['href']})\")\n+        print(f\"XX- [ ] [{point.text}]({BASE_URL}{point['href']})XX\")\n \n     print(\"</details>\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        print(f\"- [ ] [{point.text}]({BASE_URL}{point['href']})\")"
            ]
          },
          {
            "name": "Mutant #46",
            "file": "ultiplayground/scrapping/react.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/react.py\n+++ ultiplayground/scrapping/react.py\n@@ -17,5 +17,5 @@\n     for point in category.parent(\"a\"):\n         print(f\"- [ ] [{point.text}]({BASE_URL}{point['href']})\")\n \n-    print(\"</details>\")\n+    print(\"XX</details>XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(\"</details>\")"
            ]
          },
          {
            "name": "Mutant #47",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -6,7 +6,7 @@\n from urllib.parse import urlparse\n from bs4 import BeautifulSoup\n \n-URL = \"https://rosstat.gov.ru/folder/12781\"\n+URL = \"XXhttps://rosstat.gov.ru/folder/12781XX\"\n \n responce = requests.get(URL).text\n soup = BeautifulSoup(responce, \"lxml\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "URL = \"https://rosstat.gov.ru/folder/12781\""
            ]
          },
          {
            "name": "Mutant #48",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -6,7 +6,7 @@\n from urllib.parse import urlparse\n from bs4 import BeautifulSoup\n \n-URL = \"https://rosstat.gov.ru/folder/12781\"\n+URL = None\n \n responce = requests.get(URL).text\n soup = BeautifulSoup(responce, \"lxml\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "URL = \"https://rosstat.gov.ru/folder/12781\""
            ]
          },
          {
            "name": "Mutant #49",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -8,7 +8,7 @@\n \n URL = \"https://rosstat.gov.ru/folder/12781\"\n \n-responce = requests.get(URL).text\n+responce = None\n soup = BeautifulSoup(responce, \"lxml\")\n block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "responce = requests.get(URL).text"
            ]
          },
          {
            "name": "Mutant #50",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -9,7 +9,7 @@\n URL = \"https://rosstat.gov.ru/folder/12781\"\n \n responce = requests.get(URL).text\n-soup = BeautifulSoup(responce, \"lxml\")\n+soup = BeautifulSoup(responce, \"XXlxmlXX\")\n block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n \n list_info_block_row = block.find_all(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(responce, \"lxml\")"
            ]
          },
          {
            "name": "Mutant #51",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -9,7 +9,7 @@\n URL = \"https://rosstat.gov.ru/folder/12781\"\n \n responce = requests.get(URL).text\n-soup = BeautifulSoup(responce, \"lxml\")\n+soup = None\n block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n \n list_info_block_row = block.find_all(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "soup = BeautifulSoup(responce, \"lxml\")"
            ]
          },
          {
            "name": "Mutant #52",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -10,7 +10,7 @@\n \n responce = requests.get(URL).text\n soup = BeautifulSoup(responce, \"lxml\")\n-block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n+block = soup.find(\"XXdivXX\", class_=\"col-lg-8 order-1 order-lg-1\")\n \n list_info_block_row = block.find_all(\n     \"div\", class_=\"document-list__item document-list__item--row\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")"
            ]
          },
          {
            "name": "Mutant #53",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -10,7 +10,7 @@\n \n responce = requests.get(URL).text\n soup = BeautifulSoup(responce, \"lxml\")\n-block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n+block = soup.find(\"div\", class_=\"XXcol-lg-8 order-1 order-lg-1XX\")\n \n list_info_block_row = block.find_all(\n     \"div\", class_=\"document-list__item document-list__item--row\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")"
            ]
          },
          {
            "name": "Mutant #54",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -10,7 +10,7 @@\n \n responce = requests.get(URL).text\n soup = BeautifulSoup(responce, \"lxml\")\n-block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n+block = None\n \n list_info_block_row = block.find_all(\n     \"div\", class_=\"document-list__item document-list__item--row\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")"
            ]
          },
          {
            "name": "Mutant #55",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 16,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -13,7 +13,7 @@\n block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n \n list_info_block_row = block.find_all(\n-    \"div\", class_=\"document-list__item document-list__item--row\"\n+    \"XXdivXX\", class_=\"document-list__item document-list__item--row\"\n )\n \n for text_block_row in list_info_block_row:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    \"div\", class_=\"document-list__item document-list__item--row\""
            ]
          },
          {
            "name": "Mutant #56",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 16,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -13,7 +13,7 @@\n block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n \n list_info_block_row = block.find_all(\n-    \"div\", class_=\"document-list__item document-list__item--row\"\n+    \"div\", class_=\"XXdocument-list__item document-list__item--rowXX\"\n )\n \n for text_block_row in list_info_block_row:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    \"div\", class_=\"document-list__item document-list__item--row\""
            ]
          },
          {
            "name": "Mutant #57",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 17,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -12,9 +12,7 @@\n soup = BeautifulSoup(responce, \"lxml\")\n block = soup.find(\"div\", class_=\"col-lg-8 order-1 order-lg-1\")\n \n-list_info_block_row = block.find_all(\n-    \"div\", class_=\"document-list__item document-list__item--row\"\n-)\n+list_info_block_row = None\n \n for text_block_row in list_info_block_row:\n     new_list = []\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              ")"
            ]
          },
          {
            "name": "Mutant #58",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -17,7 +17,7 @@\n )\n \n for text_block_row in list_info_block_row:\n-    new_list = []\n+    new_list = None\n     title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n     preprocessing_title = title_element_row.text.strip()\n     link_element_row = text_block_row.find(\"a\").get(\"href\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    new_list = []"
            ]
          },
          {
            "name": "Mutant #59",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 21,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -18,7 +18,7 @@\n \n for text_block_row in list_info_block_row:\n     new_list = []\n-    title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n+    title_element_row = text_block_row.find(\"XXdivXX\", class_=\"document-list__item-title\")\n     preprocessing_title = title_element_row.text.strip()\n     link_element_row = text_block_row.find(\"a\").get(\"href\")\n     new_list.append(preprocessing_title)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")"
            ]
          },
          {
            "name": "Mutant #60",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 21,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -18,7 +18,7 @@\n \n for text_block_row in list_info_block_row:\n     new_list = []\n-    title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n+    title_element_row = text_block_row.find(\"div\", class_=\"XXdocument-list__item-titleXX\")\n     preprocessing_title = title_element_row.text.strip()\n     link_element_row = text_block_row.find(\"a\").get(\"href\")\n     new_list.append(preprocessing_title)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")"
            ]
          },
          {
            "name": "Mutant #61",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 21,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -18,7 +18,7 @@\n \n for text_block_row in list_info_block_row:\n     new_list = []\n-    title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n+    title_element_row = None\n     preprocessing_title = title_element_row.text.strip()\n     link_element_row = text_block_row.find(\"a\").get(\"href\")\n     new_list.append(preprocessing_title)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")"
            ]
          },
          {
            "name": "Mutant #62",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 22,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -19,7 +19,7 @@\n for text_block_row in list_info_block_row:\n     new_list = []\n     title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n-    preprocessing_title = title_element_row.text.strip()\n+    preprocessing_title = None\n     link_element_row = text_block_row.find(\"a\").get(\"href\")\n     new_list.append(preprocessing_title)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    preprocessing_title = title_element_row.text.strip()"
            ]
          },
          {
            "name": "Mutant #63",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 23,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -20,7 +20,7 @@\n     new_list = []\n     title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n     preprocessing_title = title_element_row.text.strip()\n-    link_element_row = text_block_row.find(\"a\").get(\"href\")\n+    link_element_row = text_block_row.find(\"XXaXX\").get(\"href\")\n     new_list.append(preprocessing_title)\n \n     if not link_element_row.startswith(\"http\"):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    link_element_row = text_block_row.find(\"a\").get(\"href\")"
            ]
          },
          {
            "name": "Mutant #64",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 23,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -20,7 +20,7 @@\n     new_list = []\n     title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n     preprocessing_title = title_element_row.text.strip()\n-    link_element_row = text_block_row.find(\"a\").get(\"href\")\n+    link_element_row = text_block_row.find(\"a\").get(\"XXhrefXX\")\n     new_list.append(preprocessing_title)\n \n     if not link_element_row.startswith(\"http\"):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    link_element_row = text_block_row.find(\"a\").get(\"href\")"
            ]
          },
          {
            "name": "Mutant #65",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 23,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -20,7 +20,7 @@\n     new_list = []\n     title_element_row = text_block_row.find(\"div\", class_=\"document-list__item-title\")\n     preprocessing_title = title_element_row.text.strip()\n-    link_element_row = text_block_row.find(\"a\").get(\"href\")\n+    link_element_row = None\n     new_list.append(preprocessing_title)\n \n     if not link_element_row.startswith(\"http\"):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    link_element_row = text_block_row.find(\"a\").get(\"href\")"
            ]
          },
          {
            "name": "Mutant #66",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 26,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -23,7 +23,7 @@\n     link_element_row = text_block_row.find(\"a\").get(\"href\")\n     new_list.append(preprocessing_title)\n \n-    if not link_element_row.startswith(\"http\"):\n+    if  link_element_row.startswith(\"http\"):\n         parsed_url = urlparse(URL)\n         link_element_row = (\n             parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if not link_element_row.startswith(\"http\"):"
            ]
          },
          {
            "name": "Mutant #67",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 26,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -23,7 +23,7 @@\n     link_element_row = text_block_row.find(\"a\").get(\"href\")\n     new_list.append(preprocessing_title)\n \n-    if not link_element_row.startswith(\"http\"):\n+    if not link_element_row.startswith(\"XXhttpXX\"):\n         parsed_url = urlparse(URL)\n         link_element_row = (\n             parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if not link_element_row.startswith(\"http\"):"
            ]
          },
          {
            "name": "Mutant #68",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 27,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -24,7 +24,7 @@\n     new_list.append(preprocessing_title)\n \n     if not link_element_row.startswith(\"http\"):\n-        parsed_url = urlparse(URL)\n+        parsed_url = None\n         link_element_row = (\n             parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n         )\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        parsed_url = urlparse(URL)"
            ]
          },
          {
            "name": "Mutant #69",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 29,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -26,7 +26,7 @@\n     if not link_element_row.startswith(\"http\"):\n         parsed_url = urlparse(URL)\n         link_element_row = (\n-            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n+            parsed_url.scheme - \"://\" + parsed_url.netloc + link_element_row\n         )\n \n     new_list.append(link_element_row)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row"
            ]
          },
          {
            "name": "Mutant #70",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 29,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -26,7 +26,7 @@\n     if not link_element_row.startswith(\"http\"):\n         parsed_url = urlparse(URL)\n         link_element_row = (\n-            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n+            parsed_url.scheme + \"XX://XX\" + parsed_url.netloc + link_element_row\n         )\n \n     new_list.append(link_element_row)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row"
            ]
          },
          {
            "name": "Mutant #71",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 29,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -26,7 +26,7 @@\n     if not link_element_row.startswith(\"http\"):\n         parsed_url = urlparse(URL)\n         link_element_row = (\n-            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n+            parsed_url.scheme + \"://\" - parsed_url.netloc + link_element_row\n         )\n \n     new_list.append(link_element_row)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row"
            ]
          },
          {
            "name": "Mutant #72",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 29,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -26,7 +26,7 @@\n     if not link_element_row.startswith(\"http\"):\n         parsed_url = urlparse(URL)\n         link_element_row = (\n-            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n+            parsed_url.scheme + \"://\" + parsed_url.netloc - link_element_row\n         )\n \n     new_list.append(link_element_row)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row"
            ]
          },
          {
            "name": "Mutant #73",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 30,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -25,9 +25,7 @@\n \n     if not link_element_row.startswith(\"http\"):\n         parsed_url = urlparse(URL)\n-        link_element_row = (\n-            parsed_url.scheme + \"://\" + parsed_url.netloc + link_element_row\n-        )\n+        link_element_row = None\n \n     new_list.append(link_element_row)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        )"
            ]
          },
          {
            "name": "Mutant #74",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 34,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -31,7 +31,7 @@\n \n     new_list.append(link_element_row)\n \n-    print(new_list)\n+    print(None)\n     print(title_element_row.text.strip())\n     print(link_element_row)\n     print(\"\\n\\n\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(new_list)"
            ]
          },
          {
            "name": "Mutant #75",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 36,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -33,6 +33,6 @@\n \n     print(new_list)\n     print(title_element_row.text.strip())\n-    print(link_element_row)\n+    print(None)\n     print(\"\\n\\n\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(link_element_row)"
            ]
          },
          {
            "name": "Mutant #76",
            "file": "ultiplayground/scrapping/kostya.py",
            "line": 37,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/kostya.py\n+++ ultiplayground/scrapping/kostya.py\n@@ -34,5 +34,5 @@\n     print(new_list)\n     print(title_element_row.text.strip())\n     print(link_element_row)\n-    print(\"\\n\\n\")\n+    print(\"XX\\n\\nXX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(\"\\n\\n\")"
            ]
          },
          {
            "name": "Mutant #77",
            "file": "ultiplayground/scrapping/cloudflare_worker.py",
            "line": 3,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/cloudflare_worker.py\n+++ ultiplayground/scrapping/cloudflare_worker.py\n@@ -1,6 +1,6 @@\n import cfscrape\n \n-scraper = cfscrape.create_scraper()\n+scraper = None\n \n response = scraper.get(\"https://developers.cloudflare.com/workers\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "scraper = cfscrape.create_scraper()"
            ]
          },
          {
            "name": "Mutant #78",
            "file": "ultiplayground/scrapping/cloudflare_worker.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/cloudflare_worker.py\n+++ ultiplayground/scrapping/cloudflare_worker.py\n@@ -2,7 +2,7 @@\n \n scraper = cfscrape.create_scraper()\n \n-response = scraper.get(\"https://developers.cloudflare.com/workers\")\n+response = scraper.get(\"XXhttps://developers.cloudflare.com/workersXX\")\n \n print(response.text)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "response = scraper.get(\"https://developers.cloudflare.com/workers\")"
            ]
          },
          {
            "name": "Mutant #79",
            "file": "ultiplayground/scrapping/cloudflare_worker.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- ultiplayground/scrapping/cloudflare_worker.py\n+++ ultiplayground/scrapping/cloudflare_worker.py\n@@ -2,7 +2,7 @@\n \n scraper = cfscrape.create_scraper()\n \n-response = scraper.get(\"https://developers.cloudflare.com/workers\")\n+response = None\n \n print(response.text)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "response = scraper.get(\"https://developers.cloudflare.com/workers\")"
            ]
          },
          {
            "name": "Mutant #80",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 6,
            "system-out": [
              "        return num_two * num_one"
            ]
          },
          {
            "name": "Mutant #81",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -8,7 +8,7 @@\n     return multiplier\n \n \n-multiply_three = make_multiplier_of(3)\n+multiply_three = make_multiplier_of(4)\n \n multiply_five = make_multiplier_of(5)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "multiply_three = make_multiplier_of(3)"
            ]
          },
          {
            "name": "Mutant #82",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -8,7 +8,7 @@\n     return multiplier\n \n \n-multiply_three = make_multiplier_of(3)\n+multiply_three = None\n \n multiply_five = make_multiplier_of(5)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "multiply_three = make_multiplier_of(3)"
            ]
          },
          {
            "name": "Mutant #83",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 13,
            "system-out": [
              "multiply_five = make_multiplier_of(5)"
            ]
          },
          {
            "name": "Mutant #84",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 13,
            "system-out": [
              "multiply_five = make_multiplier_of(5)"
            ]
          },
          {
            "name": "Mutant #85",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -12,7 +12,7 @@\n \n multiply_five = make_multiplier_of(5)\n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(multiply_three(9))\n     print(multiply_five(3))\n     print(multiply_five(multiply_three(2)))\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #86",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -12,7 +12,7 @@\n \n multiply_five = make_multiplier_of(5)\n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(multiply_three(9))\n     print(multiply_five(3))\n     print(multiply_five(multiply_three(2)))\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #87",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 16,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -13,7 +13,7 @@\n multiply_five = make_multiplier_of(5)\n \n if __name__ == \"__main__\":\n-    print(multiply_three(9))\n+    print(multiply_three(10))\n     print(multiply_five(3))\n     print(multiply_five(multiply_three(2)))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(multiply_three(9))"
            ]
          },
          {
            "name": "Mutant #88",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 17,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -14,6 +14,6 @@\n \n if __name__ == \"__main__\":\n     print(multiply_three(9))\n-    print(multiply_five(3))\n+    print(multiply_five(4))\n     print(multiply_five(multiply_three(2)))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(multiply_five(3))"
            ]
          },
          {
            "name": "Mutant #89",
            "file": "ultiplayground/closures/multiplier.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/multiplier.py\n+++ ultiplayground/closures/multiplier.py\n@@ -15,5 +15,5 @@\n if __name__ == \"__main__\":\n     print(multiply_three(9))\n     print(multiply_five(3))\n-    print(multiply_five(multiply_three(2)))\n+    print(multiply_five(multiply_three(3)))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(multiply_five(multiply_three(2)))"
            ]
          },
          {
            "name": "Mutant #90",
            "file": "ultiplayground/closures/__init__.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -4,7 +4,7 @@\n \n \n def use_incrementer() -> None:\n-    ten = increment_by_ten(0)\n+    ten = increment_by_ten(1)\n     print(ten)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ten = increment_by_ten(0)"
            ]
          },
          {
            "name": "Mutant #91",
            "file": "ultiplayground/closures/__init__.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -4,7 +4,7 @@\n \n \n def use_incrementer() -> None:\n-    ten = increment_by_ten(0)\n+    ten = None\n     print(ten)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ten = increment_by_ten(0)"
            ]
          },
          {
            "name": "Mutant #92",
            "file": "ultiplayground/closures/__init__.py",
            "line": 8,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -5,7 +5,7 @@\n \n def use_incrementer() -> None:\n     ten = increment_by_ten(0)\n-    print(ten)\n+    print(None)\n \n \n def use_multiplier() -> None:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(ten)"
            ]
          },
          {
            "name": "Mutant #93",
            "file": "ultiplayground/closures/__init__.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -9,7 +9,7 @@\n \n \n def use_multiplier() -> None:\n-    fifty = multiply_five(10)\n+    fifty = multiply_five(11)\n     print(fifty)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    fifty = multiply_five(10)"
            ]
          },
          {
            "name": "Mutant #94",
            "file": "ultiplayground/closures/__init__.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -9,7 +9,7 @@\n \n \n def use_multiplier() -> None:\n-    fifty = multiply_five(10)\n+    fifty = None\n     print(fifty)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    fifty = multiply_five(10)"
            ]
          },
          {
            "name": "Mutant #95",
            "file": "ultiplayground/closures/__init__.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -10,7 +10,7 @@\n \n def use_multiplier() -> None:\n     fifty = multiply_five(10)\n-    print(fifty)\n+    print(None)\n \n \n def use_returner() -> None:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(fifty)"
            ]
          },
          {
            "name": "Mutant #96",
            "file": "ultiplayground/closures/__init__.py",
            "line": 17,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -14,7 +14,7 @@\n \n \n def use_returner() -> None:\n-    cheese = say_cheese()\n+    cheese = None\n     hello = say_hello()\n     print(cheese, hello)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    cheese = say_cheese()"
            ]
          },
          {
            "name": "Mutant #97",
            "file": "ultiplayground/closures/__init__.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/__init__.py\n+++ ultiplayground/closures/__init__.py\n@@ -15,6 +15,6 @@\n \n def use_returner() -> None:\n     cheese = say_cheese()\n-    hello = say_hello()\n+    hello = None\n     print(cheese, hello)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    hello = say_hello()"
            ]
          },
          {
            "name": "Mutant #98",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 6,
            "system-out": [
              "        return num_two + num"
            ]
          },
          {
            "name": "Mutant #99",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 11,
            "system-out": [
              "increment_by_ten = increment_by(10)"
            ]
          },
          {
            "name": "Mutant #100",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 11,
            "system-out": [
              "increment_by_ten = increment_by(10)"
            ]
          },
          {
            "name": "Mutant #101",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 14,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/incrementer.py\n+++ ultiplayground/closures/incrementer.py\n@@ -11,7 +11,7 @@\n increment_by_ten = increment_by(10)\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     ONE_HUNDRED = increment_by_ten(90)\n     print(ONE_HUNDRED)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #102",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 14,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/incrementer.py\n+++ ultiplayground/closures/incrementer.py\n@@ -11,7 +11,7 @@\n increment_by_ten = increment_by(10)\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     ONE_HUNDRED = increment_by_ten(90)\n     print(ONE_HUNDRED)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #103",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/incrementer.py\n+++ ultiplayground/closures/incrementer.py\n@@ -12,6 +12,6 @@\n \n \n if __name__ == \"__main__\":\n-    ONE_HUNDRED = increment_by_ten(90)\n+    ONE_HUNDRED = increment_by_ten(91)\n     print(ONE_HUNDRED)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ONE_HUNDRED = increment_by_ten(90)"
            ]
          },
          {
            "name": "Mutant #104",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/incrementer.py\n+++ ultiplayground/closures/incrementer.py\n@@ -12,6 +12,6 @@\n \n \n if __name__ == \"__main__\":\n-    ONE_HUNDRED = increment_by_ten(90)\n+    ONE_HUNDRED = None\n     print(ONE_HUNDRED)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ONE_HUNDRED = increment_by_ten(90)"
            ]
          },
          {
            "name": "Mutant #105",
            "file": "ultiplayground/closures/incrementer.py",
            "line": 16,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/incrementer.py\n+++ ultiplayground/closures/incrementer.py\n@@ -13,5 +13,5 @@\n \n if __name__ == \"__main__\":\n     ONE_HUNDRED = increment_by_ten(90)\n-    print(ONE_HUNDRED)\n+    print(None)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(ONE_HUNDRED)"
            ]
          },
          {
            "name": "Mutant #106",
            "file": "ultiplayground/closures/returner.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -1,7 +1,7 @@\n from typing import Callable\n \n \n-def return_msg(msg: str = \"Hello\") -> Callable:\n+def return_msg(msg: str = \"XXHelloXX\") -> Callable:\n     def returner() -> str:\n         return msg\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def return_msg(msg: str = \"Hello\") -> Callable:"
            ]
          },
          {
            "name": "Mutant #107",
            "file": "ultiplayground/closures/returner.py",
            "line": 11,
            "system-out": [
              "say_cheese = return_msg(\"cheese\")"
            ]
          },
          {
            "name": "Mutant #108",
            "file": "ultiplayground/closures/returner.py",
            "line": 11,
            "system-out": [
              "say_cheese = return_msg(\"cheese\")"
            ]
          },
          {
            "name": "Mutant #109",
            "file": "ultiplayground/closures/returner.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -10,7 +10,7 @@\n \n say_cheese = return_msg(\"cheese\")\n \n-say_hello = return_msg()\n+say_hello = None\n \n if __name__ == \"__main__\":\n     print(say_hello())\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "say_hello = return_msg()"
            ]
          },
          {
            "name": "Mutant #110",
            "file": "ultiplayground/closures/returner.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -12,7 +12,7 @@\n \n say_hello = return_msg()\n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(say_hello())\n     print(say_cheese())\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #111",
            "file": "ultiplayground/closures/returner.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/closures/returner.py\n+++ ultiplayground/closures/returner.py\n@@ -12,7 +12,7 @@\n \n say_hello = return_msg()\n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(say_hello())\n     print(say_cheese())\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #112",
            "file": "ultiplayground/extras/weeks_list.py",
            "line": 1,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/weeks_list.py\n+++ ultiplayground/extras/weeks_list.py\n@@ -1,3 +1,3 @@\n-for week in range(1, 53):\n+for week in range(2, 53):\n     print(f\"- [ ] Week {week}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for week in range(1, 53):"
            ]
          },
          {
            "name": "Mutant #113",
            "file": "ultiplayground/extras/weeks_list.py",
            "line": 1,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/weeks_list.py\n+++ ultiplayground/extras/weeks_list.py\n@@ -1,3 +1,3 @@\n-for week in range(1, 53):\n+for week in range(1, 54):\n     print(f\"- [ ] Week {week}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for week in range(1, 53):"
            ]
          },
          {
            "name": "Mutant #114",
            "file": "ultiplayground/extras/weeks_list.py",
            "line": 2,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/weeks_list.py\n+++ ultiplayground/extras/weeks_list.py\n@@ -1,3 +1,3 @@\n for week in range(1, 53):\n-    print(f\"- [ ] Week {week}\")\n+    print(f\"XX- [ ] Week {week}XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"- [ ] Week {week}\")"
            ]
          },
          {
            "name": "Mutant #115",
            "file": "ultiplayground/extras/match_text.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -6,7 +6,7 @@\n     \"\"\"\n     Parse a CSV file and return a list of dictionaries.\n     \"\"\"\n-    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n+    with open(file_path, \"XXrXX\", encoding=\"UTF-8\") as file:\n         return file.read().splitlines()\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:"
            ]
          },
          {
            "name": "Mutant #116",
            "file": "ultiplayground/extras/match_text.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -6,7 +6,7 @@\n     \"\"\"\n     Parse a CSV file and return a list of dictionaries.\n     \"\"\"\n-    with open(file_path, \"r\", encoding=\"UTF-8\") as file:\n+    with open(file_path, \"r\", encoding=\"XXUTF-8XX\") as file:\n         return file.read().splitlines()\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    with open(file_path, \"r\", encoding=\"UTF-8\") as file:"
            ]
          },
          {
            "name": "Mutant #117",
            "file": "ultiplayground/extras/match_text.py",
            "line": 14,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -11,7 +11,7 @@\n \n \n def grouped(iterable, times: int):\n-    return zip(*[iter(iterable)] * times)\n+    return zip(*[iter(iterable)] / times)\n \n \n data = [\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return zip(*[iter(iterable)] * times)"
            ]
          },
          {
            "name": "Mutant #118",
            "file": "ultiplayground/extras/match_text.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -15,7 +15,7 @@\n \n \n data = [\n-    {\"shortname\": shortname.upper(), \"fullname\": fullname}\n+    {\"XXshortnameXX\": shortname.upper(), \"fullname\": fullname}\n     for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n ]\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    {\"shortname\": shortname.upper(), \"fullname\": fullname}"
            ]
          },
          {
            "name": "Mutant #119",
            "file": "ultiplayground/extras/match_text.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -15,7 +15,7 @@\n \n \n data = [\n-    {\"shortname\": shortname.upper(), \"fullname\": fullname}\n+    {\"shortname\": shortname.upper(), \"XXfullnameXX\": fullname}\n     for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n ]\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    {\"shortname\": shortname.upper(), \"fullname\": fullname}"
            ]
          },
          {
            "name": "Mutant #120",
            "file": "ultiplayground/extras/match_text.py",
            "line": 19,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -16,7 +16,7 @@\n \n data = [\n     {\"shortname\": shortname.upper(), \"fullname\": fullname}\n-    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n+    for shortname, fullname in grouped(read_all_lines(\"XXdata/crypto_shortnameXX\"), 2)\n ]\n \n with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)"
            ]
          },
          {
            "name": "Mutant #121",
            "file": "ultiplayground/extras/match_text.py",
            "line": 19,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -16,7 +16,7 @@\n \n data = [\n     {\"shortname\": shortname.upper(), \"fullname\": fullname}\n-    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n+    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 3)\n ]\n \n with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)"
            ]
          },
          {
            "name": "Mutant #122",
            "file": "ultiplayground/extras/match_text.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -14,10 +14,7 @@\n     return zip(*[iter(iterable)] * times)\n \n \n-data = [\n-    {\"shortname\": shortname.upper(), \"fullname\": fullname}\n-    for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n-]\n+data = None\n \n with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:\n     json.dump(data, f)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "]"
            ]
          },
          {
            "name": "Mutant #123",
            "file": "ultiplayground/extras/match_text.py",
            "line": 22,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -19,6 +19,6 @@\n     for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n ]\n \n-with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:\n+with open(f\"XX{os.getcwd()}/data/data.jsonXX\", \"w\", encoding=\"UTF-8\") as f:\n     json.dump(data, f)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:"
            ]
          },
          {
            "name": "Mutant #124",
            "file": "ultiplayground/extras/match_text.py",
            "line": 22,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -19,6 +19,6 @@\n     for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n ]\n \n-with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:\n+with open(f\"{os.getcwd()}/data/data.json\", \"XXwXX\", encoding=\"UTF-8\") as f:\n     json.dump(data, f)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:"
            ]
          },
          {
            "name": "Mutant #125",
            "file": "ultiplayground/extras/match_text.py",
            "line": 22,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/match_text.py\n+++ ultiplayground/extras/match_text.py\n@@ -19,6 +19,6 @@\n     for shortname, fullname in grouped(read_all_lines(\"data/crypto_shortname\"), 2)\n ]\n \n-with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:\n+with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"XXUTF-8XX\") as f:\n     json.dump(data, f)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "with open(f\"{os.getcwd()}/data/data.json\", \"w\", encoding=\"UTF-8\") as f:"
            ]
          },
          {
            "name": "Mutant #126",
            "file": "ultiplayground/extras/months_list.py",
            "line": 3,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/months_list.py\n+++ ultiplayground/extras/months_list.py\n@@ -1,5 +1,5 @@\n from calendar import month_name\n \n-for item in month_name[1::]:\n+for item in month_name[2::]:\n     print(f\" - [ ] {item}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "for item in month_name[1::]:"
            ]
          },
          {
            "name": "Mutant #127",
            "file": "ultiplayground/extras/months_list.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/months_list.py\n+++ ultiplayground/extras/months_list.py\n@@ -1,5 +1,5 @@\n from calendar import month_name\n \n for item in month_name[1::]:\n-    print(f\" - [ ] {item}\")\n+    print(f\"XX - [ ] {item}XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\" - [ ] {item}\")"
            ]
          },
          {
            "name": "Mutant #128",
            "file": "ultiplayground/extras/unpacking.py",
            "line": 3,
            "failure": [
              {
                "inner": "--- ultiplayground/extras/unpacking.py\n+++ ultiplayground/extras/unpacking.py\n@@ -1,6 +1,6 @@\n from datetime import datetime\n \n-dates = [datetime.now(), datetime.now()]\n+dates = None\n \n print(*map(str, dates))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "dates = [datetime.now(), datetime.now()]"
            ]
          },
          {
            "name": "Mutant #129",
            "file": "ultiplayground/snippets/__init__.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/__init__.py\n+++ ultiplayground/snippets/__init__.py\n@@ -8,7 +8,7 @@\n \n \n def use_pokemons():\n-    return POKEMON in POKEMONS_NAME\n+    return POKEMON not in POKEMONS_NAME\n \n \n def use_quotes():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return POKEMON in POKEMONS_NAME"
            ]
          },
          {
            "name": "Mutant #130",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 5,
            "system-out": [
              "POKEMON_API = \"https://pokeapi.co/api/v2/pokemon-species/?limit=151\""
            ]
          },
          {
            "name": "Mutant #131",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 5,
            "system-out": [
              "POKEMON_API = \"https://pokeapi.co/api/v2/pokemon-species/?limit=151\""
            ]
          },
          {
            "name": "Mutant #132",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 7,
            "system-out": [
              "POKEMON_DATA = requests.get(POKEMON_API).json()"
            ]
          },
          {
            "name": "Mutant #133",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 9,
            "system-out": [
              "POKEMONS_NAME = [pokemon[\"name\"] for pokemon in POKEMON_DATA[\"results\"]]"
            ]
          },
          {
            "name": "Mutant #134",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 9,
            "system-out": [
              "POKEMONS_NAME = [pokemon[\"name\"] for pokemon in POKEMON_DATA[\"results\"]]"
            ]
          },
          {
            "name": "Mutant #135",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 9,
            "system-out": [
              "POKEMONS_NAME = [pokemon[\"name\"] for pokemon in POKEMON_DATA[\"results\"]]"
            ]
          },
          {
            "name": "Mutant #136",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 11,
            "system-out": [
              "POKEMON = choice(POKEMONS_NAME).capitalize()"
            ]
          },
          {
            "name": "Mutant #137",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_pokemon.py\n+++ ultiplayground/snippets/random_pokemon.py\n@@ -10,6 +10,6 @@\n \n POKEMON = choice(POKEMONS_NAME).capitalize()\n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(f\"A Wild {POKEMON} Has Appeared!\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #138",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_pokemon.py\n+++ ultiplayground/snippets/random_pokemon.py\n@@ -10,6 +10,6 @@\n \n POKEMON = choice(POKEMONS_NAME).capitalize()\n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(f\"A Wild {POKEMON} Has Appeared!\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #139",
            "file": "ultiplayground/snippets/random_pokemon.py",
            "line": 14,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_pokemon.py\n+++ ultiplayground/snippets/random_pokemon.py\n@@ -11,5 +11,5 @@\n POKEMON = choice(POKEMONS_NAME).capitalize()\n \n if __name__ == \"__main__\":\n-    print(f\"A Wild {POKEMON} Has Appeared!\")\n+    print(f\"XXA Wild {POKEMON} Has Appeared!XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"A Wild {POKEMON} Has Appeared!\")"
            ]
          },
          {
            "name": "Mutant #140",
            "file": "ultiplayground/snippets/random_quotes.py",
            "line": 4,
            "system-out": [
              "QUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()"
            ]
          },
          {
            "name": "Mutant #141",
            "file": "ultiplayground/snippets/random_quotes.py",
            "line": 4,
            "system-out": [
              "QUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()"
            ]
          },
          {
            "name": "Mutant #142",
            "file": "ultiplayground/snippets/random_quotes.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_quotes.py\n+++ ultiplayground/snippets/random_quotes.py\n@@ -4,7 +4,7 @@\n QUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     print(QUOTES_DATA[\"content\"])\n     print(f\" - {QUOTES_DATA['author']}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #143",
            "file": "ultiplayground/snippets/random_quotes.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_quotes.py\n+++ ultiplayground/snippets/random_quotes.py\n@@ -4,7 +4,7 @@\n QUOTES_DATA: dict = requests.get(\"https://api.quotable.io/random\").json()\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     print(QUOTES_DATA[\"content\"])\n     print(f\" - {QUOTES_DATA['author']}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #144",
            "file": "ultiplayground/snippets/random_quotes.py",
            "line": 8,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_quotes.py\n+++ ultiplayground/snippets/random_quotes.py\n@@ -5,6 +5,6 @@\n \n \n if __name__ == \"__main__\":\n-    print(QUOTES_DATA[\"content\"])\n+    print(QUOTES_DATA[\"XXcontentXX\"])\n     print(f\" - {QUOTES_DATA['author']}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(QUOTES_DATA[\"content\"])"
            ]
          },
          {
            "name": "Mutant #145",
            "file": "ultiplayground/snippets/random_quotes.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_quotes.py\n+++ ultiplayground/snippets/random_quotes.py\n@@ -6,5 +6,5 @@\n \n if __name__ == \"__main__\":\n     print(QUOTES_DATA[\"content\"])\n-    print(f\" - {QUOTES_DATA['author']}\")\n+    print(f\" - {QUOTES_DATA['XXauthorXX']}\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\" - {QUOTES_DATA['author']}\")"
            ]
          },
          {
            "name": "Mutant #146",
            "file": "ultiplayground/snippets/random_quotes.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/snippets/random_quotes.py\n+++ ultiplayground/snippets/random_quotes.py\n@@ -6,5 +6,5 @@\n \n if __name__ == \"__main__\":\n     print(QUOTES_DATA[\"content\"])\n-    print(f\" - {QUOTES_DATA['author']}\")\n+    print(f\"XX - {QUOTES_DATA['author']}XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\" - {QUOTES_DATA['author']}\")"
            ]
          },
          {
            "name": "Mutant #147",
            "file": "ultiplayground/async/threads.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -4,7 +4,7 @@\n import time\n \n \n-thread_local = threading.local()\n+thread_local = None\n \n \n def get_session():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "thread_local = threading.local()"
            ]
          },
          {
            "name": "Mutant #148",
            "file": "ultiplayground/async/threads.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -8,7 +8,7 @@\n \n \n def get_session():\n-    if not hasattr(thread_local, \"session\"):\n+    if  hasattr(thread_local, \"session\"):\n         thread_local.session = requests.Session()\n     return thread_local.session\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if not hasattr(thread_local, \"session\"):"
            ]
          },
          {
            "name": "Mutant #149",
            "file": "ultiplayground/async/threads.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -8,7 +8,7 @@\n \n \n def get_session():\n-    if not hasattr(thread_local, \"session\"):\n+    if not hasattr(thread_local, \"XXsessionXX\"):\n         thread_local.session = requests.Session()\n     return thread_local.session\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if not hasattr(thread_local, \"session\"):"
            ]
          },
          {
            "name": "Mutant #150",
            "file": "ultiplayground/async/threads.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -9,7 +9,7 @@\n \n def get_session():\n     if not hasattr(thread_local, \"session\"):\n-        thread_local.session = requests.Session()\n+        thread_local.session = None\n     return thread_local.session\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        thread_local.session = requests.Session()"
            ]
          },
          {
            "name": "Mutant #151",
            "file": "ultiplayground/async/threads.py",
            "line": 17,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -14,7 +14,7 @@\n \n \n def download_site(url):\n-    session = get_session()\n+    session = None\n     session.get(url)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    session = get_session()"
            ]
          },
          {
            "name": "Mutant #152",
            "file": "ultiplayground/async/threads.py",
            "line": 22,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -19,7 +19,7 @@\n \n \n def download_all_sites(sites):\n-    with ThreadPoolExecutor(max_workers=5) as executor:\n+    with ThreadPoolExecutor(max_workers=6) as executor:\n         executor.map(download_site, sites)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    with ThreadPoolExecutor(max_workers=5) as executor:"
            ]
          },
          {
            "name": "Mutant #153",
            "file": "ultiplayground/async/threads.py",
            "line": 26,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -23,7 +23,7 @@\n         executor.map(download_site, sites)\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     sites = [\n         \"https://jython.org\",\n         \"http://olympus.realpython.org/dice\",\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #154",
            "file": "ultiplayground/async/threads.py",
            "line": 26,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -23,7 +23,7 @@\n         executor.map(download_site, sites)\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     sites = [\n         \"https://jython.org\",\n         \"http://olympus.realpython.org/dice\",\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #155",
            "file": "ultiplayground/async/threads.py",
            "line": 28,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -25,7 +25,7 @@\n \n if __name__ == \"__main__\":\n     sites = [\n-        \"https://jython.org\",\n+        \"XXhttps://jython.orgXX\",\n         \"http://olympus.realpython.org/dice\",\n         \"https://github.com/UltiRequiem/python\",\n     ] * 100\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        \"https://jython.org\","
            ]
          },
          {
            "name": "Mutant #156",
            "file": "ultiplayground/async/threads.py",
            "line": 29,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -26,7 +26,7 @@\n if __name__ == \"__main__\":\n     sites = [\n         \"https://jython.org\",\n-        \"http://olympus.realpython.org/dice\",\n+        \"XXhttp://olympus.realpython.org/diceXX\",\n         \"https://github.com/UltiRequiem/python\",\n     ] * 100\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        \"http://olympus.realpython.org/dice\","
            ]
          },
          {
            "name": "Mutant #157",
            "file": "ultiplayground/async/threads.py",
            "line": 30,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -27,7 +27,7 @@\n     sites = [\n         \"https://jython.org\",\n         \"http://olympus.realpython.org/dice\",\n-        \"https://github.com/UltiRequiem/python\",\n+        \"XXhttps://github.com/UltiRequiem/pythonXX\",\n     ] * 100\n \n     start_time = time.time()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        \"https://github.com/UltiRequiem/python\","
            ]
          },
          {
            "name": "Mutant #158",
            "file": "ultiplayground/async/threads.py",
            "line": 31,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -28,7 +28,7 @@\n         \"https://jython.org\",\n         \"http://olympus.realpython.org/dice\",\n         \"https://github.com/UltiRequiem/python\",\n-    ] * 100\n+    ] / 100\n \n     start_time = time.time()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ] * 100"
            ]
          },
          {
            "name": "Mutant #159",
            "file": "ultiplayground/async/threads.py",
            "line": 31,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -28,7 +28,7 @@\n         \"https://jython.org\",\n         \"http://olympus.realpython.org/dice\",\n         \"https://github.com/UltiRequiem/python\",\n-    ] * 100\n+    ] * 101\n \n     start_time = time.time()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ] * 100"
            ]
          },
          {
            "name": "Mutant #160",
            "file": "ultiplayground/async/threads.py",
            "line": 31,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -24,11 +24,7 @@\n \n \n if __name__ == \"__main__\":\n-    sites = [\n-        \"https://jython.org\",\n-        \"http://olympus.realpython.org/dice\",\n-        \"https://github.com/UltiRequiem/python\",\n-    ] * 100\n+    sites = None\n \n     start_time = time.time()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ] * 100"
            ]
          },
          {
            "name": "Mutant #161",
            "file": "ultiplayground/async/threads.py",
            "line": 33,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -30,7 +30,7 @@\n         \"https://github.com/UltiRequiem/python\",\n     ] * 100\n \n-    start_time = time.time()\n+    start_time = None\n \n     download_all_sites(sites)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    start_time = time.time()"
            ]
          },
          {
            "name": "Mutant #162",
            "file": "ultiplayground/async/threads.py",
            "line": 35,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -32,7 +32,7 @@\n \n     start_time = time.time()\n \n-    download_all_sites(sites)\n+    download_all_sites(None)\n \n     duration = time.time() - start_time\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    download_all_sites(sites)"
            ]
          },
          {
            "name": "Mutant #163",
            "file": "ultiplayground/async/threads.py",
            "line": 37,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -34,7 +34,7 @@\n \n     download_all_sites(sites)\n \n-    duration = time.time() - start_time\n+    duration = time.time() + start_time\n \n     print(f\"Downloaded {len(sites)} pages in {duration} seconds!\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    duration = time.time() - start_time"
            ]
          },
          {
            "name": "Mutant #164",
            "file": "ultiplayground/async/threads.py",
            "line": 37,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -34,7 +34,7 @@\n \n     download_all_sites(sites)\n \n-    duration = time.time() - start_time\n+    duration = None\n \n     print(f\"Downloaded {len(sites)} pages in {duration} seconds!\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    duration = time.time() - start_time"
            ]
          },
          {
            "name": "Mutant #165",
            "file": "ultiplayground/async/threads.py",
            "line": 39,
            "failure": [
              {
                "inner": "--- ultiplayground/async/threads.py\n+++ ultiplayground/async/threads.py\n@@ -36,5 +36,5 @@\n \n     duration = time.time() - start_time\n \n-    print(f\"Downloaded {len(sites)} pages in {duration} seconds!\")\n+    print(f\"XXDownloaded {len(sites)} pages in {duration} seconds!XX\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(f\"Downloaded {len(sites)} pages in {duration} seconds!\")"
            ]
          },
          {
            "name": "Mutant #166",
            "file": "ultiplayground/async/hi.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- ultiplayground/async/hi.py\n+++ ultiplayground/async/hi.py\n@@ -2,7 +2,7 @@\n \n \n async def sai_hy(name: str):\n-    return f\"Hi {name}!\"\n+    return f\"XXHi {name}!XX\"\n \n \n async def main():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return f\"Hi {name}!\""
            ]
          },
          {
            "name": "Mutant #167",
            "file": "ultiplayground/async/hi.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/async/hi.py\n+++ ultiplayground/async/hi.py\n@@ -6,7 +6,7 @@\n \n \n async def main():\n-    hey = await sai_hy(\"Zero\")\n+    hey = await sai_hy(\"XXZeroXX\")\n     print(hey)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    hey = await sai_hy(\"Zero\")"
            ]
          },
          {
            "name": "Mutant #168",
            "file": "ultiplayground/async/hi.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/async/hi.py\n+++ ultiplayground/async/hi.py\n@@ -6,7 +6,7 @@\n \n \n async def main():\n-    hey = await sai_hy(\"Zero\")\n+    hey = None\n     print(hey)\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    hey = await sai_hy(\"Zero\")"
            ]
          },
          {
            "name": "Mutant #169",
            "file": "ultiplayground/async/hi.py",
            "line": 10,
            "failure": [
              {
                "inner": "--- ultiplayground/async/hi.py\n+++ ultiplayground/async/hi.py\n@@ -7,7 +7,7 @@\n \n async def main():\n     hey = await sai_hy(\"Zero\")\n-    print(hey)\n+    print(None)\n \n \n asyncio.run(main())\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(hey)"
            ]
          },
          {
            "name": "Mutant #170",
            "file": "ultiplayground/oop/rabit.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -2,7 +2,7 @@\n \n \n class Rabbit(GenericAnimal):\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         super().__init__(name, speed=speed)\n \n     def hide(self):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    def __init__(self, name, speed=0) -> None:"
            ]
          },
          {
            "name": "Mutant #171",
            "file": "ultiplayground/oop/rabit.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -6,7 +6,7 @@\n         super().__init__(name, speed=speed)\n \n     def hide(self):\n-        print(f\"{self.name} hides!\")\n+        print(f\"XX{self.name} hides!XX\")\n \n \n if __name__ == \"__main__\":\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        print(f\"{self.name} hides!\")"
            ]
          },
          {
            "name": "Mutant #172",
            "file": "ultiplayground/oop/rabit.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -9,7 +9,7 @@\n         print(f\"{self.name} hides!\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     my_rabbit = Rabbit(\"Alen\")\n     print(my_rabbit)\n     my_rabbit.hide()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #173",
            "file": "ultiplayground/oop/rabit.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -9,7 +9,7 @@\n         print(f\"{self.name} hides!\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     my_rabbit = Rabbit(\"Alen\")\n     print(my_rabbit)\n     my_rabbit.hide()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #174",
            "file": "ultiplayground/oop/rabit.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -10,7 +10,7 @@\n \n \n if __name__ == \"__main__\":\n-    my_rabbit = Rabbit(\"Alen\")\n+    my_rabbit = Rabbit(\"XXAlenXX\")\n     print(my_rabbit)\n     my_rabbit.hide()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    my_rabbit = Rabbit(\"Alen\")"
            ]
          },
          {
            "name": "Mutant #175",
            "file": "ultiplayground/oop/rabit.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -10,7 +10,7 @@\n \n \n if __name__ == \"__main__\":\n-    my_rabbit = Rabbit(\"Alen\")\n+    my_rabbit = None\n     print(my_rabbit)\n     my_rabbit.hide()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    my_rabbit = Rabbit(\"Alen\")"
            ]
          },
          {
            "name": "Mutant #176",
            "file": "ultiplayground/oop/rabit.py",
            "line": 14,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/rabit.py\n+++ ultiplayground/oop/rabit.py\n@@ -11,6 +11,6 @@\n \n if __name__ == \"__main__\":\n     my_rabbit = Rabbit(\"Alen\")\n-    print(my_rabbit)\n+    print(None)\n     my_rabbit.hide()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(my_rabbit)"
            ]
          },
          {
            "name": "Mutant #177",
            "file": "ultiplayground/oop/animal.py",
            "line": 2,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,5 +1,5 @@\n class GenericAnimal:\n-    def __init__(self, name, speed=0) -> None:\n+    def __init__(self, name, speed=1) -> None:\n         self.name = name\n         self.speed = speed\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    def __init__(self, name, speed=0) -> None:"
            ]
          },
          {
            "name": "Mutant #178",
            "file": "ultiplayground/oop/animal.py",
            "line": 3,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,6 +1,6 @@\n class GenericAnimal:\n     def __init__(self, name, speed=0) -> None:\n-        self.name = name\n+        self.name = None\n         self.speed = speed\n \n     def __str__(self):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        self.name = name"
            ]
          },
          {
            "name": "Mutant #179",
            "file": "ultiplayground/oop/animal.py",
            "line": 4,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -1,7 +1,7 @@\n class GenericAnimal:\n     def __init__(self, name, speed=0) -> None:\n         self.name = name\n-        self.speed = speed\n+        self.speed = None\n \n     def __str__(self):\n         return f\"{self.name} is happy :)\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        self.speed = speed"
            ]
          },
          {
            "name": "Mutant #180",
            "file": "ultiplayground/oop/animal.py",
            "line": 7,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -4,7 +4,7 @@\n         self.speed = speed\n \n     def __str__(self):\n-        return f\"{self.name} is happy :)\"\n+        return f\"XX{self.name} is happy :)XX\"\n \n     def run(self, speed):\n         self.speed = speed\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        return f\"{self.name} is happy :)\""
            ]
          },
          {
            "name": "Mutant #181",
            "file": "ultiplayground/oop/animal.py",
            "line": 10,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -7,7 +7,7 @@\n         return f\"{self.name} is happy :)\"\n \n     def run(self, speed):\n-        self.speed = speed\n+        self.speed = None\n         print(f\"{self.name} runs with speed {self.speed}.\")\n \n     def stop(self):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        self.speed = speed"
            ]
          },
          {
            "name": "Mutant #182",
            "file": "ultiplayground/oop/animal.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -8,7 +8,7 @@\n \n     def run(self, speed):\n         self.speed = speed\n-        print(f\"{self.name} runs with speed {self.speed}.\")\n+        print(f\"XX{self.name} runs with speed {self.speed}.XX\")\n \n     def stop(self):\n         self.speed = 0\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        print(f\"{self.name} runs with speed {self.speed}.\")"
            ]
          },
          {
            "name": "Mutant #183",
            "file": "ultiplayground/oop/animal.py",
            "line": 14,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -11,7 +11,7 @@\n         print(f\"{self.name} runs with speed {self.speed}.\")\n \n     def stop(self):\n-        self.speed = 0\n+        self.speed = 1\n         print(f\"{self.name} stands still.\")\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        self.speed = 0"
            ]
          },
          {
            "name": "Mutant #184",
            "file": "ultiplayground/oop/animal.py",
            "line": 14,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -11,7 +11,7 @@\n         print(f\"{self.name} runs with speed {self.speed}.\")\n \n     def stop(self):\n-        self.speed = 0\n+        self.speed = None\n         print(f\"{self.name} stands still.\")\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        self.speed = 0"
            ]
          },
          {
            "name": "Mutant #185",
            "file": "ultiplayground/oop/animal.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -12,7 +12,7 @@\n \n     def stop(self):\n         self.speed = 0\n-        print(f\"{self.name} stands still.\")\n+        print(f\"XX{self.name} stands still.XX\")\n \n \n if __name__ == \"__main__\":\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        print(f\"{self.name} stands still.\")"
            ]
          },
          {
            "name": "Mutant #186",
            "file": "ultiplayground/oop/animal.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -15,7 +15,7 @@\n         print(f\"{self.name} stands still.\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ != \"__main__\":\n     my_generic_animal = GenericAnimal(\"A generic animal\")\n     print(my_generic_animal)\n     my_generic_animal.run(3)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #187",
            "file": "ultiplayground/oop/animal.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -15,7 +15,7 @@\n         print(f\"{self.name} stands still.\")\n \n \n-if __name__ == \"__main__\":\n+if __name__ == \"XX__main__XX\":\n     my_generic_animal = GenericAnimal(\"A generic animal\")\n     print(my_generic_animal)\n     my_generic_animal.run(3)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "if __name__ == \"__main__\":"
            ]
          },
          {
            "name": "Mutant #188",
            "file": "ultiplayground/oop/animal.py",
            "line": 19,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -16,7 +16,7 @@\n \n \n if __name__ == \"__main__\":\n-    my_generic_animal = GenericAnimal(\"A generic animal\")\n+    my_generic_animal = GenericAnimal(\"XXA generic animalXX\")\n     print(my_generic_animal)\n     my_generic_animal.run(3)\n     my_generic_animal.stop()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    my_generic_animal = GenericAnimal(\"A generic animal\")"
            ]
          },
          {
            "name": "Mutant #189",
            "file": "ultiplayground/oop/animal.py",
            "line": 19,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -16,7 +16,7 @@\n \n \n if __name__ == \"__main__\":\n-    my_generic_animal = GenericAnimal(\"A generic animal\")\n+    my_generic_animal = None\n     print(my_generic_animal)\n     my_generic_animal.run(3)\n     my_generic_animal.stop()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    my_generic_animal = GenericAnimal(\"A generic animal\")"
            ]
          },
          {
            "name": "Mutant #190",
            "file": "ultiplayground/oop/animal.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -17,7 +17,7 @@\n \n if __name__ == \"__main__\":\n     my_generic_animal = GenericAnimal(\"A generic animal\")\n-    print(my_generic_animal)\n+    print(None)\n     my_generic_animal.run(3)\n     my_generic_animal.stop()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(my_generic_animal)"
            ]
          },
          {
            "name": "Mutant #191",
            "file": "ultiplayground/oop/animal.py",
            "line": 21,
            "failure": [
              {
                "inner": "--- ultiplayground/oop/animal.py\n+++ ultiplayground/oop/animal.py\n@@ -18,6 +18,6 @@\n if __name__ == \"__main__\":\n     my_generic_animal = GenericAnimal(\"A generic animal\")\n     print(my_generic_animal)\n-    my_generic_animal.run(3)\n+    my_generic_animal.run(4)\n     my_generic_animal.stop()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    my_generic_animal.run(3)"
            ]
          },
          {
            "name": "Mutant #192",
            "file": "tests/test_closures.py",
            "line": 5,
            "system-out": [
              "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\""
            ]
          },
          {
            "name": "Mutant #193",
            "file": "tests/test_closures.py",
            "line": 5,
            "system-out": [
              "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\""
            ]
          },
          {
            "name": "Mutant #194",
            "file": "tests/test_closures.py",
            "line": 5,
            "system-out": [
              "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\""
            ]
          },
          {
            "name": "Mutant #195",
            "file": "tests/test_closures.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -2,7 +2,7 @@\n \n \n def test_incrementer():\n-    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\"\n+    assert increment_by_ten(10) == 20, \"XXIncrementer is invalid!XX\"\n \n \n def test_multiplier():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert increment_by_ten(10) == 20, \"Incrementer is invalid!\""
            ]
          },
          {
            "name": "Mutant #196",
            "file": "tests/test_closures.py",
            "line": 9,
            "system-out": [
              "    assert multiply_five(10) == 50, \"Multiplier is invalid!\""
            ]
          },
          {
            "name": "Mutant #197",
            "file": "tests/test_closures.py",
            "line": 9,
            "system-out": [
              "    assert multiply_five(10) == 50, \"Multiplier is invalid!\""
            ]
          },
          {
            "name": "Mutant #198",
            "file": "tests/test_closures.py",
            "line": 9,
            "system-out": [
              "    assert multiply_five(10) == 50, \"Multiplier is invalid!\""
            ]
          },
          {
            "name": "Mutant #199",
            "file": "tests/test_closures.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -6,7 +6,7 @@\n \n \n def test_multiplier():\n-    assert multiply_five(10) == 50, \"Multiplier is invalid!\"\n+    assert multiply_five(10) == 50, \"XXMultiplier is invalid!XX\"\n \n \n def test_print():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert multiply_five(10) == 50, \"Multiplier is invalid!\""
            ]
          },
          {
            "name": "Mutant #200",
            "file": "tests/test_closures.py",
            "line": 13,
            "system-out": [
              "    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            ]
          },
          {
            "name": "Mutant #201",
            "file": "tests/test_closures.py",
            "line": 13,
            "system-out": [
              "    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            ]
          },
          {
            "name": "Mutant #202",
            "file": "tests/test_closures.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- tests/test_closures.py\n+++ tests/test_closures.py\n@@ -10,5 +10,5 @@\n \n \n def test_print():\n-    assert say_cheese() == \"cheese\", \"Incorrect message!\"\n+    assert say_cheese() == \"cheese\", \"XXIncorrect message!XX\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert say_cheese() == \"cheese\", \"Incorrect message!\""
            ]
          },
          {
            "name": "Mutant #203",
            "file": "tests/test_playground.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -2,7 +2,7 @@\n \n \n def test_version():\n-    assert isinstance(__version__, str), \"The version value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe version value is invalid!XX\"\n \n \n def test_authors():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert isinstance(__version__, str), \"The version value is invalid!\""
            ]
          },
          {
            "name": "Mutant #204",
            "file": "tests/test_playground.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- tests/test_playground.py\n+++ tests/test_playground.py\n@@ -6,5 +6,5 @@\n \n \n def test_authors():\n-    assert isinstance(__version__, str), \"The authors value is invalid!\"\n+    assert isinstance(__version__, str), \"XXThe authors value is invalid!XX\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert isinstance(__version__, str), \"The authors value is invalid!\""
            ]
          },
          {
            "name": "Mutant #205",
            "file": "tests/test_snippets.py",
            "line": 5,
            "failure": [
              {
                "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -2,7 +2,7 @@\n \n \n def test_pokemon():\n-    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\"\n+    assert isinstance(POKEMON, str), \"XXThis Pokemon is not valid!XX\"\n \n \n def test_pokemons():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert isinstance(POKEMON, str), \"This Pokemon is not valid!\""
            ]
          },
          {
            "name": "Mutant #206",
            "file": "tests/test_snippets.py",
            "line": 9,
            "failure": [
              {
                "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -6,7 +6,7 @@\n \n \n def test_pokemons():\n-    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\"\n+    assert isinstance(POKEMONS_NAME, list), \"XXThis Pokemon list is not valid!XX\"\n \n \n def test_quotes():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert isinstance(POKEMONS_NAME, list), \"This Pokemon list is not valid!\""
            ]
          },
          {
            "name": "Mutant #207",
            "file": "tests/test_snippets.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- tests/test_snippets.py\n+++ tests/test_snippets.py\n@@ -10,5 +10,5 @@\n \n \n def test_quotes():\n-    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\"\n+    assert isinstance(QUOTES_DATA, dict), \"XXThis dict is not valid!XX\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert isinstance(QUOTES_DATA, dict), \"This dict is not valid!\""
            ]
          }
        ]
      }
    ]
  }
}