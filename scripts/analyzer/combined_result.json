{
  "chasten_result": {
    "configuration": {
      "chastenversion": "1.0.0",
      "debuglevel": "ERROR",
      "debugdestination": "CONSOLE",
      "projectname": "lazytracker",
      "configdirectory": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/Config",
      "searchpath": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting",
      "fileuuid": "505f93cde1b5433893effa1584494609",
      "datetime": "2024-04-07 18:43:22.604326",
      "checkinclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      },
      "checkexclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      }
    },
    "sources": [
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py",
        "check": {
          "id": "C001",
          "name": "class-definition",
          "description": "Ensure the presence of class definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//ClassDef",
          "passed": true,
          "matches": [
            {
              "lineno": 28,
              "coloffset": 0,
              "linematch": "class ListSortingApproach(str, Enum):",
              "linematch_context": "UNDERSCORE = \"_\"\nSORT = \"sort\"\n\n\nclass ListSortingApproach(str, Enum):\n    \"\"\"Define the name for the approach for performing list sorting with different algorithms.\"\"\"\n\n    # define name for each approach\n\n    BUBBLESORT = \"bubble\""
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def bubble_sort(array: List[int]) -> List[int]:",
              "linematch_context": "# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):"
            },
            {
              "lineno": 41,
              "coloffset": 0,
              "linematch": "def insertion_sort(array: List[int]) -> List[int]:",
              "linematch_context": "            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    \"\"\"Run an insertion sort on the provided array.\"\"\"\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]"
            },
            {
              "lineno": 63,
              "coloffset": 0,
              "linematch": "def merge(left: List[int], right: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right"
            },
            {
              "lineno": 96,
              "coloffset": 0,
              "linematch": "def merge_sort(array: List[int]) -> List[int]:",
              "linematch_context": "\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))"
            },
            {
              "lineno": 104,
              "coloffset": 0,
              "linematch": "def quick_sort(array: List[int]) -> List[int]:",
              "linematch_context": "    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]"
            },
            {
              "lineno": 121,
              "coloffset": 0,
              "linematch": "def insertion_sort_time(array: List[int], left: int = 0, right=None):",
              "linematch_context": "\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]"
            },
            {
              "lineno": 135,
              "coloffset": 0,
              "linematch": "def tim_sort(array: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def format_decimal(number: float):",
              "linematch_context": "from typing import List\nfrom typing import Tuple\n\n\ndef format_decimal(number: float):\n    \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n    # round the provided floating point value with format function\n    format_float = \"{:.5f}\".format(number)\n    return format_float\n"
            },
            {
              "lineno": 17,
              "coloffset": 0,
              "linematch": "def generate_random_number(maximum: int) -> int:",
              "linematch_context": "    format_float = \"{:.5f}\".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value"
            },
            {
              "lineno": 25,
              "coloffset": 0,
              "linematch": "def generate_random_container(",
              "linematch_context": "    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a list of random values for a specific size"
            },
            {
              "lineno": 36,
              "coloffset": 0,
              "linematch": "def run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:",
              "linematch_context": "    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    \"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\"\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it's not the built-in `sorted()`.\n    setup_code = f\"from listsorting.sorting import {algorithm}\""
            },
            {
              "lineno": 55,
              "coloffset": 0,
              "linematch": "def run_sorting_algorithm_experiment_campaign(",
              "linematch_context": "        format_decimal((sum(times) / len(times))),\n    )\n\n\ndef run_sorting_algorithm_experiment_campaign(\n    algorithm: str,\n    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 45,
              "coloffset": 0,
              "linematch": "def listsorting(",
              "linematch_context": "        return self.value\n\n\n@cli.command()\ndef listsorting(\n    starting_size: int = typer.Option(1000000),\n    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:"
            },
            {
              "lineno": 39,
              "coloffset": 4,
              "linematch": "def __str__(self):",
              "linematch_context": "    MERGESORT = \"merge\"\n    QUICKSORT = \"quick\"\n    TIMSORT = \"tim\"\n\n    def __str__(self):\n        \"\"\"Define a default string representation.\"\"\"\n        return self.value\n\n\n@cli.command()"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/tests/test_sorting.py",
        "check": {
          "id": "F001",
          "name": "all-function-definition",
          "description": "Ensure the presence of function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef",
          "passed": false,
          "matches": [
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):",
              "linematch_context": "@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\",\n    [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n)\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 39,
              "coloffset": 0,
              "linematch": "def test_bubble_sort_single(list_inputs, expected_answer):",
              "linematch_context": "@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\",\n    [([10, 3, 1], [1, 3, 10])],\n)\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def bubble_sort(array: List[int]) -> List[int]:",
              "linematch_context": "# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):"
            },
            {
              "lineno": 41,
              "coloffset": 0,
              "linematch": "def insertion_sort(array: List[int]) -> List[int]:",
              "linematch_context": "            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    \"\"\"Run an insertion sort on the provided array.\"\"\"\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]"
            },
            {
              "lineno": 63,
              "coloffset": 0,
              "linematch": "def merge(left: List[int], right: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right"
            },
            {
              "lineno": 96,
              "coloffset": 0,
              "linematch": "def merge_sort(array: List[int]) -> List[int]:",
              "linematch_context": "\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))"
            },
            {
              "lineno": 104,
              "coloffset": 0,
              "linematch": "def quick_sort(array: List[int]) -> List[int]:",
              "linematch_context": "    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]"
            },
            {
              "lineno": 121,
              "coloffset": 0,
              "linematch": "def insertion_sort_time(array: List[int], left: int = 0, right=None):",
              "linematch_context": "\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]"
            },
            {
              "lineno": 135,
              "coloffset": 0,
              "linematch": "def tim_sort(array: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def format_decimal(number: float):",
              "linematch_context": "from typing import List\nfrom typing import Tuple\n\n\ndef format_decimal(number: float):\n    \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n    # round the provided floating point value with format function\n    format_float = \"{:.5f}\".format(number)\n    return format_float\n"
            },
            {
              "lineno": 17,
              "coloffset": 0,
              "linematch": "def generate_random_number(maximum: int) -> int:",
              "linematch_context": "    format_float = \"{:.5f}\".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value"
            },
            {
              "lineno": 25,
              "coloffset": 0,
              "linematch": "def generate_random_container(",
              "linematch_context": "    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a list of random values for a specific size"
            },
            {
              "lineno": 36,
              "coloffset": 0,
              "linematch": "def run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:",
              "linematch_context": "    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    \"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\"\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it's not the built-in `sorted()`.\n    setup_code = f\"from listsorting.sorting import {algorithm}\""
            },
            {
              "lineno": 55,
              "coloffset": 0,
              "linematch": "def run_sorting_algorithm_experiment_campaign(",
              "linematch_context": "        format_decimal((sum(times) / len(times))),\n    )\n\n\ndef run_sorting_algorithm_experiment_campaign(\n    algorithm: str,\n    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py",
        "check": {
          "id": "F002",
          "name": "dummy-test-non-test-function-definition",
          "description": "Ensure the presence of non-test function definitions in the codebase.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]",
          "passed": false,
          "matches": [
            {
              "lineno": 45,
              "coloffset": 0,
              "linematch": "def listsorting(",
              "linematch_context": "        return self.value\n\n\n@cli.command()\ndef listsorting(\n    starting_size: int = typer.Option(1000000),\n    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:"
            },
            {
              "lineno": 39,
              "coloffset": 4,
              "linematch": "def __str__(self):",
              "linematch_context": "    MERGESORT = \"merge\"\n    QUICKSORT = \"quick\"\n    TIMSORT = \"tim\"\n\n    def __str__(self):\n        \"\"\"Define a default string representation.\"\"\"\n        return self.value\n\n\n@cli.command()"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "CL001",
          "name": "dummy-test-single-nested-if",
          "description": "Ensure the presence of single nested 'if' statements within function bodies.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body//If",
          "passed": false,
          "matches": [
            {
              "lineno": 36,
              "coloffset": 8,
              "linematch": "if already_sorted:",
              "linematch_context": "        for j in range(n - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n                already_sorted = False\n        if already_sorted:\n            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:"
            },
            {
              "lineno": 33,
              "coloffset": 12,
              "linematch": "if array[j] > array[j + 1]:",
              "linematch_context": "        # Start looking at each item of the list one by one,\n        # comparing it with its adjacent value. With each iteration\n        # the portion of the array that you look at shrinks because the remaining items have already been sorted\n        for j in range(n - i - 1):\n            if array[j] > array[j + 1]:\n                array[j], array[j + 1] = array[j + 1], array[j]\n                already_sorted = False\n        if already_sorted:\n            break\n    return array"
            },
            {
              "lineno": 67,
              "coloffset": 4,
              "linematch": "if len(left) == 0:",
              "linematch_context": "def merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left"
            },
            {
              "lineno": 71,
              "coloffset": 4,
              "linematch": "if len(right) == 0:",
              "linematch_context": "    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):"
            },
            {
              "lineno": 77,
              "coloffset": 8,
              "linematch": "if left[index_left] <= right[index_right]:",
              "linematch_context": "\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1\n        else:\n            result.append(right[index_right])\n            index_right += 1"
            },
            {
              "lineno": 86,
              "coloffset": 8,
              "linematch": "if index_right == len(right):",
              "linematch_context": "            index_right += 1\n        # If the reach the end of either array, then you can\n        # add the remaining elements from the other array to\n        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break"
            },
            {
              "lineno": 89,
              "coloffset": 8,
              "linematch": "if index_left == len(left):",
              "linematch_context": "        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break\n\n    return result\n"
            },
            {
              "lineno": 98,
              "coloffset": 4,
              "linematch": "if len(array) < 2:",
              "linematch_context": "\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n"
            },
            {
              "lineno": 106,
              "coloffset": 4,
              "linematch": "if len(array) < 2:",
              "linematch_context": "\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:"
            },
            {
              "lineno": 111,
              "coloffset": 8,
              "linematch": "if item < pivot:",
              "linematch_context": "        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)"
            },
            {
              "lineno": 113,
              "coloffset": 8,
              "linematch": "elif item == pivot:",
              "linematch_context": "    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)"
            },
            {
              "lineno": 115,
              "coloffset": 8,
              "linematch": "elif item > pivot:",
              "linematch_context": "        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)\n\n"
            },
            {
              "lineno": 123,
              "coloffset": 4,
              "linematch": "if right is None:",
              "linematch_context": "\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 113,
              "coloffset": 13,
              "linematch": "elif item == pivot:",
              "linematch_context": "    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)"
            },
            {
              "lineno": 113,
              "coloffset": 13,
              "linematch": "elif item == pivot:",
              "linematch_context": "    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)"
            },
            {
              "lineno": 113,
              "coloffset": 13,
              "linematch": "elif item == pivot:",
              "linematch_context": "    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)"
            },
            {
              "lineno": 113,
              "coloffset": 13,
              "linematch": "elif item == pivot:",
              "linematch_context": "    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)"
            },
            {
              "lineno": 113,
              "coloffset": 13,
              "linematch": "elif item == pivot:",
              "linematch_context": "    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)"
            },
            {
              "lineno": 123,
              "coloffset": 7,
              "linematch": "if right is None:",
              "linematch_context": "\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/tests/test_sorting.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": "//Compare/ops/Is | //Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 11,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def bubble_sort(array: List[int]) -> List[int]:",
              "linematch_context": "# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):"
            },
            {
              "lineno": 41,
              "coloffset": 0,
              "linematch": "def insertion_sort(array: List[int]) -> List[int]:",
              "linematch_context": "            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    \"\"\"Run an insertion sort on the provided array.\"\"\"\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]"
            },
            {
              "lineno": 63,
              "coloffset": 0,
              "linematch": "def merge(left: List[int], right: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right"
            },
            {
              "lineno": 96,
              "coloffset": 0,
              "linematch": "def merge_sort(array: List[int]) -> List[int]:",
              "linematch_context": "\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))"
            },
            {
              "lineno": 104,
              "coloffset": 0,
              "linematch": "def quick_sort(array: List[int]) -> List[int]:",
              "linematch_context": "    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]"
            },
            {
              "lineno": 121,
              "coloffset": 0,
              "linematch": "def insertion_sort_time(array: List[int], left: int = 0, right=None):",
              "linematch_context": "\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]"
            },
            {
              "lineno": 135,
              "coloffset": 0,
              "linematch": "def tim_sort(array: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 10,
              "coloffset": 0,
              "linematch": "def format_decimal(number: float):",
              "linematch_context": "from typing import List\nfrom typing import Tuple\n\n\ndef format_decimal(number: float):\n    \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n    # round the provided floating point value with format function\n    format_float = \"{:.5f}\".format(number)\n    return format_float\n"
            },
            {
              "lineno": 17,
              "coloffset": 0,
              "linematch": "def generate_random_number(maximum: int) -> int:",
              "linematch_context": "    format_float = \"{:.5f}\".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value"
            },
            {
              "lineno": 25,
              "coloffset": 0,
              "linematch": "def generate_random_container(",
              "linematch_context": "    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a list of random values for a specific size"
            },
            {
              "lineno": 36,
              "coloffset": 0,
              "linematch": "def run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:",
              "linematch_context": "    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    \"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\"\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it's not the built-in `sorted()`.\n    setup_code = f\"from listsorting.sorting import {algorithm}\""
            },
            {
              "lineno": 55,
              "coloffset": 0,
              "linematch": "def run_sorting_algorithm_experiment_campaign(",
              "linematch_context": "        format_decimal((sum(times) / len(times))),\n    )\n\n\ndef run_sorting_algorithm_experiment_campaign(\n    algorithm: str,\n    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 39,
              "coloffset": 4,
              "linematch": "def __str__(self):",
              "linematch_context": "    MERGESORT = \"merge\"\n    QUICKSORT = \"quick\"\n    TIMSORT = \"tim\"\n\n    def __str__(self):\n        \"\"\"Define a default string representation.\"\"\"\n        return self.value\n\n\n@cli.command()"
            },
            {
              "lineno": 45,
              "coloffset": 0,
              "linematch": "def listsorting(",
              "linematch_context": "        return self.value\n\n\n@cli.command()\ndef listsorting(\n    starting_size: int = typer.Option(1000000),\n    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/tests/test_sorting.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):",
              "linematch_context": "@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\",\n    [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n)\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 39,
              "coloffset": 0,
              "linematch": "def test_bubble_sort_single(list_inputs, expected_answer):",
              "linematch_context": "@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\",\n    [([10, 3, 1], [1, 3, 10])],\n)\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py",
        "check": {
          "id": "FLV001",
          "name": "Function uses loop variable",
          "description": "The loop variable is not bound in the function definition, so it will always have the value it had in the last iteration",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[body//comprehension/target/Name]",
          "passed": true,
          "matches": [
            {
              "lineno": 25,
              "coloffset": 0,
              "linematch": "def generate_random_container(",
              "linematch_context": "    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a list of random values for a specific size"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "F002",
          "name": "Number of conditions (if, if-else, and switch) in a Function",
          "description": "Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else",
          "passed": true,
          "matches": [
            {
              "lineno": 71,
              "coloffset": 4,
              "linematch": "if len(right) == 0:",
              "linematch_context": "    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):"
            },
            {
              "lineno": 86,
              "coloffset": 8,
              "linematch": "if index_right == len(right):",
              "linematch_context": "            index_right += 1\n        # If the reach the end of either array, then you can\n        # add the remaining elements from the other array to\n        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break"
            },
            {
              "lineno": 89,
              "coloffset": 8,
              "linematch": "if index_left == len(left):",
              "linematch_context": "        # the result and break the loop\n        if index_right == len(right):\n            result += left[index_left:]\n            break\n        if index_left == len(left):\n            result += right[index_right:]\n            break\n\n    return result\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "CL001",
          "name": "The number of nested conditions (e.g., if{if{}}) in a Function",
          "description": "Ensure there is at least one nested condition (e.g., if{if{}}) in a function.",
          "min": 1,
          "max": 1,
          "pattern": "//FunctionDef//If/descendant::If",
          "passed": false,
          "matches": [
            {
              "lineno": 113,
              "coloffset": 8,
              "linematch": "elif item == pivot:",
              "linematch_context": "    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)"
            },
            {
              "lineno": 115,
              "coloffset": 8,
              "linematch": "elif item > pivot:",
              "linematch_context": "        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)\n\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "C002",
          "name": "The number of nested loop-conditions (e.g., for{if{}}) in a Function",
          "description": "Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
          "passed": true,
          "matches": [
            {
              "lineno": 21,
              "coloffset": 0,
              "linematch": "def bubble_sort(array: List[int]) -> List[int]:",
              "linematch_context": "# Make sure that you add comments to all of these functions\n# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):"
            },
            {
              "lineno": 41,
              "coloffset": 0,
              "linematch": "def insertion_sort(array: List[int]) -> List[int]:",
              "linematch_context": "            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    \"\"\"Run an insertion sort on the provided array.\"\"\"\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]"
            },
            {
              "lineno": 63,
              "coloffset": 0,
              "linematch": "def merge(left: List[int], right: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right"
            },
            {
              "lineno": 96,
              "coloffset": 0,
              "linematch": "def merge_sort(array: List[int]) -> List[int]:",
              "linematch_context": "\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))"
            },
            {
              "lineno": 104,
              "coloffset": 0,
              "linematch": "def quick_sort(array: List[int]) -> List[int]:",
              "linematch_context": "    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]"
            },
            {
              "lineno": 121,
              "coloffset": 0,
              "linematch": "def insertion_sort_time(array: List[int], left: int = 0, right=None):",
              "linematch_context": "\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]"
            },
            {
              "lineno": 135,
              "coloffset": 0,
              "linematch": "def tim_sort(array: List[int]) -> List[int]:",
              "linematch_context": "        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "F001",
          "name": "The number of nested loop-conditions (e.g., for{for{}}) in a Function",
          "description": "Ensure the presence of nested loop-conditions (e.g., for{for{}}) in a function.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef//For[.//For]",
          "passed": true,
          "matches": [
            {
              "lineno": 26,
              "coloffset": 4,
              "linematch": "for i in range(n):",
              "linematch_context": "    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there's nothing left to sort\n        already_sorted = True\n        # Start looking at each item of the list one by one,\n        # comparing it with its adjacent value. With each iteration\n        # the portion of the array that you look at shrinks because the remaining items have already been sorted"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/tests/test_sorting.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/Assert",
          "passed": true,
          "matches": [
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": ")\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)"
            },
            {
              "lineno": 26,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)"
            },
            {
              "lineno": 28,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize("
            },
            {
              "lineno": 32,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\",\n    [([10, 3, 1], [1, 3, 10])],"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": ")\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)"
            },
            {
              "lineno": 46,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 48,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/tests/test_sorting.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*",
          "passed": false,
          "matches": [
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "\"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"",
              "linematch_context": "    \"list_inputs, expected_answer\",\n    [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n)\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)"
            },
            {
              "lineno": 23,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.bubble_sort(list_inputs)",
              "linematch_context": "    [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n)\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": ")\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)"
            },
            {
              "lineno": 25,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.insertion_sort(list_inputs)",
              "linematch_context": "def test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 26,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)"
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.merge_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 28,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.quick_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize("
            },
            {
              "lineno": 31,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.tim_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\","
            },
            {
              "lineno": 32,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\",\n    [([10, 3, 1], [1, 3, 10])],"
            },
            {
              "lineno": 40,
              "coloffset": 4,
              "linematch": "\"\"\"Check the sorting algorithm functions with one input.\"\"\"",
              "linematch_context": "    \"list_inputs, expected_answer\",\n    [([10, 3, 1], [1, 3, 10])],\n)\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)"
            },
            {
              "lineno": 41,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.bubble_sort(list_inputs)",
              "linematch_context": "    [([10, 3, 1], [1, 3, 10])],\n)\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": ")\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)"
            },
            {
              "lineno": 43,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.insertion_sort(list_inputs)",
              "linematch_context": "def test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)"
            },
            {
              "lineno": 45,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.merge_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 46,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.quick_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 48,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 49,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.tim_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/sorting.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "\"\"\"Sort an input list called array using bubble sort.\"\"\"",
              "linematch_context": "# so as to make it clear that you understand how each step works\n\n\ndef bubble_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there's nothing left to sort"
            },
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "n = len(array)",
              "linematch_context": "\ndef bubble_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there's nothing left to sort\n        already_sorted = True\n        # Start looking at each item of the list one by one,"
            },
            {
              "lineno": 26,
              "coloffset": 4,
              "linematch": "for i in range(n):",
              "linematch_context": "    \"\"\"Sort an input list called array using bubble sort.\"\"\"\n    # count of value in the list\n    n = len(array)\n    # iterate through the number of value in list\n    for i in range(n):\n        # create a flag that will allow the function to terminate early if there's nothing left to sort\n        already_sorted = True\n        # Start looking at each item of the list one by one,\n        # comparing it with its adjacent value. With each iteration\n        # the portion of the array that you look at shrinks because the remaining items have already been sorted"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "return array",
              "linematch_context": "                array[j], array[j + 1] = array[j + 1], array[j]\n                already_sorted = False\n        if already_sorted:\n            break\n    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    \"\"\"Run an insertion sort on the provided array.\"\"\"\n    # Loop from the second element of the array until the last element"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "\"\"\"Run an insertion sort on the provided array.\"\"\"",
              "linematch_context": "    return array\n\n\ndef insertion_sort(array: List[int]) -> List[int]:\n    \"\"\"Run an insertion sort on the provided array.\"\"\"\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]\n        # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "for i in range(1, len(array)):",
              "linematch_context": "\ndef insertion_sort(array: List[int]) -> List[int]:\n    \"\"\"Run an insertion sort on the provided array.\"\"\"\n    # Loop from the second element of the array until the last element\n    for i in range(1, len(array)):\n        # This is the element we want to position in its correct place\n        key_item = array[i]\n        # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n        j = i - 1\n        # Run through the list of the items (the left portion of the array) and find the correct position"
            },
            {
              "lineno": 60,
              "coloffset": 4,
              "linematch": "return array",
              "linematch_context": "            j -= 1\n        # When you finish shifting the elements, you can position\n        # `key_item` in its correct location\n        array[j + 1] = key_item\n    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged"
            },
            {
              "lineno": 64,
              "coloffset": 4,
              "linematch": "\"\"\"Define a convenience method that supports the merging of lists.\"\"\"",
              "linematch_context": "    return array\n\n\ndef merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged"
            },
            {
              "lineno": 67,
              "coloffset": 4,
              "linematch": "if len(left) == 0:",
              "linematch_context": "def merge(left: List[int], right: List[int]) -> List[int]:\n    \"\"\"Define a convenience method that supports the merging of lists.\"\"\"\n    # If the first array is empty, then nothing needs to be merged\n    # and you can return the second array as the result\n    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left"
            },
            {
              "lineno": 71,
              "coloffset": 4,
              "linematch": "if len(right) == 0:",
              "linematch_context": "    if len(left) == 0:\n        return right\n    # If the second array is empty, the nothing needs to be merged\n    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):"
            },
            {
              "lineno": 74,
              "coloffset": 4,
              "linematch": "result: List[int] = []",
              "linematch_context": "    # and you can return the second array as the result\n    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1"
            },
            {
              "lineno": 75,
              "coloffset": 4,
              "linematch": "index_left = index_right = 0",
              "linematch_context": "    if len(right) == 0:\n        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1\n        else:"
            },
            {
              "lineno": 76,
              "coloffset": 4,
              "linematch": "while len(result) < len(left) + len(right):",
              "linematch_context": "        return left\n\n    result: List[int] = []\n    index_left = index_right = 0\n    while len(result) < len(left) + len(right):\n        if left[index_left] <= right[index_right]:\n            result.append(left[index_left])\n            index_left += 1\n        else:\n            result.append(right[index_right])"
            },
            {
              "lineno": 93,
              "coloffset": 4,
              "linematch": "return result",
              "linematch_context": "        if index_left == len(left):\n            result += right[index_right:]\n            break\n\n    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:"
            },
            {
              "lineno": 97,
              "coloffset": 4,
              "linematch": "\"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"",
              "linematch_context": "    return result\n\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n"
            },
            {
              "lineno": 98,
              "coloffset": 4,
              "linematch": "if len(array) < 2:",
              "linematch_context": "\n\ndef merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n"
            },
            {
              "lineno": 100,
              "coloffset": 4,
              "linematch": "midpoint = len(array) // 2",
              "linematch_context": "def merge_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\""
            },
            {
              "lineno": 101,
              "coloffset": 4,
              "linematch": "return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))",
              "linematch_context": "    \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    midpoint = len(array) // 2\n    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:"
            },
            {
              "lineno": 105,
              "coloffset": 4,
              "linematch": "\"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"",
              "linematch_context": "    return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:"
            },
            {
              "lineno": 106,
              "coloffset": 4,
              "linematch": "if len(array) < 2:",
              "linematch_context": "\n\ndef quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:"
            },
            {
              "lineno": 108,
              "coloffset": 4,
              "linematch": "low, same, high = [], [], []",
              "linematch_context": "def quick_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:"
            },
            {
              "lineno": 109,
              "coloffset": 4,
              "linematch": "pivot = array[randint(0, len(array) - 1)]",
              "linematch_context": "    \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)"
            },
            {
              "lineno": 110,
              "coloffset": 4,
              "linematch": "for item in array:",
              "linematch_context": "    if len(array) < 2:\n        return array\n    low, same, high = [], [], []\n    pivot = array[randint(0, len(array) - 1)]\n    for item in array:\n        if item < pivot:\n            low.append(item)\n        elif item == pivot:\n            same.append(item)\n        elif item > pivot:"
            },
            {
              "lineno": 118,
              "coloffset": 4,
              "linematch": "return quick_sort(low) + same + quick_sort(high)",
              "linematch_context": "            same.append(item)\n        elif item > pivot:\n            high.append(item)\n\n    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:"
            },
            {
              "lineno": 122,
              "coloffset": 4,
              "linematch": "\"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"",
              "linematch_context": "    return quick_sort(low) + same + quick_sort(high)\n\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1"
            },
            {
              "lineno": 123,
              "coloffset": 4,
              "linematch": "if right is None:",
              "linematch_context": "\n\ndef insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:"
            },
            {
              "lineno": 125,
              "coloffset": 4,
              "linematch": "for i in range(left + 1, right + 1):",
              "linematch_context": "def insertion_sort_time(array: List[int], left: int = 0, right=None):\n    \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n    if right is None:\n        right = len(array) - 1\n    for i in range(left + 1, right + 1):\n        key_item = array[i]\n        j = i - 1\n        while j >= left and array[j] > key_item:\n            array[j + 1] = array[j]\n            j -= 1"
            },
            {
              "lineno": 132,
              "coloffset": 4,
              "linematch": "return array",
              "linematch_context": "        while j >= left and array[j] > key_item:\n            array[j + 1] = array[j]\n            j -= 1\n        array[j + 1] = key_item\n    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32"
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "\"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"",
              "linematch_context": "    return array\n\n\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run"
            },
            {
              "lineno": 137,
              "coloffset": 4,
              "linematch": "min_run = 32",
              "linematch_context": "\n\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:"
            },
            {
              "lineno": 138,
              "coloffset": 4,
              "linematch": "n = len(array)",
              "linematch_context": "\ndef tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):"
            },
            {
              "lineno": 139,
              "coloffset": 4,
              "linematch": "for i in range(0, n, min_run):",
              "linematch_context": "def tim_sort(array: List[int]) -> List[int]:\n    \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):\n            midpoint = start + size - 1"
            },
            {
              "lineno": 141,
              "coloffset": 4,
              "linematch": "size = min_run",
              "linematch_context": "    min_run = 32\n    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):\n            midpoint = start + size - 1\n            end = min((start + size * 2 - 1), (n - 1))\n"
            },
            {
              "lineno": 142,
              "coloffset": 4,
              "linematch": "while size < n:",
              "linematch_context": "    n = len(array)\n    for i in range(0, n, min_run):\n        insertion_sort(array)\n    size = min_run\n    while size < n:\n        for start in range(0, n, size * 2):\n            midpoint = start + size - 1\n            end = min((start + size * 2 - 1), (n - 1))\n\n            merged_array = merge("
            },
            {
              "lineno": 153,
              "coloffset": 4,
              "linematch": "return array",
              "linematch_context": "            )\n            array[start : start + len(merged_array)] = merged_array\n\n        size *= 2\n    return array"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/experiment.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "\"\"\"Round a number up and then encode with five decimal places.\"\"\"",
              "linematch_context": "from typing import Tuple\n\n\ndef format_decimal(number: float):\n    \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n    # round the provided floating point value with format function\n    format_float = \"{:.5f}\".format(number)\n    return format_float\n\n"
            },
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "format_float = \"{:.5f}\".format(number)",
              "linematch_context": "\ndef format_decimal(number: float):\n    \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n    # round the provided floating point value with format function\n    format_float = \"{:.5f}\".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    \"\"\"Generate a random list defined by the size.\"\"\""
            },
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "return format_float",
              "linematch_context": "def format_decimal(number: float):\n    \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n    # round the provided floating point value with format function\n    format_float = \"{:.5f}\".format(number)\n    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a random value that is bound by 0 and a maximum"
            },
            {
              "lineno": 18,
              "coloffset": 4,
              "linematch": "\"\"\"Generate a random list defined by the size.\"\"\"",
              "linematch_context": "    return format_float\n\n\ndef generate_random_number(maximum: int) -> int:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value\n"
            },
            {
              "lineno": 20,
              "coloffset": 4,
              "linematch": "random_value = random.randint(0, maximum)",
              "linematch_context": "\ndef generate_random_number(maximum: int) -> int:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container("
            },
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "return random_value",
              "linematch_context": "    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a random value that is bound by 0 and a maximum\n    random_value = random.randint(0, maximum)\n    # return the randomly generated number\n    return random_value\n\n\ndef generate_random_container(\n    size: int,\n    maximum: int,"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "\"\"\"Generate a random list defined by the size.\"\"\"",
              "linematch_context": "def generate_random_container(\n    size: int,\n    maximum: int,\n) -> List[int]:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a list of random values for a specific size\n    # and with a number up to a specific maximum\n    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n"
            },
            {
              "lineno": 32,
              "coloffset": 4,
              "linematch": "random_list = [random.randrange(1, maximum, 1) for _ in range(size)]",
              "linematch_context": ") -> List[int]:\n    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a list of random values for a specific size\n    # and with a number up to a specific maximum\n    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    \"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\""
            },
            {
              "lineno": 33,
              "coloffset": 4,
              "linematch": "return random_list",
              "linematch_context": "    \"\"\"Generate a random list defined by the size.\"\"\"\n    # generate a list of random values for a specific size\n    # and with a number up to a specific maximum\n    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    \"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\"\n    # set up the context and prepare the call to the specified"
            },
            {
              "lineno": 37,
              "coloffset": 4,
              "linematch": "\"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\"",
              "linematch_context": "    return random_list\n\n\ndef run_sorting_algorithm(algorithm: str, array: List[int]) -> Tuple[str, str, str]:\n    \"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\"\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it's not the built-in `sorted()`.\n    setup_code = f\"from listsorting.sorting import {algorithm}\"\n    stmt = f\"{algorithm}({array})\""
            },
            {
              "lineno": 41,
              "coloffset": 4,
              "linematch": "setup_code = f\"from listsorting.sorting import {algorithm}\"",
              "linematch_context": "    \"\"\"Run a sorting algorithm and profile it with the timeit package.\"\"\"\n    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it's not the built-in `sorted()`.\n    setup_code = f\"from listsorting.sorting import {algorithm}\"\n    stmt = f\"{algorithm}({array})\"\n    # execute the code ten different times and return the time\n    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "stmt = f\"{algorithm}({array})\"",
              "linematch_context": "    # set up the context and prepare the call to the specified\n    # algorithm using the supplied array. Only import the\n    # algorithm function if it's not the built-in `sorted()`.\n    setup_code = f\"from listsorting.sorting import {algorithm}\"\n    stmt = f\"{algorithm}({array})\"\n    # execute the code ten different times and return the time\n    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:\n    # (minimum execution time, maximum execution time, average execution time)"
            },
            {
              "lineno": 45,
              "coloffset": 4,
              "linematch": "times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)",
              "linematch_context": "    setup_code = f\"from listsorting.sorting import {algorithm}\"\n    stmt = f\"{algorithm}({array})\"\n    # execute the code ten different times and return the time\n    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:\n    # (minimum execution time, maximum execution time, average execution time)\n    return (\n        format_decimal(min(times)),\n        format_decimal(max(times)),"
            },
            {
              "lineno": 48,
              "coloffset": 4,
              "linematch": "return (",
              "linematch_context": "    # in seconds that each execution took\n    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n    # finally, return the amount of execution time summarized as:\n    # (minimum execution time, maximum execution time, average execution time)\n    return (\n        format_decimal(min(times)),\n        format_decimal(max(times)),\n        format_decimal((sum(times) / len(times))),\n    )\n"
            },
            {
              "lineno": 61,
              "coloffset": 4,
              "linematch": "\"\"\"Run an entire sorting algorithm experiment campaign.\"\"\"",
              "linematch_context": "    starting_size: int,\n    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:\n    \"\"\"Run an entire sorting algorithm experiment campaign.\"\"\"\n    data_table = []\n    # run a total of number_doubles number of doubles for the input size\n    while number_doubles > 0:\n        # generate a random list based on the current size of the data\n        random_list = generate_random_container(starting_size, maximum_value)"
            },
            {
              "lineno": 62,
              "coloffset": 4,
              "linematch": "data_table = []",
              "linematch_context": "    maximum_value: int,\n    number_doubles: int,\n) -> List[List[Any]]:\n    \"\"\"Run an entire sorting algorithm experiment campaign.\"\"\"\n    data_table = []\n    # run a total of number_doubles number of doubles for the input size\n    while number_doubles > 0:\n        # generate a random list based on the current size of the data\n        random_list = generate_random_container(starting_size, maximum_value)\n        # run the sorting algorithm and collect the timing data from timeit"
            },
            {
              "lineno": 64,
              "coloffset": 4,
              "linematch": "while number_doubles > 0:",
              "linematch_context": ") -> List[List[Any]]:\n    \"\"\"Run an entire sorting algorithm experiment campaign.\"\"\"\n    data_table = []\n    # run a total of number_doubles number of doubles for the input size\n    while number_doubles > 0:\n        # generate a random list based on the current size of the data\n        random_list = generate_random_container(starting_size, maximum_value)\n        # run the sorting algorithm and collect the timing data from timeit\n        performance_data = run_sorting_algorithm(algorithm, random_list)\n        # create the row of data from this specific execution of the algorithm"
            },
            {
              "lineno": 81,
              "coloffset": 4,
              "linematch": "return data_table",
              "linematch_context": "        data_table.append(data_table_row)\n        # move to the next round of the doubling experiment\n        number_doubles = number_doubles - 1\n        starting_size = starting_size * 2\n    return data_table"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/listsorting/main.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 40,
              "coloffset": 8,
              "linematch": "\"\"\"Define a default string representation.\"\"\"",
              "linematch_context": "    QUICKSORT = \"quick\"\n    TIMSORT = \"tim\"\n\n    def __str__(self):\n        \"\"\"Define a default string representation.\"\"\"\n        return self.value\n\n\n@cli.command()\ndef listsorting("
            },
            {
              "lineno": 41,
              "coloffset": 8,
              "linematch": "return self.value",
              "linematch_context": "    TIMSORT = \"tim\"\n\n    def __str__(self):\n        \"\"\"Define a default string representation.\"\"\"\n        return self.value\n\n\n@cli.command()\ndef listsorting(\n    starting_size: int = typer.Option(1000000),"
            },
            {
              "lineno": 51,
              "coloffset": 4,
              "linematch": "\"\"\"Conduct a doubling experiment to measure the performance of list sorting for various algorithms.\"\"\"",
              "linematch_context": "    maximum_value: int = typer.Option(10000),\n    number_doubles: int = typer.Option(10),\n    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:\n    \"\"\"Conduct a doubling experiment to measure the performance of list sorting for various algorithms.\"\"\"\n    # display diagnostics messages of the experiment\n    console.print(\n        \"\u2728 Conducting an experiment to measure the performance of list sorting!\"\n    )\n    console.print()"
            },
            {
              "lineno": 53,
              "coloffset": 4,
              "linematch": "console.print(",
              "linematch_context": "    approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n) -> None:\n    \"\"\"Conduct a doubling experiment to measure the performance of list sorting for various algorithms.\"\"\"\n    # display diagnostics messages of the experiment\n    console.print(\n        \"\u2728 Conducting an experiment to measure the performance of list sorting!\"\n    )\n    console.print()\n    console.print(f\"The chosen sorting algorithm: {approach}\")\n    console.print(f\"Starting size of the data container {starting_size}\")"
            },
            {
              "lineno": 56,
              "coloffset": 4,
              "linematch": "console.print()",
              "linematch_context": "    # display diagnostics messages of the experiment\n    console.print(\n        \"\u2728 Conducting an experiment to measure the performance of list sorting!\"\n    )\n    console.print()\n    console.print(f\"The chosen sorting algorithm: {approach}\")\n    console.print(f\"Starting size of the data container {starting_size}\")\n    console.print(f\"Number of doubles to execute: {number_doubles}\")\n    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")"
            },
            {
              "lineno": 57,
              "coloffset": 4,
              "linematch": "console.print(f\"The chosen sorting algorithm: {approach}\")",
              "linematch_context": "    console.print(\n        \"\u2728 Conducting an experiment to measure the performance of list sorting!\"\n    )\n    console.print()\n    console.print(f\"The chosen sorting algorithm: {approach}\")\n    console.print(f\"Starting size of the data container {starting_size}\")\n    console.print(f\"Number of doubles to execute: {number_doubles}\")\n    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()"
            },
            {
              "lineno": 58,
              "coloffset": 4,
              "linematch": "console.print(f\"Starting size of the data container {starting_size}\")",
              "linematch_context": "        \"\u2728 Conducting an experiment to measure the performance of list sorting!\"\n    )\n    console.print()\n    console.print(f\"The chosen sorting algorithm: {approach}\")\n    console.print(f\"Starting size of the data container {starting_size}\")\n    console.print(f\"Number of doubles to execute: {number_doubles}\")\n    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()\n    # define the name approach"
            },
            {
              "lineno": 59,
              "coloffset": 4,
              "linematch": "console.print(f\"Number of doubles to execute: {number_doubles}\")",
              "linematch_context": "    )\n    console.print()\n    console.print(f\"The chosen sorting algorithm: {approach}\")\n    console.print(f\"Starting size of the data container {starting_size}\")\n    console.print(f\"Number of doubles to execute: {number_doubles}\")\n    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT"
            },
            {
              "lineno": 60,
              "coloffset": 4,
              "linematch": "console.print()",
              "linematch_context": "    console.print()\n    console.print(f\"The chosen sorting algorithm: {approach}\")\n    console.print(f\"Starting size of the data container {starting_size}\")\n    console.print(f\"Number of doubles to execute: {number_doubles}\")\n    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign("
            },
            {
              "lineno": 61,
              "coloffset": 4,
              "linematch": "console.print(\"\u2728 Here are the results from running the experiment!\")",
              "linematch_context": "    console.print(f\"The chosen sorting algorithm: {approach}\")\n    console.print(f\"Starting size of the data container {starting_size}\")\n    console.print(f\"Number of doubles to execute: {number_doubles}\")\n    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles"
            },
            {
              "lineno": 62,
              "coloffset": 4,
              "linematch": "console.print()",
              "linematch_context": "    console.print(f\"Starting size of the data container {starting_size}\")\n    console.print(f\"Number of doubles to execute: {number_doubles}\")\n    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )"
            },
            {
              "lineno": 64,
              "coloffset": 4,
              "linematch": "algorithm = approach + UNDERSCORE + SORT",
              "linematch_context": "    console.print()\n    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )\n    data = [\n        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],"
            },
            {
              "lineno": 65,
              "coloffset": 4,
              "linematch": "result = experiment.run_sorting_algorithm_experiment_campaign(",
              "linematch_context": "    console.print(\"\u2728 Here are the results from running the experiment!\")\n    console.print()\n    # define the name approach\n    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )\n    data = [\n        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n        result[0],"
            },
            {
              "lineno": 68,
              "coloffset": 4,
              "linematch": "data = [",
              "linematch_context": "    algorithm = approach + UNDERSCORE + SORT\n    result = experiment.run_sorting_algorithm_experiment_campaign(\n        algorithm, starting_size, maximum_value, number_doubles\n    )\n    data = [\n        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n        result[0],\n        result[1],\n        result[2],\n        result[3],"
            },
            {
              "lineno": 77,
              "coloffset": 4,
              "linematch": "table = tabulate(data, headers=\"firstrow\")",
              "linematch_context": "        result[3],\n        result[4],\n    ]\n    # call tabulate function to construct a table based of data\n    table = tabulate(data, headers=\"firstrow\")\n    print(table)"
            },
            {
              "lineno": 78,
              "coloffset": 4,
              "linematch": "print(table)",
              "linematch_context": "        result[4],\n    ]\n    # call tabulate function to construct a table based of data\n    table = tabulate(data, headers=\"firstrow\")\n    print(table)"
            }
          ]
        }
      },
      {
        "filename": "/Users/jaclynpham/AstuteSource/SEERS/scripts/analyzer/demo/sorting_algorithm/listsorting/tests/test_sorting.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods in functions of type 'str'.",
          "min": 1,
          "max": 10,
          "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "\"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"",
              "linematch_context": "    \"list_inputs, expected_answer\",\n    [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n)\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)"
            },
            {
              "lineno": 23,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.bubble_sort(list_inputs)",
              "linematch_context": "    [([5, 3, 9, 2, 1], [1, 2, 3, 5, 9]), ([7, 2, 10, 3, 1], [1, 2, 3, 7, 10])],\n)\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": ")\ndef test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)"
            },
            {
              "lineno": 25,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.insertion_sort(list_inputs)",
              "linematch_context": "def test_sorting_algorithms_multiple_inputs(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 26,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    \"\"\"Check the sorting algorithm functions with multiple inputs.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)"
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.merge_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 28,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.quick_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize("
            },
            {
              "lineno": 31,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.tim_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\","
            },
            {
              "lineno": 32,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer\n\n\n@pytest.mark.parametrize(\n    \"list_inputs, expected_answer\",\n    [([10, 3, 1], [1, 3, 10])],"
            },
            {
              "lineno": 40,
              "coloffset": 4,
              "linematch": "\"\"\"Check the sorting algorithm functions with one input.\"\"\"",
              "linematch_context": "    \"list_inputs, expected_answer\",\n    [([10, 3, 1], [1, 3, 10])],\n)\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)"
            },
            {
              "lineno": 41,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.bubble_sort(list_inputs)",
              "linematch_context": "    [([10, 3, 1], [1, 3, 10])],\n)\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": ")\ndef test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)"
            },
            {
              "lineno": 43,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.insertion_sort(list_inputs)",
              "linematch_context": "def test_bubble_sort_single(list_inputs, expected_answer):\n    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    \"\"\"Check the sorting algorithm functions with one input.\"\"\"\n    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)"
            },
            {
              "lineno": 45,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.merge_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.bubble_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 46,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.quick_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.insertion_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 48,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 49,
              "coloffset": 4,
              "linematch": "sorted_list = sorting.tim_sort(list_inputs)",
              "linematch_context": "    sorted_list = sorting.merge_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "assert sorted_list == expected_answer",
              "linematch_context": "    assert sorted_list == expected_answer\n    sorted_list = sorting.quick_sort(list_inputs)\n    assert sorted_list == expected_answer\n    sorted_list = sorting.tim_sort(list_inputs)\n    assert sorted_list == expected_answer"
            }
          ]
        }
      }
    ]
  },
  "mutmut_result": {
    "disabled": 0,
    "errors": 0,
    "failures": 149,
    "tests": 207,
    "time": 0,
    "testsuite": [
      {
        "disabled": 0,
        "errors": 0,
        "failures": 149,
        "name": "mutmut",
        "skipped": 0,
        "tests": 207,
        "time": 0,
        "testcase": [
          {
            "name": "Mutant #1",
            "file": "listsorting/sorting.py",
            "line": 24,
            "system-out": [
              "    n = len(array)"
            ]
          },
          {
            "name": "Mutant #2",
            "file": "listsorting/sorting.py",
            "line": 28,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = False\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        already_sorted = True"
            ]
          },
          {
            "name": "Mutant #3",
            "file": "listsorting/sorting.py",
            "line": 28,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -25,7 +25,7 @@\n     # iterate through the number of value in list\n     for i in range(n):\n         # create a flag that will allow the function to terminate early if there's nothing left to sort\n-        already_sorted = True\n+        already_sorted = None\n         # Start looking at each item of the list one by one,\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        already_sorted = True"
            ]
          },
          {
            "name": "Mutant #4",
            "file": "listsorting/sorting.py",
            "line": 32,
            "system-out": [
              "        for j in range(n - i - 1):"
            ]
          },
          {
            "name": "Mutant #5",
            "file": "listsorting/sorting.py",
            "line": 32,
            "system-out": [
              "        for j in range(n - i - 1):"
            ]
          },
          {
            "name": "Mutant #6",
            "file": "listsorting/sorting.py",
            "line": 32,
            "system-out": [
              "        for j in range(n - i - 1):"
            ]
          },
          {
            "name": "Mutant #7",
            "file": "listsorting/sorting.py",
            "line": 33,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -30,7 +30,7 @@\n         # comparing it with its adjacent value. With each iteration\n         # the portion of the array that you look at shrinks because the remaining items have already been sorted\n         for j in range(n - i - 1):\n-            if array[j] > array[j + 1]:\n+            if array[j] >= array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            if array[j] > array[j + 1]:"
            ]
          },
          {
            "name": "Mutant #8",
            "file": "listsorting/sorting.py",
            "line": 33,
            "system-out": [
              "            if array[j] > array[j + 1]:"
            ]
          },
          {
            "name": "Mutant #9",
            "file": "listsorting/sorting.py",
            "line": 33,
            "system-out": [
              "            if array[j] > array[j + 1]:"
            ]
          },
          {
            "name": "Mutant #10",
            "file": "listsorting/sorting.py",
            "line": 34,
            "system-out": [
              "                array[j], array[j + 1] = array[j + 1], array[j]"
            ]
          },
          {
            "name": "Mutant #11",
            "file": "listsorting/sorting.py",
            "line": 34,
            "system-out": [
              "                array[j], array[j + 1] = array[j + 1], array[j]"
            ]
          },
          {
            "name": "Mutant #12",
            "file": "listsorting/sorting.py",
            "line": 34,
            "system-out": [
              "                array[j], array[j + 1] = array[j + 1], array[j]"
            ]
          },
          {
            "name": "Mutant #13",
            "file": "listsorting/sorting.py",
            "line": 34,
            "system-out": [
              "                array[j], array[j + 1] = array[j + 1], array[j]"
            ]
          },
          {
            "name": "Mutant #14",
            "file": "listsorting/sorting.py",
            "line": 34,
            "system-out": [
              "                array[j], array[j + 1] = array[j + 1], array[j]"
            ]
          },
          {
            "name": "Mutant #15",
            "file": "listsorting/sorting.py",
            "line": 35,
            "system-out": [
              "                already_sorted = False"
            ]
          },
          {
            "name": "Mutant #16",
            "file": "listsorting/sorting.py",
            "line": 35,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -32,7 +32,7 @@\n         for j in range(n - i - 1):\n             if array[j] > array[j + 1]:\n                 array[j], array[j + 1] = array[j + 1], array[j]\n-                already_sorted = False\n+                already_sorted = None\n         if already_sorted:\n             break\n     return array\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                already_sorted = False"
            ]
          },
          {
            "name": "Mutant #17",
            "file": "listsorting/sorting.py",
            "line": 37,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -34,7 +34,7 @@\n                 array[j], array[j + 1] = array[j + 1], array[j]\n                 already_sorted = False\n         if already_sorted:\n-            break\n+            continue\n     return array\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            break"
            ]
          },
          {
            "name": "Mutant #18",
            "file": "listsorting/sorting.py",
            "line": 44,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -41,7 +41,7 @@\n def insertion_sort(array: List[int]) -> List[int]:\n     \"\"\"Run an insertion sort on the provided array.\"\"\"\n     # Loop from the second element of the array until the last element\n-    for i in range(1, len(array)):\n+    for i in range(2, len(array)):\n         # This is the element we want to position in its correct place\n         key_item = array[i]\n         # Initialize the variable that will be used to find the correct position of the element referenced by the `key_item`\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for i in range(1, len(array)):"
            ]
          },
          {
            "name": "Mutant #19",
            "file": "listsorting/sorting.py",
            "line": 46,
            "system-out": [
              "        key_item = array[i]"
            ]
          },
          {
            "name": "Mutant #20",
            "file": "listsorting/sorting.py",
            "line": 48,
            "system-out": [
              "        j = i - 1"
            ]
          },
          {
            "name": "Mutant #21",
            "file": "listsorting/sorting.py",
            "line": 48,
            "system-out": [
              "        j = i - 1"
            ]
          },
          {
            "name": "Mutant #22",
            "file": "listsorting/sorting.py",
            "line": 48,
            "system-out": [
              "        j = i - 1"
            ]
          },
          {
            "name": "Mutant #23",
            "file": "listsorting/sorting.py",
            "line": 51,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j > 0 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        while j >= 0 and array[j] > key_item:"
            ]
          },
          {
            "name": "Mutant #24",
            "file": "listsorting/sorting.py",
            "line": 51,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 1 and array[j] > key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        while j >= 0 and array[j] > key_item:"
            ]
          },
          {
            "name": "Mutant #25",
            "file": "listsorting/sorting.py",
            "line": 51,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -48,7 +48,7 @@\n         j = i - 1\n         # Run through the list of the items (the left portion of the array) and find the correct position\n         # of the element referenced by the 'key_item'. Do this only if the `key_item` is smaller than its adjacent values.\n-        while j >= 0 and array[j] > key_item:\n+        while j >= 0 and array[j] >= key_item:\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        while j >= 0 and array[j] > key_item:"
            ]
          },
          {
            "name": "Mutant #26",
            "file": "listsorting/sorting.py",
            "line": 51,
            "system-out": [
              "        while j >= 0 and array[j] > key_item:"
            ]
          },
          {
            "name": "Mutant #27",
            "file": "listsorting/sorting.py",
            "line": 55,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j - 1] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            array[j + 1] = array[j]"
            ]
          },
          {
            "name": "Mutant #28",
            "file": "listsorting/sorting.py",
            "line": 55,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 2] = array[j]\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            array[j + 1] = array[j]"
            ]
          },
          {
            "name": "Mutant #29",
            "file": "listsorting/sorting.py",
            "line": 55,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -52,7 +52,7 @@\n             # Shift the value one position to the left\n             # and reposition j to point to the next element\n             # (from right to left)\n-            array[j + 1] = array[j]\n+            array[j + 1] = None\n             j -= 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            array[j + 1] = array[j]"
            ]
          },
          {
            "name": "Mutant #30",
            "file": "listsorting/sorting.py",
            "line": 56,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j = 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            j -= 1"
            ]
          },
          {
            "name": "Mutant #31",
            "file": "listsorting/sorting.py",
            "line": 56,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j += 1\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            j -= 1"
            ]
          },
          {
            "name": "Mutant #32",
            "file": "listsorting/sorting.py",
            "line": 56,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -53,7 +53,7 @@\n             # and reposition j to point to the next element\n             # (from right to left)\n             array[j + 1] = array[j]\n-            j -= 1\n+            j -= 2\n         # When you finish shifting the elements, you can position\n         # `key_item` in its correct location\n         array[j + 1] = key_item\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            j -= 1"
            ]
          },
          {
            "name": "Mutant #33",
            "file": "listsorting/sorting.py",
            "line": 59,
            "system-out": [
              "        array[j + 1] = key_item"
            ]
          },
          {
            "name": "Mutant #34",
            "file": "listsorting/sorting.py",
            "line": 59,
            "system-out": [
              "        array[j + 1] = key_item"
            ]
          },
          {
            "name": "Mutant #35",
            "file": "listsorting/sorting.py",
            "line": 59,
            "system-out": [
              "        array[j + 1] = key_item"
            ]
          },
          {
            "name": "Mutant #36",
            "file": "listsorting/sorting.py",
            "line": 67,
            "system-out": [
              "    if len(left) == 0:"
            ]
          },
          {
            "name": "Mutant #37",
            "file": "listsorting/sorting.py",
            "line": 67,
            "system-out": [
              "    if len(left) == 0:"
            ]
          },
          {
            "name": "Mutant #38",
            "file": "listsorting/sorting.py",
            "line": 71,
            "system-out": [
              "    if len(right) == 0:"
            ]
          },
          {
            "name": "Mutant #39",
            "file": "listsorting/sorting.py",
            "line": 71,
            "system-out": [
              "    if len(right) == 0:"
            ]
          },
          {
            "name": "Mutant #40",
            "file": "listsorting/sorting.py",
            "line": 74,
            "system-out": [
              "    result: List[int] = []"
            ]
          },
          {
            "name": "Mutant #41",
            "file": "listsorting/sorting.py",
            "line": 75,
            "system-out": [
              "    index_left = index_right = 0"
            ]
          },
          {
            "name": "Mutant #42",
            "file": "listsorting/sorting.py",
            "line": 75,
            "system-out": [
              "    index_left = index_right = 0"
            ]
          },
          {
            "name": "Mutant #43",
            "file": "listsorting/sorting.py",
            "line": 76,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -73,7 +73,7 @@\n \n     result: List[int] = []\n     index_left = index_right = 0\n-    while len(result) < len(left) + len(right):\n+    while len(result) <= len(left) + len(right):\n         if left[index_left] <= right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    while len(result) < len(left) + len(right):"
            ]
          },
          {
            "name": "Mutant #44",
            "file": "listsorting/sorting.py",
            "line": 76,
            "system-out": [
              "    while len(result) < len(left) + len(right):"
            ]
          },
          {
            "name": "Mutant #45",
            "file": "listsorting/sorting.py",
            "line": 77,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -74,7 +74,7 @@\n     result: List[int] = []\n     index_left = index_right = 0\n     while len(result) < len(left) + len(right):\n-        if left[index_left] <= right[index_right]:\n+        if left[index_left] < right[index_right]:\n             result.append(left[index_left])\n             index_left += 1\n         else:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if left[index_left] <= right[index_right]:"
            ]
          },
          {
            "name": "Mutant #46",
            "file": "listsorting/sorting.py",
            "line": 79,
            "system-out": [
              "            index_left += 1"
            ]
          },
          {
            "name": "Mutant #47",
            "file": "listsorting/sorting.py",
            "line": 79,
            "system-out": [
              "            index_left += 1"
            ]
          },
          {
            "name": "Mutant #48",
            "file": "listsorting/sorting.py",
            "line": 79,
            "system-out": [
              "            index_left += 1"
            ]
          },
          {
            "name": "Mutant #49",
            "file": "listsorting/sorting.py",
            "line": 82,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right = 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            index_right += 1"
            ]
          },
          {
            "name": "Mutant #50",
            "file": "listsorting/sorting.py",
            "line": 82,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right -= 1\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            index_right += 1"
            ]
          },
          {
            "name": "Mutant #51",
            "file": "listsorting/sorting.py",
            "line": 82,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -79,7 +79,7 @@\n             index_left += 1\n         else:\n             result.append(right[index_right])\n-            index_right += 1\n+            index_right += 2\n         # If the reach the end of either array, then you can\n         # add the remaining elements from the other array to\n         # the result and break the loop\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            index_right += 1"
            ]
          },
          {
            "name": "Mutant #52",
            "file": "listsorting/sorting.py",
            "line": 86,
            "system-out": [
              "        if index_right == len(right):"
            ]
          },
          {
            "name": "Mutant #53",
            "file": "listsorting/sorting.py",
            "line": 87,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result = left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            result += left[index_left:]"
            ]
          },
          {
            "name": "Mutant #54",
            "file": "listsorting/sorting.py",
            "line": 87,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -84,7 +84,7 @@\n         # add the remaining elements from the other array to\n         # the result and break the loop\n         if index_right == len(right):\n-            result += left[index_left:]\n+            result -= left[index_left:]\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            result += left[index_left:]"
            ]
          },
          {
            "name": "Mutant #55",
            "file": "listsorting/sorting.py",
            "line": 88,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -85,7 +85,7 @@\n         # the result and break the loop\n         if index_right == len(right):\n             result += left[index_left:]\n-            break\n+            continue\n         if index_left == len(left):\n             result += right[index_right:]\n             break\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            break"
            ]
          },
          {
            "name": "Mutant #56",
            "file": "listsorting/sorting.py",
            "line": 89,
            "system-out": [
              "        if index_left == len(left):"
            ]
          },
          {
            "name": "Mutant #57",
            "file": "listsorting/sorting.py",
            "line": 90,
            "system-out": [
              "            result += right[index_right:]"
            ]
          },
          {
            "name": "Mutant #58",
            "file": "listsorting/sorting.py",
            "line": 90,
            "system-out": [
              "            result += right[index_right:]"
            ]
          },
          {
            "name": "Mutant #59",
            "file": "listsorting/sorting.py",
            "line": 91,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -88,7 +88,7 @@\n             break\n         if index_left == len(left):\n             result += right[index_right:]\n-            break\n+            continue\n \n     return result\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            break"
            ]
          },
          {
            "name": "Mutant #60",
            "file": "listsorting/sorting.py",
            "line": 98,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(array) < 2:"
            ]
          },
          {
            "name": "Mutant #61",
            "file": "listsorting/sorting.py",
            "line": 98,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -95,7 +95,7 @@\n \n def merge_sort(array: List[int]) -> List[int]:\n     \"\"\"Sort the provided list called array with the merge sort algorithm.\"\"\"\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     midpoint = len(array) // 2\n     return merge(left=merge_sort(array[:midpoint]), right=merge_sort(array[midpoint:]))\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(array) < 2:"
            ]
          },
          {
            "name": "Mutant #62",
            "file": "listsorting/sorting.py",
            "line": 100,
            "system-out": [
              "    midpoint = len(array) // 2"
            ]
          },
          {
            "name": "Mutant #63",
            "file": "listsorting/sorting.py",
            "line": 100,
            "system-out": [
              "    midpoint = len(array) // 2"
            ]
          },
          {
            "name": "Mutant #64",
            "file": "listsorting/sorting.py",
            "line": 100,
            "system-out": [
              "    midpoint = len(array) // 2"
            ]
          },
          {
            "name": "Mutant #65",
            "file": "listsorting/sorting.py",
            "line": 106,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n-    if len(array) < 2:\n+    if len(array) <= 2:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(array) < 2:"
            ]
          },
          {
            "name": "Mutant #66",
            "file": "listsorting/sorting.py",
            "line": 106,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -103,7 +103,7 @@\n \n def quick_sort(array: List[int]) -> List[int]:\n     \"\"\"Sort the provided list called array with the quick sort algorithm.\"\"\"\n-    if len(array) < 2:\n+    if len(array) < 3:\n         return array\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(array) < 2:"
            ]
          },
          {
            "name": "Mutant #67",
            "file": "listsorting/sorting.py",
            "line": 108,
            "system-out": [
              "    low, same, high = [], [], []"
            ]
          },
          {
            "name": "Mutant #68",
            "file": "listsorting/sorting.py",
            "line": 109,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(1, len(array) - 1)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    pivot = array[randint(0, len(array) - 1)]"
            ]
          },
          {
            "name": "Mutant #69",
            "file": "listsorting/sorting.py",
            "line": 109,
            "system-out": [
              "    pivot = array[randint(0, len(array) - 1)]"
            ]
          },
          {
            "name": "Mutant #70",
            "file": "listsorting/sorting.py",
            "line": 109,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -106,7 +106,7 @@\n     if len(array) < 2:\n         return array\n     low, same, high = [], [], []\n-    pivot = array[randint(0, len(array) - 1)]\n+    pivot = array[randint(0, len(array) - 2)]\n     for item in array:\n         if item < pivot:\n             low.append(item)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    pivot = array[randint(0, len(array) - 1)]"
            ]
          },
          {
            "name": "Mutant #71",
            "file": "listsorting/sorting.py",
            "line": 109,
            "system-out": [
              "    pivot = array[randint(0, len(array) - 1)]"
            ]
          },
          {
            "name": "Mutant #72",
            "file": "listsorting/sorting.py",
            "line": 111,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -108,7 +108,7 @@\n     low, same, high = [], [], []\n     pivot = array[randint(0, len(array) - 1)]\n     for item in array:\n-        if item < pivot:\n+        if item <= pivot:\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if item < pivot:"
            ]
          },
          {
            "name": "Mutant #73",
            "file": "listsorting/sorting.py",
            "line": 113,
            "system-out": [
              "        elif item == pivot:"
            ]
          },
          {
            "name": "Mutant #74",
            "file": "listsorting/sorting.py",
            "line": 115,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -112,7 +112,7 @@\n             low.append(item)\n         elif item == pivot:\n             same.append(item)\n-        elif item > pivot:\n+        elif item >= pivot:\n             high.append(item)\n \n     return quick_sort(low) + same + quick_sort(high)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        elif item > pivot:"
            ]
          },
          {
            "name": "Mutant #75",
            "file": "listsorting/sorting.py",
            "line": 118,
            "system-out": [
              "    return quick_sort(low) + same + quick_sort(high)"
            ]
          },
          {
            "name": "Mutant #76",
            "file": "listsorting/sorting.py",
            "line": 118,
            "system-out": [
              "    return quick_sort(low) + same + quick_sort(high)"
            ]
          },
          {
            "name": "Mutant #77",
            "file": "listsorting/sorting.py",
            "line": 121,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -118,7 +118,7 @@\n     return quick_sort(low) + same + quick_sort(high)\n \n \n-def insertion_sort_time(array: List[int], left: int = 0, right=None):\n+def insertion_sort_time(array: List[int], left: int = 1, right=None):\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n         right = len(array) - 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def insertion_sort_time(array: List[int], left: int = 0, right=None):"
            ]
          },
          {
            "name": "Mutant #78",
            "file": "listsorting/sorting.py",
            "line": 123,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -120,7 +120,7 @@\n \n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n-    if right is None:\n+    if right is not None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if right is None:"
            ]
          },
          {
            "name": "Mutant #79",
            "file": "listsorting/sorting.py",
            "line": 124,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) + 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        right = len(array) - 1"
            ]
          },
          {
            "name": "Mutant #80",
            "file": "listsorting/sorting.py",
            "line": 124,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n-        right = len(array) - 1\n+        right = len(array) - 2\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        right = len(array) - 1"
            ]
          },
          {
            "name": "Mutant #81",
            "file": "listsorting/sorting.py",
            "line": 124,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -121,7 +121,7 @@\n def insertion_sort_time(array: List[int], left: int = 0, right=None):\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n-        right = len(array) - 1\n+        right = None\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        right = len(array) - 1"
            ]
          },
          {
            "name": "Mutant #82",
            "file": "listsorting/sorting.py",
            "line": 125,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left - 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for i in range(left + 1, right + 1):"
            ]
          },
          {
            "name": "Mutant #83",
            "file": "listsorting/sorting.py",
            "line": 125,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 2, right + 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for i in range(left + 1, right + 1):"
            ]
          },
          {
            "name": "Mutant #84",
            "file": "listsorting/sorting.py",
            "line": 125,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right - 1):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for i in range(left + 1, right + 1):"
            ]
          },
          {
            "name": "Mutant #85",
            "file": "listsorting/sorting.py",
            "line": 125,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -122,7 +122,7 @@\n     \"\"\"Use an internal sorting algorithm for the timsort algorithm.\"\"\"\n     if right is None:\n         right = len(array) - 1\n-    for i in range(left + 1, right + 1):\n+    for i in range(left + 1, right + 2):\n         key_item = array[i]\n         j = i - 1\n         while j >= left and array[j] > key_item:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for i in range(left + 1, right + 1):"
            ]
          },
          {
            "name": "Mutant #86",
            "file": "listsorting/sorting.py",
            "line": 126,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -123,7 +123,7 @@\n     if right is None:\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n-        key_item = array[i]\n+        key_item = None\n         j = i - 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        key_item = array[i]"
            ]
          },
          {
            "name": "Mutant #87",
            "file": "listsorting/sorting.py",
            "line": 127,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i + 1\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        j = i - 1"
            ]
          },
          {
            "name": "Mutant #88",
            "file": "listsorting/sorting.py",
            "line": 127,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -124,7 +124,7 @@\n         right = len(array) - 1\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n-        j = i - 1\n+        j = i - 2\n         while j >= left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        j = i - 1"
            ]
          },
          {
            "name": "Mutant #89",
            "file": "listsorting/sorting.py",
            "line": 127,
            "system-out": [
              "        j = i - 1"
            ]
          },
          {
            "name": "Mutant #90",
            "file": "listsorting/sorting.py",
            "line": 128,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j > left and array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        while j >= left and array[j] > key_item:"
            ]
          },
          {
            "name": "Mutant #91",
            "file": "listsorting/sorting.py",
            "line": 128,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left and array[j] >= key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        while j >= left and array[j] > key_item:"
            ]
          },
          {
            "name": "Mutant #92",
            "file": "listsorting/sorting.py",
            "line": 128,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -125,7 +125,7 @@\n     for i in range(left + 1, right + 1):\n         key_item = array[i]\n         j = i - 1\n-        while j >= left and array[j] > key_item:\n+        while j >= left or array[j] > key_item:\n             array[j + 1] = array[j]\n             j -= 1\n         array[j + 1] = key_item\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        while j >= left and array[j] > key_item:"
            ]
          },
          {
            "name": "Mutant #93",
            "file": "listsorting/sorting.py",
            "line": 129,
            "system-out": [
              "            array[j + 1] = array[j]"
            ]
          },
          {
            "name": "Mutant #94",
            "file": "listsorting/sorting.py",
            "line": 129,
            "system-out": [
              "            array[j + 1] = array[j]"
            ]
          },
          {
            "name": "Mutant #95",
            "file": "listsorting/sorting.py",
            "line": 129,
            "system-out": [
              "            array[j + 1] = array[j]"
            ]
          },
          {
            "name": "Mutant #96",
            "file": "listsorting/sorting.py",
            "line": 130,
            "system-out": [
              "            j -= 1"
            ]
          },
          {
            "name": "Mutant #97",
            "file": "listsorting/sorting.py",
            "line": 130,
            "system-out": [
              "            j -= 1"
            ]
          },
          {
            "name": "Mutant #98",
            "file": "listsorting/sorting.py",
            "line": 130,
            "system-out": [
              "            j -= 1"
            ]
          },
          {
            "name": "Mutant #99",
            "file": "listsorting/sorting.py",
            "line": 131,
            "system-out": [
              "        array[j + 1] = key_item"
            ]
          },
          {
            "name": "Mutant #100",
            "file": "listsorting/sorting.py",
            "line": 131,
            "system-out": [
              "        array[j + 1] = key_item"
            ]
          },
          {
            "name": "Mutant #101",
            "file": "listsorting/sorting.py",
            "line": 131,
            "system-out": [
              "        array[j + 1] = key_item"
            ]
          },
          {
            "name": "Mutant #102",
            "file": "listsorting/sorting.py",
            "line": 137,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -134,7 +134,7 @@\n \n def tim_sort(array: List[int]) -> List[int]:\n     \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n-    min_run = 32\n+    min_run = 33\n     n = len(array)\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    min_run = 32"
            ]
          },
          {
            "name": "Mutant #103",
            "file": "listsorting/sorting.py",
            "line": 137,
            "system-out": [
              "    min_run = 32"
            ]
          },
          {
            "name": "Mutant #104",
            "file": "listsorting/sorting.py",
            "line": 138,
            "system-out": [
              "    n = len(array)"
            ]
          },
          {
            "name": "Mutant #105",
            "file": "listsorting/sorting.py",
            "line": 139,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -136,7 +136,7 @@\n     \"\"\"Sort the list called array with the tim sort algorithm using a special insertion sort.\"\"\"\n     min_run = 32\n     n = len(array)\n-    for i in range(0, n, min_run):\n+    for i in range(1, n, min_run):\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for i in range(0, n, min_run):"
            ]
          },
          {
            "name": "Mutant #106",
            "file": "listsorting/sorting.py",
            "line": 140,
            "system-out": [
              "        insertion_sort(array)"
            ]
          },
          {
            "name": "Mutant #107",
            "file": "listsorting/sorting.py",
            "line": 141,
            "system-out": [
              "    size = min_run"
            ]
          },
          {
            "name": "Mutant #108",
            "file": "listsorting/sorting.py",
            "line": 142,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -139,7 +139,7 @@\n     for i in range(0, n, min_run):\n         insertion_sort(array)\n     size = min_run\n-    while size < n:\n+    while size <= n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    while size < n:"
            ]
          },
          {
            "name": "Mutant #109",
            "file": "listsorting/sorting.py",
            "line": 143,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(1, n, size * 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        for start in range(0, n, size * 2):"
            ]
          },
          {
            "name": "Mutant #110",
            "file": "listsorting/sorting.py",
            "line": 143,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size / 2):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        for start in range(0, n, size * 2):"
            ]
          },
          {
            "name": "Mutant #111",
            "file": "listsorting/sorting.py",
            "line": 143,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -140,7 +140,7 @@\n         insertion_sort(array)\n     size = min_run\n     while size < n:\n-        for start in range(0, n, size * 2):\n+        for start in range(0, n, size * 3):\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        for start in range(0, n, size * 2):"
            ]
          },
          {
            "name": "Mutant #112",
            "file": "listsorting/sorting.py",
            "line": 144,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start - size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            midpoint = start + size - 1"
            ]
          },
          {
            "name": "Mutant #113",
            "file": "listsorting/sorting.py",
            "line": 144,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size + 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            midpoint = start + size - 1"
            ]
          },
          {
            "name": "Mutant #114",
            "file": "listsorting/sorting.py",
            "line": 144,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = start + size - 2\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            midpoint = start + size - 1"
            ]
          },
          {
            "name": "Mutant #115",
            "file": "listsorting/sorting.py",
            "line": 144,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -141,7 +141,7 @@\n     size = min_run\n     while size < n:\n         for start in range(0, n, size * 2):\n-            midpoint = start + size - 1\n+            midpoint = None\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            midpoint = start + size - 1"
            ]
          },
          {
            "name": "Mutant #116",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start - size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #117",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size / 2 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #118",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 3 - 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #119",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 + 1), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #120",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 2), (n - 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #121",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n + 1))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #122",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = min((start + size * 2 - 1), (n - 2))\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #123",
            "file": "listsorting/sorting.py",
            "line": 145,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -142,7 +142,7 @@\n     while size < n:\n         for start in range(0, n, size * 2):\n             midpoint = start + size - 1\n-            end = min((start + size * 2 - 1), (n - 1))\n+            end = None\n \n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            end = min((start + size * 2 - 1), (n - 1))"
            ]
          },
          {
            "name": "Mutant #124",
            "file": "listsorting/sorting.py",
            "line": 148,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint - 1], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]"
            ]
          },
          {
            "name": "Mutant #125",
            "file": "listsorting/sorting.py",
            "line": 148,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 2], right=array[midpoint + 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]"
            ]
          },
          {
            "name": "Mutant #126",
            "file": "listsorting/sorting.py",
            "line": 148,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint - 1 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]"
            ]
          },
          {
            "name": "Mutant #127",
            "file": "listsorting/sorting.py",
            "line": 148,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 2 : end + 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]"
            ]
          },
          {
            "name": "Mutant #128",
            "file": "listsorting/sorting.py",
            "line": 148,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end - 1]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]"
            ]
          },
          {
            "name": "Mutant #129",
            "file": "listsorting/sorting.py",
            "line": 148,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -145,7 +145,7 @@\n             end = min((start + size * 2 - 1), (n - 1))\n \n             merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n+                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 2]\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]"
            ]
          },
          {
            "name": "Mutant #130",
            "file": "listsorting/sorting.py",
            "line": 149,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -144,9 +144,7 @@\n             midpoint = start + size - 1\n             end = min((start + size * 2 - 1), (n - 1))\n \n-            merged_array = merge(\n-                left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n-            )\n+            merged_array = None\n             array[start : start + len(merged_array)] = merged_array\n \n         size *= 2\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            )"
            ]
          },
          {
            "name": "Mutant #131",
            "file": "listsorting/sorting.py",
            "line": 150,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start - len(merged_array)] = merged_array\n \n         size *= 2\n     return array\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            array[start : start + len(merged_array)] = merged_array"
            ]
          },
          {
            "name": "Mutant #132",
            "file": "listsorting/sorting.py",
            "line": 150,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -147,7 +147,7 @@\n             merged_array = merge(\n                 left=array[start : midpoint + 1], right=array[midpoint + 1 : end + 1]\n             )\n-            array[start : start + len(merged_array)] = merged_array\n+            array[start : start + len(merged_array)] = None\n \n         size *= 2\n     return array\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            array[start : start + len(merged_array)] = merged_array"
            ]
          },
          {
            "name": "Mutant #133",
            "file": "listsorting/sorting.py",
            "line": 152,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size = 2\n     return array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        size *= 2"
            ]
          },
          {
            "name": "Mutant #134",
            "file": "listsorting/sorting.py",
            "line": 152,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size /= 2\n     return array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        size *= 2"
            ]
          },
          {
            "name": "Mutant #135",
            "file": "listsorting/sorting.py",
            "line": 152,
            "failure": [
              {
                "inner": "--- listsorting/sorting.py\n+++ listsorting/sorting.py\n@@ -149,6 +149,6 @@\n             )\n             array[start : start + len(merged_array)] = merged_array\n \n-        size *= 2\n+        size *= 3\n     return array\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        size *= 2"
            ]
          },
          {
            "name": "Mutant #136",
            "file": "listsorting/experiment.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n     # round the provided floating point value with format function\n-    format_float = \"{:.5f}\".format(number)\n+    format_float = \"XX{:.5f}XX\".format(number)\n     return format_float\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    format_float = \"{:.5f}\".format(number)"
            ]
          },
          {
            "name": "Mutant #137",
            "file": "listsorting/experiment.py",
            "line": 13,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -10,7 +10,7 @@\n def format_decimal(number: float):\n     \"\"\"Round a number up and then encode with five decimal places.\"\"\"\n     # round the provided floating point value with format function\n-    format_float = \"{:.5f}\".format(number)\n+    format_float = None\n     return format_float\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    format_float = \"{:.5f}\".format(number)"
            ]
          },
          {
            "name": "Mutant #138",
            "file": "listsorting/experiment.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     \"\"\"Generate a random list defined by the size.\"\"\"\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = random.randint(1, maximum)\n     # return the randomly generated number\n     return random_value\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    random_value = random.randint(0, maximum)"
            ]
          },
          {
            "name": "Mutant #139",
            "file": "listsorting/experiment.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -17,7 +17,7 @@\n def generate_random_number(maximum: int) -> int:\n     \"\"\"Generate a random list defined by the size.\"\"\"\n     # generate a random value that is bound by 0 and a maximum\n-    random_value = random.randint(0, maximum)\n+    random_value = None\n     # return the randomly generated number\n     return random_value\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    random_value = random.randint(0, maximum)"
            ]
          },
          {
            "name": "Mutant #140",
            "file": "listsorting/experiment.py",
            "line": 32,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     \"\"\"Generate a random list defined by the size.\"\"\"\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(2, maximum, 1) for _ in range(size)]\n     return random_list\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]"
            ]
          },
          {
            "name": "Mutant #141",
            "file": "listsorting/experiment.py",
            "line": 32,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     \"\"\"Generate a random list defined by the size.\"\"\"\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = [random.randrange(1, maximum, 2) for _ in range(size)]\n     return random_list\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]"
            ]
          },
          {
            "name": "Mutant #142",
            "file": "listsorting/experiment.py",
            "line": 32,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -29,7 +29,7 @@\n     \"\"\"Generate a random list defined by the size.\"\"\"\n     # generate a list of random values for a specific size\n     # and with a number up to a specific maximum\n-    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]\n+    random_list = None\n     return random_list\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    random_list = [random.randrange(1, maximum, 1) for _ in range(size)]"
            ]
          },
          {
            "name": "Mutant #143",
            "file": "listsorting/experiment.py",
            "line": 41,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it's not the built-in `sorted()`.\n-    setup_code = f\"from listsorting.sorting import {algorithm}\"\n+    setup_code = f\"XXfrom listsorting.sorting import {algorithm}XX\"\n     stmt = f\"{algorithm}({array})\"\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    setup_code = f\"from listsorting.sorting import {algorithm}\""
            ]
          },
          {
            "name": "Mutant #144",
            "file": "listsorting/experiment.py",
            "line": 41,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -38,7 +38,7 @@\n     # set up the context and prepare the call to the specified\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it's not the built-in `sorted()`.\n-    setup_code = f\"from listsorting.sorting import {algorithm}\"\n+    setup_code = None\n     stmt = f\"{algorithm}({array})\"\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    setup_code = f\"from listsorting.sorting import {algorithm}\""
            ]
          },
          {
            "name": "Mutant #145",
            "file": "listsorting/experiment.py",
            "line": 42,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it's not the built-in `sorted()`.\n     setup_code = f\"from listsorting.sorting import {algorithm}\"\n-    stmt = f\"{algorithm}({array})\"\n+    stmt = f\"XX{algorithm}({array})XX\"\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    stmt = f\"{algorithm}({array})\""
            ]
          },
          {
            "name": "Mutant #146",
            "file": "listsorting/experiment.py",
            "line": 42,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -39,7 +39,7 @@\n     # algorithm using the supplied array. Only import the\n     # algorithm function if it's not the built-in `sorted()`.\n     setup_code = f\"from listsorting.sorting import {algorithm}\"\n-    stmt = f\"{algorithm}({array})\"\n+    stmt = None\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n     times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    stmt = f\"{algorithm}({array})\""
            ]
          },
          {
            "name": "Mutant #147",
            "file": "listsorting/experiment.py",
            "line": 45,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f\"{algorithm}({array})\"\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=4, number=10)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)"
            ]
          },
          {
            "name": "Mutant #148",
            "file": "listsorting/experiment.py",
            "line": 45,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f\"{algorithm}({array})\"\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=11)\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)"
            ]
          },
          {
            "name": "Mutant #149",
            "file": "listsorting/experiment.py",
            "line": 45,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -42,7 +42,7 @@\n     stmt = f\"{algorithm}({array})\"\n     # execute the code ten different times and return the time\n     # in seconds that each execution took\n-    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)\n+    times = None\n     # finally, return the amount of execution time summarized as:\n     # (minimum execution time, maximum execution time, average execution time)\n     return (\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    times = repeat(setup=setup_code, stmt=stmt, repeat=3, number=10)"
            ]
          },
          {
            "name": "Mutant #150",
            "file": "listsorting/experiment.py",
            "line": 51,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -48,7 +48,7 @@\n     return (\n         format_decimal(min(times)),\n         format_decimal(max(times)),\n-        format_decimal((sum(times) / len(times))),\n+        format_decimal((sum(times) * len(times))),\n     )\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        format_decimal((sum(times) / len(times))),"
            ]
          },
          {
            "name": "Mutant #151",
            "file": "listsorting/experiment.py",
            "line": 62,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -59,7 +59,7 @@\n     number_doubles: int,\n ) -> List[List[Any]]:\n     \"\"\"Run an entire sorting algorithm experiment campaign.\"\"\"\n-    data_table = []\n+    data_table = None\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    data_table = []"
            ]
          },
          {
            "name": "Mutant #152",
            "file": "listsorting/experiment.py",
            "line": 64,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     \"\"\"Run an entire sorting algorithm experiment campaign.\"\"\"\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles >= 0:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    while number_doubles > 0:"
            ]
          },
          {
            "name": "Mutant #153",
            "file": "listsorting/experiment.py",
            "line": 64,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -61,7 +61,7 @@\n     \"\"\"Run an entire sorting algorithm experiment campaign.\"\"\"\n     data_table = []\n     # run a total of number_doubles number of doubles for the input size\n-    while number_doubles > 0:\n+    while number_doubles > 1:\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    while number_doubles > 0:"
            ]
          },
          {
            "name": "Mutant #154",
            "file": "listsorting/experiment.py",
            "line": 66,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -63,7 +63,7 @@\n     # run a total of number_doubles number of doubles for the input size\n     while number_doubles > 0:\n         # generate a random list based on the current size of the data\n-        random_list = generate_random_container(starting_size, maximum_value)\n+        random_list = None\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        random_list = generate_random_container(starting_size, maximum_value)"
            ]
          },
          {
            "name": "Mutant #155",
            "file": "listsorting/experiment.py",
            "line": 68,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -65,7 +65,7 @@\n         # generate a random list based on the current size of the data\n         random_list = generate_random_container(starting_size, maximum_value)\n         # run the sorting algorithm and collect the timing data from timeit\n-        performance_data = run_sorting_algorithm(algorithm, random_list)\n+        performance_data = None\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        performance_data = run_sorting_algorithm(algorithm, random_list)"
            ]
          },
          {
            "name": "Mutant #156",
            "file": "listsorting/experiment.py",
            "line": 72,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -69,7 +69,7 @@\n         # create the row of data from this specific execution of the algorithm\n         data_table_row = [\n             starting_size,\n-            performance_data[0],\n+            performance_data[1],\n             performance_data[1],\n             performance_data[2],\n         ]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            performance_data[0],"
            ]
          },
          {
            "name": "Mutant #157",
            "file": "listsorting/experiment.py",
            "line": 73,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -70,7 +70,7 @@\n         data_table_row = [\n             starting_size,\n             performance_data[0],\n-            performance_data[1],\n+            performance_data[2],\n             performance_data[2],\n         ]\n         # add this row to the data table that will contain all of the results\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            performance_data[1],"
            ]
          },
          {
            "name": "Mutant #158",
            "file": "listsorting/experiment.py",
            "line": 74,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -71,7 +71,7 @@\n             starting_size,\n             performance_data[0],\n             performance_data[1],\n-            performance_data[2],\n+            performance_data[3],\n         ]\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            performance_data[2],"
            ]
          },
          {
            "name": "Mutant #159",
            "file": "listsorting/experiment.py",
            "line": 75,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -67,12 +67,7 @@\n         # run the sorting algorithm and collect the timing data from timeit\n         performance_data = run_sorting_algorithm(algorithm, random_list)\n         # create the row of data from this specific execution of the algorithm\n-        data_table_row = [\n-            starting_size,\n-            performance_data[0],\n-            performance_data[1],\n-            performance_data[2],\n-        ]\n+        data_table_row = None\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        ]"
            ]
          },
          {
            "name": "Mutant #160",
            "file": "listsorting/experiment.py",
            "line": 79,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles + 1\n         starting_size = starting_size * 2\n     return data_table\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        number_doubles = number_doubles - 1"
            ]
          },
          {
            "name": "Mutant #161",
            "file": "listsorting/experiment.py",
            "line": 79,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = number_doubles - 2\n         starting_size = starting_size * 2\n     return data_table\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        number_doubles = number_doubles - 1"
            ]
          },
          {
            "name": "Mutant #162",
            "file": "listsorting/experiment.py",
            "line": 79,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -76,7 +76,7 @@\n         # add this row to the data table that will contain all of the results\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n-        number_doubles = number_doubles - 1\n+        number_doubles = None\n         starting_size = starting_size * 2\n     return data_table\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        number_doubles = number_doubles - 1"
            ]
          },
          {
            "name": "Mutant #163",
            "file": "listsorting/experiment.py",
            "line": 80,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size / 2\n     return data_table\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        starting_size = starting_size * 2"
            ]
          },
          {
            "name": "Mutant #164",
            "file": "listsorting/experiment.py",
            "line": 80,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = starting_size * 3\n     return data_table\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        starting_size = starting_size * 2"
            ]
          },
          {
            "name": "Mutant #165",
            "file": "listsorting/experiment.py",
            "line": 80,
            "failure": [
              {
                "inner": "--- listsorting/experiment.py\n+++ listsorting/experiment.py\n@@ -77,6 +77,6 @@\n         data_table.append(data_table_row)\n         # move to the next round of the doubling experiment\n         number_doubles = number_doubles - 1\n-        starting_size = starting_size * 2\n+        starting_size = None\n     return data_table\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        starting_size = starting_size * 2"
            ]
          },
          {
            "name": "Mutant #166",
            "file": "listsorting/main.py",
            "line": 18,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -15,7 +15,7 @@\n from listsorting import experiment\n \n # create a Typer object\n-cli = typer.Typer()\n+cli = None\n \n # create a Console objects\n console = Console()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "cli = typer.Typer()"
            ]
          },
          {
            "name": "Mutant #167",
            "file": "listsorting/main.py",
            "line": 21,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -18,7 +18,7 @@\n cli = typer.Typer()\n \n # create a Console objects\n-console = Console()\n+console = None\n \n # define name format\n UNDERSCORE = \"_\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "console = Console()"
            ]
          },
          {
            "name": "Mutant #168",
            "file": "listsorting/main.py",
            "line": 24,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -21,7 +21,7 @@\n console = Console()\n \n # define name format\n-UNDERSCORE = \"_\"\n+UNDERSCORE = \"XX_XX\"\n SORT = \"sort\"\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "UNDERSCORE = \"_\""
            ]
          },
          {
            "name": "Mutant #169",
            "file": "listsorting/main.py",
            "line": 24,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -21,7 +21,7 @@\n console = Console()\n \n # define name format\n-UNDERSCORE = \"_\"\n+UNDERSCORE = None\n SORT = \"sort\"\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "UNDERSCORE = \"_\""
            ]
          },
          {
            "name": "Mutant #170",
            "file": "listsorting/main.py",
            "line": 25,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -22,7 +22,7 @@\n \n # define name format\n UNDERSCORE = \"_\"\n-SORT = \"sort\"\n+SORT = \"XXsortXX\"\n \n \n class ListSortingApproach(str, Enum):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "SORT = \"sort\""
            ]
          },
          {
            "name": "Mutant #171",
            "file": "listsorting/main.py",
            "line": 25,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -22,7 +22,7 @@\n \n # define name format\n UNDERSCORE = \"_\"\n-SORT = \"sort\"\n+SORT = None\n \n \n class ListSortingApproach(str, Enum):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "SORT = \"sort\""
            ]
          },
          {
            "name": "Mutant #172",
            "file": "listsorting/main.py",
            "line": 33,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -30,7 +30,7 @@\n \n     # define name for each approach\n \n-    BUBBLESORT = \"bubble\"\n+    BUBBLESORT = \"XXbubbleXX\"\n     INSERTIONSORT = \"insertion\"\n     MERGESORT = \"merge\"\n     QUICKSORT = \"quick\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    BUBBLESORT = \"bubble\""
            ]
          },
          {
            "name": "Mutant #173",
            "file": "listsorting/main.py",
            "line": 33,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -30,7 +30,7 @@\n \n     # define name for each approach\n \n-    BUBBLESORT = \"bubble\"\n+    BUBBLESORT = None\n     INSERTIONSORT = \"insertion\"\n     MERGESORT = \"merge\"\n     QUICKSORT = \"quick\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    BUBBLESORT = \"bubble\""
            ]
          },
          {
            "name": "Mutant #174",
            "file": "listsorting/main.py",
            "line": 34,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -31,7 +31,7 @@\n     # define name for each approach\n \n     BUBBLESORT = \"bubble\"\n-    INSERTIONSORT = \"insertion\"\n+    INSERTIONSORT = \"XXinsertionXX\"\n     MERGESORT = \"merge\"\n     QUICKSORT = \"quick\"\n     TIMSORT = \"tim\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    INSERTIONSORT = \"insertion\""
            ]
          },
          {
            "name": "Mutant #175",
            "file": "listsorting/main.py",
            "line": 34,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -31,7 +31,7 @@\n     # define name for each approach\n \n     BUBBLESORT = \"bubble\"\n-    INSERTIONSORT = \"insertion\"\n+    INSERTIONSORT = None\n     MERGESORT = \"merge\"\n     QUICKSORT = \"quick\"\n     TIMSORT = \"tim\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    INSERTIONSORT = \"insertion\""
            ]
          },
          {
            "name": "Mutant #176",
            "file": "listsorting/main.py",
            "line": 35,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -32,7 +32,7 @@\n \n     BUBBLESORT = \"bubble\"\n     INSERTIONSORT = \"insertion\"\n-    MERGESORT = \"merge\"\n+    MERGESORT = \"XXmergeXX\"\n     QUICKSORT = \"quick\"\n     TIMSORT = \"tim\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    MERGESORT = \"merge\""
            ]
          },
          {
            "name": "Mutant #177",
            "file": "listsorting/main.py",
            "line": 35,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -32,7 +32,7 @@\n \n     BUBBLESORT = \"bubble\"\n     INSERTIONSORT = \"insertion\"\n-    MERGESORT = \"merge\"\n+    MERGESORT = None\n     QUICKSORT = \"quick\"\n     TIMSORT = \"tim\"\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    MERGESORT = \"merge\""
            ]
          },
          {
            "name": "Mutant #178",
            "file": "listsorting/main.py",
            "line": 36,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -33,7 +33,7 @@\n     BUBBLESORT = \"bubble\"\n     INSERTIONSORT = \"insertion\"\n     MERGESORT = \"merge\"\n-    QUICKSORT = \"quick\"\n+    QUICKSORT = \"XXquickXX\"\n     TIMSORT = \"tim\"\n \n     def __str__(self):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    QUICKSORT = \"quick\""
            ]
          },
          {
            "name": "Mutant #179",
            "file": "listsorting/main.py",
            "line": 36,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -33,7 +33,7 @@\n     BUBBLESORT = \"bubble\"\n     INSERTIONSORT = \"insertion\"\n     MERGESORT = \"merge\"\n-    QUICKSORT = \"quick\"\n+    QUICKSORT = None\n     TIMSORT = \"tim\"\n \n     def __str__(self):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    QUICKSORT = \"quick\""
            ]
          },
          {
            "name": "Mutant #180",
            "file": "listsorting/main.py",
            "line": 37,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -34,7 +34,7 @@\n     INSERTIONSORT = \"insertion\"\n     MERGESORT = \"merge\"\n     QUICKSORT = \"quick\"\n-    TIMSORT = \"tim\"\n+    TIMSORT = \"XXtimXX\"\n \n     def __str__(self):\n         \"\"\"Define a default string representation.\"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    TIMSORT = \"tim\""
            ]
          },
          {
            "name": "Mutant #181",
            "file": "listsorting/main.py",
            "line": 37,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -34,7 +34,7 @@\n     INSERTIONSORT = \"insertion\"\n     MERGESORT = \"merge\"\n     QUICKSORT = \"quick\"\n-    TIMSORT = \"tim\"\n+    TIMSORT = None\n \n     def __str__(self):\n         \"\"\"Define a default string representation.\"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    TIMSORT = \"tim\""
            ]
          },
          {
            "name": "Mutant #182",
            "file": "listsorting/main.py",
            "line": 44,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -40,8 +40,6 @@\n         \"\"\"Define a default string representation.\"\"\"\n         return self.value\n \n-\n-@cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@cli.command()"
            ]
          },
          {
            "name": "Mutant #183",
            "file": "listsorting/main.py",
            "line": 46,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -43,7 +43,7 @@\n \n @cli.command()\n def listsorting(\n-    starting_size: int = typer.Option(1000000),\n+    starting_size: int = typer.Option(1000001),\n     maximum_value: int = typer.Option(10000),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    starting_size: int = typer.Option(1000000),"
            ]
          },
          {
            "name": "Mutant #184",
            "file": "listsorting/main.py",
            "line": 47,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -44,7 +44,7 @@\n @cli.command()\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n-    maximum_value: int = typer.Option(10000),\n+    maximum_value: int = typer.Option(10001),\n     number_doubles: int = typer.Option(10),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    maximum_value: int = typer.Option(10000),"
            ]
          },
          {
            "name": "Mutant #185",
            "file": "listsorting/main.py",
            "line": 48,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -45,7 +45,7 @@\n def listsorting(\n     starting_size: int = typer.Option(1000000),\n     maximum_value: int = typer.Option(10000),\n-    number_doubles: int = typer.Option(10),\n+    number_doubles: int = typer.Option(11),\n     approach: ListSortingApproach = ListSortingApproach.BUBBLESORT,\n ) -> None:\n     \"\"\"Conduct a doubling experiment to measure the performance of list sorting for various algorithms.\"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    number_doubles: int = typer.Option(10),"
            ]
          },
          {
            "name": "Mutant #186",
            "file": "listsorting/main.py",
            "line": 54,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -51,7 +51,7 @@\n     \"\"\"Conduct a doubling experiment to measure the performance of list sorting for various algorithms.\"\"\"\n     # display diagnostics messages of the experiment\n     console.print(\n-        \"\u2728 Conducting an experiment to measure the performance of list sorting!\"\n+        \"XX\u2728 Conducting an experiment to measure the performance of list sorting!XX\"\n     )\n     console.print()\n     console.print(f\"The chosen sorting algorithm: {approach}\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        \"\u2728 Conducting an experiment to measure the performance of list sorting!\""
            ]
          },
          {
            "name": "Mutant #187",
            "file": "listsorting/main.py",
            "line": 57,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -54,7 +54,7 @@\n         \"\u2728 Conducting an experiment to measure the performance of list sorting!\"\n     )\n     console.print()\n-    console.print(f\"The chosen sorting algorithm: {approach}\")\n+    console.print(f\"XXThe chosen sorting algorithm: {approach}XX\")\n     console.print(f\"Starting size of the data container {starting_size}\")\n     console.print(f\"Number of doubles to execute: {number_doubles}\")\n     console.print()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    console.print(f\"The chosen sorting algorithm: {approach}\")"
            ]
          },
          {
            "name": "Mutant #188",
            "file": "listsorting/main.py",
            "line": 58,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -55,7 +55,7 @@\n     )\n     console.print()\n     console.print(f\"The chosen sorting algorithm: {approach}\")\n-    console.print(f\"Starting size of the data container {starting_size}\")\n+    console.print(f\"XXStarting size of the data container {starting_size}XX\")\n     console.print(f\"Number of doubles to execute: {number_doubles}\")\n     console.print()\n     console.print(\"\u2728 Here are the results from running the experiment!\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    console.print(f\"Starting size of the data container {starting_size}\")"
            ]
          },
          {
            "name": "Mutant #189",
            "file": "listsorting/main.py",
            "line": 59,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -56,7 +56,7 @@\n     console.print()\n     console.print(f\"The chosen sorting algorithm: {approach}\")\n     console.print(f\"Starting size of the data container {starting_size}\")\n-    console.print(f\"Number of doubles to execute: {number_doubles}\")\n+    console.print(f\"XXNumber of doubles to execute: {number_doubles}XX\")\n     console.print()\n     console.print(\"\u2728 Here are the results from running the experiment!\")\n     console.print()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    console.print(f\"Number of doubles to execute: {number_doubles}\")"
            ]
          },
          {
            "name": "Mutant #190",
            "file": "listsorting/main.py",
            "line": 61,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -58,7 +58,7 @@\n     console.print(f\"Starting size of the data container {starting_size}\")\n     console.print(f\"Number of doubles to execute: {number_doubles}\")\n     console.print()\n-    console.print(\"\u2728 Here are the results from running the experiment!\")\n+    console.print(\"XX\u2728 Here are the results from running the experiment!XX\")\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    console.print(\"\u2728 Here are the results from running the experiment!\")"
            ]
          },
          {
            "name": "Mutant #191",
            "file": "listsorting/main.py",
            "line": 64,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(\"\u2728 Here are the results from running the experiment!\")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach - UNDERSCORE + SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    algorithm = approach + UNDERSCORE + SORT"
            ]
          },
          {
            "name": "Mutant #192",
            "file": "listsorting/main.py",
            "line": 64,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(\"\u2728 Here are the results from running the experiment!\")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = approach + UNDERSCORE - SORT\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    algorithm = approach + UNDERSCORE + SORT"
            ]
          },
          {
            "name": "Mutant #193",
            "file": "listsorting/main.py",
            "line": 64,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -61,7 +61,7 @@\n     console.print(\"\u2728 Here are the results from running the experiment!\")\n     console.print()\n     # define the name approach\n-    algorithm = approach + UNDERSCORE + SORT\n+    algorithm = None\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    algorithm = approach + UNDERSCORE + SORT"
            ]
          },
          {
            "name": "Mutant #194",
            "file": "listsorting/main.py",
            "line": 67,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -62,9 +62,7 @@\n     console.print()\n     # define the name approach\n     algorithm = approach + UNDERSCORE + SORT\n-    result = experiment.run_sorting_algorithm_experiment_campaign(\n-        algorithm, starting_size, maximum_value, number_doubles\n-    )\n+    result = None\n     data = [\n         [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n         result[0],\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    )"
            ]
          },
          {
            "name": "Mutant #195",
            "file": "listsorting/main.py",
            "line": 69,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n+        [\"XXInput SizeXX\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n         result[0],\n         result[1],\n         result[2],\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],"
            ]
          },
          {
            "name": "Mutant #196",
            "file": "listsorting/main.py",
            "line": 69,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n+        [\"Input Size\", \"XXMin time (s)XX\", \"Max time (s)\", \"Avg time (s)\"],\n         result[0],\n         result[1],\n         result[2],\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],"
            ]
          },
          {
            "name": "Mutant #197",
            "file": "listsorting/main.py",
            "line": 69,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n+        [\"Input Size\", \"Min time (s)\", \"XXMax time (s)XX\", \"Avg time (s)\"],\n         result[0],\n         result[1],\n         result[2],\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],"
            ]
          },
          {
            "name": "Mutant #198",
            "file": "listsorting/main.py",
            "line": 69,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -66,7 +66,7 @@\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n     data = [\n-        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n+        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"XXAvg time (s)XX\"],\n         result[0],\n         result[1],\n         result[2],\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],"
            ]
          },
          {
            "name": "Mutant #199",
            "file": "listsorting/main.py",
            "line": 70,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -67,7 +67,7 @@\n     )\n     data = [\n         [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n-        result[0],\n+        result[1],\n         result[1],\n         result[2],\n         result[3],\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        result[0],"
            ]
          },
          {
            "name": "Mutant #200",
            "file": "listsorting/main.py",
            "line": 71,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -68,7 +68,7 @@\n     data = [\n         [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n         result[0],\n-        result[1],\n+        result[2],\n         result[2],\n         result[3],\n         result[4],\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        result[1],"
            ]
          },
          {
            "name": "Mutant #201",
            "file": "listsorting/main.py",
            "line": 72,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -69,7 +69,7 @@\n         [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n         result[0],\n         result[1],\n-        result[2],\n+        result[3],\n         result[3],\n         result[4],\n     ]\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        result[2],"
            ]
          },
          {
            "name": "Mutant #202",
            "file": "listsorting/main.py",
            "line": 73,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -70,7 +70,7 @@\n         result[0],\n         result[1],\n         result[2],\n-        result[3],\n+        result[4],\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        result[3],"
            ]
          },
          {
            "name": "Mutant #203",
            "file": "listsorting/main.py",
            "line": 74,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -71,7 +71,7 @@\n         result[1],\n         result[2],\n         result[3],\n-        result[4],\n+        result[5],\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=\"firstrow\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        result[4],"
            ]
          },
          {
            "name": "Mutant #204",
            "file": "listsorting/main.py",
            "line": 75,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -65,14 +65,7 @@\n     result = experiment.run_sorting_algorithm_experiment_campaign(\n         algorithm, starting_size, maximum_value, number_doubles\n     )\n-    data = [\n-        [\"Input Size\", \"Min time (s)\", \"Max time (s)\", \"Avg time (s)\"],\n-        result[0],\n-        result[1],\n-        result[2],\n-        result[3],\n-        result[4],\n-    ]\n+    data = None\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=\"firstrow\")\n     print(table)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    ]"
            ]
          },
          {
            "name": "Mutant #205",
            "file": "listsorting/main.py",
            "line": 77,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=\"firstrow\")\n+    table = tabulate(data, headers=\"XXfirstrowXX\")\n     print(table)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    table = tabulate(data, headers=\"firstrow\")"
            ]
          },
          {
            "name": "Mutant #206",
            "file": "listsorting/main.py",
            "line": 77,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -74,6 +74,6 @@\n         result[4],\n     ]\n     # call tabulate function to construct a table based of data\n-    table = tabulate(data, headers=\"firstrow\")\n+    table = None\n     print(table)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    table = tabulate(data, headers=\"firstrow\")"
            ]
          },
          {
            "name": "Mutant #207",
            "file": "listsorting/main.py",
            "line": 78,
            "failure": [
              {
                "inner": "--- listsorting/main.py\n+++ listsorting/main.py\n@@ -75,5 +75,5 @@\n     ]\n     # call tabulate function to construct a table based of data\n     table = tabulate(data, headers=\"firstrow\")\n-    print(table)\n+    print(None)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(table)"
            ]
          }
        ]
      }
    ]
  }
}