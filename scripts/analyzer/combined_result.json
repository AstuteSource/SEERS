{
  "chasten_result": "{\n  \"configuration\": {\n    \"chastenversion\": \"0.2.0\",\n    \"debuglevel\": \"ERROR\",\n    \"debugdestination\": \"CONSOLE\",\n    \"projectname\": \"lazytracker\",\n    \"configdirectory\": \"/home/caleb/.config/chasten\",\n    \"searchpath\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker\",\n    \"fileuuid\": \"c95dc5a93871470ab1d14c91d20f0d5c\",\n    \"datetime\": \"2024-02-21 20:52:39.861336\",\n    \"checkinclude\": {\n      \"attribute\": \"\",\n      \"value\": \"\",\n      \"confidence\": 0\n    },\n    \"checkexclude\": {\n      \"attribute\": \"\",\n      \"value\": \"\",\n      \"confidence\": 0\n    }\n  },\n  \"sources\": [\n    {\n      \"filename\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py\",\n      \"check\": {\n        \"id\": \"C001\",\n        \"name\": \"class-definition\",\n        \"description\": \"\",\n        \"min\": 1,\n        \"max\": 10,\n        \"pattern\": \".//ClassDef\",\n        \"passed\": true,\n        \"matches\": [\n          {\n            \"lineno\": 8,\n            \"coloffset\": 0,\n            \"linematch\": \"class LazyTracker:\",\n            \"linematch_context\": \"import dill\\nfrom pathlib import Path\\n\\n\\nclass LazyTracker:\\n    def __init__(self):\\n        \\\"\\\"\\\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\\\"\\\"\\\"\\n        self._hasher = hashlib.md5()\\n\\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\"\n          }\n        ]\n      }\n    },\n    {\n      \"filename\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py\",\n      \"check\": {\n        \"id\": \"F001\",\n        \"name\": \"all-function-definition\",\n        \"description\": \"\",\n        \"min\": 1,\n        \"max\": 10,\n        \"pattern\": \".//FunctionDef\",\n        \"passed\": true,\n        \"matches\": [\n          {\n            \"lineno\": 9,\n            \"coloffset\": 4,\n            \"linematch\": \"def __init__(self):\",\n            \"linematch_context\": \"from pathlib import Path\\n\\n\\nclass LazyTracker:\\n    def __init__(self):\\n        \\\"\\\"\\\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\\\"\\\"\\\"\\n        self._hasher = hashlib.md5()\\n\\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\\n        \\\"\\\"\\\"Include hash of all files inside directory (including files in subdirectories)\"\n          },\n          {\n            \"lineno\": 13,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_directories(self, directories: List[str], chunk_num_blocks=128):\",\n            \"linematch_context\": \"    def __init__(self):\\n        \\\"\\\"\\\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\\\"\\\"\\\"\\n        self._hasher = hashlib.md5()\\n\\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\\n        \\\"\\\"\\\"Include hash of all files inside directory (including files in subdirectories)\\n\\n        Args:\\n            directories (List[str]): List of directories to take files from\\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\"\n          },\n          {\n            \"lineno\": 29,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_files(self, filepaths: List[str], chunk_num_blocks=128):\",\n            \"linematch_context\": \"        files_to_check = sorted(files_to_check)\\n\\n        self.add_files(files_to_check, chunk_num_blocks)\\n\\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\\n        \\\"\\\"\\\"Include hash of files\\n\\n        Args:\\n            filepaths (List[str]): List of paths to files\\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\"\n          },\n          {\n            \"lineno\": 44,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_hparams(self, hparams: dict):\",\n            \"linematch_context\": \"                        self._hasher.update(chunk)\\n            else:\\n                self._hasher.update(dill.dumps(None))\\n\\n    def add_hparams(self, hparams: dict):\\n        \\\"\\\"\\\"Add hash of python dictionary. Utility function for storing pickable\\n\\n        Args:\\n            hparams (dict): A dictionary to be included\\n        \\\"\\\"\\\"\"\n          },\n          {\n            \"lineno\": 52,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_picklables(self, objects: List[Any], recursive: bool=False):\",\n            \"linematch_context\": \"            hparams (dict): A dictionary to be included\\n        \\\"\\\"\\\"\\n        self.add_picklables([hparams])\\n\\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\\n        \\\"\\\"\\\"Include hash of any picklable python objects (pickable by dill)\\n\\n        Args:\\n            objects (List[Any]): List of python objects to hash\\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if \"\n          },\n          {\n            \"lineno\": 63,\n            \"coloffset\": 4,\n            \"linematch\": \"def hash(self) -> str:\",\n            \"linematch_context\": \"        \\\"\\\"\\\"\\n        for obj in objects:\\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\\n\\n    def hash(self) -> str:\\n        \\\"\\\"\\\"Compute hash\\n\\n        Returns:\\n            str: Computed checksum of all things tracked\\n        \\\"\\\"\\\"\"\n          }\n        ]\n      }\n    },\n    {\n      \"filename\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py\",\n      \"check\": {\n        \"id\": \"F001\",\n        \"name\": \"all-function-definition\",\n        \"description\": \"\",\n        \"min\": 1,\n        \"max\": 10,\n        \"pattern\": \".//FunctionDef\",\n        \"passed\": true,\n        \"matches\": [\n          {\n            \"lineno\": 14,\n            \"coloffset\": 0,\n            \"linematch\": \"def cached(\",\n            \"linematch_context\": \"shelve.Pickler = Pickler\\nshelve.Unpickler = Unpickler\\n\\n\\ndef cached(\\n    cache_dir: str = \\\".lazytracker\\\",\\n    input_files: Optional[List[str]] = None,\\n    input_dirs: Optional[List[str]] = None,\\n    output_dirs: Optional[List[str]] = None,\\n    output_files: Optional[List[str]] = None,\"\n          },\n          {\n            \"lineno\": 31,\n            \"coloffset\": 4,\n            \"linematch\": \"def inner_func(function: Callable):\",\n            \"linematch_context\": \"        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\\n    \\\"\\\"\\\"\\n\\n    def inner_func(function: Callable):\\n        @wraps(function)\\n        def wrapper(*args, **kwargs):\\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\\n\\n            os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\"\n          },\n          {\n            \"lineno\": 33,\n            \"coloffset\": 8,\n            \"linematch\": \"def wrapper(*args, **kwargs):\",\n            \"linematch_context\": \"    \\\"\\\"\\\"\\n\\n    def inner_func(function: Callable):\\n        @wraps(function)\\n        def wrapper(*args, **kwargs):\\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\\n\\n            os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\\n            with shelve.open(f\\\"{cache_dir}/tracked_functions\\\", \\\"c\\\") as db:\\n                input_tracker = LazyTracker()\"\n          }\n        ]\n      }\n    },\n    {\n      \"filename\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py\",\n      \"check\": {\n        \"id\": \"F002\",\n        \"name\": \"non-test-function-definition\",\n        \"description\": \"\",\n        \"min\": 1,\n        \"max\": 10,\n        \"pattern\": \".//FunctionDef[not(contains(@name, \\\"test_\\\"))]\",\n        \"passed\": true,\n        \"matches\": [\n          {\n            \"lineno\": 9,\n            \"coloffset\": 4,\n            \"linematch\": \"def __init__(self):\",\n            \"linematch_context\": \"from pathlib import Path\\n\\n\\nclass LazyTracker:\\n    def __init__(self):\\n        \\\"\\\"\\\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\\\"\\\"\\\"\\n        self._hasher = hashlib.md5()\\n\\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\\n        \\\"\\\"\\\"Include hash of all files inside directory (including files in subdirectories)\"\n          },\n          {\n            \"lineno\": 13,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_directories(self, directories: List[str], chunk_num_blocks=128):\",\n            \"linematch_context\": \"    def __init__(self):\\n        \\\"\\\"\\\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\\\"\\\"\\\"\\n        self._hasher = hashlib.md5()\\n\\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\\n        \\\"\\\"\\\"Include hash of all files inside directory (including files in subdirectories)\\n\\n        Args:\\n            directories (List[str]): List of directories to take files from\\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\"\n          },\n          {\n            \"lineno\": 29,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_files(self, filepaths: List[str], chunk_num_blocks=128):\",\n            \"linematch_context\": \"        files_to_check = sorted(files_to_check)\\n\\n        self.add_files(files_to_check, chunk_num_blocks)\\n\\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\\n        \\\"\\\"\\\"Include hash of files\\n\\n        Args:\\n            filepaths (List[str]): List of paths to files\\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\"\n          },\n          {\n            \"lineno\": 44,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_hparams(self, hparams: dict):\",\n            \"linematch_context\": \"                        self._hasher.update(chunk)\\n            else:\\n                self._hasher.update(dill.dumps(None))\\n\\n    def add_hparams(self, hparams: dict):\\n        \\\"\\\"\\\"Add hash of python dictionary. Utility function for storing pickable\\n\\n        Args:\\n            hparams (dict): A dictionary to be included\\n        \\\"\\\"\\\"\"\n          },\n          {\n            \"lineno\": 52,\n            \"coloffset\": 4,\n            \"linematch\": \"def add_picklables(self, objects: List[Any], recursive: bool=False):\",\n            \"linematch_context\": \"            hparams (dict): A dictionary to be included\\n        \\\"\\\"\\\"\\n        self.add_picklables([hparams])\\n\\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\\n        \\\"\\\"\\\"Include hash of any picklable python objects (pickable by dill)\\n\\n        Args:\\n            objects (List[Any]): List of python objects to hash\\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if \"\n          },\n          {\n            \"lineno\": 63,\n            \"coloffset\": 4,\n            \"linematch\": \"def hash(self) -> str:\",\n            \"linematch_context\": \"        \\\"\\\"\\\"\\n        for obj in objects:\\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\\n\\n    def hash(self) -> str:\\n        \\\"\\\"\\\"Compute hash\\n\\n        Returns:\\n            str: Computed checksum of all things tracked\\n        \\\"\\\"\\\"\"\n          }\n        ]\n      }\n    },\n    {\n      \"filename\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py\",\n      \"check\": {\n        \"id\": \"F002\",\n        \"name\": \"non-test-function-definition\",\n        \"description\": \"\",\n        \"min\": 1,\n        \"max\": 10,\n        \"pattern\": \".//FunctionDef[not(contains(@name, \\\"test_\\\"))]\",\n        \"passed\": true,\n        \"matches\": [\n          {\n            \"lineno\": 14,\n            \"coloffset\": 0,\n            \"linematch\": \"def cached(\",\n            \"linematch_context\": \"shelve.Pickler = Pickler\\nshelve.Unpickler = Unpickler\\n\\n\\ndef cached(\\n    cache_dir: str = \\\".lazytracker\\\",\\n    input_files: Optional[List[str]] = None,\\n    input_dirs: Optional[List[str]] = None,\\n    output_dirs: Optional[List[str]] = None,\\n    output_files: Optional[List[str]] = None,\"\n          },\n          {\n            \"lineno\": 31,\n            \"coloffset\": 4,\n            \"linematch\": \"def inner_func(function: Callable):\",\n            \"linematch_context\": \"        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\\n    \\\"\\\"\\\"\\n\\n    def inner_func(function: Callable):\\n        @wraps(function)\\n        def wrapper(*args, **kwargs):\\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\\n\\n            os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\"\n          },\n          {\n            \"lineno\": 33,\n            \"coloffset\": 8,\n            \"linematch\": \"def wrapper(*args, **kwargs):\",\n            \"linematch_context\": \"    \\\"\\\"\\\"\\n\\n    def inner_func(function: Callable):\\n        @wraps(function)\\n        def wrapper(*args, **kwargs):\\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\\n\\n            os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\\n            with shelve.open(f\\\"{cache_dir}/tracked_functions\\\", \\\"c\\\") as db:\\n                input_tracker = LazyTracker()\"\n          }\n        ]\n      }\n    },\n    {\n      \"filename\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py\",\n      \"check\": {\n        \"id\": \"CL001\",\n        \"name\": \"single-nested-if\",\n        \"description\": \"\",\n        \"min\": 1,\n        \"max\": 10,\n        \"pattern\": \".//FunctionDef/body//If\",\n        \"passed\": true,\n        \"matches\": [\n          {\n            \"lineno\": 37,\n            \"coloffset\": 12,\n            \"linematch\": \"if os.path.exists(p):\",\n            \"linematch_context\": \"            filepaths (List[str]): List of paths to files\\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\\n        \\\"\\\"\\\"\\n        for p in filepaths:\\n            if os.path.exists(p):\\n                with open(p, \\\"rb\\\") as f:\\n                    while chunk := f.read(chunk_num_blocks * self._hasher.block_size):\\n                        self._hasher.update(chunk)\\n            else:\\n                self._hasher.update(dill.dumps(None))\"\n          }\n        ]\n      }\n    },\n    {\n      \"filename\": \"/home/caleb/Allegheny/CMP580/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py\",\n      \"check\": {\n        \"id\": \"CL001\",\n        \"name\": \"single-nested-if\",\n        \"description\": \"\",\n        \"min\": 1,\n        \"max\": 10,\n        \"pattern\": \".//FunctionDef/body//If\",\n        \"passed\": true,\n        \"matches\": [\n          {\n            \"lineno\": 41,\n            \"coloffset\": 16,\n            \"linematch\": \"if input_dirs is not None:\",\n            \"linematch_context\": \"            with shelve.open(f\\\"{cache_dir}/tracked_functions\\\", \\\"c\\\") as db:\\n                input_tracker = LazyTracker()\\n                input_tracker.add_picklables([function], recursive=True)\\n                input_tracker.add_hparams(kwargs)\\n                if input_dirs is not None:\\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\\n                    input_tracker.add_directories(input_dirs_values)\\n                if input_files is not None:\\n                    input_files_values = [\\n                        kwargs[input_file] for input_file in input_files\"\n          },\n          {\n            \"lineno\": 44,\n            \"coloffset\": 16,\n            \"linematch\": \"if input_files is not None:\",\n            \"linematch_context\": \"                input_tracker.add_hparams(kwargs)\\n                if input_dirs is not None:\\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\\n                    input_tracker.add_directories(input_dirs_values)\\n                if input_files is not None:\\n                    input_files_values = [\\n                        kwargs[input_file] for input_file in input_files\\n                    ]\\n                    input_tracker.add_files(input_files_values)\\n\"\n          },\n          {\n            \"lineno\": 51,\n            \"coloffset\": 16,\n            \"linematch\": \"if output_dirs is not None:\",\n            \"linematch_context\": \"                    ]\\n                    input_tracker.add_files(input_files_values)\\n\\n                test_output_tracker = LazyTracker()\\n                if output_dirs is not None:\\n                    output_dirs_values = [\\n                        kwargs[output_dir] for output_dir in output_dirs\\n                    ]\\n                    test_output_tracker.add_directories(output_dirs_values)\\n                if output_files is not None:\"\n          },\n          {\n            \"lineno\": 56,\n            \"coloffset\": 16,\n            \"linematch\": \"if output_files is not None:\",\n            \"linematch_context\": \"                    output_dirs_values = [\\n                        kwargs[output_dir] for output_dir in output_dirs\\n                    ]\\n                    test_output_tracker.add_directories(output_dirs_values)\\n                if output_files is not None:\\n                    output_files_values = [\\n                        kwargs[output_file] for output_file in output_files\\n                    ]\\n                    test_output_tracker.add_files(output_files_values)\\n\"\n          },\n          {\n            \"lineno\": 65,\n            \"coloffset\": 16,\n            \"linematch\": \"if input_hash in db and db[input_hash][\\\"hash\\\"] == output_hash:\",\n            \"linematch_context\": \"\\n                input_hash = input_tracker.hash()\\n                output_hash = test_output_tracker.hash()\\n\\n                if input_hash in db and db[input_hash][\\\"hash\\\"] == output_hash:\\n                    return db[input_hash][\\\"return_value\\\"]\\n                else:\\n                    return_value = function(**kwargs)\\n\\n                    output_tracker = LazyTracker()\"\n          },\n          {\n            \"lineno\": 71,\n            \"coloffset\": 20,\n            \"linematch\": \"if output_dirs is not None:\",\n            \"linematch_context\": \"                else:\\n                    return_value = function(**kwargs)\\n\\n                    output_tracker = LazyTracker()\\n                    if output_dirs is not None:\\n                        output_dirs_values = [\\n                            kwargs[output_dir] for output_dir in output_dirs\\n                        ]\\n                        output_tracker.add_directories(output_dirs_values)\\n                    if output_files is not None:\"\n          },\n          {\n            \"lineno\": 76,\n            \"coloffset\": 20,\n            \"linematch\": \"if output_files is not None:\",\n            \"linematch_context\": \"                        output_dirs_values = [\\n                            kwargs[output_dir] for output_dir in output_dirs\\n                        ]\\n                        output_tracker.add_directories(output_dirs_values)\\n                    if output_files is not None:\\n                        output_files_values = [\\n                            kwargs[output_file] for output_file in output_files\\n                        ]\\n                        output_tracker.add_files(output_files_values)\\n\"\n          }\n        ]\n      }\n    }\n  ]\n}",
  "mutmut_result": "{\"disabled\":0,\"errors\":0,\"failures\":10,\"tests\":44,\"time\":0,\"testsuite\":[{\"disabled\":0,\"errors\":0,\"failures\":10,\"name\":\"mutmut\",\"skipped\":0,\"tests\":44,\"time\":0,\"testcase\":[{\"name\":\"Mutant #1\",\"file\":\"lazytracker/lazytracker.py\",\"line\":11,\"system-out\":[\"        self._hasher = hashlib.md5()\"]},{\"name\":\"Mutant #2\",\"file\":\"lazytracker/lazytracker.py\",\"line\":13,\"failure\":[{\"inner\":\"--- lazytracker/lazytracker.py\\n+++ lazytracker/lazytracker.py\\n@@ -10,7 +10,7 @@\\n         \\\"\\\"\\\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\\\"\\\"\\\"\\n         self._hasher = hashlib.md5()\\n \\n-    def add_directories(self, directories: List[str], chunk_num_blocks=128):\\n+    def add_directories(self, directories: List[str], chunk_num_blocks=129):\\n         \\\"\\\"\\\"Include hash of all files inside directory (including files in subdirectories)\\n \\n         Args:\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"    def add_directories(self, directories: List[str], chunk_num_blocks=128):\"]},{\"name\":\"Mutant #3\",\"file\":\"lazytracker/lazytracker.py\",\"line\":20,\"system-out\":[\"        files_to_check = []\"]},{\"name\":\"Mutant #4\",\"file\":\"lazytracker/lazytracker.py\",\"line\":23,\"system-out\":[\"            files_to_check.extend(list(Path(directory).rglob(\\\"*\\\")))\"]},{\"name\":\"Mutant #5\",\"file\":\"lazytracker/lazytracker.py\",\"line\":25,\"system-out\":[\"        files_to_check = sorted(files_to_check)\"]},{\"name\":\"Mutant #6\",\"file\":\"lazytracker/lazytracker.py\",\"line\":29,\"failure\":[{\"inner\":\"--- lazytracker/lazytracker.py\\n+++ lazytracker/lazytracker.py\\n@@ -26,7 +26,7 @@\\n \\n         self.add_files(files_to_check, chunk_num_blocks)\\n \\n-    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\\n+    def add_files(self, filepaths: List[str], chunk_num_blocks=129):\\n         \\\"\\\"\\\"Include hash of files\\n \\n         Args:\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\"]},{\"name\":\"Mutant #7\",\"file\":\"lazytracker/lazytracker.py\",\"line\":38,\"system-out\":[\"                with open(p, \\\"rb\\\") as f:\"]},{\"name\":\"Mutant #8\",\"file\":\"lazytracker/lazytracker.py\",\"line\":39,\"system-out\":[\"                    while chunk := f.read(chunk_num_blocks * self._hasher.block_size):\"]},{\"name\":\"Mutant #9\",\"file\":\"lazytracker/lazytracker.py\",\"line\":52,\"failure\":[{\"inner\":\"--- lazytracker/lazytracker.py\\n+++ lazytracker/lazytracker.py\\n@@ -49,7 +49,7 @@\\n         \\\"\\\"\\\"\\n         self.add_picklables([hparams])\\n \\n-    def add_picklables(self, objects: List[Any], recursive: bool=False):\\n+    def add_picklables(self, objects: List[Any], recursive: bool=True):\\n         \\\"\\\"\\\"Include hash of any picklable python objects (pickable by dill)\\n \\n         Args:\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"    def add_picklables(self, objects: List[Any], recursive: bool=False):\"]},{\"name\":\"Mutant #10\",\"file\":\"lazytracker/tracked.py\",\"line\":10,\"system-out\":[\"shelve.Pickler = Pickler\"]},{\"name\":\"Mutant #11\",\"file\":\"lazytracker/tracked.py\",\"line\":11,\"system-out\":[\"shelve.Unpickler = Unpickler\"]},{\"name\":\"Mutant #12\",\"file\":\"lazytracker/tracked.py\",\"line\":15,\"failure\":[{\"inner\":\"--- lazytracker/tracked.py\\n+++ lazytracker/tracked.py\\n@@ -12,7 +12,7 @@\\n \\n \\n def cached(\\n-    cache_dir: str = \\\".lazytracker\\\",\\n+    cache_dir: str = \\\"XX.lazytrackerXX\\\",\\n     input_files: Optional[List[str]] = None,\\n     input_dirs: Optional[List[str]] = None,\\n     output_dirs: Optional[List[str]] = None,\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"    cache_dir: str = \\\".lazytracker\\\",\"]},{\"name\":\"Mutant #13\",\"file\":\"lazytracker/tracked.py\",\"line\":32,\"failure\":[{\"inner\":\"--- lazytracker/tracked.py\\n+++ lazytracker/tracked.py\\n@@ -29,7 +29,7 @@\\n     \\\"\\\"\\\"\\n \\n     def inner_func(function: Callable):\\n-        @wraps(function)\\n+\\n         def wrapper(*args, **kwargs):\\n             kwargs.update(dict(zip(function.__code__.co_varnames, args)))\\n \\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"        @wraps(function)\"]},{\"name\":\"Mutant #14\",\"file\":\"lazytracker/tracked.py\",\"line\":36,\"failure\":[{\"inner\":\"--- lazytracker/tracked.py\\n+++ lazytracker/tracked.py\\n@@ -33,7 +33,7 @@\\n         def wrapper(*args, **kwargs):\\n             kwargs.update(dict(zip(function.__code__.co_varnames, args)))\\n \\n-            os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\\n+            os.makedirs(f\\\"XX{cache_dir}XX\\\", exist_ok=True)\\n             with shelve.open(f\\\"{cache_dir}/tracked_functions\\\", \\\"c\\\") as db:\\n                 input_tracker = LazyTracker()\\n                 input_tracker.add_picklables([function], recursive=True)\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"            os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\"]},{\"name\":\"Mutant #15\",\"file\":\"lazytracker/tracked.py\",\"line\":36,\"system-out\":[\"            os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\"]},{\"name\":\"Mutant #16\",\"file\":\"lazytracker/tracked.py\",\"line\":37,\"system-out\":[\"            with shelve.open(f\\\"{cache_dir}/tracked_functions\\\", \\\"c\\\") as db:\"]},{\"name\":\"Mutant #17\",\"file\":\"lazytracker/tracked.py\",\"line\":37,\"system-out\":[\"            with shelve.open(f\\\"{cache_dir}/tracked_functions\\\", \\\"c\\\") as db:\"]},{\"name\":\"Mutant #18\",\"file\":\"lazytracker/tracked.py\",\"line\":38,\"system-out\":[\"                input_tracker = LazyTracker()\"]},{\"name\":\"Mutant #19\",\"file\":\"lazytracker/tracked.py\",\"line\":39,\"failure\":[{\"inner\":\"--- lazytracker/tracked.py\\n+++ lazytracker/tracked.py\\n@@ -36,7 +36,7 @@\\n             os.makedirs(f\\\"{cache_dir}\\\", exist_ok=True)\\n             with shelve.open(f\\\"{cache_dir}/tracked_functions\\\", \\\"c\\\") as db:\\n                 input_tracker = LazyTracker()\\n-                input_tracker.add_picklables([function], recursive=True)\\n+                input_tracker.add_picklables([function], recursive=False)\\n                 input_tracker.add_hparams(kwargs)\\n                 if input_dirs is not None:\\n                     input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"                input_tracker.add_picklables([function], recursive=True)\"]},{\"name\":\"Mutant #20\",\"file\":\"lazytracker/tracked.py\",\"line\":41,\"system-out\":[\"                if input_dirs is not None:\"]},{\"name\":\"Mutant #21\",\"file\":\"lazytracker/tracked.py\",\"line\":42,\"system-out\":[\"                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\"]},{\"name\":\"Mutant #22\",\"file\":\"lazytracker/tracked.py\",\"line\":44,\"system-out\":[\"                if input_files is not None:\"]},{\"name\":\"Mutant #23\",\"file\":\"lazytracker/tracked.py\",\"line\":47,\"failure\":[{\"inner\":\"--- lazytracker/tracked.py\\n+++ lazytracker/tracked.py\\n@@ -42,9 +42,7 @@\\n                     input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\\n                     input_tracker.add_directories(input_dirs_values)\\n                 if input_files is not None:\\n-                    input_files_values = [\\n-                        kwargs[input_file] for input_file in input_files\\n-                    ]\\n+                    input_files_values = None\\n                     input_tracker.add_files(input_files_values)\\n \\n                 test_output_tracker = LazyTracker()\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"                    ]\"]},{\"name\":\"Mutant #24\",\"file\":\"lazytracker/tracked.py\",\"line\":50,\"system-out\":[\"                test_output_tracker = LazyTracker()\"]},{\"name\":\"Mutant #25\",\"file\":\"lazytracker/tracked.py\",\"line\":51,\"system-out\":[\"                if output_dirs is not None:\"]},{\"name\":\"Mutant #26\",\"file\":\"lazytracker/tracked.py\",\"line\":54,\"system-out\":[\"                    ]\"]},{\"name\":\"Mutant #27\",\"file\":\"lazytracker/tracked.py\",\"line\":56,\"system-out\":[\"                if output_files is not None:\"]},{\"name\":\"Mutant #28\",\"file\":\"lazytracker/tracked.py\",\"line\":59,\"failure\":[{\"inner\":\"--- lazytracker/tracked.py\\n+++ lazytracker/tracked.py\\n@@ -54,9 +54,7 @@\\n                     ]\\n                     test_output_tracker.add_directories(output_dirs_values)\\n                 if output_files is not None:\\n-                    output_files_values = [\\n-                        kwargs[output_file] for output_file in output_files\\n-                    ]\\n+                    output_files_values = None\\n                     test_output_tracker.add_files(output_files_values)\\n \\n                 input_hash = input_tracker.hash()\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"                    ]\"]},{\"name\":\"Mutant #29\",\"file\":\"lazytracker/tracked.py\",\"line\":62,\"system-out\":[\"                input_hash = input_tracker.hash()\"]},{\"name\":\"Mutant #30\",\"file\":\"lazytracker/tracked.py\",\"line\":63,\"system-out\":[\"                output_hash = test_output_tracker.hash()\"]},{\"name\":\"Mutant #31\",\"file\":\"lazytracker/tracked.py\",\"line\":65,\"system-out\":[\"                if input_hash in db and db[input_hash][\\\"hash\\\"] == output_hash:\"]},{\"name\":\"Mutant #32\",\"file\":\"lazytracker/tracked.py\",\"line\":65,\"system-out\":[\"                if input_hash in db and db[input_hash][\\\"hash\\\"] == output_hash:\"]},{\"name\":\"Mutant #33\",\"file\":\"lazytracker/tracked.py\",\"line\":65,\"system-out\":[\"                if input_hash in db and db[input_hash][\\\"hash\\\"] == output_hash:\"]},{\"name\":\"Mutant #34\",\"file\":\"lazytracker/tracked.py\",\"line\":65,\"system-out\":[\"                if input_hash in db and db[input_hash][\\\"hash\\\"] == output_hash:\"]},{\"name\":\"Mutant #35\",\"file\":\"lazytracker/tracked.py\",\"line\":66,\"system-out\":[\"                    return db[input_hash][\\\"return_value\\\"]\"]},{\"name\":\"Mutant #36\",\"file\":\"lazytracker/tracked.py\",\"line\":68,\"system-out\":[\"                    return_value = function(**kwargs)\"]},{\"name\":\"Mutant #37\",\"file\":\"lazytracker/tracked.py\",\"line\":70,\"system-out\":[\"                    output_tracker = LazyTracker()\"]},{\"name\":\"Mutant #38\",\"file\":\"lazytracker/tracked.py\",\"line\":71,\"system-out\":[\"                    if output_dirs is not None:\"]},{\"name\":\"Mutant #39\",\"file\":\"lazytracker/tracked.py\",\"line\":74,\"system-out\":[\"                        ]\"]},{\"name\":\"Mutant #40\",\"file\":\"lazytracker/tracked.py\",\"line\":76,\"system-out\":[\"                    if output_files is not None:\"]},{\"name\":\"Mutant #41\",\"file\":\"lazytracker/tracked.py\",\"line\":79,\"failure\":[{\"inner\":\"--- lazytracker/tracked.py\\n+++ lazytracker/tracked.py\\n@@ -74,9 +74,7 @@\\n                         ]\\n                         output_tracker.add_directories(output_dirs_values)\\n                     if output_files is not None:\\n-                        output_files_values = [\\n-                            kwargs[output_file] for output_file in output_files\\n-                        ]\\n+                        output_files_values = None\\n                         output_tracker.add_files(output_files_values)\\n \\n                     db[input_hash] = {\\n\",\"type\":\"failure\",\"message\":\"bad_survived\"}],\"system-out\":[\"                        ]\"]},{\"name\":\"Mutant #42\",\"file\":\"lazytracker/tracked.py\",\"line\":83,\"system-out\":[\"                        \\\"return_value\\\": return_value,\"]},{\"name\":\"Mutant #43\",\"file\":\"lazytracker/tracked.py\",\"line\":84,\"system-out\":[\"                        \\\"hash\\\": output_tracker.hash(),\"]},{\"name\":\"Mutant #44\",\"file\":\"lazytracker/tracked.py\",\"line\":85,\"system-out\":[\"                    }\"]}]}]}\n"
}