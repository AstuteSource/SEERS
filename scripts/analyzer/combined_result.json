{
  "chasten_result": {
    "configuration": {
      "chastenversion": "0.2.0",
      "debuglevel": "ERROR",
      "debugdestination": "CONSOLE",
      "projectname": "lazytracker",
      "configdirectory": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/Config",
      "searchpath": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup",
      "fileuuid": "a166d500b88a4685813aa55966fc41ab",
      "datetime": "2024-07-12 17:38:50.616232",
      "checkinclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      },
      "checkexclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      }
    },
    "sources": [
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup/test/test_uuid_generation.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
          "passed": true,
          "matches": [
            {
              "lineno": 30,
              "coloffset": 11,
              "linematch": "assert uuid.UUID(namespace_based_uuid.hex).version == 5",
              "linematch_context": "    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 30,
              "coloffset": 11,
              "linematch": "assert uuid.UUID(namespace_based_uuid.hex).version == 5",
              "linematch_context": "    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 30,
              "coloffset": 11,
              "linematch": "assert uuid.UUID(namespace_based_uuid.hex).version == 5",
              "linematch_context": "    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup/test/test_uuid_generation.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": true,
          "matches": [
            {
              "lineno": 7,
              "coloffset": 0,
              "linematch": "def test_generate_random_uuid():",
              "linematch_context": "\nfrom src import generate_uuids as gu\n\n\ndef test_generate_random_uuid():\n    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4"
            },
            {
              "lineno": 15,
              "coloffset": 0,
              "linematch": "def test_generate_time_based_uuid():",
              "linematch_context": "    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1"
            },
            {
              "lineno": 23,
              "coloffset": 0,
              "linematch": "def test_generate_namespace_based_uuid():",
              "linematch_context": "    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\""
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup/src/generate_uuids.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": true,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def generate_random_uuid():",
              "linematch_context": "\nimport uuid\n\n\ndef generate_random_uuid():\n    \"\"\"\n    Generate random uuid\n    @return: uuid\n    \"\"\"\n    # Generate a random UUID (version 4)"
            },
            {
              "lineno": 24,
              "coloffset": 0,
              "linematch": "def generate_time_based_uuid():",
              "linematch_context": "    print(\"Random UUID (version 4):\", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():\n    \"\"\"\n    geterating time base uuid\n\n    @return: uuid\n    \"\"\""
            },
            {
              "lineno": 36,
              "coloffset": 0,
              "linematch": "def generate_namespace_based_uuid(namespace, name):",
              "linematch_context": "    print(\"Time-based UUID (version 1):\", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    \"\"\"\n    Generate a UUID based on a namespace and a name (version 5)\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup/test/test_uuid_generation.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/Assert",
          "passed": true,
          "matches": [
            {
              "lineno": 12,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(random_uuid.hex).version == 4",
              "linematch_context": "    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid"
            },
            {
              "lineno": 20,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(time_based_uuid.hex).version == 1",
              "linematch_context": "    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(namespace_based_uuid.hex).version == 5",
              "linematch_context": "    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup/test/test_uuid_generation.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods that start with 'test_'.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
          "passed": false,
          "matches": [
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "from src import generate_uuids as gu\n\n\ndef test_generate_random_uuid():\n    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n"
            },
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "random_uuid = gu.generate_random_uuid()",
              "linematch_context": "def test_generate_random_uuid():\n    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\""
            },
            {
              "lineno": 12,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(random_uuid.hex).version == 4",
              "linematch_context": "    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid"
            },
            {
              "lineno": 16,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n"
            },
            {
              "lineno": 19,
              "coloffset": 4,
              "linematch": "time_based_uuid = gu.generate_time_based_uuid()",
              "linematch_context": "def test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\""
            },
            {
              "lineno": 20,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(time_based_uuid.hex).version == 1",
              "linematch_context": "    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid"
            },
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)"
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")",
              "linematch_context": "def test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 28,
              "coloffset": 4,
              "linematch": "name = \"example.com\"",
              "linematch_context": "    \"\"\"\n    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)",
              "linematch_context": "    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(namespace_based_uuid.hex).version == 5",
              "linematch_context": "    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup/test/test_uuid_generation.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "from src import generate_uuids as gu\n\n\ndef test_generate_random_uuid():\n    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n"
            },
            {
              "lineno": 11,
              "coloffset": 4,
              "linematch": "random_uuid = gu.generate_random_uuid()",
              "linematch_context": "def test_generate_random_uuid():\n    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\""
            },
            {
              "lineno": 12,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(random_uuid.hex).version == 4",
              "linematch_context": "    \"\"\"\n    Unit testing - generate random uuid\n    \"\"\"\n    random_uuid = gu.generate_random_uuid()\n    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid"
            },
            {
              "lineno": 16,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert uuid.UUID(random_uuid.hex).version == 4\n\n\ndef test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n"
            },
            {
              "lineno": 19,
              "coloffset": 4,
              "linematch": "time_based_uuid = gu.generate_time_based_uuid()",
              "linematch_context": "def test_generate_time_based_uuid():\n    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\""
            },
            {
              "lineno": 20,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(time_based_uuid.hex).version == 1",
              "linematch_context": "    \"\"\"\n    Unit testing - generate time based uuid\n    \"\"\"\n    time_based_uuid = gu.generate_time_based_uuid()\n    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid"
            },
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert uuid.UUID(time_based_uuid.hex).version == 1\n\n\ndef test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)"
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")",
              "linematch_context": "def test_generate_namespace_based_uuid():\n    \"\"\"\n    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 28,
              "coloffset": 4,
              "linematch": "name = \"example.com\"",
              "linematch_context": "    \"\"\"\n    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 29,
              "coloffset": 4,
              "linematch": "namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)",
              "linematch_context": "    Unit testing - generate namespace based uuid\n    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "assert uuid.UUID(namespace_based_uuid.hex).version == 5",
              "linematch_context": "    \"\"\"\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/python-poetry-setup/src/generate_uuids.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "import uuid\n\n\ndef generate_random_uuid():\n    \"\"\"\n    Generate random uuid\n    @return: uuid\n    \"\"\"\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()"
            },
            {
              "lineno": 19,
              "coloffset": 4,
              "linematch": "random_uuid = uuid.uuid4()",
              "linematch_context": "    Generate random uuid\n    @return: uuid\n    \"\"\"\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()\n    print(\"Random UUID (version 4):\", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():"
            },
            {
              "lineno": 20,
              "coloffset": 4,
              "linematch": "print(\"Random UUID (version 4):\", random_uuid)",
              "linematch_context": "    @return: uuid\n    \"\"\"\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()\n    print(\"Random UUID (version 4):\", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():\n    \"\"\""
            },
            {
              "lineno": 21,
              "coloffset": 4,
              "linematch": "return random_uuid",
              "linematch_context": "    \"\"\"\n    # Generate a random UUID (version 4)\n    random_uuid = uuid.uuid4()\n    print(\"Random UUID (version 4):\", random_uuid)\n    return random_uuid\n\n\ndef generate_time_based_uuid():\n    \"\"\"\n    geterating time base uuid"
            },
            {
              "lineno": 25,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    return random_uuid\n\n\ndef generate_time_based_uuid():\n    \"\"\"\n    geterating time base uuid\n\n    @return: uuid\n    \"\"\"\n    # Generate a UUID based on the host's MAC address and the current time (version 1)"
            },
            {
              "lineno": 31,
              "coloffset": 4,
              "linematch": "time_based_uuid = uuid.uuid1()",
              "linematch_context": "\n    @return: uuid\n    \"\"\"\n    # Generate a UUID based on the host's MAC address and the current time (version 1)\n    time_based_uuid = uuid.uuid1()\n    print(\"Time-based UUID (version 1):\", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):"
            },
            {
              "lineno": 32,
              "coloffset": 4,
              "linematch": "print(\"Time-based UUID (version 1):\", time_based_uuid)",
              "linematch_context": "    @return: uuid\n    \"\"\"\n    # Generate a UUID based on the host's MAC address and the current time (version 1)\n    time_based_uuid = uuid.uuid1()\n    print(\"Time-based UUID (version 1):\", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    \"\"\""
            },
            {
              "lineno": 33,
              "coloffset": 4,
              "linematch": "return time_based_uuid",
              "linematch_context": "    \"\"\"\n    # Generate a UUID based on the host's MAC address and the current time (version 1)\n    time_based_uuid = uuid.uuid1()\n    print(\"Time-based UUID (version 1):\", time_based_uuid)\n    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    \"\"\"\n    Generate a UUID based on a namespace and a name (version 5)"
            },
            {
              "lineno": 37,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    return time_based_uuid\n\n\ndef generate_namespace_based_uuid(namespace, name):\n    \"\"\"\n    Generate a UUID based on a namespace and a name (version 5)\n    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n    name = \"example.com\"\n\n    @param namespace:str"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "namespace_based_uuid = uuid.uuid5(namespace, name)",
              "linematch_context": "    @name str\n\n    @return: uuid\n    \"\"\"\n    namespace_based_uuid = uuid.uuid5(namespace, name)\n    print(\"Namespace-based UUID (version 5):\", namespace_based_uuid)\n    return namespace_based_uuid"
            },
            {
              "lineno": 48,
              "coloffset": 4,
              "linematch": "print(\"Namespace-based UUID (version 5):\", namespace_based_uuid)",
              "linematch_context": "\n    @return: uuid\n    \"\"\"\n    namespace_based_uuid = uuid.uuid5(namespace, name)\n    print(\"Namespace-based UUID (version 5):\", namespace_based_uuid)\n    return namespace_based_uuid"
            },
            {
              "lineno": 49,
              "coloffset": 4,
              "linematch": "return namespace_based_uuid",
              "linematch_context": "    @return: uuid\n    \"\"\"\n    namespace_based_uuid = uuid.uuid5(namespace, name)\n    print(\"Namespace-based UUID (version 5):\", namespace_based_uuid)\n    return namespace_based_uuid"
            }
          ]
        }
      }
    ]
  },
  "mutmut_result": {
    "disabled": 0,
    "errors": 0,
    "failures": 4,
    "tests": 19,
    "time": 0,
    "testsuite": [
      {
        "disabled": 0,
        "errors": 0,
        "failures": 4,
        "name": "mutmut",
        "skipped": 0,
        "tests": 19,
        "time": 0,
        "testcase": [
          {
            "name": "Mutant #1",
            "file": "src/generate_uuids.py",
            "line": 19,
            "system-out": [
              "    random_uuid = uuid.uuid4()"
            ]
          },
          {
            "name": "Mutant #2",
            "file": "src/generate_uuids.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- src/generate_uuids.py\n+++ src/generate_uuids.py\n@@ -17,7 +17,7 @@\n     \"\"\"\n     # Generate a random UUID (version 4)\n     random_uuid = uuid.uuid4()\n-    print(\"Random UUID (version 4):\", random_uuid)\n+    print(\"XXRandom UUID (version 4):XX\", random_uuid)\n     return random_uuid\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(\"Random UUID (version 4):\", random_uuid)"
            ]
          },
          {
            "name": "Mutant #3",
            "file": "src/generate_uuids.py",
            "line": 31,
            "system-out": [
              "    time_based_uuid = uuid.uuid1()"
            ]
          },
          {
            "name": "Mutant #4",
            "file": "src/generate_uuids.py",
            "line": 32,
            "failure": [
              {
                "inner": "--- src/generate_uuids.py\n+++ src/generate_uuids.py\n@@ -29,7 +29,7 @@\n     \"\"\"\n     # Generate a UUID based on the host's MAC address and the current time (version 1)\n     time_based_uuid = uuid.uuid1()\n-    print(\"Time-based UUID (version 1):\", time_based_uuid)\n+    print(\"XXTime-based UUID (version 1):XX\", time_based_uuid)\n     return time_based_uuid\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(\"Time-based UUID (version 1):\", time_based_uuid)"
            ]
          },
          {
            "name": "Mutant #5",
            "file": "src/generate_uuids.py",
            "line": 47,
            "system-out": [
              "    namespace_based_uuid = uuid.uuid5(namespace, name)"
            ]
          },
          {
            "name": "Mutant #6",
            "file": "src/generate_uuids.py",
            "line": 48,
            "failure": [
              {
                "inner": "--- src/generate_uuids.py\n+++ src/generate_uuids.py\n@@ -45,6 +45,6 @@\n     @return: uuid\n     \"\"\"\n     namespace_based_uuid = uuid.uuid5(namespace, name)\n-    print(\"Namespace-based UUID (version 5):\", namespace_based_uuid)\n+    print(\"XXNamespace-based UUID (version 5):XX\", namespace_based_uuid)\n     return namespace_based_uuid\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    print(\"Namespace-based UUID (version 5):\", namespace_based_uuid)"
            ]
          },
          {
            "name": "Mutant #7",
            "file": "test/test_uuid_generation.py",
            "line": 11,
            "system-out": [
              "    random_uuid = gu.generate_random_uuid()"
            ]
          },
          {
            "name": "Mutant #8",
            "file": "test/test_uuid_generation.py",
            "line": 12,
            "system-out": [
              "    assert uuid.UUID(random_uuid.hex).version == 4"
            ]
          },
          {
            "name": "Mutant #9",
            "file": "test/test_uuid_generation.py",
            "line": 12,
            "system-out": [
              "    assert uuid.UUID(random_uuid.hex).version == 4"
            ]
          },
          {
            "name": "Mutant #10",
            "file": "test/test_uuid_generation.py",
            "line": 19,
            "system-out": [
              "    time_based_uuid = gu.generate_time_based_uuid()"
            ]
          },
          {
            "name": "Mutant #11",
            "file": "test/test_uuid_generation.py",
            "line": 20,
            "system-out": [
              "    assert uuid.UUID(time_based_uuid.hex).version == 1"
            ]
          },
          {
            "name": "Mutant #12",
            "file": "test/test_uuid_generation.py",
            "line": 20,
            "system-out": [
              "    assert uuid.UUID(time_based_uuid.hex).version == 1"
            ]
          },
          {
            "name": "Mutant #13",
            "file": "test/test_uuid_generation.py",
            "line": 27,
            "system-out": [
              "    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")"
            ]
          },
          {
            "name": "Mutant #14",
            "file": "test/test_uuid_generation.py",
            "line": 27,
            "system-out": [
              "    namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")"
            ]
          },
          {
            "name": "Mutant #15",
            "file": "test/test_uuid_generation.py",
            "line": 28,
            "failure": [
              {
                "inner": "--- test/test_uuid_generation.py\n+++ test/test_uuid_generation.py\n@@ -25,7 +25,7 @@\n     Unit testing - generate namespace based uuid\n     \"\"\"\n     namespace = uuid.UUID(\"6ba7b810-9dad-11d1-80b4-00c04fd430c8\")\n-    name = \"example.com\"\n+    name = \"XXexample.comXX\"\n     namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)\n     assert uuid.UUID(namespace_based_uuid.hex).version == 5\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    name = \"example.com\""
            ]
          },
          {
            "name": "Mutant #16",
            "file": "test/test_uuid_generation.py",
            "line": 28,
            "system-out": [
              "    name = \"example.com\""
            ]
          },
          {
            "name": "Mutant #17",
            "file": "test/test_uuid_generation.py",
            "line": 29,
            "system-out": [
              "    namespace_based_uuid = gu.generate_namespace_based_uuid(namespace, name)"
            ]
          },
          {
            "name": "Mutant #18",
            "file": "test/test_uuid_generation.py",
            "line": 30,
            "system-out": [
              "    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            ]
          },
          {
            "name": "Mutant #19",
            "file": "test/test_uuid_generation.py",
            "line": 30,
            "system-out": [
              "    assert uuid.UUID(namespace_based_uuid.hex).version == 5"
            ]
          }
        ]
      }
    ]
  }
}