[
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py",
    "pattern": {
      "lineno": 8,
      "coloffset": 0,
      "linematch": "class LazyTracker:",
      "context": "import dill\nfrom pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):",
      "min": 1,
      "max": 10,
      "pattern": ".//ClassDef",
      "check_id": "C001",
      "check_name": "class-definition",
      "description": "Ensure the presence of class definitions in the codebase."
    },
    "mutants": null,
    "function_name": null,
    "function_start_line": null
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_tracked.py",
    "pattern": {
      "lineno": 5,
      "coloffset": 0,
      "linematch": "def test_cached():",
      "context": "from tempfile import TemporaryDirectory\nfrom lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_cached",
    "function_start_line": 5
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_tracked.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 8,
      "linematch": "def test_function(input_dir: str, output_dir: str, parameter: int):",
      "context": "            cache_dir=cache_dir,\n            input_dirs=[\"input_dir\"],\n            output_dirs=[\"output_dir\"]\n        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_cached",
    "function_start_line": 5
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
    "pattern": {
      "lineno": 6,
      "coloffset": 0,
      "linematch": "def test_hparams():",
      "context": "import shutil\nfrom tempfile import TemporaryDirectory, tempdir\nfrom lazytracker import LazyTracker\n\ndef test_hparams():\n    hparams_1 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 1",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_hparams",
    "function_start_line": 6
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
    "pattern": {
      "lineno": 35,
      "coloffset": 0,
      "linematch": "def test_picable_function():",
      "context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_picable_function",
    "function_start_line": 35
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
    "pattern": {
      "lineno": 53,
      "coloffset": 0,
      "linematch": "def test_files():",
      "context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n\n        with open(f'{tmpdir}/b.txt', 'w') as f:",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_files",
    "function_start_line": 53
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
    "pattern": {
      "lineno": 76,
      "coloffset": 0,
      "linematch": "def test_directories():",
      "context": "\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()\n\ndef test_directories():\n    with TemporaryDirectory() as tmpdir:\n        os.makedirs(f\"{tmpdir}/1\", exist_ok=True)\n\n        with open(f'{tmpdir}/1/a.txt', 'w') as f:\n            f.write(\"test file 1\")",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_directories",
    "function_start_line": 76
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
    "pattern": {
      "lineno": 36,
      "coloffset": 4,
      "linematch": "def func_1(x):",
      "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_picable_function",
    "function_start_line": 35
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/tests/test_lazytracker.py",
    "pattern": {
      "lineno": 38,
      "coloffset": 4,
      "linematch": "def func_2(x):",
      "context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "test_picable_function",
    "function_start_line": 35
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py",
    "pattern": {
      "lineno": 14,
      "coloffset": 0,
      "linematch": "def cached(",
      "context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "cached",
    "function_start_line": 14
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py",
    "pattern": {
      "lineno": 31,
      "coloffset": 4,
      "linematch": "def inner_func(function: Callable):",
      "context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "cached",
    "function_start_line": 14
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/tracked.py",
    "pattern": {
      "lineno": 33,
      "coloffset": 8,
      "linematch": "def wrapper(*args, **kwargs):",
      "context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "cached",
    "function_start_line": 14
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py",
    "pattern": {
      "lineno": 9,
      "coloffset": 4,
      "linematch": "def __init__(self):",
      "context": "from pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants": null,
    "function_name": "__init__",
    "function_start_line": 9
  },
  {
    "file": "/home/student/juniorsem/SEERS/scripts/analyzer/demo/lazytracker/lazytracker/lazytracker.py",
    "pattern": {
      "lineno": 13,
      "coloffset": 4,
      "linematch": "def add_directories(self, directories: List[str], chunk_num_blocks=128):",
      "context": "    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.",
      "min": 1,
      "max": 10,
      "pattern": ".//FunctionDef",
      "check_id": "F001",
      "check_name": "all-function-definition",
      "description": "Ensure the presence of function definitions in the codebase."
    },
    "mutants":
      {
        "name": "Mutant #2",
        "line": 13,
        "description": [
          "    def add_directories(self, directories: List[str], chunk_num_blocks=128):"
        ],
        "failure": {
            "inner": "--- lazytracker/lazytracker.py\n+++ lazytracker/lazytracker.py\n@@ -10,7 +10,7 @@\n         \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n         self._hasher = hashlib.md5()\n \n-    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n+    def add_directories(self, directories: List[str], chunk_num_blocks=129):\n         \"\"\"Include hash of all files inside directory (including files in subdirectories)\n \n         Args:\n",
            "type": "failure",
            "message": "bad_survived"
          }
      },
    "function_name": "add_directories",
    "function_start_line": 13
  }
]