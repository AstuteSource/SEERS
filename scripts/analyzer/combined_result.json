{
  "chasten_result": {
    "configuration": {
      "chastenversion": "0.2.0",
      "debuglevel": "ERROR",
      "debugdestination": "CONSOLE",
      "projectname": "lazytracker",
      "configdirectory": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/Config",
      "searchpath": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli",
      "fileuuid": "1d6b243a16dd4ee0bb2b5b81238aa6dc",
      "datetime": "2024-06-25 12:59:38.689469",
      "checkinclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      },
      "checkexclude": {
        "attribute": "",
        "value": "",
        "confidence": 0
      }
    },
    "sources": [
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/main.py",
        "check": {
          "id": "CL001",
          "name": "single-nested-if",
          "description": "Ensure the presence of single nested 'if' statements within function bodies.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body//If",
          "passed": true,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "if value:",
              "linematch_context": "\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)"
            },
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "if ctx.invoked_subcommand is None:",
              "linematch_context": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()"
            },
            {
              "lineno": 38,
              "coloffset": 8,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            "
            },
            {
              "lineno": 54,
              "coloffset": 4,
              "linematch": "if len(current_config['projects'])==0:",
              "linematch_context": "    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n"
            },
            {
              "lineno": 83,
              "coloffset": 4,
              "linematch": "if found == False:",
              "linematch_context": "            os.system(current_config['default_editor'])\n            found = True\n            break\n\n    if found == False:\n        echo_text = project_name + \": Project Not Found!\"\n        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n        typer.echo(not_found,  err=True)\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')"
            },
            {
              "lineno": 75,
              "coloffset": 8,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item['path'])\n            os.system(current_config['default_editor'])\n            found = True"
            },
            {
              "lineno": 107,
              "coloffset": 4,
              "linematch": "if found==False:",
              "linematch_context": "            found = True\n            JsonDataOperations.update(current_config)\n            break\n\n    if found==False:\n        echo_text = typer.style(\"Project with this name is not present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n        typer.echo(echo_text, err=True)\n    else:\n        typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)"
            },
            {
              "lineno": 101,
              "coloffset": 8,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/utils/helpers.py",
        "check": {
          "id": "CL001",
          "name": "single-nested-if",
          "description": "Ensure the presence of single nested 'if' statements within function bodies.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body//If",
          "passed": true,
          "matches": [
            {
              "lineno": 49,
              "coloffset": 12,
              "linematch": "if project_item['project_name'].startswith(incomplete):",
              "linematch_context": "        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):"
            },
            {
              "lineno": 60,
              "coloffset": 12,
              "linematch": "if editor.startswith(incomplete):",
              "linematch_context": "        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/tests/test_code_opener_cli.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 8,
              "coloffset": 11,
              "linematch": "assert __version__ == '1.0.1'",
              "linematch_context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/main.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 24,
              "coloffset": 7,
              "linematch": "if ctx.invoked_subcommand is None:",
              "linematch_context": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()"
            },
            {
              "lineno": 101,
              "coloffset": 11,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"
            },
            {
              "lineno": 101,
              "coloffset": 11,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"
            },
            {
              "lineno": 101,
              "coloffset": 11,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"
            },
            {
              "lineno": 101,
              "coloffset": 11,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"
            },
            {
              "lineno": 101,
              "coloffset": 11,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"
            },
            {
              "lineno": 101,
              "coloffset": 11,
              "linematch": "if project_item['project_name']==project_name:",
              "linematch_context": "    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)\n            break\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/test_main.py",
        "check": {
          "id": "BOOL001",
          "name": "boolean-comparison",
          "description": "Using = or == operators to compare boolean values",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef//Compare/ops/Is | .//FunctionDef//Compare/ops/Eq",
          "passed": false,
          "matches": [
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 11,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/tests/test_code_opener_cli.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 4,
              "coloffset": 0,
              "linematch": "def test_version():",
              "linematch_context": "from code_opener_cli import __version__\n\n\ndef test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/main.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def version_callback(value: bool):",
              "linematch_context": "from typing import Optional\n\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n"
            },
            {
              "lineno": 20,
              "coloffset": 0,
              "linematch": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):",
              "linematch_context": "        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")"
            },
            {
              "lineno": 30,
              "coloffset": 0,
              "linematch": "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):",
              "linematch_context": "        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()"
            },
            {
              "lineno": 49,
              "coloffset": 0,
              "linematch": "def see():",
              "linematch_context": "    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:"
            },
            {
              "lineno": 68,
              "coloffset": 0,
              "linematch": "def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
              "linematch_context": "        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False"
            },
            {
              "lineno": 92,
              "coloffset": 0,
              "linematch": "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
              "linematch_context": "        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/conftest.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 7,
              "coloffset": 0,
              "linematch": "def config_with_project():",
              "linematch_context": "\"\"\"\nimport pytest\n\n@pytest.fixture(scope=\"package\")\ndef config_with_project():\n    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}"
            },
            {
              "lineno": 11,
              "coloffset": 0,
              "linematch": "def config_with_no_project():",
              "linematch_context": "def config_with_project():\n    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/test_main.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def test_see_with_no_projects(monkeypatch, config_with_no_project):",
              "linematch_context": "\n# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project"
            },
            {
              "lineno": 26,
              "coloffset": 0,
              "linematch": "def test_see_with_projects(monkeypatch, config_with_project):",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 40,
              "coloffset": 0,
              "linematch": "def test_add_new_project(monkeypatch, config_with_project):",
              "linematch_context": "    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 57,
              "coloffset": 0,
              "linematch": "def test_add_present_project(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 74,
              "coloffset": 0,
              "linematch": "def test_open_project_not_present(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 86,
              "coloffset": 0,
              "linematch": "def test_open_project_present(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 108,
              "coloffset": 0,
              "linematch": "def test_remove_not_present_project(monkeypatch, config_with_project):",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 121,
              "coloffset": 0,
              "linematch": "def test_remove_project_present(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 17,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "def mock_update(config_data):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 61,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n"
            },
            {
              "lineno": 64,
              "coloffset": 4,
              "linematch": "def mock_update(config_file):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 78,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 90,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    "
            },
            {
              "lineno": 93,
              "coloffset": 4,
              "linematch": "def mock_os_sytem(command):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n"
            },
            {
              "lineno": 96,
              "coloffset": 4,
              "linematch": "def mock_os_chdir(dir_name):",
              "linematch_context": "    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)"
            },
            {
              "lineno": 112,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
            },
            {
              "lineno": 125,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    "
            },
            {
              "lineno": 128,
              "coloffset": 4,
              "linematch": "def mock_update(config_data):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/utils/helpers.py",
        "check": {
          "id": "ANNOT001",
          "name": "missing-annotations",
          "description": "A function does not explicitly annotate arguments/parameters or the expected output",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[not(args/arg/annotation) or not(returns)]",
          "passed": false,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 4,
              "linematch": "def update(cls,config_data):",
              "linematch_context": "    This class is used for operations on settings.json file.\n    setting.json file servers as basic configuration for the project\n    \"\"\"\n    @classmethod\n    def update(cls,config_data):\n        \"\"\"\n        Creates the setting.json file\n        \"\"\"\n        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)"
            },
            {
              "lineno": 21,
              "coloffset": 4,
              "linematch": "def read(cls):",
              "linematch_context": "        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)"
            },
            {
              "lineno": 42,
              "coloffset": 4,
              "linematch": "def list_projects(cls,incomplete: str):",
              "linematch_context": "    editor_list = ['VSCode','Sublime Text']\n\n\n    @classmethod\n    def list_projects(cls,incomplete: str):\n        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []"
            },
            {
              "lineno": 54,
              "coloffset": 4,
              "linematch": "def list_of_editors(cls,incomplete:str):",
              "linematch_context": "                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/test_main.py",
        "check": {
          "id": "F001",
          "name": "nested-depth",
          "description": "Ensure the depth of nesting within functions does not exceed the set value.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef//FunctionDef/ancestor::*",
          "passed": true,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def test_see_with_no_projects(monkeypatch, config_with_no_project):",
              "linematch_context": "\n# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project"
            },
            {
              "lineno": 26,
              "coloffset": 0,
              "linematch": "def test_see_with_projects(monkeypatch, config_with_project):",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 40,
              "coloffset": 0,
              "linematch": "def test_add_new_project(monkeypatch, config_with_project):",
              "linematch_context": "    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 57,
              "coloffset": 0,
              "linematch": "def test_add_present_project(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 74,
              "coloffset": 0,
              "linematch": "def test_open_project_not_present(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 86,
              "coloffset": 0,
              "linematch": "def test_open_project_present(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 108,
              "coloffset": 0,
              "linematch": "def test_remove_not_present_project(monkeypatch, config_with_project):",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            },
            {
              "lineno": 121,
              "coloffset": 0,
              "linematch": "def test_remove_project_present(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/main.py",
        "check": {
          "id": "C002",
          "name": "nested-loop-conditions",
          "description": "Ensure the presence of nested loop-conditions (e.g., for{if{}}) in a function.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[//(If/following-sibling::For | For/following-sibling::If)]",
          "passed": true,
          "matches": [
            {
              "lineno": 13,
              "coloffset": 0,
              "linematch": "def version_callback(value: bool):",
              "linematch_context": "from typing import Optional\n\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n"
            },
            {
              "lineno": 20,
              "coloffset": 0,
              "linematch": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):",
              "linematch_context": "        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")"
            },
            {
              "lineno": 30,
              "coloffset": 0,
              "linematch": "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):",
              "linematch_context": "        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()"
            },
            {
              "lineno": 49,
              "coloffset": 0,
              "linematch": "def see():",
              "linematch_context": "    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:"
            },
            {
              "lineno": 68,
              "coloffset": 0,
              "linematch": "def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
              "linematch_context": "        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False"
            },
            {
              "lineno": 92,
              "coloffset": 0,
              "linematch": "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):",
              "linematch_context": "        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/tests/test_code_opener_cli.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/Assert",
          "passed": false,
          "matches": [
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "assert __version__ == '1.0.1'",
              "linematch_context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/test_main.py",
        "check": {
          "id": "NOA001",
          "name": "number-of-assertions",
          "description": "Ensure the presence of assertions within function bodies.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/Assert",
          "passed": false,
          "matches": [
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 23,
              "coloffset": 4,
              "linematch": "assert \"Seems like you have not added any project yet!!!\" in result.stdout ",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project"
            },
            {
              "lineno": 35,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):"
            },
            {
              "lineno": 36,
              "coloffset": 4,
              "linematch": "assert \"Project Name\" in result.stdout",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 37,
              "coloffset": 4,
              "linematch": "assert \"abc\" in result.stdout ",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
              "linematch_context": "    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\""
            },
            {
              "lineno": 54,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present"
            },
            {
              "lineno": 55,
              "coloffset": 4,
              "linematch": "assert \"Project added successfully!!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\""
            },
            {
              "lineno": 71,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 1",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present"
            },
            {
              "lineno": 72,
              "coloffset": 4,
              "linematch": "assert \"Project with this name already present!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\""
            },
            {
              "lineno": 83,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present"
            },
            {
              "lineno": 84,
              "coloffset": 4,
              "linematch": "assert \"Project Not Found!\" in result.stdout",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\""
            },
            {
              "lineno": 104,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 105,
              "coloffset": 4,
              "linematch": "assert \"Project Not Found!\" not in result.stdout",
              "linematch_context": "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added"
            },
            {
              "lineno": 106,
              "coloffset": 4,
              "linematch": "assert \"Project Found!\" in result.stdout",
              "linematch_context": "\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\""
            },
            {
              "lineno": 118,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present"
            },
            {
              "lineno": 119,
              "coloffset": 4,
              "linematch": "assert \"Project with this name is not present!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\""
            },
            {
              "lineno": 135,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "assert \"Removed Successfully!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/tests/test_code_opener_cli.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods that start with 'test_'.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "from code_opener_cli import __version__\n\n\ndef test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "assert __version__ == '1.0.1'",
              "linematch_context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/test_main.py",
        "check": {
          "id": "LOF001",
          "name": "count-test-method-lines",
          "description": "Count the lines within test methods that start with 'test_'.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[starts-with(@name, \"test_\")]/body/*",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n"
            },
            {
              "lineno": 17,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 20,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n"
            },
            {
              "lineno": 21,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"see\"])",
              "linematch_context": "    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):"
            },
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 23,
              "coloffset": 4,
              "linematch": "assert \"Seems like you have not added any project yet!!!\" in result.stdout ",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project"
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 33,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
            },
            {
              "lineno": 34,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"see\"])",
              "linematch_context": "    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n"
            },
            {
              "lineno": 35,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):"
            },
            {
              "lineno": 36,
              "coloffset": 4,
              "linematch": "assert \"Project Name\" in result.stdout",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 37,
              "coloffset": 4,
              "linematch": "assert \"abc\" in result.stdout ",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
              "linematch_context": "    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\""
            },
            {
              "lineno": 41,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "def mock_update(config_data):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout"
            },
            {
              "lineno": 51,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
              "linematch_context": "    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n"
            },
            {
              "lineno": 53,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"add\"],input=\"test-name\")",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 54,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present"
            },
            {
              "lineno": 55,
              "coloffset": 4,
              "linematch": "assert \"Project added successfully!!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\""
            },
            {
              "lineno": 58,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n"
            },
            {
              "lineno": 61,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n"
            },
            {
              "lineno": 64,
              "coloffset": 4,
              "linematch": "def mock_update(config_file):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 67,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout"
            },
            {
              "lineno": 68,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
              "linematch_context": "    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n"
            },
            {
              "lineno": 70,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"add\"],input=\"abc\")",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 71,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 1",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present"
            },
            {
              "lineno": 72,
              "coloffset": 4,
              "linematch": "assert \"Project with this name already present!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\""
            },
            {
              "lineno": 75,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 78,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 81,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):"
            },
            {
              "lineno": 82,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"open\", \"test_project\"])",
              "linematch_context": "    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 83,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present"
            },
            {
              "lineno": 84,
              "coloffset": 4,
              "linematch": "assert \"Project Not Found!\" in result.stdout",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\""
            },
            {
              "lineno": 87,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 90,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    "
            },
            {
              "lineno": 93,
              "coloffset": 4,
              "linematch": "def mock_os_sytem(command):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n"
            },
            {
              "lineno": 96,
              "coloffset": 4,
              "linematch": "def mock_os_chdir(dir_name):",
              "linematch_context": "    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)"
            },
            {
              "lineno": 99,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 100,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(os, 'system', mock_os_sytem)",
              "linematch_context": "    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout"
            },
            {
              "lineno": 101,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(os, 'chdir', mock_os_chdir)",
              "linematch_context": "        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout"
            },
            {
              "lineno": 103,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"open\", \"abc\"])",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):"
            },
            {
              "lineno": 104,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 105,
              "coloffset": 4,
              "linematch": "assert \"Project Not Found!\" not in result.stdout",
              "linematch_context": "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added"
            },
            {
              "lineno": 106,
              "coloffset": 4,
              "linematch": "assert \"Project Found!\" in result.stdout",
              "linematch_context": "\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\""
            },
            {
              "lineno": 109,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 112,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
            },
            {
              "lineno": 115,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n"
            },
            {
              "lineno": 117,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")",
              "linematch_context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 118,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present"
            },
            {
              "lineno": 119,
              "coloffset": 4,
              "linematch": "assert \"Project with this name is not present!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\""
            },
            {
              "lineno": 122,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 125,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    "
            },
            {
              "lineno": 128,
              "coloffset": 4,
              "linematch": "def mock_update(config_data):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 131,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout"
            },
            {
              "lineno": 132,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
              "linematch_context": "    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 134,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "assert \"Removed Successfully!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/tests/test_code_opener_cli.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 5,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "from code_opener_cli import __version__\n\n\ndef test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'"
            },
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "assert __version__ == '1.0.1'",
              "linematch_context": "def test_version():\n    \"\"\"\n    Testing the version update \n    \"\"\"\n    assert __version__ == '1.0.1'"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/main.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "if value:",
              "linematch_context": "\napp = typer.Typer()\n\ndef version_callback(value: bool):\n    if value:\n        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n        raise typer.Exit()\n\n\n@app.callback(invoke_without_command=True)"
            },
            {
              "lineno": 21,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "\n\n@app.callback(invoke_without_command=True)\ndef callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)"
            },
            {
              "lineno": 24,
              "coloffset": 4,
              "linematch": "if ctx.invoked_subcommand is None:",
              "linematch_context": "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n    \"\"\"\n    CLI to handle your projects and Editors smartly\n    \"\"\"\n    if ctx.invoked_subcommand is None:\n        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()"
            },
            {
              "lineno": 31,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "        typer.echo('Use ' +command + ' to get help with commands')\n    \n@app.command()\ndef add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    "
            },
            {
              "lineno": 34,
              "coloffset": 4,
              "linematch": "path = os.getcwd()",
              "linematch_context": "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\","
            },
            {
              "lineno": 35,
              "coloffset": 4,
              "linematch": "current_config = JsonDataOperations.read()",
              "linematch_context": "    \"\"\"\n    Add a project with PROJECT_NAME\n    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)"
            },
            {
              "lineno": 37,
              "coloffset": 4,
              "linematch": "for project_item in current_config['projects']:",
              "linematch_context": "    \"\"\"\n    path = os.getcwd()\n    current_config = JsonDataOperations.read()\n    \n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            echo_text = typer.style(\"Project with this name already present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "current_config['projects'].append({'project_name':project_name, 'path':path})",
              "linematch_context": "             bg=typer.colors.RED,fg=typer.colors.WHITE)\n            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            \n    current_config['projects'].append({'project_name':project_name, 'path':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():"
            },
            {
              "lineno": 45,
              "coloffset": 4,
              "linematch": "JsonDataOperations.update(current_config)",
              "linematch_context": "            typer.echo(echo_text, err=True)\n            raise typer.Exit(code=1)\n            \n    current_config['projects'].append({'project_name':project_name, 'path':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\""
            },
            {
              "lineno": 46,
              "coloffset": 4,
              "linematch": "typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)",
              "linematch_context": "            raise typer.Exit(code=1)\n            \n    current_config['projects'].append({'project_name':project_name, 'path':path})\n    JsonDataOperations.update(current_config)\n    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n\n@app.command()\ndef see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')"
            },
            {
              "lineno": 53,
              "coloffset": 4,
              "linematch": "current_config = JsonDataOperations.read()",
              "linematch_context": "def see():\n    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()"
            },
            {
              "lineno": 54,
              "coloffset": 4,
              "linematch": "if len(current_config['projects'])==0:",
              "linematch_context": "    \"\"\"\n    See list of all projects that are added\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    if len(current_config['projects'])==0:\n        typer.echo('Seems like you have not added any project yet!!!')\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n"
            },
            {
              "lineno": 60,
              "coloffset": 4,
              "linematch": "col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)",
              "linematch_context": "        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")"
            },
            {
              "lineno": 61,
              "coloffset": 4,
              "linematch": "typer.echo(col)",
              "linematch_context": "        typer.echo('Use ' +command + ' to add new project')\n        raise typer.Exit()\n\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n"
            },
            {
              "lineno": 62,
              "coloffset": 4,
              "linematch": "typer.echo(\"=======================\")",
              "linematch_context": "        raise typer.Exit()\n\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()"
            },
            {
              "lineno": 63,
              "coloffset": 4,
              "linematch": "for project_item in current_config['projects']:",
              "linematch_context": "\n    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):"
            },
            {
              "lineno": 65,
              "coloffset": 4,
              "linematch": "typer.echo(\"=======================\")",
              "linematch_context": "    typer.echo(col)\n    typer.echo(\"=======================\")\n    for project_item in current_config['projects']:\n        typer.echo(project_item['project_name'])\n    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME"
            },
            {
              "lineno": 69,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    typer.echo(\"=======================\")\n\n@app.command()\ndef open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:"
            },
            {
              "lineno": 72,
              "coloffset": 4,
              "linematch": "current_config = JsonDataOperations.read()",
              "linematch_context": "def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)"
            },
            {
              "lineno": 73,
              "coloffset": 4,
              "linematch": "found = False",
              "linematch_context": "    \"\"\"\n    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item['path'])"
            },
            {
              "lineno": 74,
              "coloffset": 4,
              "linematch": "for project_item in current_config['projects']:",
              "linematch_context": "    Opens a Project with PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    found = False\n    for project_item in current_config['projects']:\n        if project_item['project_name']==project_name:\n            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n            typer.echo(found)\n            os.chdir(project_item['path'])\n            os.system(current_config['default_editor'])"
            },
            {
              "lineno": 83,
              "coloffset": 4,
              "linematch": "if found == False:",
              "linematch_context": "            os.system(current_config['default_editor'])\n            found = True\n            break\n\n    if found == False:\n        echo_text = project_name + \": Project Not Found!\"\n        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n        typer.echo(not_found,  err=True)\n        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n        typer.echo('Use ' +command + ' to add new project')"
            },
            {
              "lineno": 93,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "        raise typer.Exit()\n\n@app.command()\ndef remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False"
            },
            {
              "lineno": 96,
              "coloffset": 4,
              "linematch": "current_config = JsonDataOperations.read()",
              "linematch_context": "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:"
            },
            {
              "lineno": 97,
              "coloffset": 4,
              "linematch": "index = -1",
              "linematch_context": "    \"\"\"\n    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)"
            },
            {
              "lineno": 98,
              "coloffset": 4,
              "linematch": "found = False",
              "linematch_context": "    Removes a project with specified PROJECT_NAME\n    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True"
            },
            {
              "lineno": 99,
              "coloffset": 4,
              "linematch": "for project_item in current_config['projects']:",
              "linematch_context": "    \"\"\"\n    current_config = JsonDataOperations.read()\n    index = -1\n    found = False\n    for project_item in current_config['projects']:\n        index += 1\n        if project_item['project_name']==project_name:\n            current_config['projects'].pop(index)\n            found = True\n            JsonDataOperations.update(current_config)"
            },
            {
              "lineno": 107,
              "coloffset": 4,
              "linematch": "if found==False:",
              "linematch_context": "            found = True\n            JsonDataOperations.update(current_config)\n            break\n\n    if found==False:\n        echo_text = typer.style(\"Project with this name is not present!\",\n             bg=typer.colors.RED,fg=typer.colors.WHITE)\n        typer.echo(echo_text, err=True)\n    else:\n        typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/conftest.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 8,
              "coloffset": 4,
              "linematch": "return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}",
              "linematch_context": "import pytest\n\n@pytest.fixture(scope=\"package\")\ndef config_with_project():\n    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}"
            },
            {
              "lineno": 12,
              "coloffset": 4,
              "linematch": "return {\"default_editor\": \"code .\", \"projects\": []}",
              "linematch_context": "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n\n@pytest.fixture(scope=\"package\")\ndef config_with_no_project():\n    return {\"default_editor\": \"code .\", \"projects\": []}"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/test_main.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "# Runner Object\nrunner = CliRunner()\n\ndef test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n"
            },
            {
              "lineno": 17,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_see_with_no_projects(monkeypatch, config_with_no_project):\n    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 18,
              "coloffset": 8,
              "linematch": "return config_with_no_project",
              "linematch_context": "    \"\"\"\n    Test reading the lists of projects, when there is not project Added\n    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
            },
            {
              "lineno": 20,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n"
            },
            {
              "lineno": 21,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"see\"])",
              "linematch_context": "    def mock_read():\n        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):"
            },
            {
              "lineno": 22,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_no_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 23,
              "coloffset": 4,
              "linematch": "assert \"Seems like you have not added any project yet!!!\" in result.stdout ",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project"
            },
            {
              "lineno": 27,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert \"Seems like you have not added any project yet!!!\" in result.stdout \n\n\ndef test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n"
            },
            {
              "lineno": 30,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_see_with_projects(monkeypatch, config_with_project):\n    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 31,
              "coloffset": 8,
              "linematch": "return config_with_project",
              "linematch_context": "    \"\"\"\n    Test reading the lists of projects, when there is atleast one project\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout"
            },
            {
              "lineno": 33,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
            },
            {
              "lineno": 34,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"see\"])",
              "linematch_context": "    def mock_read():\n        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n"
            },
            {
              "lineno": 35,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_project\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):"
            },
            {
              "lineno": 36,
              "coloffset": 4,
              "linematch": "assert \"Project Name\" in result.stdout",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 37,
              "coloffset": 4,
              "linematch": "assert \"abc\" in result.stdout ",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present"
            },
            {
              "lineno": 38,
              "coloffset": 4,
              "linematch": "assert \"Seems like you have not added any project yet!!!\" not in result.stdout ",
              "linematch_context": "    result = runner.invoke(app, [\"see\"])\n    assert result.exit_code == 0\n    assert \"Project Name\" in result.stdout\n    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\""
            },
            {
              "lineno": 41,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert \"abc\" in result.stdout \n    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n\ndef test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n"
            },
            {
              "lineno": 44,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_add_new_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n"
            },
            {
              "lineno": 45,
              "coloffset": 8,
              "linematch": "return config_with_project",
              "linematch_context": "    \"\"\"\n    Test adding new project when the project name is not already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            },
            {
              "lineno": 47,
              "coloffset": 4,
              "linematch": "def mock_update(config_data):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 48,
              "coloffset": 8,
              "linematch": "return None",
              "linematch_context": "    def mock_read():\n        return config_with_project\n\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
            },
            {
              "lineno": 50,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "\n    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout"
            },
            {
              "lineno": 51,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
              "linematch_context": "    def mock_update(config_data):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n"
            },
            {
              "lineno": 53,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"add\"],input=\"test-name\")",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 54,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present"
            },
            {
              "lineno": 55,
              "coloffset": 4,
              "linematch": "assert \"Project added successfully!!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\""
            },
            {
              "lineno": 58,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project added successfully!!\" in result.stdout\n\ndef test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n"
            },
            {
              "lineno": 61,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_add_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n"
            },
            {
              "lineno": 62,
              "coloffset": 8,
              "linematch": "return config_with_project",
              "linematch_context": "    \"\"\"\n    Test adding new project when the project name is already present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            },
            {
              "lineno": 64,
              "coloffset": 4,
              "linematch": "def mock_update(config_file):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 65,
              "coloffset": 8,
              "linematch": "return None",
              "linematch_context": "    def mock_read():\n        return config_with_project\n\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")"
            },
            {
              "lineno": 67,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "\n    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout"
            },
            {
              "lineno": 68,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
              "linematch_context": "    def mock_update(config_file):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n"
            },
            {
              "lineno": 70,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"add\"],input=\"abc\")",
              "linematch_context": "\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 71,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 1",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present"
            },
            {
              "lineno": 72,
              "coloffset": 4,
              "linematch": "assert \"Project with this name already present!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"add\"],input=\"abc\")\n    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\""
            },
            {
              "lineno": 75,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 1\n    assert \"Project with this name already present!\" in result.stdout\n\ndef test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 78,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_open_project_not_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 79,
              "coloffset": 8,
              "linematch": "return config_with_project",
              "linematch_context": "    \"\"\"\n    Test opening the project when the project name is not present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout"
            },
            {
              "lineno": 81,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):"
            },
            {
              "lineno": 82,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"open\", \"test_project\"])",
              "linematch_context": "    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 83,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present"
            },
            {
              "lineno": 84,
              "coloffset": 4,
              "linematch": "assert \"Project Not Found!\" in result.stdout",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\""
            },
            {
              "lineno": 87,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 90,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    "
            },
            {
              "lineno": 91,
              "coloffset": 8,
              "linematch": "return config_with_project",
              "linematch_context": "    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):"
            },
            {
              "lineno": 93,
              "coloffset": 4,
              "linematch": "def mock_os_sytem(command):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n"
            },
            {
              "lineno": 94,
              "coloffset": 8,
              "linematch": "return None",
              "linematch_context": "    def mock_read():\n        return config_with_project\n    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            },
            {
              "lineno": 96,
              "coloffset": 4,
              "linematch": "def mock_os_chdir(dir_name):",
              "linematch_context": "    \n    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)"
            },
            {
              "lineno": 97,
              "coloffset": 8,
              "linematch": "return None",
              "linematch_context": "    def mock_os_sytem(command):\n        return None\n    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n"
            },
            {
              "lineno": 99,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \n    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0"
            },
            {
              "lineno": 100,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(os, 'system', mock_os_sytem)",
              "linematch_context": "    def mock_os_chdir(dir_name):\n        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout"
            },
            {
              "lineno": 101,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(os, 'chdir', mock_os_chdir)",
              "linematch_context": "        return None\n\n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout"
            },
            {
              "lineno": 103,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"open\", \"abc\"])",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):"
            },
            {
              "lineno": 104,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(os, 'system', mock_os_sytem)\n    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 105,
              "coloffset": 4,
              "linematch": "assert \"Project Not Found!\" not in result.stdout",
              "linematch_context": "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)\n\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added"
            },
            {
              "lineno": 106,
              "coloffset": 4,
              "linematch": "assert \"Project Found!\" in result.stdout",
              "linematch_context": "\n    result = runner.invoke(app, [\"open\", \"abc\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\""
            },
            {
              "lineno": 109,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert \"Project Not Found!\" not in result.stdout\n    assert \"Project Found!\" in result.stdout\n\ndef test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 112,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_remove_not_present_project(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
            },
            {
              "lineno": 113,
              "coloffset": 8,
              "linematch": "return config_with_project",
              "linematch_context": "    \"\"\"\n    Test removing the project when the project is not already added\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0"
            },
            {
              "lineno": 115,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n"
            },
            {
              "lineno": 117,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")",
              "linematch_context": "        return config_with_project\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\""
            },
            {
              "lineno": 118,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present"
            },
            {
              "lineno": 119,
              "coloffset": 4,
              "linematch": "assert \"Project with this name is not present!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n\n    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\""
            },
            {
              "lineno": 122,
              "coloffset": 4,
              "linematch": "\"\"\"",
              "linematch_context": "    assert result.exit_code == 0\n    assert \"Project with this name is not present!\" in result.stdout\n\ndef test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    "
            },
            {
              "lineno": 125,
              "coloffset": 4,
              "linematch": "def mock_read():",
              "linematch_context": "def test_remove_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    "
            },
            {
              "lineno": 126,
              "coloffset": 8,
              "linematch": "return config_with_project",
              "linematch_context": "    \"\"\"\n    Test removing the project when the project is present\n    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            },
            {
              "lineno": 128,
              "coloffset": 4,
              "linematch": "def mock_update(config_data):",
              "linematch_context": "    \"\"\"\n    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n"
            },
            {
              "lineno": 129,
              "coloffset": 8,
              "linematch": "return None",
              "linematch_context": "    def mock_read():\n        return config_with_project\n    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")"
            },
            {
              "lineno": 131,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'read', mock_read)",
              "linematch_context": "    \n    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout"
            },
            {
              "lineno": 132,
              "coloffset": 4,
              "linematch": "monkeypatch.setattr(JsonDataOperations, 'update', mock_update)",
              "linematch_context": "    def mock_update(config_data):\n        return None\n    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 134,
              "coloffset": 4,
              "linematch": "result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")",
              "linematch_context": "    \n    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 135,
              "coloffset": 4,
              "linematch": "assert result.exit_code == 0",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            },
            {
              "lineno": 136,
              "coloffset": 4,
              "linematch": "assert \"Removed Successfully!\" in result.stdout",
              "linematch_context": "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n\n    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n    assert result.exit_code == 0\n    assert \"Removed Successfully!\" in result.stdout\n"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/utils/helpers.py",
        "check": {
          "id": "CML001",
          "name": "count-method-lines",
          "description": "Count the lines within methods.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef/body/* | .//FunctionDef/body/Return",
          "passed": false,
          "matches": [
            {
              "lineno": 14,
              "coloffset": 8,
              "linematch": "\"\"\"",
              "linematch_context": "    setting.json file servers as basic configuration for the project\n    \"\"\"\n    @classmethod\n    def update(cls,config_data):\n        \"\"\"\n        Creates the setting.json file\n        \"\"\"\n        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)\n"
            },
            {
              "lineno": 17,
              "coloffset": 8,
              "linematch": "with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:",
              "linematch_context": "    def update(cls,config_data):\n        \"\"\"\n        Creates the setting.json file\n        \"\"\"\n        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        \"\"\" "
            },
            {
              "lineno": 22,
              "coloffset": 8,
              "linematch": "\"\"\" ",
              "linematch_context": "            json.dump(config_data, outfile)\n\n    @classmethod\n    def read(cls):\n        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()"
            },
            {
              "lineno": 25,
              "coloffset": 8,
              "linematch": "f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)",
              "linematch_context": "    def read(cls):\n        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n"
            },
            {
              "lineno": 26,
              "coloffset": 8,
              "linematch": "data = json.load(f)",
              "linematch_context": "        \"\"\" \n        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:"
            },
            {
              "lineno": 27,
              "coloffset": 8,
              "linematch": "f.close()",
              "linematch_context": "        Reads the setting.json file\n        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:\n    \"\"\""
            },
            {
              "lineno": 28,
              "coloffset": 8,
              "linematch": "return data",
              "linematch_context": "        \"\"\"\n        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n        data = json.load(f)\n        f.close()\n        return data\n        \n\nclass AutoComplete:\n    \"\"\"\n    This class is used for providing autocomplete suggestions"
            },
            {
              "lineno": 43,
              "coloffset": 8,
              "linematch": "\"\"\"",
              "linematch_context": "\n\n    @classmethod\n    def list_projects(cls,incomplete: str):\n        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:"
            },
            {
              "lineno": 46,
              "coloffset": 8,
              "linematch": "current_config = JsonDataOperations.read()",
              "linematch_context": "    def list_projects(cls,incomplete: str):\n        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list"
            },
            {
              "lineno": 47,
              "coloffset": 8,
              "linematch": "project_name_list = []",
              "linematch_context": "        \"\"\"\n        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n"
            },
            {
              "lineno": 48,
              "coloffset": 8,
              "linematch": "for project_item in current_config['projects']:",
              "linematch_context": "        Provides autocomplete for list of projects\n        \"\"\"\n        current_config = JsonDataOperations.read()\n        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod"
            },
            {
              "lineno": 51,
              "coloffset": 8,
              "linematch": "return project_name_list",
              "linematch_context": "        project_name_list = []\n        for project_item in current_config['projects']:\n            if project_item['project_name'].startswith(incomplete):\n                project_name_list.append(project_item['project_name'])\n        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors"
            },
            {
              "lineno": 55,
              "coloffset": 8,
              "linematch": "\"\"\"",
              "linematch_context": "        return project_name_list\n\n    @classmethod\n    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):"
            },
            {
              "lineno": 58,
              "coloffset": 8,
              "linematch": "editors_matched = []",
              "linematch_context": "    def list_of_editors(cls,incomplete:str):\n        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor"
            },
            {
              "lineno": 59,
              "coloffset": 8,
              "linematch": "for editor in cls.editor_list:",
              "linematch_context": "        \"\"\"\n        Provides autocomplete for list of editors\n        \"\"\"\n        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor"
            },
            {
              "lineno": 62,
              "coloffset": 8,
              "linematch": "return editor",
              "linematch_context": "        editors_matched = []\n        for editor in cls.editor_list:\n            if editor.startswith(incomplete):\n                editors_matched.append(editor)\n        return editor"
            }
          ]
        }
      },
      {
        "filename": "/Users/danielbekele/jsem/SEERS/scripts/analyzer/demo/code-opener-cli/code_opener_cli/tests/test_main.py",
        "check": {
          "id": "MRET001",
          "name": "multiple-returns-in-function",
          "description": "Detect functions with multiple return statements.",
          "min": 1,
          "max": 10,
          "pattern": ".//FunctionDef[count(body//Return) > 2]",
          "passed": true,
          "matches": [
            {
              "lineno": 86,
              "coloffset": 0,
              "linematch": "def test_open_project_present(monkeypatch, config_with_project):",
              "linematch_context": "    result = runner.invoke(app, [\"open\", \"test_project\"])\n    assert result.exit_code == 0\n    assert \"Project Not Found!\" in result.stdout\n\ndef test_open_project_present(monkeypatch, config_with_project):\n    \"\"\"\n    Test opening the project when the project name is present\n    \"\"\"\n    def mock_read():\n        return config_with_project"
            }
          ]
        }
      }
    ]
  },
  "mutmut_result": {
    "disabled": 0,
    "errors": 2,
    "failures": 142,
    "tests": 222,
    "time": 0,
    "testsuite": [
      {
        "disabled": 0,
        "errors": 2,
        "failures": 142,
        "name": "mutmut",
        "skipped": 0,
        "tests": 222,
        "time": 0,
        "testcase": [
          {
            "name": "Mutant #1",
            "file": "code_opener_cli/path_definitions.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- code_opener_cli/path_definitions.py\n+++ code_opener_cli/path_definitions.py\n@@ -9,7 +9,7 @@\n     \"\"\"\n     The class containing Paths for tests,package root and other directories in package\n     \"\"\"\n-    COPEN_ROOT_PATH = os.path.dirname(__file__)\n+    COPEN_ROOT_PATH = None\n \n     # Resources Path\n     RESOURCE_PATH = os.path.join(COPEN_ROOT_PATH,'resources')\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    COPEN_ROOT_PATH = os.path.dirname(__file__)"
            ]
          },
          {
            "name": "Mutant #2",
            "file": "code_opener_cli/path_definitions.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- code_opener_cli/path_definitions.py\n+++ code_opener_cli/path_definitions.py\n@@ -12,5 +12,5 @@\n     COPEN_ROOT_PATH = os.path.dirname(__file__)\n \n     # Resources Path\n-    RESOURCE_PATH = os.path.join(COPEN_ROOT_PATH,'resources')\n+    RESOURCE_PATH = os.path.join(COPEN_ROOT_PATH,'XXresourcesXX')\n     CONFIG_FILE_PATH = os.path.join(RESOURCE_PATH, DefaultConfiguration.CONFIGURATION_FILE_NAME.value)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    RESOURCE_PATH = os.path.join(COPEN_ROOT_PATH,'resources')"
            ]
          },
          {
            "name": "Mutant #3",
            "file": "code_opener_cli/path_definitions.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- code_opener_cli/path_definitions.py\n+++ code_opener_cli/path_definitions.py\n@@ -12,5 +12,5 @@\n     COPEN_ROOT_PATH = os.path.dirname(__file__)\n \n     # Resources Path\n-    RESOURCE_PATH = os.path.join(COPEN_ROOT_PATH,'resources')\n+    RESOURCE_PATH = None\n     CONFIG_FILE_PATH = os.path.join(RESOURCE_PATH, DefaultConfiguration.CONFIGURATION_FILE_NAME.value)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    RESOURCE_PATH = os.path.join(COPEN_ROOT_PATH,'resources')"
            ]
          },
          {
            "name": "Mutant #4",
            "file": "code_opener_cli/path_definitions.py",
            "line": 16,
            "failure": [
              {
                "inner": "--- code_opener_cli/path_definitions.py\n+++ code_opener_cli/path_definitions.py\n@@ -13,4 +13,4 @@\n \n     # Resources Path\n     RESOURCE_PATH = os.path.join(COPEN_ROOT_PATH,'resources')\n-    CONFIG_FILE_PATH = os.path.join(RESOURCE_PATH, DefaultConfiguration.CONFIGURATION_FILE_NAME.value)\n+    CONFIG_FILE_PATH = None\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    CONFIG_FILE_PATH = os.path.join(RESOURCE_PATH, DefaultConfiguration.CONFIGURATION_FILE_NAME.value)"
            ]
          },
          {
            "name": "Mutant #5",
            "file": "code_opener_cli/main.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -8,7 +8,7 @@\n from code_opener_cli import __version__\n from typing import Optional\n \n-app = typer.Typer()\n+app = None\n \n def version_callback(value: bool):\n     if value:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "app = typer.Typer()"
            ]
          },
          {
            "name": "Mutant #6",
            "file": "code_opener_cli/main.py",
            "line": 15,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -12,7 +12,7 @@\n \n def version_callback(value: bool):\n     if value:\n-        typer.echo(f\"Code Opener CLI Version: {__version__}\")\n+        typer.echo(f\"XXCode Opener CLI Version: {__version__}XX\")\n         raise typer.Exit()\n \n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo(f\"Code Opener CLI Version: {__version__}\")"
            ]
          },
          {
            "name": "Mutant #7",
            "file": "code_opener_cli/main.py",
            "line": 19,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -16,7 +16,7 @@\n         raise typer.Exit()\n \n \n-@app.callback(invoke_without_command=True)\n+@app.callback(invoke_without_command=False)\n def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n     \"\"\"\n     CLI to handle your projects and Editors smartly\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@app.callback(invoke_without_command=True)"
            ]
          },
          {
            "name": "Mutant #8",
            "file": "code_opener_cli/main.py",
            "line": 19,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -15,8 +15,6 @@\n         typer.echo(f\"Code Opener CLI Version: {__version__}\")\n         raise typer.Exit()\n \n-\n-@app.callback(invoke_without_command=True)\n def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n     \"\"\"\n     CLI to handle your projects and Editors smartly\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@app.callback(invoke_without_command=True)"
            ]
          },
          {
            "name": "Mutant #9",
            "file": "code_opener_cli/main.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -17,7 +17,7 @@\n \n \n @app.callback(invoke_without_command=True)\n-def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):\n+def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"XX--versionXX\", callback=version_callback)):\n     \"\"\"\n     CLI to handle your projects and Editors smartly\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def callback(ctx: typer.Context,version: Optional[bool] = typer.Option(None, \"--version\", callback=version_callback)):"
            ]
          },
          {
            "name": "Mutant #10",
            "file": "code_opener_cli/main.py",
            "line": 24,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -21,7 +21,7 @@\n     \"\"\"\n     CLI to handle your projects and Editors smartly\n     \"\"\"\n-    if ctx.invoked_subcommand is None:\n+    if ctx.invoked_subcommand is not None:\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n         command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to get help with commands')\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if ctx.invoked_subcommand is None:"
            ]
          },
          {
            "name": "Mutant #11",
            "file": "code_opener_cli/main.py",
            "line": 25,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -22,7 +22,7 @@\n     CLI to handle your projects and Editors smartly\n     \"\"\"\n     if ctx.invoked_subcommand is None:\n-        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n+        typer.echo(\"XXHi, Welcome to Code Opener CLI \ud83d\ude00XX\")\n         command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to get help with commands')\n     \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")"
            ]
          },
          {
            "name": "Mutant #12",
            "file": "code_opener_cli/main.py",
            "line": 26,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -23,7 +23,7 @@\n     \"\"\"\n     if ctx.invoked_subcommand is None:\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n-        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n+        command = typer.style(\"XXcopen --helpXX\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to get help with commands')\n     \n @app.command()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)"
            ]
          },
          {
            "name": "Mutant #13",
            "file": "code_opener_cli/main.py",
            "line": 26,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -23,7 +23,7 @@\n     \"\"\"\n     if ctx.invoked_subcommand is None:\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n-        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n+        command = None\n         typer.echo('Use ' +command + ' to get help with commands')\n     \n @app.command()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)"
            ]
          },
          {
            "name": "Mutant #14",
            "file": "code_opener_cli/main.py",
            "line": 27,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -24,7 +24,7 @@\n     if ctx.invoked_subcommand is None:\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n         command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to get help with commands')\n+        typer.echo('XXUse XX' +command + ' to get help with commands')\n     \n @app.command()\n def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to get help with commands')"
            ]
          },
          {
            "name": "Mutant #15",
            "file": "code_opener_cli/main.py",
            "line": 27,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -24,7 +24,7 @@\n     if ctx.invoked_subcommand is None:\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n         command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to get help with commands')\n+        typer.echo('Use ' -command + ' to get help with commands')\n     \n @app.command()\n def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to get help with commands')"
            ]
          },
          {
            "name": "Mutant #16",
            "file": "code_opener_cli/main.py",
            "line": 27,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -24,7 +24,7 @@\n     if ctx.invoked_subcommand is None:\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n         command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to get help with commands')\n+        typer.echo('Use ' +command - ' to get help with commands')\n     \n @app.command()\n def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to get help with commands')"
            ]
          },
          {
            "name": "Mutant #17",
            "file": "code_opener_cli/main.py",
            "line": 27,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -24,7 +24,7 @@\n     if ctx.invoked_subcommand is None:\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n         command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to get help with commands')\n+        typer.echo('Use ' +command + 'XX to get help with commandsXX')\n     \n @app.command()\n def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to get help with commands')"
            ]
          },
          {
            "name": "Mutant #18",
            "file": "code_opener_cli/main.py",
            "line": 29,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -25,8 +25,7 @@\n         typer.echo(\"Hi, Welcome to Code Opener CLI \ud83d\ude00\")\n         command = typer.style(\"copen --help\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to get help with commands')\n-    \n-@app.command()\n+\n def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n     \"\"\"\n     Add a project with PROJECT_NAME\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@app.command()"
            ]
          },
          {
            "name": "Mutant #19",
            "file": "code_opener_cli/main.py",
            "line": 30,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -27,7 +27,7 @@\n         typer.echo('Use ' +command + ' to get help with commands')\n     \n @app.command()\n-def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n+def add(project_name:str =  typer.Option(...,\"XX--project-nameXX\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n     \"\"\"\n     Add a project with PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #20",
            "file": "code_opener_cli/main.py",
            "line": 30,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -27,7 +27,7 @@\n         typer.echo('Use ' +command + ' to get help with commands')\n     \n @app.command()\n-def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n+def add(project_name:str =  typer.Option(...,\"--project-name\",\"XX-pnXX\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n     \"\"\"\n     Add a project with PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #21",
            "file": "code_opener_cli/main.py",
            "line": 30,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -27,7 +27,7 @@\n         typer.echo('Use ' +command + ' to get help with commands')\n     \n @app.command()\n-def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n+def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=False,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n     \"\"\"\n     Add a project with PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #22",
            "file": "code_opener_cli/main.py",
            "line": 30,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -27,7 +27,7 @@\n         typer.echo('Use ' +command + ' to get help with commands')\n     \n @app.command()\n-def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):\n+def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"XXName by which you like to call this project \ud83e\udd7aXX\")):\n     \"\"\"\n     Add a project with PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def add(project_name:str =  typer.Option(...,\"--project-name\",\"-pn\",prompt=True,metavar=\"Name by which you like to call this project \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #23",
            "file": "code_opener_cli/main.py",
            "line": 34,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -31,7 +31,7 @@\n     \"\"\"\n     Add a project with PROJECT_NAME\n     \"\"\"\n-    path = os.getcwd()\n+    path = None\n     current_config = JsonDataOperations.read()\n     \n     for project_item in current_config['projects']:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    path = os.getcwd()"
            ]
          },
          {
            "name": "Mutant #24",
            "file": "code_opener_cli/main.py",
            "line": 35,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -32,7 +32,7 @@\n     Add a project with PROJECT_NAME\n     \"\"\"\n     path = os.getcwd()\n-    current_config = JsonDataOperations.read()\n+    current_config = None\n     \n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    current_config = JsonDataOperations.read()"
            ]
          },
          {
            "name": "Mutant #25",
            "file": "code_opener_cli/main.py",
            "line": 37,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -34,7 +34,7 @@\n     path = os.getcwd()\n     current_config = JsonDataOperations.read()\n     \n-    for project_item in current_config['projects']:\n+    for project_item in current_config['XXprojectsXX']:\n         if project_item['project_name']==project_name:\n             echo_text = typer.style(\"Project with this name already present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for project_item in current_config['projects']:"
            ]
          },
          {
            "name": "Mutant #26",
            "file": "code_opener_cli/main.py",
            "line": 38,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -35,7 +35,7 @@\n     current_config = JsonDataOperations.read()\n     \n     for project_item in current_config['projects']:\n-        if project_item['project_name']==project_name:\n+        if project_item['XXproject_nameXX']==project_name:\n             echo_text = typer.style(\"Project with this name already present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n             typer.echo(echo_text, err=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if project_item['project_name']==project_name:"
            ]
          },
          {
            "name": "Mutant #27",
            "file": "code_opener_cli/main.py",
            "line": 38,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -35,7 +35,7 @@\n     current_config = JsonDataOperations.read()\n     \n     for project_item in current_config['projects']:\n-        if project_item['project_name']==project_name:\n+        if project_item['project_name']!=project_name:\n             echo_text = typer.style(\"Project with this name already present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n             typer.echo(echo_text, err=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if project_item['project_name']==project_name:"
            ]
          },
          {
            "name": "Mutant #28",
            "file": "code_opener_cli/main.py",
            "line": 39,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -36,7 +36,7 @@\n     \n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n-            echo_text = typer.style(\"Project with this name already present!\",\n+            echo_text = typer.style(\"XXProject with this name already present!XX\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n             typer.echo(echo_text, err=True)\n             raise typer.Exit(code=1)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            echo_text = typer.style(\"Project with this name already present!\","
            ]
          },
          {
            "name": "Mutant #29",
            "file": "code_opener_cli/main.py",
            "line": 40,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -36,8 +36,7 @@\n     \n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n-            echo_text = typer.style(\"Project with this name already present!\",\n-             bg=typer.colors.RED,fg=typer.colors.WHITE)\n+            echo_text = None\n             typer.echo(echo_text, err=True)\n             raise typer.Exit(code=1)\n             \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "             bg=typer.colors.RED,fg=typer.colors.WHITE)"
            ]
          },
          {
            "name": "Mutant #30",
            "file": "code_opener_cli/main.py",
            "line": 41,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -38,7 +38,7 @@\n         if project_item['project_name']==project_name:\n             echo_text = typer.style(\"Project with this name already present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n-            typer.echo(echo_text, err=True)\n+            typer.echo(echo_text, err=False)\n             raise typer.Exit(code=1)\n             \n     current_config['projects'].append({'project_name':project_name, 'path':path})\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            typer.echo(echo_text, err=True)"
            ]
          },
          {
            "name": "Mutant #31",
            "file": "code_opener_cli/main.py",
            "line": 42,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -39,7 +39,7 @@\n             echo_text = typer.style(\"Project with this name already present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n             typer.echo(echo_text, err=True)\n-            raise typer.Exit(code=1)\n+            raise typer.Exit(code=2)\n             \n     current_config['projects'].append({'project_name':project_name, 'path':path})\n     JsonDataOperations.update(current_config)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            raise typer.Exit(code=1)"
            ]
          },
          {
            "name": "Mutant #32",
            "file": "code_opener_cli/main.py",
            "line": 44,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -41,7 +41,7 @@\n             typer.echo(echo_text, err=True)\n             raise typer.Exit(code=1)\n             \n-    current_config['projects'].append({'project_name':project_name, 'path':path})\n+    current_config['XXprojectsXX'].append({'project_name':project_name, 'path':path})\n     JsonDataOperations.update(current_config)\n     typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    current_config['projects'].append({'project_name':project_name, 'path':path})"
            ]
          },
          {
            "name": "Mutant #33",
            "file": "code_opener_cli/main.py",
            "line": 44,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -41,7 +41,7 @@\n             typer.echo(echo_text, err=True)\n             raise typer.Exit(code=1)\n             \n-    current_config['projects'].append({'project_name':project_name, 'path':path})\n+    current_config['projects'].append({'XXproject_nameXX':project_name, 'path':path})\n     JsonDataOperations.update(current_config)\n     typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    current_config['projects'].append({'project_name':project_name, 'path':path})"
            ]
          },
          {
            "name": "Mutant #34",
            "file": "code_opener_cli/main.py",
            "line": 44,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -41,7 +41,7 @@\n             typer.echo(echo_text, err=True)\n             raise typer.Exit(code=1)\n             \n-    current_config['projects'].append({'project_name':project_name, 'path':path})\n+    current_config['projects'].append({'project_name':project_name, 'XXpathXX':path})\n     JsonDataOperations.update(current_config)\n     typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    current_config['projects'].append({'project_name':project_name, 'path':path})"
            ]
          },
          {
            "name": "Mutant #35",
            "file": "code_opener_cli/main.py",
            "line": 46,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -43,7 +43,7 @@\n             \n     current_config['projects'].append({'project_name':project_name, 'path':path})\n     JsonDataOperations.update(current_config)\n-    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n+    typer.secho(\"XXProject added successfully!!XX\", fg=typer.colors.BRIGHT_GREEN)\n \n @app.command()\n def see():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)"
            ]
          },
          {
            "name": "Mutant #36",
            "file": "code_opener_cli/main.py",
            "line": 48,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -45,7 +45,6 @@\n     JsonDataOperations.update(current_config)\n     typer.secho(\"Project added successfully!!\", fg=typer.colors.BRIGHT_GREEN)\n \n-@app.command()\n def see():\n     \"\"\"\n     See list of all projects that are added\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@app.command()"
            ]
          },
          {
            "name": "Mutant #37",
            "file": "code_opener_cli/main.py",
            "line": 53,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -50,7 +50,7 @@\n     \"\"\"\n     See list of all projects that are added\n     \"\"\"\n-    current_config = JsonDataOperations.read()\n+    current_config = None\n     if len(current_config['projects'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    current_config = JsonDataOperations.read()"
            ]
          },
          {
            "name": "Mutant #38",
            "file": "code_opener_cli/main.py",
            "line": 54,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -51,7 +51,7 @@\n     See list of all projects that are added\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    if len(current_config['projects'])==0:\n+    if len(current_config['XXprojectsXX'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(current_config['projects'])==0:"
            ]
          },
          {
            "name": "Mutant #39",
            "file": "code_opener_cli/main.py",
            "line": 54,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -51,7 +51,7 @@\n     See list of all projects that are added\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    if len(current_config['projects'])==0:\n+    if len(current_config['projects'])!=0:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(current_config['projects'])==0:"
            ]
          },
          {
            "name": "Mutant #40",
            "file": "code_opener_cli/main.py",
            "line": 54,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -51,7 +51,7 @@\n     See list of all projects that are added\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    if len(current_config['projects'])==0:\n+    if len(current_config['projects'])==1:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if len(current_config['projects'])==0:"
            ]
          },
          {
            "name": "Mutant #41",
            "file": "code_opener_cli/main.py",
            "line": 55,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -52,7 +52,7 @@\n     \"\"\"\n     current_config = JsonDataOperations.read()\n     if len(current_config['projects'])==0:\n-        typer.echo('Seems like you have not added any project yet!!!')\n+        typer.echo('XXSeems like you have not added any project yet!!!XX')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Seems like you have not added any project yet!!!')"
            ]
          },
          {
            "name": "Mutant #42",
            "file": "code_opener_cli/main.py",
            "line": 56,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -53,7 +53,7 @@\n     current_config = JsonDataOperations.read()\n     if len(current_config['projects'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n-        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n+        command = typer.style(\"XXcopen addXX\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)"
            ]
          },
          {
            "name": "Mutant #43",
            "file": "code_opener_cli/main.py",
            "line": 56,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -53,7 +53,7 @@\n     current_config = JsonDataOperations.read()\n     if len(current_config['projects'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n-        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n+        command = None\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)"
            ]
          },
          {
            "name": "Mutant #44",
            "file": "code_opener_cli/main.py",
            "line": 57,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -54,7 +54,7 @@\n     if len(current_config['projects'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('XXUse XX' +command + ' to add new project')\n         raise typer.Exit()\n \n     col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #45",
            "file": "code_opener_cli/main.py",
            "line": 57,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -54,7 +54,7 @@\n     if len(current_config['projects'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('Use ' -command + ' to add new project')\n         raise typer.Exit()\n \n     col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #46",
            "file": "code_opener_cli/main.py",
            "line": 57,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -54,7 +54,7 @@\n     if len(current_config['projects'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('Use ' +command - ' to add new project')\n         raise typer.Exit()\n \n     col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #47",
            "file": "code_opener_cli/main.py",
            "line": 57,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -54,7 +54,7 @@\n     if len(current_config['projects'])==0:\n         typer.echo('Seems like you have not added any project yet!!!')\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('Use ' +command + 'XX to add new projectXX')\n         raise typer.Exit()\n \n     col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #48",
            "file": "code_opener_cli/main.py",
            "line": 60,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -57,7 +57,7 @@\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n-    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n+    col = typer.style(\"XXProject NameXX\",fg=typer.colors.CYAN, bold=True)\n     typer.echo(col)\n     typer.echo(\"=======================\")\n     for project_item in current_config['projects']:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)"
            ]
          },
          {
            "name": "Mutant #49",
            "file": "code_opener_cli/main.py",
            "line": 60,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -57,7 +57,7 @@\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n-    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n+    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=False)\n     typer.echo(col)\n     typer.echo(\"=======================\")\n     for project_item in current_config['projects']:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)"
            ]
          },
          {
            "name": "Mutant #50",
            "file": "code_opener_cli/main.py",
            "line": 60,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -57,7 +57,7 @@\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n-    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n+    col = None\n     typer.echo(col)\n     typer.echo(\"=======================\")\n     for project_item in current_config['projects']:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)"
            ]
          },
          {
            "name": "Mutant #51",
            "file": "code_opener_cli/main.py",
            "line": 62,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -59,7 +59,7 @@\n \n     col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n     typer.echo(col)\n-    typer.echo(\"=======================\")\n+    typer.echo(\"XX=======================XX\")\n     for project_item in current_config['projects']:\n         typer.echo(project_item['project_name'])\n     typer.echo(\"=======================\")\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    typer.echo(\"=======================\")"
            ]
          },
          {
            "name": "Mutant #52",
            "file": "code_opener_cli/main.py",
            "line": 63,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -60,7 +60,7 @@\n     col = typer.style(\"Project Name\",fg=typer.colors.CYAN, bold=True)\n     typer.echo(col)\n     typer.echo(\"=======================\")\n-    for project_item in current_config['projects']:\n+    for project_item in current_config['XXprojectsXX']:\n         typer.echo(project_item['project_name'])\n     typer.echo(\"=======================\")\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for project_item in current_config['projects']:"
            ]
          },
          {
            "name": "Mutant #53",
            "file": "code_opener_cli/main.py",
            "line": 64,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -61,7 +61,7 @@\n     typer.echo(col)\n     typer.echo(\"=======================\")\n     for project_item in current_config['projects']:\n-        typer.echo(project_item['project_name'])\n+        typer.echo(project_item['XXproject_nameXX'])\n     typer.echo(\"=======================\")\n \n @app.command()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo(project_item['project_name'])"
            ]
          },
          {
            "name": "Mutant #54",
            "file": "code_opener_cli/main.py",
            "line": 65,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -62,7 +62,7 @@\n     typer.echo(\"=======================\")\n     for project_item in current_config['projects']:\n         typer.echo(project_item['project_name'])\n-    typer.echo(\"=======================\")\n+    typer.echo(\"XX=======================XX\")\n \n @app.command()\n def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    typer.echo(\"=======================\")"
            ]
          },
          {
            "name": "Mutant #55",
            "file": "code_opener_cli/main.py",
            "line": 67,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -64,7 +64,6 @@\n         typer.echo(project_item['project_name'])\n     typer.echo(\"=======================\")\n \n-@app.command()\n def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n     \"\"\"\n     Opens a Project with PROJECT_NAME\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@app.command()"
            ]
          },
          {
            "name": "Mutant #56",
            "file": "code_opener_cli/main.py",
            "line": 68,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -65,7 +65,7 @@\n     typer.echo(\"=======================\")\n \n @app.command()\n-def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n+def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"XXProject Name which you used while adding \ud83e\udd7aXX\")):\n     \"\"\"\n     Opens a Project with PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def open(project_name:str =  typer.Argument(...,autocompletion=AutoComplete.list_projects,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #57",
            "file": "code_opener_cli/main.py",
            "line": 72,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -69,7 +69,7 @@\n     \"\"\"\n     Opens a Project with PROJECT_NAME\n     \"\"\"\n-    current_config = JsonDataOperations.read()\n+    current_config = None\n     found = False\n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    current_config = JsonDataOperations.read()"
            ]
          },
          {
            "name": "Mutant #58",
            "file": "code_opener_cli/main.py",
            "line": 73,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -70,7 +70,7 @@\n     Opens a Project with PROJECT_NAME\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    found = False\n+    found = True\n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n             found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    found = False"
            ]
          },
          {
            "name": "Mutant #59",
            "file": "code_opener_cli/main.py",
            "line": 73,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -70,7 +70,7 @@\n     Opens a Project with PROJECT_NAME\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    found = False\n+    found = None\n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n             found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    found = False"
            ]
          },
          {
            "name": "Mutant #60",
            "file": "code_opener_cli/main.py",
            "line": 74,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -71,7 +71,7 @@\n     \"\"\"\n     current_config = JsonDataOperations.read()\n     found = False\n-    for project_item in current_config['projects']:\n+    for project_item in current_config['XXprojectsXX']:\n         if project_item['project_name']==project_name:\n             found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n             typer.echo(found)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for project_item in current_config['projects']:"
            ]
          },
          {
            "name": "Mutant #61",
            "file": "code_opener_cli/main.py",
            "line": 75,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -72,7 +72,7 @@\n     current_config = JsonDataOperations.read()\n     found = False\n     for project_item in current_config['projects']:\n-        if project_item['project_name']==project_name:\n+        if project_item['XXproject_nameXX']==project_name:\n             found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n             typer.echo(found)\n             os.chdir(project_item['path'])\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if project_item['project_name']==project_name:"
            ]
          },
          {
            "name": "Mutant #62",
            "file": "code_opener_cli/main.py",
            "line": 75,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -72,7 +72,7 @@\n     current_config = JsonDataOperations.read()\n     found = False\n     for project_item in current_config['projects']:\n-        if project_item['project_name']==project_name:\n+        if project_item['project_name']!=project_name:\n             found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n             typer.echo(found)\n             os.chdir(project_item['path'])\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if project_item['project_name']==project_name:"
            ]
          },
          {
            "name": "Mutant #63",
            "file": "code_opener_cli/main.py",
            "line": 76,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -73,7 +73,7 @@\n     found = False\n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n-            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n+            found = typer.style(\"XXProject Found!XX\", fg=typer.colors.GREEN, bold=True)\n             typer.echo(found)\n             os.chdir(project_item['path'])\n             os.system(current_config['default_editor'])\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)"
            ]
          },
          {
            "name": "Mutant #64",
            "file": "code_opener_cli/main.py",
            "line": 76,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -73,7 +73,7 @@\n     found = False\n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n-            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n+            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=False)\n             typer.echo(found)\n             os.chdir(project_item['path'])\n             os.system(current_config['default_editor'])\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)"
            ]
          },
          {
            "name": "Mutant #65",
            "file": "code_opener_cli/main.py",
            "line": 76,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -73,7 +73,7 @@\n     found = False\n     for project_item in current_config['projects']:\n         if project_item['project_name']==project_name:\n-            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n+            found = None\n             typer.echo(found)\n             os.chdir(project_item['path'])\n             os.system(current_config['default_editor'])\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)"
            ]
          },
          {
            "name": "Mutant #66",
            "file": "code_opener_cli/main.py",
            "line": 78,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -75,7 +75,7 @@\n         if project_item['project_name']==project_name:\n             found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n             typer.echo(found)\n-            os.chdir(project_item['path'])\n+            os.chdir(project_item['XXpathXX'])\n             os.system(current_config['default_editor'])\n             found = True\n             break\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            os.chdir(project_item['path'])"
            ]
          },
          {
            "name": "Mutant #67",
            "file": "code_opener_cli/main.py",
            "line": 79,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -76,7 +76,7 @@\n             found = typer.style(\"Project Found!\", fg=typer.colors.GREEN, bold=True)\n             typer.echo(found)\n             os.chdir(project_item['path'])\n-            os.system(current_config['default_editor'])\n+            os.system(current_config['XXdefault_editorXX'])\n             found = True\n             break\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            os.system(current_config['default_editor'])"
            ]
          },
          {
            "name": "Mutant #68",
            "file": "code_opener_cli/main.py",
            "line": 80,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -77,7 +77,7 @@\n             typer.echo(found)\n             os.chdir(project_item['path'])\n             os.system(current_config['default_editor'])\n-            found = True\n+            found = False\n             break\n \n     if found == False:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            found = True"
            ]
          },
          {
            "name": "Mutant #69",
            "file": "code_opener_cli/main.py",
            "line": 80,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -77,7 +77,7 @@\n             typer.echo(found)\n             os.chdir(project_item['path'])\n             os.system(current_config['default_editor'])\n-            found = True\n+            found = None\n             break\n \n     if found == False:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            found = True"
            ]
          },
          {
            "name": "Mutant #70",
            "file": "code_opener_cli/main.py",
            "line": 81,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -78,7 +78,7 @@\n             os.chdir(project_item['path'])\n             os.system(current_config['default_editor'])\n             found = True\n-            break\n+            continue\n \n     if found == False:\n         echo_text = project_name + \": Project Not Found!\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            break"
            ]
          },
          {
            "name": "Mutant #71",
            "file": "code_opener_cli/main.py",
            "line": 83,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -80,7 +80,7 @@\n             found = True\n             break\n \n-    if found == False:\n+    if found != False:\n         echo_text = project_name + \": Project Not Found!\"\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if found == False:"
            ]
          },
          {
            "name": "Mutant #72",
            "file": "code_opener_cli/main.py",
            "line": 83,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -80,7 +80,7 @@\n             found = True\n             break\n \n-    if found == False:\n+    if found == True:\n         echo_text = project_name + \": Project Not Found!\"\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if found == False:"
            ]
          },
          {
            "name": "Mutant #73",
            "file": "code_opener_cli/main.py",
            "line": 84,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -81,7 +81,7 @@\n             break\n \n     if found == False:\n-        echo_text = project_name + \": Project Not Found!\"\n+        echo_text = project_name - \": Project Not Found!\"\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        echo_text = project_name + \": Project Not Found!\""
            ]
          },
          {
            "name": "Mutant #74",
            "file": "code_opener_cli/main.py",
            "line": 84,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -81,7 +81,7 @@\n             break\n \n     if found == False:\n-        echo_text = project_name + \": Project Not Found!\"\n+        echo_text = project_name + \"XX: Project Not Found!XX\"\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        echo_text = project_name + \": Project Not Found!\""
            ]
          },
          {
            "name": "Mutant #75",
            "file": "code_opener_cli/main.py",
            "line": 84,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -81,7 +81,7 @@\n             break\n \n     if found == False:\n-        echo_text = project_name + \": Project Not Found!\"\n+        echo_text = None\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        echo_text = project_name + \": Project Not Found!\""
            ]
          },
          {
            "name": "Mutant #76",
            "file": "code_opener_cli/main.py",
            "line": 85,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -82,7 +82,7 @@\n \n     if found == False:\n         echo_text = project_name + \": Project Not Found!\"\n-        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n+        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=False)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)"
            ]
          },
          {
            "name": "Mutant #77",
            "file": "code_opener_cli/main.py",
            "line": 85,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -82,7 +82,7 @@\n \n     if found == False:\n         echo_text = project_name + \": Project Not Found!\"\n-        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n+        not_found = None\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)"
            ]
          },
          {
            "name": "Mutant #78",
            "file": "code_opener_cli/main.py",
            "line": 86,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -83,7 +83,7 @@\n     if found == False:\n         echo_text = project_name + \": Project Not Found!\"\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n-        typer.echo(not_found,  err=True)\n+        typer.echo(not_found,  err=False)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo(not_found,  err=True)"
            ]
          },
          {
            "name": "Mutant #79",
            "file": "code_opener_cli/main.py",
            "line": 87,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -84,7 +84,7 @@\n         echo_text = project_name + \": Project Not Found!\"\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n-        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n+        command = typer.style(\"XXcopen addXX\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)"
            ]
          },
          {
            "name": "Mutant #80",
            "file": "code_opener_cli/main.py",
            "line": 87,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -84,7 +84,7 @@\n         echo_text = project_name + \": Project Not Found!\"\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n-        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n+        command = None\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)"
            ]
          },
          {
            "name": "Mutant #81",
            "file": "code_opener_cli/main.py",
            "line": 88,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -85,7 +85,7 @@\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('XXUse XX' +command + ' to add new project')\n         raise typer.Exit()\n \n @app.command()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #82",
            "file": "code_opener_cli/main.py",
            "line": 88,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -85,7 +85,7 @@\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('Use ' -command + ' to add new project')\n         raise typer.Exit()\n \n @app.command()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #83",
            "file": "code_opener_cli/main.py",
            "line": 88,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -85,7 +85,7 @@\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('Use ' +command - ' to add new project')\n         raise typer.Exit()\n \n @app.command()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #84",
            "file": "code_opener_cli/main.py",
            "line": 88,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -85,7 +85,7 @@\n         not_found = typer.style(echo_text, fg=typer.colors.RED, bold=True)\n         typer.echo(not_found,  err=True)\n         command = typer.style(\"copen add\", bg=typer.colors.BRIGHT_WHITE,fg=typer.colors.BLACK)\n-        typer.echo('Use ' +command + ' to add new project')\n+        typer.echo('Use ' +command + 'XX to add new projectXX')\n         raise typer.Exit()\n \n @app.command()\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo('Use ' +command + ' to add new project')"
            ]
          },
          {
            "name": "Mutant #85",
            "file": "code_opener_cli/main.py",
            "line": 91,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -88,7 +88,6 @@\n         typer.echo('Use ' +command + ' to add new project')\n         raise typer.Exit()\n \n-@app.command()\n def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n     \"\"\"\n     Removes a project with specified PROJECT_NAME\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@app.command()"
            ]
          },
          {
            "name": "Mutant #86",
            "file": "code_opener_cli/main.py",
            "line": 92,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -89,7 +89,7 @@\n         raise typer.Exit()\n \n @app.command()\n-def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n+def remove(project_name:str = typer.Option(...,\"XX--project-nameXX\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n     \"\"\"\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #87",
            "file": "code_opener_cli/main.py",
            "line": 92,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -89,7 +89,7 @@\n         raise typer.Exit()\n \n @app.command()\n-def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n+def remove(project_name:str = typer.Option(...,\"--project-name\",\"XX-pnXX\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n     \"\"\"\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #88",
            "file": "code_opener_cli/main.py",
            "line": 92,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -89,7 +89,7 @@\n         raise typer.Exit()\n \n @app.command()\n-def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n+def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=False,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n     \"\"\"\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #89",
            "file": "code_opener_cli/main.py",
            "line": 92,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -89,7 +89,7 @@\n         raise typer.Exit()\n \n @app.command()\n-def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n+def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=False,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n     \"\"\"\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #90",
            "file": "code_opener_cli/main.py",
            "line": 92,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -89,7 +89,7 @@\n         raise typer.Exit()\n \n @app.command()\n-def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):\n+def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"XXProject Name which you used while adding \ud83e\udd7aXX\")):\n     \"\"\"\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "def remove(project_name:str = typer.Option(...,\"--project-name\",\"-pn\",autocompletion=AutoComplete.list_projects,prompt=True,confirmation_prompt=True,metavar=\"Project Name which you used while adding \ud83e\udd7a\")):"
            ]
          },
          {
            "name": "Mutant #91",
            "file": "code_opener_cli/main.py",
            "line": 96,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -93,7 +93,7 @@\n     \"\"\"\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n-    current_config = JsonDataOperations.read()\n+    current_config = None\n     index = -1\n     found = False\n     for project_item in current_config['projects']:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    current_config = JsonDataOperations.read()"
            ]
          },
          {
            "name": "Mutant #92",
            "file": "code_opener_cli/main.py",
            "line": 97,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -94,7 +94,7 @@\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    index = -1\n+    index = +1\n     found = False\n     for project_item in current_config['projects']:\n         index += 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    index = -1"
            ]
          },
          {
            "name": "Mutant #93",
            "file": "code_opener_cli/main.py",
            "line": 97,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -94,7 +94,7 @@\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    index = -1\n+    index = -2\n     found = False\n     for project_item in current_config['projects']:\n         index += 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    index = -1"
            ]
          },
          {
            "name": "Mutant #94",
            "file": "code_opener_cli/main.py",
            "line": 97,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -94,7 +94,7 @@\n     Removes a project with specified PROJECT_NAME\n     \"\"\"\n     current_config = JsonDataOperations.read()\n-    index = -1\n+    index = None\n     found = False\n     for project_item in current_config['projects']:\n         index += 1\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    index = -1"
            ]
          },
          {
            "name": "Mutant #95",
            "file": "code_opener_cli/main.py",
            "line": 98,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -95,7 +95,7 @@\n     \"\"\"\n     current_config = JsonDataOperations.read()\n     index = -1\n-    found = False\n+    found = True\n     for project_item in current_config['projects']:\n         index += 1\n         if project_item['project_name']==project_name:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    found = False"
            ]
          },
          {
            "name": "Mutant #96",
            "file": "code_opener_cli/main.py",
            "line": 98,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -95,7 +95,7 @@\n     \"\"\"\n     current_config = JsonDataOperations.read()\n     index = -1\n-    found = False\n+    found = None\n     for project_item in current_config['projects']:\n         index += 1\n         if project_item['project_name']==project_name:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    found = False"
            ]
          },
          {
            "name": "Mutant #97",
            "file": "code_opener_cli/main.py",
            "line": 99,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -96,7 +96,7 @@\n     current_config = JsonDataOperations.read()\n     index = -1\n     found = False\n-    for project_item in current_config['projects']:\n+    for project_item in current_config['XXprojectsXX']:\n         index += 1\n         if project_item['project_name']==project_name:\n             current_config['projects'].pop(index)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    for project_item in current_config['projects']:"
            ]
          },
          {
            "name": "Mutant #98",
            "file": "code_opener_cli/main.py",
            "line": 100,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -97,7 +97,7 @@\n     index = -1\n     found = False\n     for project_item in current_config['projects']:\n-        index += 1\n+        index = 1\n         if project_item['project_name']==project_name:\n             current_config['projects'].pop(index)\n             found = True\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        index += 1"
            ]
          },
          {
            "name": "Mutant #99",
            "file": "code_opener_cli/main.py",
            "line": 100,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -97,7 +97,7 @@\n     index = -1\n     found = False\n     for project_item in current_config['projects']:\n-        index += 1\n+        index -= 1\n         if project_item['project_name']==project_name:\n             current_config['projects'].pop(index)\n             found = True\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        index += 1"
            ]
          },
          {
            "name": "Mutant #100",
            "file": "code_opener_cli/main.py",
            "line": 100,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -97,7 +97,7 @@\n     index = -1\n     found = False\n     for project_item in current_config['projects']:\n-        index += 1\n+        index += 2\n         if project_item['project_name']==project_name:\n             current_config['projects'].pop(index)\n             found = True\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        index += 1"
            ]
          },
          {
            "name": "Mutant #101",
            "file": "code_opener_cli/main.py",
            "line": 101,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -98,7 +98,7 @@\n     found = False\n     for project_item in current_config['projects']:\n         index += 1\n-        if project_item['project_name']==project_name:\n+        if project_item['XXproject_nameXX']==project_name:\n             current_config['projects'].pop(index)\n             found = True\n             JsonDataOperations.update(current_config)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if project_item['project_name']==project_name:"
            ]
          },
          {
            "name": "Mutant #102",
            "file": "code_opener_cli/main.py",
            "line": 101,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -98,7 +98,7 @@\n     found = False\n     for project_item in current_config['projects']:\n         index += 1\n-        if project_item['project_name']==project_name:\n+        if project_item['project_name']!=project_name:\n             current_config['projects'].pop(index)\n             found = True\n             JsonDataOperations.update(current_config)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        if project_item['project_name']==project_name:"
            ]
          },
          {
            "name": "Mutant #103",
            "file": "code_opener_cli/main.py",
            "line": 102,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -99,7 +99,7 @@\n     for project_item in current_config['projects']:\n         index += 1\n         if project_item['project_name']==project_name:\n-            current_config['projects'].pop(index)\n+            current_config['XXprojectsXX'].pop(index)\n             found = True\n             JsonDataOperations.update(current_config)\n             break\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            current_config['projects'].pop(index)"
            ]
          },
          {
            "name": "Mutant #104",
            "file": "code_opener_cli/main.py",
            "line": 103,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -100,7 +100,7 @@\n         index += 1\n         if project_item['project_name']==project_name:\n             current_config['projects'].pop(index)\n-            found = True\n+            found = False\n             JsonDataOperations.update(current_config)\n             break\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            found = True"
            ]
          },
          {
            "name": "Mutant #105",
            "file": "code_opener_cli/main.py",
            "line": 103,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -100,7 +100,7 @@\n         index += 1\n         if project_item['project_name']==project_name:\n             current_config['projects'].pop(index)\n-            found = True\n+            found = None\n             JsonDataOperations.update(current_config)\n             break\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            found = True"
            ]
          },
          {
            "name": "Mutant #106",
            "file": "code_opener_cli/main.py",
            "line": 105,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -102,7 +102,7 @@\n             current_config['projects'].pop(index)\n             found = True\n             JsonDataOperations.update(current_config)\n-            break\n+            continue\n \n     if found==False:\n         echo_text = typer.style(\"Project with this name is not present!\",\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            break"
            ]
          },
          {
            "name": "Mutant #107",
            "file": "code_opener_cli/main.py",
            "line": 107,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -104,7 +104,7 @@\n             JsonDataOperations.update(current_config)\n             break\n \n-    if found==False:\n+    if found!=False:\n         echo_text = typer.style(\"Project with this name is not present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n         typer.echo(echo_text, err=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if found==False:"
            ]
          },
          {
            "name": "Mutant #108",
            "file": "code_opener_cli/main.py",
            "line": 107,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -104,7 +104,7 @@\n             JsonDataOperations.update(current_config)\n             break\n \n-    if found==False:\n+    if found==True:\n         echo_text = typer.style(\"Project with this name is not present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n         typer.echo(echo_text, err=True)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    if found==False:"
            ]
          },
          {
            "name": "Mutant #109",
            "file": "code_opener_cli/main.py",
            "line": 108,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -105,7 +105,7 @@\n             break\n \n     if found==False:\n-        echo_text = typer.style(\"Project with this name is not present!\",\n+        echo_text = typer.style(\"XXProject with this name is not present!XX\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n         typer.echo(echo_text, err=True)\n     else:\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        echo_text = typer.style(\"Project with this name is not present!\","
            ]
          },
          {
            "name": "Mutant #110",
            "file": "code_opener_cli/main.py",
            "line": 109,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -105,8 +105,7 @@\n             break\n \n     if found==False:\n-        echo_text = typer.style(\"Project with this name is not present!\",\n-             bg=typer.colors.RED,fg=typer.colors.WHITE)\n+        echo_text = None\n         typer.echo(echo_text, err=True)\n     else:\n         typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "             bg=typer.colors.RED,fg=typer.colors.WHITE)"
            ]
          },
          {
            "name": "Mutant #111",
            "file": "code_opener_cli/main.py",
            "line": 110,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -107,6 +107,6 @@\n     if found==False:\n         echo_text = typer.style(\"Project with this name is not present!\",\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n-        typer.echo(echo_text, err=True)\n+        typer.echo(echo_text, err=False)\n     else:\n         typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.echo(echo_text, err=True)"
            ]
          },
          {
            "name": "Mutant #112",
            "file": "code_opener_cli/main.py",
            "line": 112,
            "failure": [
              {
                "inner": "--- code_opener_cli/main.py\n+++ code_opener_cli/main.py\n@@ -109,4 +109,4 @@\n              bg=typer.colors.RED,fg=typer.colors.WHITE)\n         typer.echo(echo_text, err=True)\n     else:\n-        typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)\n+        typer.secho('XXRemoved Successfully!XX',fg= typer.colors.BRIGHT_GREEN)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        typer.secho('Removed Successfully!',fg= typer.colors.BRIGHT_GREEN)"
            ]
          },
          {
            "name": "Mutant #113",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 6,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/conftest.py\n+++ code_opener_cli/tests/conftest.py\n@@ -3,7 +3,7 @@\n \"\"\"\n import pytest\n \n-@pytest.fixture(scope=\"package\")\n+@pytest.fixture(scope=\"XXpackageXX\")\n def config_with_project():\n     return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@pytest.fixture(scope=\"package\")"
            ]
          },
          {
            "name": "Mutant #114",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 6,
            "system-out": [
              "@pytest.fixture(scope=\"package\")"
            ]
          },
          {
            "name": "Mutant #115",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 8,
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}"
            ]
          },
          {
            "name": "Mutant #116",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 8,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/conftest.py\n+++ code_opener_cli/tests/conftest.py\n@@ -5,7 +5,7 @@\n \n @pytest.fixture(scope=\"package\")\n def config_with_project():\n-    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n+    return {\"default_editor\": \"XXcode .XX\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n \n @pytest.fixture(scope=\"package\")\n def config_with_no_project():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}"
            ]
          },
          {
            "name": "Mutant #117",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 8,
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}"
            ]
          },
          {
            "name": "Mutant #118",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 8,
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}"
            ]
          },
          {
            "name": "Mutant #119",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 8,
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}"
            ]
          },
          {
            "name": "Mutant #120",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 8,
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}"
            ]
          },
          {
            "name": "Mutant #121",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 8,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/conftest.py\n+++ code_opener_cli/tests/conftest.py\n@@ -5,7 +5,7 @@\n \n @pytest.fixture(scope=\"package\")\n def config_with_project():\n-    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n+    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'XX/abc/def/testXX'}]}\n \n @pytest.fixture(scope=\"package\")\n def config_with_no_project():\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}"
            ]
          },
          {
            "name": "Mutant #122",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 10,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/conftest.py\n+++ code_opener_cli/tests/conftest.py\n@@ -7,7 +7,7 @@\n def config_with_project():\n     return {\"default_editor\": \"code .\", \"projects\": [{'project_name':'abc','path':'/abc/def/test'}]}\n \n-@pytest.fixture(scope=\"package\")\n+@pytest.fixture(scope=\"XXpackageXX\")\n def config_with_no_project():\n     return {\"default_editor\": \"code .\", \"projects\": []}\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "@pytest.fixture(scope=\"package\")"
            ]
          },
          {
            "name": "Mutant #123",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 10,
            "system-out": [
              "@pytest.fixture(scope=\"package\")"
            ]
          },
          {
            "name": "Mutant #124",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/conftest.py\n+++ code_opener_cli/tests/conftest.py\n@@ -9,5 +9,5 @@\n \n @pytest.fixture(scope=\"package\")\n def config_with_no_project():\n-    return {\"default_editor\": \"code .\", \"projects\": []}\n+    return {\"XXdefault_editorXX\": \"code .\", \"projects\": []}\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": []}"
            ]
          },
          {
            "name": "Mutant #125",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/conftest.py\n+++ code_opener_cli/tests/conftest.py\n@@ -9,5 +9,5 @@\n \n @pytest.fixture(scope=\"package\")\n def config_with_no_project():\n-    return {\"default_editor\": \"code .\", \"projects\": []}\n+    return {\"default_editor\": \"XXcode .XX\", \"projects\": []}\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": []}"
            ]
          },
          {
            "name": "Mutant #126",
            "file": "code_opener_cli/tests/conftest.py",
            "line": 12,
            "system-out": [
              "    return {\"default_editor\": \"code .\", \"projects\": []}"
            ]
          },
          {
            "name": "Mutant #127",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 11,
            "system-out": [
              "runner = CliRunner()"
            ]
          },
          {
            "name": "Mutant #128",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 20,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #129",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 21,
            "system-out": [
              "    result = runner.invoke(app, [\"see\"])"
            ]
          },
          {
            "name": "Mutant #130",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 21,
            "system-out": [
              "    result = runner.invoke(app, [\"see\"])"
            ]
          },
          {
            "name": "Mutant #131",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 22,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #132",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 22,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #133",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 23,
            "system-out": [
              "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
            ]
          },
          {
            "name": "Mutant #134",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 23,
            "system-out": [
              "    assert \"Seems like you have not added any project yet!!!\" in result.stdout "
            ]
          },
          {
            "name": "Mutant #135",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 33,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #136",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 34,
            "system-out": [
              "    result = runner.invoke(app, [\"see\"])"
            ]
          },
          {
            "name": "Mutant #137",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 34,
            "system-out": [
              "    result = runner.invoke(app, [\"see\"])"
            ]
          },
          {
            "name": "Mutant #138",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 35,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #139",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 35,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #140",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 36,
            "system-out": [
              "    assert \"Project Name\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #141",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 36,
            "system-out": [
              "    assert \"Project Name\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #142",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 37,
            "system-out": [
              "    assert \"abc\" in result.stdout "
            ]
          },
          {
            "name": "Mutant #143",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 37,
            "system-out": [
              "    assert \"abc\" in result.stdout "
            ]
          },
          {
            "name": "Mutant #144",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 38,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -35,7 +35,7 @@\n     assert result.exit_code == 0\n     assert \"Project Name\" in result.stdout\n     assert \"abc\" in result.stdout \n-    assert \"Seems like you have not added any project yet!!!\" not in result.stdout \n+    assert \"XXSeems like you have not added any project yet!!!XX\" not in result.stdout \n \n def test_add_new_project(monkeypatch, config_with_project):\n     \"\"\"\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
            ]
          },
          {
            "name": "Mutant #145",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 38,
            "system-out": [
              "    assert \"Seems like you have not added any project yet!!!\" not in result.stdout "
            ]
          },
          {
            "name": "Mutant #146",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 50,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #147",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 51,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
            ]
          },
          {
            "name": "Mutant #148",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 53,
            "system-out": [
              "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
            ]
          },
          {
            "name": "Mutant #149",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 53,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -50,7 +50,7 @@\n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n     monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n \n-    result = runner.invoke(app, [\"add\"],input=\"test-name\")\n+    result = runner.invoke(app, [\"add\"],input=\"XXtest-nameXX\")\n     assert result.exit_code == 0\n     assert \"Project added successfully!!\" in result.stdout\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
            ]
          },
          {
            "name": "Mutant #150",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 53,
            "system-out": [
              "    result = runner.invoke(app, [\"add\"],input=\"test-name\")"
            ]
          },
          {
            "name": "Mutant #151",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 54,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #152",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 54,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #153",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 55,
            "system-out": [
              "    assert \"Project added successfully!!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #154",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 55,
            "system-out": [
              "    assert \"Project added successfully!!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #155",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 67,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #156",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 68,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
            ]
          },
          {
            "name": "Mutant #157",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 70,
            "system-out": [
              "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
            ]
          },
          {
            "name": "Mutant #158",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 70,
            "system-out": [
              "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
            ]
          },
          {
            "name": "Mutant #159",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 70,
            "system-out": [
              "    result = runner.invoke(app, [\"add\"],input=\"abc\")"
            ]
          },
          {
            "name": "Mutant #160",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 71,
            "system-out": [
              "    assert result.exit_code == 1"
            ]
          },
          {
            "name": "Mutant #161",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 71,
            "system-out": [
              "    assert result.exit_code == 1"
            ]
          },
          {
            "name": "Mutant #162",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 72,
            "system-out": [
              "    assert \"Project with this name already present!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #163",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 72,
            "system-out": [
              "    assert \"Project with this name already present!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #164",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 81,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #165",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 82,
            "system-out": [
              "    result = runner.invoke(app, [\"open\", \"test_project\"])"
            ]
          },
          {
            "name": "Mutant #166",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 82,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -79,7 +79,7 @@\n         return config_with_project\n     \n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n-    result = runner.invoke(app, [\"open\", \"test_project\"])\n+    result = runner.invoke(app, [\"open\", \"XXtest_projectXX\"])\n     assert result.exit_code == 0\n     assert \"Project Not Found!\" in result.stdout\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    result = runner.invoke(app, [\"open\", \"test_project\"])"
            ]
          },
          {
            "name": "Mutant #167",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 82,
            "system-out": [
              "    result = runner.invoke(app, [\"open\", \"test_project\"])"
            ]
          },
          {
            "name": "Mutant #168",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 83,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #169",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 83,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #170",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 84,
            "system-out": [
              "    assert \"Project Not Found!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #171",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 84,
            "system-out": [
              "    assert \"Project Not Found!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #172",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 99,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #173",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 100,
            "system-out": [
              "    monkeypatch.setattr(os, 'system', mock_os_sytem)"
            ]
          },
          {
            "name": "Mutant #174",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 101,
            "system-out": [
              "    monkeypatch.setattr(os, 'chdir', mock_os_chdir)"
            ]
          },
          {
            "name": "Mutant #175",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 103,
            "system-out": [
              "    result = runner.invoke(app, [\"open\", \"abc\"])"
            ]
          },
          {
            "name": "Mutant #176",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 103,
            "system-out": [
              "    result = runner.invoke(app, [\"open\", \"abc\"])"
            ]
          },
          {
            "name": "Mutant #177",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 103,
            "system-out": [
              "    result = runner.invoke(app, [\"open\", \"abc\"])"
            ]
          },
          {
            "name": "Mutant #178",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 104,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #179",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 104,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #180",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 105,
            "failure": [
              {
                "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -102,7 +102,7 @@\n \n     result = runner.invoke(app, [\"open\", \"abc\"])\n     assert result.exit_code == 0\n-    assert \"Project Not Found!\" not in result.stdout\n+    assert \"XXProject Not Found!XX\" not in result.stdout\n     assert \"Project Found!\" in result.stdout\n \n def test_remove_not_present_project(monkeypatch, config_with_project):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    assert \"Project Not Found!\" not in result.stdout"
            ]
          },
          {
            "name": "Mutant #181",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 105,
            "system-out": [
              "    assert \"Project Not Found!\" not in result.stdout"
            ]
          },
          {
            "name": "Mutant #182",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 106,
            "system-out": [
              "    assert \"Project Found!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #183",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 106,
            "system-out": [
              "    assert \"Project Found!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #184",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 115,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #185",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 117,
            "system-out": [
              "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
            ]
          },
          {
            "name": "Mutant #186",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 117,
            "error": [
              {
                "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -114,7 +114,7 @@\n     \n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n \n-    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")\n+    result = runner.invoke(app, [\"remove\"], input=\"XXtest_project\\ntest_project\\nXX\")\n     assert result.exit_code == 0\n     assert \"Project with this name is not present!\" in result.stdout\n \n",
                "type": "timeout",
                "message": "bad_timeout"
              }
            ],
            "system-out": [
              "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
            ]
          },
          {
            "name": "Mutant #187",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 117,
            "system-out": [
              "    result = runner.invoke(app, [\"remove\"], input=\"test_project\\ntest_project\\n\")"
            ]
          },
          {
            "name": "Mutant #188",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 118,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #189",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 118,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #190",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 119,
            "system-out": [
              "    assert \"Project with this name is not present!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #191",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 119,
            "system-out": [
              "    assert \"Project with this name is not present!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #192",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 131,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'read', mock_read)"
            ]
          },
          {
            "name": "Mutant #193",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 132,
            "system-out": [
              "    monkeypatch.setattr(JsonDataOperations, 'update', mock_update)"
            ]
          },
          {
            "name": "Mutant #194",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 134,
            "system-out": [
              "    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")"
            ]
          },
          {
            "name": "Mutant #195",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 134,
            "error": [
              {
                "inner": "--- code_opener_cli/tests/test_main.py\n+++ code_opener_cli/tests/test_main.py\n@@ -131,7 +131,7 @@\n     monkeypatch.setattr(JsonDataOperations, 'read', mock_read)\n     monkeypatch.setattr(JsonDataOperations, 'update', mock_update)\n \n-    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")\n+    result = runner.invoke(app, [\"remove\"], input=\"XXabc\\nabc\\nXX\")\n     assert result.exit_code == 0\n     assert \"Removed Successfully!\" in result.stdout\n \n",
                "type": "timeout",
                "message": "bad_timeout"
              }
            ],
            "system-out": [
              "    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")"
            ]
          },
          {
            "name": "Mutant #196",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 134,
            "system-out": [
              "    result = runner.invoke(app, [\"remove\"], input=\"abc\\nabc\\n\")"
            ]
          },
          {
            "name": "Mutant #197",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 135,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #198",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 135,
            "system-out": [
              "    assert result.exit_code == 0"
            ]
          },
          {
            "name": "Mutant #199",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 136,
            "system-out": [
              "    assert \"Removed Successfully!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #200",
            "file": "code_opener_cli/tests/test_main.py",
            "line": 136,
            "system-out": [
              "    assert \"Removed Successfully!\" in result.stdout"
            ]
          },
          {
            "name": "Mutant #201",
            "file": "code_opener_cli/utils/config.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/config.py\n+++ code_opener_cli/utils/config.py\n@@ -8,5 +8,5 @@\n     This class includes all the default values for the application\n     \"\"\"\n \n-    APP_NAME = 'code_opener_cli'\n+    APP_NAME = 'XXcode_opener_cliXX'\n     CONFIGURATION_FILE_NAME = 'settings.json'\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    APP_NAME = 'code_opener_cli'"
            ]
          },
          {
            "name": "Mutant #202",
            "file": "code_opener_cli/utils/config.py",
            "line": 11,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/config.py\n+++ code_opener_cli/utils/config.py\n@@ -8,5 +8,5 @@\n     This class includes all the default values for the application\n     \"\"\"\n \n-    APP_NAME = 'code_opener_cli'\n+    APP_NAME = None\n     CONFIGURATION_FILE_NAME = 'settings.json'\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    APP_NAME = 'code_opener_cli'"
            ]
          },
          {
            "name": "Mutant #203",
            "file": "code_opener_cli/utils/config.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/config.py\n+++ code_opener_cli/utils/config.py\n@@ -9,4 +9,4 @@\n     \"\"\"\n \n     APP_NAME = 'code_opener_cli'\n-    CONFIGURATION_FILE_NAME = 'settings.json'\n+    CONFIGURATION_FILE_NAME = 'XXsettings.jsonXX'\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    CONFIGURATION_FILE_NAME = 'settings.json'"
            ]
          },
          {
            "name": "Mutant #204",
            "file": "code_opener_cli/utils/config.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/config.py\n+++ code_opener_cli/utils/config.py\n@@ -9,4 +9,4 @@\n     \"\"\"\n \n     APP_NAME = 'code_opener_cli'\n-    CONFIGURATION_FILE_NAME = 'settings.json'\n+    CONFIGURATION_FILE_NAME = None\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    CONFIGURATION_FILE_NAME = 'settings.json'"
            ]
          },
          {
            "name": "Mutant #205",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 12,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -9,7 +9,7 @@\n     This class is used for operations on settings.json file.\n     setting.json file servers as basic configuration for the project\n     \"\"\"\n-    @classmethod\n+\n     def update(cls,config_data):\n         \"\"\"\n         Creates the setting.json file\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    @classmethod"
            ]
          },
          {
            "name": "Mutant #206",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 17,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -14,7 +14,7 @@\n         \"\"\"\n         Creates the setting.json file\n         \"\"\"\n-        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n+        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'XXwXX') as outfile:\n             json.dump(config_data, outfile)\n \n     @classmethod\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:"
            ]
          },
          {
            "name": "Mutant #207",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 20,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -17,7 +17,6 @@\n         with open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value, 'w') as outfile:\n             json.dump(config_data, outfile)\n \n-    @classmethod\n     def read(cls):\n         \"\"\" \n         Reads the setting.json file\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    @classmethod"
            ]
          },
          {
            "name": "Mutant #208",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 25,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -22,7 +22,7 @@\n         \"\"\" \n         Reads the setting.json file\n         \"\"\"\n-        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n+        f = None\n         data = json.load(f)\n         f.close()\n         return data\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)"
            ]
          },
          {
            "name": "Mutant #209",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 26,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -23,7 +23,7 @@\n         Reads the setting.json file\n         \"\"\"\n         f = open(CodeOpenerDirectoryPath.CONFIG_FILE_PATH.value,)\n-        data = json.load(f)\n+        data = None\n         f.close()\n         return data\n         \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        data = json.load(f)"
            ]
          },
          {
            "name": "Mutant #210",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 38,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -35,7 +35,7 @@\n     \"\"\"\n     # TODO: Add a proper data structure to create a list of editors\n     # It should include short name, display name and command to open\n-    editor_list = ['VSCode','Sublime Text']\n+    editor_list = ['XXVSCodeXX','Sublime Text']\n \n \n     @classmethod\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    editor_list = ['VSCode','Sublime Text']"
            ]
          },
          {
            "name": "Mutant #211",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 38,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -35,7 +35,7 @@\n     \"\"\"\n     # TODO: Add a proper data structure to create a list of editors\n     # It should include short name, display name and command to open\n-    editor_list = ['VSCode','Sublime Text']\n+    editor_list = ['VSCode','XXSublime TextXX']\n \n \n     @classmethod\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    editor_list = ['VSCode','Sublime Text']"
            ]
          },
          {
            "name": "Mutant #212",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 38,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -35,7 +35,7 @@\n     \"\"\"\n     # TODO: Add a proper data structure to create a list of editors\n     # It should include short name, display name and command to open\n-    editor_list = ['VSCode','Sublime Text']\n+    editor_list = None\n \n \n     @classmethod\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    editor_list = ['VSCode','Sublime Text']"
            ]
          },
          {
            "name": "Mutant #213",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 41,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -37,8 +37,6 @@\n     # It should include short name, display name and command to open\n     editor_list = ['VSCode','Sublime Text']\n \n-\n-    @classmethod\n     def list_projects(cls,incomplete: str):\n         \"\"\"\n         Provides autocomplete for list of projects\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    @classmethod"
            ]
          },
          {
            "name": "Mutant #214",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 46,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -43,7 +43,7 @@\n         \"\"\"\n         Provides autocomplete for list of projects\n         \"\"\"\n-        current_config = JsonDataOperations.read()\n+        current_config = None\n         project_name_list = []\n         for project_item in current_config['projects']:\n             if project_item['project_name'].startswith(incomplete):\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        current_config = JsonDataOperations.read()"
            ]
          },
          {
            "name": "Mutant #215",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 47,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -44,7 +44,7 @@\n         Provides autocomplete for list of projects\n         \"\"\"\n         current_config = JsonDataOperations.read()\n-        project_name_list = []\n+        project_name_list = None\n         for project_item in current_config['projects']:\n             if project_item['project_name'].startswith(incomplete):\n                 project_name_list.append(project_item['project_name'])\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        project_name_list = []"
            ]
          },
          {
            "name": "Mutant #216",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 48,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -45,7 +45,7 @@\n         \"\"\"\n         current_config = JsonDataOperations.read()\n         project_name_list = []\n-        for project_item in current_config['projects']:\n+        for project_item in current_config['XXprojectsXX']:\n             if project_item['project_name'].startswith(incomplete):\n                 project_name_list.append(project_item['project_name'])\n         return project_name_list\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        for project_item in current_config['projects']:"
            ]
          },
          {
            "name": "Mutant #217",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 49,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -46,7 +46,7 @@\n         current_config = JsonDataOperations.read()\n         project_name_list = []\n         for project_item in current_config['projects']:\n-            if project_item['project_name'].startswith(incomplete):\n+            if project_item['XXproject_nameXX'].startswith(incomplete):\n                 project_name_list.append(project_item['project_name'])\n         return project_name_list\n \n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "            if project_item['project_name'].startswith(incomplete):"
            ]
          },
          {
            "name": "Mutant #218",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 50,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -47,7 +47,7 @@\n         project_name_list = []\n         for project_item in current_config['projects']:\n             if project_item['project_name'].startswith(incomplete):\n-                project_name_list.append(project_item['project_name'])\n+                project_name_list.append(project_item['XXproject_nameXX'])\n         return project_name_list\n \n     @classmethod\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "                project_name_list.append(project_item['project_name'])"
            ]
          },
          {
            "name": "Mutant #219",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 53,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -50,7 +50,6 @@\n                 project_name_list.append(project_item['project_name'])\n         return project_name_list\n \n-    @classmethod\n     def list_of_editors(cls,incomplete:str):\n         \"\"\"\n         Provides autocomplete for list of editors\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "    @classmethod"
            ]
          },
          {
            "name": "Mutant #220",
            "file": "code_opener_cli/utils/helpers.py",
            "line": 58,
            "failure": [
              {
                "inner": "--- code_opener_cli/utils/helpers.py\n+++ code_opener_cli/utils/helpers.py\n@@ -55,7 +55,7 @@\n         \"\"\"\n         Provides autocomplete for list of editors\n         \"\"\"\n-        editors_matched = []\n+        editors_matched = None\n         for editor in cls.editor_list:\n             if editor.startswith(incomplete):\n                 editors_matched.append(editor)\n",
                "type": "failure",
                "message": "bad_survived"
              }
            ],
            "system-out": [
              "        editors_matched = []"
            ]
          },
          {
            "name": "Mutant #221",
            "file": "tests/test_code_opener_cli.py",
            "line": 8,
            "system-out": [
              "    assert __version__ == '1.0.1'"
            ]
          },
          {
            "name": "Mutant #222",
            "file": "tests/test_code_opener_cli.py",
            "line": 8,
            "system-out": [
              "    assert __version__ == '1.0.1'"
            ]
          }
        ]
      }
    ]
  }
}