[
  {
    "function_name": "test_hparams",
    "function_scope": "6-33",
    "patterns": [
      {
        "lineno": 6,
        "coloffset": 0,
        "linematch": "def test_hparams():",
        "context": "import shutil\nfrom tempfile import TemporaryDirectory, tempdir\nfrom lazytracker import LazyTracker\n\ndef test_hparams():\n    hparams_1 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 1",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 6,
        "coloffset": 0,
        "linematch": "def test_hparams():",
        "context": "import shutil\nfrom tempfile import TemporaryDirectory, tempdir\nfrom lazytracker import LazyTracker\n\ndef test_hparams():\n    hparams_1 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 1",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 32,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1",
        "min": 1,
        "max": 10,
        "check_name": "number-of-assertions",
        "description": "Ensure the presence of assertions within function bodies of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/Assert"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() != tracker_3.hash()",
        "context": "    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):",
        "min": 1,
        "max": 10,
        "check_name": "number-of-assertions",
        "description": "Ensure the presence of assertions within function bodies of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/Assert"
      },
      {
        "lineno": 7,
        "coloffset": 4,
        "linematch": "hparams_1 = {",
        "context": "from tempfile import TemporaryDirectory, tempdir\nfrom lazytracker import LazyTracker\n\ndef test_hparams():\n    hparams_1 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 1\n        }",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 15,
        "coloffset": 4,
        "linematch": "hparams_2 = {",
        "context": "            'd': 1\n        }\n    }\n\n    hparams_2 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 2\n        }",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 23,
        "coloffset": 4,
        "linematch": "tracker_1 = LazyTracker()",
        "context": "            'd': 2\n        }\n    }\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "tracker_1.add_hparams(hparams_1)",
        "context": "        }\n    }\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "tracker_2 = LazyTracker()",
        "context": "\n    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 27,
        "coloffset": 4,
        "linematch": "tracker_2.add_hparams(hparams_1)",
        "context": "    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "tracker_3 = LazyTracker()",
        "context": "\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "tracker_3.add_hparams(hparams_2)",
        "context": "    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 32,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() != tracker_3.hash()",
        "context": "    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 7,
        "coloffset": 4,
        "linematch": "hparams_1 = {",
        "context": "from tempfile import TemporaryDirectory, tempdir\nfrom lazytracker import LazyTracker\n\ndef test_hparams():\n    hparams_1 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 1\n        }",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 15,
        "coloffset": 4,
        "linematch": "hparams_2 = {",
        "context": "            'd': 1\n        }\n    }\n\n    hparams_2 = {\n        'a': 1,\n        'b': 2,\n        'c': {\n            'd': 2\n        }",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 23,
        "coloffset": 4,
        "linematch": "tracker_1 = LazyTracker()",
        "context": "            'd': 2\n        }\n    }\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 24,
        "coloffset": 4,
        "linematch": "tracker_1.add_hparams(hparams_1)",
        "context": "        }\n    }\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 26,
        "coloffset": 4,
        "linematch": "tracker_2 = LazyTracker()",
        "context": "\n    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 27,
        "coloffset": 4,
        "linematch": "tracker_2.add_hparams(hparams_1)",
        "context": "    tracker_1 = LazyTracker()\n    tracker_1.add_hparams(hparams_1)\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "tracker_3 = LazyTracker()",
        "context": "\n    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 30,
        "coloffset": 4,
        "linematch": "tracker_3.add_hparams(hparams_2)",
        "context": "    tracker_2 = LazyTracker()\n    tracker_2.add_hparams(hparams_1)\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 32,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 33,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() != tracker_3.hash()",
        "context": "    tracker_3 = LazyTracker()\n    tracker_3.add_hparams(hparams_2)\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_picable_function",
    "function_scope": "35-51",
    "patterns": [
      {
        "lineno": 35,
        "coloffset": 0,
        "linematch": "def test_picable_function():",
        "context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "def func_1(x):",
        "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "def func_2(x):",
        "context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "def func_1(x):",
        "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "def func_2(x):",
        "context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 35,
        "coloffset": 0,
        "linematch": "def test_picable_function():",
        "context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "def func_1(x):",
        "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "def func_2(x):",
        "context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 35,
        "coloffset": 0,
        "linematch": "def test_picable_function():",
        "context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n",
        "min": 1,
        "max": 10,
        "check_name": "Nested Depth (Set value)",
        "description": "Ensure the depth of nesting within functions does not exceed the set value.",
        "pattern": "//FunctionDef//FunctionDef/ancestor::*"
      },
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:",
        "min": 1,
        "max": 10,
        "check_name": "number-of-assertions",
        "description": "Ensure the presence of assertions within function bodies of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/Assert"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() != tracker_3.hash()",
        "context": "    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")",
        "min": 1,
        "max": 10,
        "check_name": "number-of-assertions",
        "description": "Ensure the presence of assertions within function bodies of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/Assert"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "def func_1(x):",
        "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "def func_2(x):",
        "context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "tracker_1 = LazyTracker()",
        "context": "        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "tracker_1.add_picklables([func_1])",
        "context": "    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "tracker_2 = LazyTracker()",
        "context": "\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 45,
        "coloffset": 4,
        "linematch": "tracker_2.add_picklables([func_1])",
        "context": "    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "tracker_3 = LazyTracker()",
        "context": "\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 48,
        "coloffset": 4,
        "linematch": "tracker_3.add_hparams([func_2])",
        "context": "    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() != tracker_3.hash()",
        "context": "    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 36,
        "coloffset": 4,
        "linematch": "def func_1(x):",
        "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 37,
        "coloffset": 8,
        "linematch": "return x+1",
        "context": "    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 38,
        "coloffset": 4,
        "linematch": "def func_2(x):",
        "context": "\ndef test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 39,
        "coloffset": 8,
        "linematch": "return x+2",
        "context": "def test_picable_function():\n    def func_1(x):\n        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 41,
        "coloffset": 4,
        "linematch": "tracker_1 = LazyTracker()",
        "context": "        return x+1\n    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 42,
        "coloffset": 4,
        "linematch": "tracker_1.add_picklables([func_1])",
        "context": "    def func_2(x):\n        return x+2\n\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "tracker_2 = LazyTracker()",
        "context": "\n    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 45,
        "coloffset": 4,
        "linematch": "tracker_2.add_picklables([func_1])",
        "context": "    tracker_1 = LazyTracker()\n    tracker_1.add_picklables([func_1])\n\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 47,
        "coloffset": 4,
        "linematch": "tracker_3 = LazyTracker()",
        "context": "\n    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 48,
        "coloffset": 4,
        "linematch": "tracker_3.add_hparams([func_2])",
        "context": "    tracker_2 = LazyTracker()\n    tracker_2.add_picklables([func_1])\n\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 50,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 51,
        "coloffset": 4,
        "linematch": "assert tracker_1.hash() != tracker_3.hash()",
        "context": "    tracker_3 = LazyTracker()\n    tracker_3.add_hparams([func_2])\n\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_files",
    "function_scope": "53-74",
    "patterns": [
      {
        "lineno": 53,
        "coloffset": 0,
        "linematch": "def test_files():",
        "context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n\n        with open(f'{tmpdir}/b.txt', 'w') as f:",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 53,
        "coloffset": 0,
        "linematch": "def test_files():",
        "context": "\n    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n\n        with open(f'{tmpdir}/b.txt', 'w') as f:",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "with TemporaryDirectory() as tmpdir:",
        "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n\n        with open(f'{tmpdir}/b.txt', 'w') as f:\n            f.write(\"test file 1\")",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 54,
        "coloffset": 4,
        "linematch": "with TemporaryDirectory() as tmpdir:",
        "context": "    assert tracker_1.hash() == tracker_2.hash()\n    assert tracker_1.hash() != tracker_3.hash()\n\ndef test_files():\n    with TemporaryDirectory() as tmpdir:\n        with open(f'{tmpdir}/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n\n        with open(f'{tmpdir}/b.txt', 'w') as f:\n            f.write(\"test file 1\")",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_directories",
    "function_scope": "76-105",
    "patterns": [
      {
        "lineno": 76,
        "coloffset": 0,
        "linematch": "def test_directories():",
        "context": "\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()\n\ndef test_directories():\n    with TemporaryDirectory() as tmpdir:\n        os.makedirs(f\"{tmpdir}/1\", exist_ok=True)\n\n        with open(f'{tmpdir}/1/a.txt', 'w') as f:\n            f.write(\"test file 1\")",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 104,
        "coloffset": 15,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n        tracker_3 = LazyTracker()\n        tracker_3.add_directories([f\"{tmpdir}/3\"])\n\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 104,
        "coloffset": 15,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n        tracker_3 = LazyTracker()\n        tracker_3.add_directories([f\"{tmpdir}/3\"])\n\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 104,
        "coloffset": 15,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n        tracker_3 = LazyTracker()\n        tracker_3.add_directories([f\"{tmpdir}/3\"])\n\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 104,
        "coloffset": 15,
        "linematch": "assert tracker_1.hash() == tracker_2.hash()",
        "context": "\n        tracker_3 = LazyTracker()\n        tracker_3.add_directories([f\"{tmpdir}/3\"])\n\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 76,
        "coloffset": 0,
        "linematch": "def test_directories():",
        "context": "\n        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()\n\ndef test_directories():\n    with TemporaryDirectory() as tmpdir:\n        os.makedirs(f\"{tmpdir}/1\", exist_ok=True)\n\n        with open(f'{tmpdir}/1/a.txt', 'w') as f:\n            f.write(\"test file 1\")",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 77,
        "coloffset": 4,
        "linematch": "with TemporaryDirectory() as tmpdir:",
        "context": "        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()\n\ndef test_directories():\n    with TemporaryDirectory() as tmpdir:\n        os.makedirs(f\"{tmpdir}/1\", exist_ok=True)\n\n        with open(f'{tmpdir}/1/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 77,
        "coloffset": 4,
        "linematch": "with TemporaryDirectory() as tmpdir:",
        "context": "        assert tracker_1.hash() == tracker_2.hash()\n        assert tracker_1.hash() != tracker_3.hash()\n\ndef test_directories():\n    with TemporaryDirectory() as tmpdir:\n        os.makedirs(f\"{tmpdir}/1\", exist_ok=True)\n\n        with open(f'{tmpdir}/1/a.txt', 'w') as f:\n            f.write(\"test file 1\")\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "test_cached",
    "function_scope": "5-73",
    "patterns": [
      {
        "lineno": 5,
        "coloffset": 0,
        "linematch": "def test_cached():",
        "context": "from tempfile import TemporaryDirectory\nfrom lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 14,
        "coloffset": 8,
        "linematch": "def test_function(input_dir: str, output_dir: str, parameter: int):",
        "context": "            cache_dir=cache_dir,\n            input_dirs=[\"input_dir\"],\n            output_dirs=[\"output_dir\"]\n        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 73,
        "coloffset": 23,
        "linematch": "assert updated == True",
        "context": "                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 5,
        "coloffset": 0,
        "linematch": "def test_cached():",
        "context": "from tempfile import TemporaryDirectory\nfrom lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 14,
        "coloffset": 8,
        "linematch": "def test_function(input_dir: str, output_dir: str, parameter: int):",
        "context": "            cache_dir=cache_dir,\n            input_dirs=[\"input_dir\"],\n            output_dirs=[\"output_dir\"]\n        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 5,
        "coloffset": 0,
        "linematch": "def test_cached():",
        "context": "from tempfile import TemporaryDirectory\nfrom lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,",
        "min": 1,
        "max": 10,
        "check_name": "Nested Depth (Set value)",
        "description": "Ensure the depth of nesting within functions does not exceed the set value.",
        "pattern": "//FunctionDef//FunctionDef/ancestor::*"
      },
      {
        "lineno": 6,
        "coloffset": 4,
        "linematch": "with TemporaryDirectory() as cache_dir:",
        "context": "from lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,\n            input_dirs=[\"input_dir\"],",
        "min": 1,
        "max": 10,
        "check_name": "Nested Depth (Set value)",
        "description": "Ensure the depth of nesting within functions does not exceed the set value.",
        "pattern": "//FunctionDef//FunctionDef/ancestor::*"
      },
      {
        "lineno": 6,
        "coloffset": 4,
        "linematch": "with TemporaryDirectory() as cache_dir:",
        "context": "from lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,\n            input_dirs=[\"input_dir\"],",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 15,
        "coloffset": 12,
        "linematch": "nonlocal updated",
        "context": "            input_dirs=[\"input_dir\"],\n            output_dirs=[\"output_dir\"]\n        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 17,
        "coloffset": 12,
        "linematch": "with open(f\"{output_dir}/test.txt\", 'w') as f:",
        "context": "        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True\n            return parameter\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 20,
        "coloffset": 12,
        "linematch": "updated = True",
        "context": "\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True\n            return parameter\n\n        with TemporaryDirectory() as input_dir:\n            with open(f\"{input_dir}/test.txt\", 'w') as f:\n                f.write(\"test_file\")",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 21,
        "coloffset": 12,
        "linematch": "return parameter",
        "context": "            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True\n            return parameter\n\n        with TemporaryDirectory() as input_dir:\n            with open(f\"{input_dir}/test.txt\", 'w') as f:\n                f.write(\"test_file\")\n",
        "min": 1,
        "max": 10,
        "check_name": "count-test-method-lines",
        "description": "Count the lines within test methods in functions of type 'str' that start with 'test_'.",
        "pattern": "//FunctionDef[@type='str' and starts-with(@name, 'test_')]/body/*"
      },
      {
        "lineno": 6,
        "coloffset": 4,
        "linematch": "with TemporaryDirectory() as cache_dir:",
        "context": "from lazytracker import cached\n\n\ndef test_cached():\n    with TemporaryDirectory() as cache_dir:\n        updated = False\n\n        @cached(\n            cache_dir=cache_dir,\n            input_dirs=[\"input_dir\"],",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 15,
        "coloffset": 12,
        "linematch": "nonlocal updated",
        "context": "            input_dirs=[\"input_dir\"],\n            output_dirs=[\"output_dir\"]\n        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 17,
        "coloffset": 12,
        "linematch": "with open(f\"{output_dir}/test.txt\", 'w') as f:",
        "context": "        )\n        def test_function(input_dir: str, output_dir: str, parameter: int):\n            nonlocal updated\n\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True\n            return parameter\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 20,
        "coloffset": 12,
        "linematch": "updated = True",
        "context": "\n            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True\n            return parameter\n\n        with TemporaryDirectory() as input_dir:\n            with open(f\"{input_dir}/test.txt\", 'w') as f:\n                f.write(\"test_file\")",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 21,
        "coloffset": 12,
        "linematch": "return parameter",
        "context": "            with open(f\"{output_dir}/test.txt\", 'w') as f:\n                f.write(str(parameter))\n\n            updated = True\n            return parameter\n\n        with TemporaryDirectory() as input_dir:\n            with open(f\"{input_dir}/test.txt\", 'w') as f:\n                f.write(\"test_file\")\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 28,
        "coloffset": 16,
        "linematch": "assert test_function(",
        "context": "            with open(f\"{input_dir}/test.txt\", 'w') as f:\n                f.write(\"test_file\")\n\n            with TemporaryDirectory() as output_dir:\n                assert test_function(\n                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=3\n                ) == 3\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "test-methods-invoking-method",
        "description": "Identify test methods invoking specific methods.",
        "pattern": "//Assert[count(.//Call[func/Name/@id='test_function']) > 0]"
      },
      {
        "lineno": 37,
        "coloffset": 16,
        "linematch": "assert test_function(",
        "context": "                assert updated == True\n\n                # Don't change antything\n                updated = False\n                assert test_function(\n                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=3\n                ) == 3\n                assert updated == False",
        "min": 1,
        "max": 10,
        "check_name": "test-methods-invoking-method",
        "description": "Identify test methods invoking specific methods.",
        "pattern": "//Assert[count(.//Call[func/Name/@id='test_function']) > 0]"
      },
      {
        "lineno": 45,
        "coloffset": 16,
        "linematch": "assert test_function(",
        "context": "                ) == 3\n                assert updated == False\n\n                # Change parameter\n                assert test_function(\n                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "test-methods-invoking-method",
        "description": "Identify test methods invoking specific methods.",
        "pattern": "//Assert[count(.//Call[func/Name/@id='test_function']) > 0]"
      },
      {
        "lineno": 57,
        "coloffset": 16,
        "linematch": "assert test_function(",
        "context": "                updated = False\n                with open(f\"{input_dir}/test.txt\", 'w') as f:\n                    f.write(\"changed_test_file\")\n\n                assert test_function(\n                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "test-methods-invoking-method",
        "description": "Identify test methods invoking specific methods.",
        "pattern": "//Assert[count(.//Call[func/Name/@id='test_function']) > 0]"
      },
      {
        "lineno": 68,
        "coloffset": 16,
        "linematch": "assert test_function(",
        "context": "                # Corrupt output\n                with open(f\"{output_dir}/test.txt\", 'w') as f:\n                    f.write(\"corrupted output\")\n\n                assert test_function(\n                    input_dir=input_dir, \n                    output_dir=output_dir, \n                    parameter=5\n                ) == 5\n                assert updated == True",
        "min": 1,
        "max": 10,
        "check_name": "test-methods-invoking-method",
        "description": "Identify test methods invoking specific methods.",
        "pattern": "//Assert[count(.//Call[func/Name/@id='test_function']) > 0]"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "__init__",
    "function_scope": "9-11",
    "patterns": [
      {
        "lineno": 9,
        "coloffset": 4,
        "linematch": "def __init__(self):",
        "context": "from pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 9,
        "coloffset": 4,
        "linematch": "def __init__(self):",
        "context": "from pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 9,
        "coloffset": 4,
        "linematch": "def __init__(self):",
        "context": "from pathlib import Path\n\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 10,
        "coloffset": 8,
        "linematch": "\"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"",
        "context": "\n\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 11,
        "coloffset": 8,
        "linematch": "self._hasher = hashlib.md5()",
        "context": "\nclass LazyTracker:\n    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "add_directories",
    "function_scope": "13-27",
    "patterns": [
      {
        "lineno": 13,
        "coloffset": 4,
        "linematch": "def add_directories(self, directories: List[str], chunk_num_blocks=128):",
        "context": "    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 13,
        "coloffset": 4,
        "linematch": "def add_directories(self, directories: List[str], chunk_num_blocks=128):",
        "context": "    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 13,
        "coloffset": 4,
        "linematch": "def add_directories(self, directories: List[str], chunk_num_blocks=128):",
        "context": "    def __init__(self):\n        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 14,
        "coloffset": 8,
        "linematch": "\"\"\"Include hash of all files inside directory (including files in subdirectories)",
        "context": "        \"\"\"LazyTracked enables you to compute combined hash of things like files, directories, python objects etc.\"\"\"\n        self._hasher = hashlib.md5()\n\n    def add_directories(self, directories: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of all files inside directory (including files in subdirectories)\n\n        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 20,
        "coloffset": 8,
        "linematch": "files_to_check = []",
        "context": "        Args:\n            directories (List[str]): List of directories to take files from\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\n        \"\"\"\n        files_to_check = []\n\n        for directory in directories:\n            files_to_check.extend(list(Path(directory).rglob(\"*\")))\n\n        files_to_check = sorted(files_to_check)",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 22,
        "coloffset": 8,
        "linematch": "for directory in directories:",
        "context": "            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\n        \"\"\"\n        files_to_check = []\n\n        for directory in directories:\n            files_to_check.extend(list(Path(directory).rglob(\"*\")))\n\n        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 25,
        "coloffset": 8,
        "linematch": "files_to_check = sorted(files_to_check)",
        "context": "\n        for directory in directories:\n            files_to_check.extend(list(Path(directory).rglob(\"*\")))\n\n        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 27,
        "coloffset": 8,
        "linematch": "self.add_files(files_to_check, chunk_num_blocks)",
        "context": "            files_to_check.extend(list(Path(directory).rglob(\"*\")))\n\n        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files\n\n        Args:",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "add_files",
    "function_scope": "29-42",
    "patterns": [
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "def add_files(self, filepaths: List[str], chunk_num_blocks=128):",
        "context": "        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files\n\n        Args:\n            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "def add_files(self, filepaths: List[str], chunk_num_blocks=128):",
        "context": "        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files\n\n        Args:\n            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 37,
        "coloffset": 12,
        "linematch": "if os.path.exists(p):",
        "context": "            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\n        \"\"\"\n        for p in filepaths:\n            if os.path.exists(p):\n                with open(p, \"rb\") as f:\n                    while chunk := f.read(chunk_num_blocks * self._hasher.block_size):\n                        self._hasher.update(chunk)\n            else:\n                self._hasher.update(dill.dumps(None))",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 29,
        "coloffset": 4,
        "linematch": "def add_files(self, filepaths: List[str], chunk_num_blocks=128):",
        "context": "        files_to_check = sorted(files_to_check)\n\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files\n\n        Args:\n            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 30,
        "coloffset": 8,
        "linematch": "\"\"\"Include hash of files",
        "context": "\n        self.add_files(files_to_check, chunk_num_blocks)\n\n    def add_files(self, filepaths: List[str], chunk_num_blocks=128):\n        \"\"\"Include hash of files\n\n        Args:\n            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 36,
        "coloffset": 8,
        "linematch": "for p in filepaths:",
        "context": "        Args:\n            filepaths (List[str]): List of paths to files\n            chunk_num_blocks (int, optional): How many chunks to read at once. Defaults to 128.\n        \"\"\"\n        for p in filepaths:\n            if os.path.exists(p):\n                with open(p, \"rb\") as f:\n                    while chunk := f.read(chunk_num_blocks * self._hasher.block_size):\n                        self._hasher.update(chunk)\n            else:",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "add_hparams",
    "function_scope": "44-50",
    "patterns": [
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "def add_hparams(self, hparams: dict):",
        "context": "                        self._hasher.update(chunk)\n            else:\n                self._hasher.update(dill.dumps(None))\n\n    def add_hparams(self, hparams: dict):\n        \"\"\"Add hash of python dictionary. Utility function for storing pickable\n\n        Args:\n            hparams (dict): A dictionary to be included\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "def add_hparams(self, hparams: dict):",
        "context": "                        self._hasher.update(chunk)\n            else:\n                self._hasher.update(dill.dumps(None))\n\n    def add_hparams(self, hparams: dict):\n        \"\"\"Add hash of python dictionary. Utility function for storing pickable\n\n        Args:\n            hparams (dict): A dictionary to be included\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 44,
        "coloffset": 4,
        "linematch": "def add_hparams(self, hparams: dict):",
        "context": "                        self._hasher.update(chunk)\n            else:\n                self._hasher.update(dill.dumps(None))\n\n    def add_hparams(self, hparams: dict):\n        \"\"\"Add hash of python dictionary. Utility function for storing pickable\n\n        Args:\n            hparams (dict): A dictionary to be included\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 45,
        "coloffset": 8,
        "linematch": "\"\"\"Add hash of python dictionary. Utility function for storing pickable",
        "context": "            else:\n                self._hasher.update(dill.dumps(None))\n\n    def add_hparams(self, hparams: dict):\n        \"\"\"Add hash of python dictionary. Utility function for storing pickable\n\n        Args:\n            hparams (dict): A dictionary to be included\n        \"\"\"\n        self.add_picklables([hparams])",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 50,
        "coloffset": 8,
        "linematch": "self.add_picklables([hparams])",
        "context": "\n        Args:\n            hparams (dict): A dictionary to be included\n        \"\"\"\n        self.add_picklables([hparams])\n\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\n        \"\"\"Include hash of any picklable python objects (pickable by dill)\n\n        Args:",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "add_picklables",
    "function_scope": "52-61",
    "patterns": [
      {
        "lineno": 52,
        "coloffset": 4,
        "linematch": "def add_picklables(self, objects: List[Any], recursive: bool=False):",
        "context": "            hparams (dict): A dictionary to be included\n        \"\"\"\n        self.add_picklables([hparams])\n\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\n        \"\"\"Include hash of any picklable python objects (pickable by dill)\n\n        Args:\n            objects (List[Any]): List of python objects to hash\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if ",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 52,
        "coloffset": 4,
        "linematch": "def add_picklables(self, objects: List[Any], recursive: bool=False):",
        "context": "            hparams (dict): A dictionary to be included\n        \"\"\"\n        self.add_picklables([hparams])\n\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\n        \"\"\"Include hash of any picklable python objects (pickable by dill)\n\n        Args:\n            objects (List[Any]): List of python objects to hash\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if ",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 52,
        "coloffset": 4,
        "linematch": "def add_picklables(self, objects: List[Any], recursive: bool=False):",
        "context": "            hparams (dict): A dictionary to be included\n        \"\"\"\n        self.add_picklables([hparams])\n\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\n        \"\"\"Include hash of any picklable python objects (pickable by dill)\n\n        Args:\n            objects (List[Any]): List of python objects to hash\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if ",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 53,
        "coloffset": 8,
        "linematch": "\"\"\"Include hash of any picklable python objects (pickable by dill)",
        "context": "        \"\"\"\n        self.add_picklables([hparams])\n\n    def add_picklables(self, objects: List[Any], recursive: bool=False):\n        \"\"\"Include hash of any picklable python objects (pickable by dill)\n\n        Args:\n            objects (List[Any]): List of python objects to hash\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if \n                recursive is set to true the changes in inner function are also tracked",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 60,
        "coloffset": 8,
        "linematch": "for obj in objects:",
        "context": "            objects (List[Any]): List of python objects to hash\n            recursive (bool): Wheter to track dependencies of object. Eg.: if function calls another function, if \n                recursive is set to true the changes in inner function are also tracked\n        \"\"\"\n        for obj in objects:\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\n\n    def hash(self) -> str:\n        \"\"\"Compute hash\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "hash",
    "function_scope": "63-70",
    "patterns": [
      {
        "lineno": 63,
        "coloffset": 4,
        "linematch": "def hash(self) -> str:",
        "context": "        \"\"\"\n        for obj in objects:\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\n\n    def hash(self) -> str:\n        \"\"\"Compute hash\n\n        Returns:\n            str: Computed checksum of all things tracked\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 63,
        "coloffset": 4,
        "linematch": "def hash(self) -> str:",
        "context": "        \"\"\"\n        for obj in objects:\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\n\n    def hash(self) -> str:\n        \"\"\"Compute hash\n\n        Returns:\n            str: Computed checksum of all things tracked\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 63,
        "coloffset": 4,
        "linematch": "def hash(self) -> str:",
        "context": "        \"\"\"\n        for obj in objects:\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\n\n    def hash(self) -> str:\n        \"\"\"Compute hash\n\n        Returns:\n            str: Computed checksum of all things tracked\n        \"\"\"",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 64,
        "coloffset": 8,
        "linematch": "\"\"\"Compute hash",
        "context": "        for obj in objects:\n            self._hasher.update(dill.dumps(obj, recurse=recursive))\n\n    def hash(self) -> str:\n        \"\"\"Compute hash\n\n        Returns:\n            str: Computed checksum of all things tracked\n        \"\"\"\n",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 70,
        "coloffset": 8,
        "linematch": "return self._hasher.hexdigest()",
        "context": "        Returns:\n            str: Computed checksum of all things tracked\n        \"\"\"\n\n        return self._hasher.hexdigest()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  },
  {
    "function_name": "cached",
    "function_scope": "14-91",
    "patterns": [
      {
        "lineno": 14,
        "coloffset": 0,
        "linematch": "def cached(",
        "context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "def inner_func(function: Callable):",
        "context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 33,
        "coloffset": 8,
        "linematch": "def wrapper(*args, **kwargs):",
        "context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "all-function-definition",
        "description": "Ensure the presence of function definitions in the codebase.",
        "pattern": ".//FunctionDef"
      },
      {
        "lineno": 14,
        "coloffset": 0,
        "linematch": "def cached(",
        "context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "def inner_func(function: Callable):",
        "context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 33,
        "coloffset": 8,
        "linematch": "def wrapper(*args, **kwargs):",
        "context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-non-test-function-definition",
        "description": "Ensure the presence of non-test function definitions in the codebase.",
        "pattern": ".//FunctionDef[not(contains(@name, \"test_\"))]"
      },
      {
        "lineno": 41,
        "coloffset": 16,
        "linematch": "if input_dirs is not None:",
        "context": "            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()\n                input_tracker.add_picklables([function], recursive=True)\n                input_tracker.add_hparams(kwargs)\n                if input_dirs is not None:\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\n                    input_tracker.add_directories(input_dirs_values)\n                if input_files is not None:\n                    input_files_values = [\n                        kwargs[input_file] for input_file in input_files",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 44,
        "coloffset": 16,
        "linematch": "if input_files is not None:",
        "context": "                input_tracker.add_hparams(kwargs)\n                if input_dirs is not None:\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\n                    input_tracker.add_directories(input_dirs_values)\n                if input_files is not None:\n                    input_files_values = [\n                        kwargs[input_file] for input_file in input_files\n                    ]\n                    input_tracker.add_files(input_files_values)\n",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 51,
        "coloffset": 16,
        "linematch": "if output_dirs is not None:",
        "context": "                    ]\n                    input_tracker.add_files(input_files_values)\n\n                test_output_tracker = LazyTracker()\n                if output_dirs is not None:\n                    output_dirs_values = [\n                        kwargs[output_dir] for output_dir in output_dirs\n                    ]\n                    test_output_tracker.add_directories(output_dirs_values)\n                if output_files is not None:",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 56,
        "coloffset": 16,
        "linematch": "if output_files is not None:",
        "context": "                    output_dirs_values = [\n                        kwargs[output_dir] for output_dir in output_dirs\n                    ]\n                    test_output_tracker.add_directories(output_dirs_values)\n                if output_files is not None:\n                    output_files_values = [\n                        kwargs[output_file] for output_file in output_files\n                    ]\n                    test_output_tracker.add_files(output_files_values)\n",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 65,
        "coloffset": 16,
        "linematch": "if input_hash in db and db[input_hash][\"hash\"] == output_hash:",
        "context": "\n                input_hash = input_tracker.hash()\n                output_hash = test_output_tracker.hash()\n\n                if input_hash in db and db[input_hash][\"hash\"] == output_hash:\n                    return db[input_hash][\"return_value\"]\n                else:\n                    return_value = function(**kwargs)\n\n                    output_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 71,
        "coloffset": 20,
        "linematch": "if output_dirs is not None:",
        "context": "                else:\n                    return_value = function(**kwargs)\n\n                    output_tracker = LazyTracker()\n                    if output_dirs is not None:\n                        output_dirs_values = [\n                            kwargs[output_dir] for output_dir in output_dirs\n                        ]\n                        output_tracker.add_directories(output_dirs_values)\n                    if output_files is not None:",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 76,
        "coloffset": 20,
        "linematch": "if output_files is not None:",
        "context": "                        output_dirs_values = [\n                            kwargs[output_dir] for output_dir in output_dirs\n                        ]\n                        output_tracker.add_directories(output_dirs_values)\n                    if output_files is not None:\n                        output_files_values = [\n                            kwargs[output_file] for output_file in output_files\n                        ]\n                        output_tracker.add_files(output_files_values)\n",
        "min": 1,
        "max": 10,
        "check_name": "dummy-test-single-nested-if",
        "description": "Ensure the presence of single nested 'if' statements within function bodies.",
        "pattern": ".//FunctionDef/body//If"
      },
      {
        "lineno": 65,
        "coloffset": 40,
        "linematch": "if input_hash in db and db[input_hash][\"hash\"] == output_hash:",
        "context": "\n                input_hash = input_tracker.hash()\n                output_hash = test_output_tracker.hash()\n\n                if input_hash in db and db[input_hash][\"hash\"] == output_hash:\n                    return db[input_hash][\"return_value\"]\n                else:\n                    return_value = function(**kwargs)\n\n                    output_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "boolean-comparison",
        "description": "Using = or == operators to compare boolean values",
        "pattern": "//Compare/ops/Is | //Compare/ops/Eq"
      },
      {
        "lineno": 14,
        "coloffset": 0,
        "linematch": "def cached(",
        "context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "def inner_func(function: Callable):",
        "context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 33,
        "coloffset": 8,
        "linematch": "def wrapper(*args, **kwargs):",
        "context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "missing-annotations",
        "description": "A function does not explicitly annotate arguments/parameters or the expected output",
        "pattern": "//FunctionDef[not(args/arg/annotation) or not(returns)]"
      },
      {
        "lineno": 14,
        "coloffset": 0,
        "linematch": "def cached(",
        "context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,",
        "min": 1,
        "max": 10,
        "check_name": "Function uses loop variable",
        "description": "The loop variable is not bound in the function definition, so it will always have the value it had in the last iteration",
        "pattern": "//FunctionDef[body//comprehension/target/Name]"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "def inner_func(function: Callable):",
        "context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)",
        "min": 1,
        "max": 10,
        "check_name": "Function uses loop variable",
        "description": "The loop variable is not bound in the function definition, so it will always have the value it had in the last iteration",
        "pattern": "//FunctionDef[body//comprehension/target/Name]"
      },
      {
        "lineno": 33,
        "coloffset": 8,
        "linematch": "def wrapper(*args, **kwargs):",
        "context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "Function uses loop variable",
        "description": "The loop variable is not bound in the function definition, so it will always have the value it had in the last iteration",
        "pattern": "//FunctionDef[body//comprehension/target/Name]"
      },
      {
        "lineno": 14,
        "coloffset": 0,
        "linematch": "def cached(",
        "context": "shelve.Pickler = Pickler\nshelve.Unpickler = Unpickler\n\n\ndef cached(\n    cache_dir: str = \".lazytracker\",\n    input_files: Optional[List[str]] = None,\n    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,",
        "min": 1,
        "max": 10,
        "check_name": "Nested Depth (Set value)",
        "description": "Ensure the depth of nesting within functions does not exceed the set value.",
        "pattern": "//FunctionDef//FunctionDef/ancestor::*"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "def inner_func(function: Callable):",
        "context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)",
        "min": 1,
        "max": 10,
        "check_name": "Nested Depth (Set value)",
        "description": "Ensure the depth of nesting within functions does not exceed the set value.",
        "pattern": "//FunctionDef//FunctionDef/ancestor::*"
      },
      {
        "lineno": 44,
        "coloffset": 16,
        "linematch": "if input_files is not None:",
        "context": "                input_tracker.add_hparams(kwargs)\n                if input_dirs is not None:\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]\n                    input_tracker.add_directories(input_dirs_values)\n                if input_files is not None:\n                    input_files_values = [\n                        kwargs[input_file] for input_file in input_files\n                    ]\n                    input_tracker.add_files(input_files_values)\n",
        "min": 1,
        "max": 10,
        "check_name": "Number of conditions (if, if-else, and switch) in a Function",
        "description": "Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.",
        "pattern": "//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else"
      },
      {
        "lineno": 51,
        "coloffset": 16,
        "linematch": "if output_dirs is not None:",
        "context": "                    ]\n                    input_tracker.add_files(input_files_values)\n\n                test_output_tracker = LazyTracker()\n                if output_dirs is not None:\n                    output_dirs_values = [\n                        kwargs[output_dir] for output_dir in output_dirs\n                    ]\n                    test_output_tracker.add_directories(output_dirs_values)\n                if output_files is not None:",
        "min": 1,
        "max": 10,
        "check_name": "Number of conditions (if, if-else, and switch) in a Function",
        "description": "Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.",
        "pattern": "//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else"
      },
      {
        "lineno": 56,
        "coloffset": 16,
        "linematch": "if output_files is not None:",
        "context": "                    output_dirs_values = [\n                        kwargs[output_dir] for output_dir in output_dirs\n                    ]\n                    test_output_tracker.add_directories(output_dirs_values)\n                if output_files is not None:\n                    output_files_values = [\n                        kwargs[output_file] for output_file in output_files\n                    ]\n                    test_output_tracker.add_files(output_files_values)\n",
        "min": 1,
        "max": 10,
        "check_name": "Number of conditions (if, if-else, and switch) in a Function",
        "description": "Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.",
        "pattern": "//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else"
      },
      {
        "lineno": 65,
        "coloffset": 16,
        "linematch": "if input_hash in db and db[input_hash][\"hash\"] == output_hash:",
        "context": "\n                input_hash = input_tracker.hash()\n                output_hash = test_output_tracker.hash()\n\n                if input_hash in db and db[input_hash][\"hash\"] == output_hash:\n                    return db[input_hash][\"return_value\"]\n                else:\n                    return_value = function(**kwargs)\n\n                    output_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "Number of conditions (if, if-else, and switch) in a Function",
        "description": "Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.",
        "pattern": "//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else"
      },
      {
        "lineno": 76,
        "coloffset": 20,
        "linematch": "if output_files is not None:",
        "context": "                        output_dirs_values = [\n                            kwargs[output_dir] for output_dir in output_dirs\n                        ]\n                        output_tracker.add_directories(output_dirs_values)\n                    if output_files is not None:\n                        output_files_values = [\n                            kwargs[output_file] for output_file in output_files\n                        ]\n                        output_tracker.add_files(output_files_values)\n",
        "min": 1,
        "max": 10,
        "check_name": "Number of conditions (if, if-else, and switch) in a Function",
        "description": "Ensure the number of conditions (if, if-else, and switch) in a function is within acceptable limits.",
        "pattern": "//FunctionDef//If/following-sibling::If | //FunctionDef//If/following-sibling::Elif | //FunctionDef//If/following-sibling::Else"
      },
      {
        "lineno": 71,
        "coloffset": 20,
        "linematch": "if output_dirs is not None:",
        "context": "                else:\n                    return_value = function(**kwargs)\n\n                    output_tracker = LazyTracker()\n                    if output_dirs is not None:\n                        output_dirs_values = [\n                            kwargs[output_dir] for output_dir in output_dirs\n                        ]\n                        output_tracker.add_directories(output_dirs_values)\n                    if output_files is not None:",
        "min": 1,
        "max": 1,
        "check_name": "The number of nested conditions (e.g., if{if{}}) in a Function",
        "description": "Ensure there is at least one nested condition (e.g., if{if{}}) in a function.",
        "pattern": "//FunctionDef//If/descendant::If"
      },
      {
        "lineno": 76,
        "coloffset": 20,
        "linematch": "if output_files is not None:",
        "context": "                        output_dirs_values = [\n                            kwargs[output_dir] for output_dir in output_dirs\n                        ]\n                        output_tracker.add_directories(output_dirs_values)\n                    if output_files is not None:\n                        output_files_values = [\n                            kwargs[output_file] for output_file in output_files\n                        ]\n                        output_tracker.add_files(output_files_values)\n",
        "min": 1,
        "max": 1,
        "check_name": "The number of nested conditions (e.g., if{if{}}) in a Function",
        "description": "Ensure there is at least one nested condition (e.g., if{if{}}) in a function.",
        "pattern": "//FunctionDef//If/descendant::If"
      },
      {
        "lineno": 21,
        "coloffset": 4,
        "linematch": "\"\"\"Function decorator for caching execution",
        "context": "    input_dirs: Optional[List[str]] = None,\n    output_dirs: Optional[List[str]] = None,\n    output_files: Optional[List[str]] = None,\n):\n    \"\"\"Function decorator for caching execution\n\n    Args:\n        cache_dir (str, optional): Directory where the lazytracker cache information will be stored. Defaults to \".lazytracker\".\n        input_files (Optional[List[str]], optional): name of function parameters, that are paths to input files. Defaults to None.\n        input_dirs (Optional[List[str]], optional): name of function parameters, that are paths to directories with input files. Defaults to None.",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 31,
        "coloffset": 4,
        "linematch": "def inner_func(function: Callable):",
        "context": "        output_dirs (Optional[List[str]], optional): name of function parameters, that are paths to otuput files. Defaults to None.\n        output_files (Optional[List[str]], optional): name of function parameters, that are paths to directories with output files. Defaults to None.\n    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 33,
        "coloffset": 8,
        "linematch": "def wrapper(*args, **kwargs):",
        "context": "    \"\"\"\n\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 34,
        "coloffset": 12,
        "linematch": "kwargs.update(dict(zip(function.__code__.co_varnames, args)))",
        "context": "\n    def inner_func(function: Callable):\n        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()\n                input_tracker.add_picklables([function], recursive=True)",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 36,
        "coloffset": 12,
        "linematch": "os.makedirs(f\"{cache_dir}\", exist_ok=True)",
        "context": "        @wraps(function)\n        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()\n                input_tracker.add_picklables([function], recursive=True)\n                input_tracker.add_hparams(kwargs)\n                if input_dirs is not None:",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 37,
        "coloffset": 12,
        "linematch": "with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:",
        "context": "        def wrapper(*args, **kwargs):\n            kwargs.update(dict(zip(function.__code__.co_varnames, args)))\n\n            os.makedirs(f\"{cache_dir}\", exist_ok=True)\n            with shelve.open(f\"{cache_dir}/tracked_functions\", \"c\") as db:\n                input_tracker = LazyTracker()\n                input_tracker.add_picklables([function], recursive=True)\n                input_tracker.add_hparams(kwargs)\n                if input_dirs is not None:\n                    input_dirs_values = [kwargs[input_dir] for input_dir in input_dirs]",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 89,
        "coloffset": 8,
        "linematch": "return wrapper",
        "context": "                    }\n\n                    return return_value\n\n        return wrapper\n\n    return inner_func",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      },
      {
        "lineno": 91,
        "coloffset": 4,
        "linematch": "return inner_func",
        "context": "                    return return_value\n\n        return wrapper\n\n    return inner_func",
        "min": 1,
        "max": 10,
        "check_name": "count-method-lines",
        "description": "Count the lines within methods in functions of type 'str'.",
        "pattern": "//FunctionDef[@type='str']/body/* | //FunctionDef[@type='str']/body/Return"
      }
    ],
    "mutants": [],
    "mutation_score": null
  }
]